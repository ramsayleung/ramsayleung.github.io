<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rspotify on In Pursuit of Hubris</title><link>https://ramsayleung.github.io/tags/rspotify/</link><description>Recent content in rspotify on In Pursuit of Hubris</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 07 Feb 2023 15:40:00 +0800</lastBuildDate><atom:link href="https://ramsayleung.github.io/tags/rspotify/index.xml" rel="self" type="application/rss+xml"/><item><title>RSpotify: 一个用爱发电五年的开源项目</title><link>https://ramsayleung.github.io/post/2023/rspotify_%E4%B8%80%E4%B8%AA%E7%94%A8%E7%88%B1%E5%8F%91%E7%94%B5%E4%BA%94%E5%B9%B4%E7%9A%84%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/</link><pubDate>Tue, 07 Feb 2023 15:40:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2023/rspotify_%E4%B8%80%E4%B8%AA%E7%94%A8%E7%88%B1%E5%8F%91%E7%94%B5%E4%BA%94%E5%B9%B4%E7%9A%84%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/</guid><description>1 前言 一周前看到个新闻，Spotify在其第四季度财报中披露，截至2022年12月31日，它的付费订阅用户数达到了2.05亿，同比增长14%</description></item><item><title>Let's make everything iterable</title><link>https://ramsayleung.github.io/post/2021/iterate_through_pagination_api/</link><pubDate>Thu, 29 Apr 2021 11:48:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2021/iterate_through_pagination_api/</guid><description>Iterate through pagination in the Rest API
1 Preface About 4 months ago, icewind1991 created an exciting PR that adding Stream/Iterator based versions of methods with paginated results, which makes enpoints in Rspotify more much ergonomic to use, and Mario completed this PR.
In order to know what this PR brought to us, we have to go back to the orignal story, the paginated results in Spotify&amp;rsquo;s Rest API.
2 Orignal Story Taking the artist_albums as example, it gets Spotify catalog information about an artist&amp;rsquo;s albums.</description></item><item><title>Serde Tricks</title><link>https://ramsayleung.github.io/post/2020/serde_lesson/</link><pubDate>Sun, 13 Dec 2020 22:29:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2020/serde_lesson/</guid><description>The lesson learned from refactoring rspotify
1 Preface Recently, I and Mario are working on refactoring rspotify, trying to improve performance, documentation, error-handling, data model and reduce compile time, to make it easier to use. (For those who has never heard about rspotify, it is a Spotify HTTP SDK implemented in Rust).
I am partly focusing on polishing the data model, based on the issue created by Koxiaet.
Since rspotify is API client for Spotify, it has to handle the request and response from Spotify HTTP API.</description></item><item><title>rspotify has come to async/await</title><link>https://ramsayleung.github.io/post/2020/async_await_for_rspotify/</link><pubDate>Fri, 28 Feb 2020 01:27:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2020/async_await_for_rspotify/</guid><description>1 Preface Today, I am exited to introduce you the v0.9 release I have been continued to work on it for the past few weeks that adds async/await support now!
2 The road to async/await What is rspotify: &amp;gt; For those who has never heared about rspotify before, rspotify is a Spotify web Api wrapper implemented in Rust.
With async/await&amp;rsquo;s forthcoming stabilization and reqwest adds async/await support now, I think it&amp;rsquo;s time to let rspotify leverage power from async/await.</description></item><item><title>rspotify– 我的第一个Rust crate</title><link>https://ramsayleung.github.io/post/2018/rspotify/</link><pubDate>Wed, 28 Feb 2018 20:44:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2018/rspotify/</guid><description>开发第一个Rust crate 的感受和踩到的坑 最近写了人生第一个 Rust crate&amp;ndash; rspotify. 虽说并不是什么惊天地，泣鬼神的大作，但是也是我花费了近两个月实现的。 现在就来聊聊</description></item></channel></rss>
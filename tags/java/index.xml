<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>java on In Pursuit of Hubris</title><link>https://ramsayleung.github.io/tags/java/</link><description>Recent content in java on In Pursuit of Hubris</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 23 May 2017 00:00:00 +0800</lastBuildDate><atom:link href="https://ramsayleung.github.io/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>关于分布式系统唯一ID的探究</title><link>https://ramsayleung.github.io/post/2017/distributed_system_unique_id/</link><pubDate>Tue, 23 May 2017 00:00:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/distributed_system_unique_id/</guid><description>最近我需要为运行的分布式系统某部分模块构造系统唯一的ID, 而 ID 需要是数字的形式，并应该尽量的短。不得不说，这是一个有趣的问题 1 若干实现策略 查</description></item><item><title>Spock 一个优雅的Groovy/Java测试框架</title><link>https://ramsayleung.github.io/post/2017/spock/</link><pubDate>Tue, 11 Apr 2017 00:00:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/spock/</guid><description>因为需要编写 RESTful api 测试的缘故，重拾了 Spock 这个适用于 Groovy/Java 的测试 框架，顺便把以前写的一篇旧文整理了一下，权当重温。 1 关于 Spock Spock 是一个适用于 Java(Groovy) 的一个优雅并</description></item></channel></rss>
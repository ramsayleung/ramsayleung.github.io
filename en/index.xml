<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>In Pursuit of Hubris</title>
    <link>https://ramsayleung.github.io/en/</link>
    <description>Recent content on In Pursuit of Hubris</description>
    <image>
      <title>In Pursuit of Hubris</title>
      <url>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>See this site&#39;s source code [here](https://github.com/ramsayleung/ramsayleung.github.io), licensed under GPLv3 Â·</copyright>
    <lastBuildDate>Sat, 13 Apr 2024 12:46:00 -0700</lastBuildDate><atom:link href="https://ramsayleung.github.io/en/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TIL: Git Blame with Following</title>
      <link>https://ramsayleung.github.io/en/post/2024/git_blame_with_following/</link>
      <pubDate>Sat, 13 Apr 2024 12:46:00 -0700</pubDate>
      
      <guid>https://ramsayleung.github.io/en/post/2024/git_blame_with_following/</guid>
      <description>Developers usually use git blame in GUI tools like GitHub Blame or using GitLens blame in VSCode: Even though GUI tools is intuitive, but the Git CLI has much more powerful tooling for finding something closer to the real story behind your code. There are many scenarios that CLI is valuable, the first is ignoring the whitespace changes. For example, if you formatted your C++ codebase with clang-format or Javascript codebase with prettier, you haven&amp;rsquo;t actually changed the codebase, but you&amp;rsquo;re the owner of tons of lines of code.</description>
      <content:encoded><![CDATA[<p>Developers usually use <code>git blame</code> in GUI tools like GitHub Blame <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/github_blame.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>or using GitLens blame in VSCode: <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/git_blame_git_lens_vscode.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>Even though GUI tools is intuitive, but the Git CLI has much more powerful tooling for finding something closer to the real story behind your code. <!-- raw HTML omitted --></p>
<p>There are many scenarios that CLI is valuable, the first is ignoring the whitespace changes. <!-- raw HTML omitted --></p>
<p>For example, if you formatted your C++ codebase with <code>clang-format</code> or Javascript codebase with <code>prettier</code>, you haven&rsquo;t actually changed the codebase, but you&rsquo;re the owner of tons of lines of code. <!-- raw HTML omitted --></p>
<p>The <code>git blame -w</code> option will ignore these type of whitespace changes. <!-- raw HTML omitted --></p>
<p>The other great option is <code>-C</code> which will look for code movement between files in a commit. <!-- raw HTML omitted --></p>
<p>For example, if you refactor a function from one file to another, the normal <code>git</code> blame will simply show you as the author in the new file, but the <code>-C</code> option will follow that movement and show the last person who actually change those lines of code. <!-- raw HTML omitted --></p>
<p><code>-C</code> is extremely helpful when I need to find out the original author of some lines of code after file renames or refactors, to know more about the background and context behind this code <!-- raw HTML omitted --></p>
<p>According to the <code>git blame</code> doc, you could pass <code>-C</code> up to three times to ask Git try even harder: <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">-C<span class="o">[</span>&lt;num&gt;<span class="o">]</span>
</span></span><span class="line"><span class="cl">           In addition to -M, detect lines moved or copied from other files that were modified in the same commit.
</span></span><span class="line"><span class="cl">           This is useful when you reorganize your program and move code around across files.
</span></span><span class="line"><span class="cl">           When this option is given twice, the <span class="nb">command</span> additionally looks <span class="k">for</span> copies from other files in the commit that creates the file.
</span></span><span class="line"><span class="cl">           When this option is given three times, the <span class="nb">command</span> additionally looks <span class="k">for</span> copies from other files in any commit.
</span></span></code></pre></div><p>(it&rsquo;s a bit of odd design) <!-- raw HTML omitted --></p>
<p>Let&rsquo;s take <a href="https://github.com/rails/rails/blob/main/activemodel/lib/active_model/access.rb">the access.rb file of ActiveModel module in Rails framework</a> for example: <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git blame activemodel/lib/active_model/access.rb
</span></span></code></pre></div><p><figure>
    <img loading="lazy" src="/ox-hugo/normal_git_blame.png"
         alt="Figure 1: Vanilla git blame"/> <figcaption>
            <p><!-- raw HTML omitted -->Figure 1: <!-- raw HTML omitted -->Vanilla git blame</p>
        </figcaption>
</figure>
 <!-- raw HTML omitted --></p>
<p>Ok, it looks like Jonathan Hefner wrote all of this code it appears, let&rsquo;s look at the same code with <code>git blame -w -C -C -C activemodel/lib/active_model/access.rb</code> <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/git_blame_-w_-C_-C_-C.png"
         alt="Figure 2: git blame -w -C -C -C"/> <figcaption>
            <p><!-- raw HTML omitted -->Figure 2: <!-- raw HTML omitted -->git blame -w -C -C -C</p>
        </figcaption>
</figure>
 <!-- raw HTML omitted --></p>
<p>Now we can see that Git has followed this code from file to file over the course of multiple renames, it turns out Jonathan Hefner is the most recent file renamer, Guillermo Iguaran is the original author. <!-- raw HTML omitted --></p>
<p>If we want to know the history about this file, it&rsquo;s much better to ask Guillermo rather than Jonathan, which is beyond what the GUI blame or normal Git blame tool reveals <!-- raw HTML omitted --></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>TIL: Git Conditional Configs</title>
      <link>https://ramsayleung.github.io/en/post/2024/git_conditional_configs/</link>
      <pubDate>Sun, 07 Apr 2024 12:38:00 -0700</pubDate>
      
      <guid>https://ramsayleung.github.io/en/post/2024/git_conditional_configs/</guid>
      <description>Every Git user will have probably been asked to set up their Git at the first time: git config --global user.name &amp;#34;Ramsay Leung&amp;#34; git config --global user.email ramsayleung@gmail.com The above command will simply add the user.name and user.email value into your ~/.gitconfig file &amp;gt; cat ~/.gitconfig [user] name = Ramsay Leung email = ramsayleung@gmail.com [core] quotepath = false [init] defaultBranch = master You could also specify --local argument to writes the config values to .</description>
      <content:encoded><![CDATA[<p>Every Git user will have probably been asked to set up their Git at the first time: <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git config --global user.name <span class="s2">&#34;Ramsay Leung&#34;</span>
</span></span><span class="line"><span class="cl">git config --global user.email ramsayleung@gmail.com
</span></span></code></pre></div><p>The above command will simply add the <code>user.name</code> and <code>user.email</code> value into your <code>~/.gitconfig</code> file <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">&gt; cat ~/.gitconfig
</span></span><span class="line"><span class="cl"><span class="o">[</span>user<span class="o">]</span>
</span></span><span class="line"><span class="cl">    <span class="nv">name</span> <span class="o">=</span> Ramsay Leung
</span></span><span class="line"><span class="cl">    <span class="nv">email</span> <span class="o">=</span> ramsayleung@gmail.com
</span></span><span class="line"><span class="cl"><span class="o">[</span>core<span class="o">]</span>
</span></span><span class="line"><span class="cl">    <span class="nv">quotepath</span> <span class="o">=</span> <span class="nb">false</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>init<span class="o">]</span>
</span></span><span class="line"><span class="cl">    <span class="nv">defaultBranch</span> <span class="o">=</span> master
</span></span></code></pre></div><p>You could also specify <code>--local</code> argument to writes the config values to <code>.git/config</code> in whatever project you&rsquo;re currently in. <!-- raw HTML omitted --></p>
<p>If you need to simultaneously contribute to your work and open source project on the same laptop, with different Git config values, e.g.(company email address for work-specific projects, personal email address for open source project), what should you do? <!-- raw HTML omitted --></p>
<p>You could definitely set up work-specific config as global config, then set up personal config with <code>--local</code> for every personal project separately. It works, but tedious and easy to mess-up. <!-- raw HTML omitted --></p>
<p>Fortunately, starting from Git version 2.13, Git supports conditional configuration includes, you are capable of setting up different configs for different repositories. <!-- raw HTML omitted --></p>
<p>If you add the following config to your global config file: <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="p">[</span><span class="nx">includeIf</span> <span class="s2">&#34;gitdir:~/projects/oss/&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="nx">path</span> <span class="p">=</span> <span class="err">~/</span><span class="p">.</span><span class="nx">gitconfig-oss</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">includeIf</span> <span class="s2">&#34;gitdir:~/projects/work/&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="nx">path</span> <span class="p">=</span> <span class="err">~/</span><span class="p">.</span><span class="nx">gitconfig-work</span>
</span></span></code></pre></div><p>Then Git will look in the <code>~/.gitconfig-oss</code> files for values only if the project you are currently working on matches <code>~/projects/oss/</code>. <!-- raw HTML omitted --></p>
<p><strong><strong>Caution</strong></strong>: If you forget to specify the &ldquo;/&rdquo; at the end of the git dir, e.g. &ldquo;~/projects/oss&rdquo;, Conditional Config won&rsquo;t work! <!-- raw HTML omitted --></p>
<p>Therefore, you could have a &ldquo;work&rdquo; directory and work-specific config here and an &ldquo;oss&rdquo; directory with values for your open source projects, etc. <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/conditional_config.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>Git also supports other filters more than <code>gitdir</code>, you could specify a branch name as an include filter with <code>onbranch</code> <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl">  <span class="err">;</span> <span class="nx">include</span> <span class="nx">only</span> <span class="nx">if</span> <span class="nx">we</span> <span class="nx">are</span> <span class="nx">in</span> <span class="nx">a</span> <span class="nx">worktree</span> <span class="nx">where</span> <span class="nx">foo-branch</span> <span class="nx">is</span>
</span></span><span class="line"><span class="cl"><span class="err">;</span> <span class="nx">currently</span> <span class="nx">checked</span> <span class="nx">out</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">includeIf</span> <span class="s2">&#34;onbranch:foo-branch&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="nx">path</span> <span class="p">=</span> <span class="nx">foo</span><span class="p">.</span><span class="nx">inc</span>
</span></span></code></pre></div><p>Check out <a href="https://git-scm.com/docs/git-config?ref=blog.gitbutler.com#_includes">the Git docs</a> for more details <!-- raw HTML omitted --></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Rewind your Github summary</title>
      <link>https://ramsayleung.github.io/en/post/2024/github_summary/</link>
      <pubDate>Mon, 01 Jan 2024 16:16:00 -0800</pubDate>
      
      <guid>https://ramsayleung.github.io/en/post/2024/github_summary/</guid>
      <description>1 Goodbye 2023 As I farewelled to 2023, a year marked by numerous changes and personal evolution, I find myself recollecting the multitude of experiences that unfolded. My 2023 journey was nothing short of fascinating and exciting, prompting me to revisit the year from various angles. After seeing hoards of posts in social media generated by Github Contributions Chart, I thought I could also build an APP to summarize my Github contribution for every year for friends to have fun.</description>
      <content:encoded><![CDATA[<h2 id="goodbye-2023"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> Goodbye 2023</h2>
<p>As I farewelled to 2023, a year marked by numerous changes and personal evolution, I find myself recollecting the multitude of experiences that unfolded. <!-- raw HTML omitted --></p>
<p>My 2023 journey was nothing short of fascinating and exciting, prompting me to revisit the year from various angles. <!-- raw HTML omitted --></p>
<p>After seeing hoards of posts in social media generated by <a href="https://github.com/sallar/github-contributions-chart">Github Contributions Chart</a>, I thought I could also build an APP to summarize my Github contribution for every year for friends to have fun. <!-- raw HTML omitted --></p>
<p>I spent my entire 4-days-new-year vocation to build this app named: <a href="https://github-summary.vercel.app/">Github Summary</a>. <!-- raw HTML omitted --></p>
<p>This project led me through a series of first-time experiences: first time to try Tailwind Css framework, first time to use and deploy project on Vercel, first time to build project on nextjs, first time to develop a public project on React(yes, I&rsquo;ve tried to learn React for hundreds of times, but never get a chance to use it in real project), etc. <!-- raw HTML omitted --></p>
<h2 id="happy-2024"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> Happy 2024</h2>
<p>While I hoped I could have completed this project by the close of 2023 to share summaries with friends, life&rsquo;s timeline had other plans. <!-- raw HTML omitted --></p>
<p>Now, as we step into 2024, I am thrilled to publish the GitHub Summary. <!-- raw HTML omitted --></p>
<p>It&rsquo;s never too late to showcase creative work, and this project is poised to generate insightful summaries not just for the past year but for the adventures that await in 2024. <!-- raw HTML omitted --></p>
<p>Wishing everyone a Happy New Year! Feel free to explore <a href="https://github-summary.vercel.app/">GitHub Summary</a>: <a href="https://github-summary.vercel.app/">https://github-summary.vercel.app/</a> <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/github_summary.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>How to share resource between CDK stacks</title>
      <link>https://ramsayleung.github.io/en/post/2023/how_to_share_resource_between_cdk_stacks/</link>
      <pubDate>Wed, 28 Jun 2023 09:41:00 -0700</pubDate>
      
      <guid>https://ramsayleung.github.io/en/post/2023/how_to_share_resource_between_cdk_stacks/</guid>
      <description>1 Introduction 1.1 IaC Infrastructure as code(IaC) is the managing and provisioning of infrastructure through code instead of manual processes, for example, clicking button, adding or editing roles in AWS console.
1.2 AWS CloudFormation AWS CloudFormation is the original IaC tool for AWS, released in 2011, which uses template files to automate and mange the setup of AWS resources.
1.3 AWS CDK AWS Cloud Development Kit(CDK) is a product provided by AWS that makes it easier for developers to manage their infrastructure with familiar programming languages like TypeScript, Python, Java, etc.</description>
      <content:encoded><![CDATA[<h2 id="introduction"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> Introduction</h2>
<h3 id="iac"><!-- raw HTML omitted -->1.1<!-- raw HTML omitted --> IaC</h3>
<p>Infrastructure as code(IaC) is the managing and provisioning of infrastructure through code instead of manual processes, for example, clicking button, adding or editing roles in AWS console.</p>
<h3 id="aws-cloudformation"><!-- raw HTML omitted -->1.2<!-- raw HTML omitted --> AWS CloudFormation</h3>
<p>AWS CloudFormation is the original IaC tool for AWS, released in 2011, which uses template files to automate and mange the setup of AWS resources.</p>
<h3 id="aws-cdk"><!-- raw HTML omitted -->1.3<!-- raw HTML omitted --> AWS CDK</h3>
<p>AWS Cloud Development Kit(CDK) is a product provided by AWS that makes it easier for developers to manage their infrastructure with familiar programming languages like TypeScript, Python, Java, etc.</p>
<p>And, CDK is standing on the shoulder of Cloudformation, providing tools for developers by leveraging Cloudformation.</p>
<p>A stack is a collection of AWS resources that you can manage as a single unit, like a box.</p>
<p>For instance, this box could include all the resources required to run an application or Lambda service, such as S3 Buckets (storage), Roles (authorization), Lambda Function (computing), API Gateway (access point), Alarm, Monitoring, etc.</p>
<h2 id="problem"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> Problem</h2>
<p>I am currently working on a project which requires to set up two stacks, one stack( <code>GlueStack</code> ) for defining a list of AWS Glue tables and the other stack( <code>ServiceStack</code> ) for definition of Lambda service and associated resources.</p>
<figure>
    <img loading="lazy" src="/ox-hugo/two_stacks.jpg"/> 
</figure>

<p>In fact, S3 bucket names have to be globally unique within a partition, which means crossing the whole AWS customer base.</p>
<p>You are unable to create a S3 bucket with bucket name which is in use by another AWS customer or your own account.</p>
<p>So it&rsquo;s safer to let CloudFormation generate a random bucket name for a developer when he need to initialize a S3 bucket.</p>
<p>However, there is new a problem I face: since the S3 bucket name is randomly generated characters, if <code>GlueStack</code> need to read the bucket created by <code>ServiceStack</code>, how could I share the bucket name between two stacks?</p>
<p>While these two stacks are isolated and separated, resources collection.</p>
<figure>
    <img loading="lazy" src="/ox-hugo/s3_bucket_problem.jpg"/> 
</figure>

<h2 id="solution"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> Solution</h2>
<p>Fortunately, CDK offers a facility named <code>CfnOutput</code> to export a deployed resource, so that the consumer of the resource is able to <code>Import</code> required resource.</p>
<figure>
    <img loading="lazy" src="/ox-hugo/export.jpg"/> 
</figure>

<ol>
<li>Define the required resource in <code>ServiceStack</code> (producer), for instance, a S3 bucket:
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">Bucket</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;aws-cdk-lib/aws-s3&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">s3Bucket</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Bucket</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s1">&#39;MyBucketId&#39;</span><span class="p">,</span> <span class="p">{});</span>
</span></span></code></pre></div></li>
<li>Export the resource by specifying the <code>value</code> and <code>exportName</code>:
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">CfnOutput</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;aws-cdk-lib&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// export the generated bucket name to other stack
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">new</span> <span class="nx">CfnOutput</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s1">&#39;exportRequiredS3Bucket&#39;</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">value</span><span class="o">:</span> <span class="nx">s3Bucket</span><span class="p">.</span><span class="nx">bucketName</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">exportName</span><span class="o">:</span> <span class="s1">&#39;exportRequiredS3Bucket&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div></li>
<li>Import the required resource in <code>GlueStack</code> (consumer):
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">Fn</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;aws-cdk-lib&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">requiredS3BucketName</span> <span class="o">=</span> <span class="nx">Fn</span><span class="p">.</span><span class="nx">importValue</span><span class="p">(</span><span class="s1">&#39;exportRequiredS3Bucket&#39;</span><span class="p">);</span>
</span></span></code></pre></div></li>
</ol>
<p>If we take a closer look at the synthesized CFN template for ServiceStack, we could find:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="s2">&#34;Outputs&#34;</span><span class="err">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;exportRequiredS3Bucket&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;Value&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;Ref&#34;</span><span class="p">:</span> <span class="s2">&#34;MyBucketId737FC949&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;Export&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;Name&#34;</span><span class="p">:</span> <span class="s2">&#34;exportRequiredS3Bucket&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span></code></pre></div><p>The synthesized CFN template for <code>GlueStack</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;Fn::ImportValue&#34;</span><span class="p">:</span> <span class="s2">&#34;exportRequiredS3Bucket&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>This is the way about how to share value between two stacks.</p>
<hr>
<h2 id="loose-couping-solution"><!-- raw HTML omitted -->4<!-- raw HTML omitted --> Loose couping solution</h2>
<p>Updated on 2023-12-02</p>
<p>People learn from mistake.</p>
<p>After applying this practice in my project, I recently learn that it&rsquo;s not good practice to share resource across stack.</p>
<p>With using <code>export/import</code>, I tightly couple my stacks with a commitment that I can never update that unless I remove that couping later on.</p>
<p>It means it will become a disaster<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> whenever I need to update/delete the <code>S3Bucket</code>, <code>CloudFormation</code> will raise an error, complaining something like: &ldquo;ServiceStack cannot be deleted as it&rsquo;s in use by GlueStack&rdquo;.</p>
<p>A better practice I learnt is adding a loose couping between <code>ServiceStack</code> and <code>GlueStack</code> by sharing a constant variable:</p>
<ol>
<li>
<p>Define a constant variable somewhere:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">Constants</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">MyBucketName</span><span class="o">:</span> <span class="s1">&#39;TestBucket&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div></li>
<li>
<p>Refine the definition of <code>s3Bucket</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">Bucket</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;aws-cdk-lib/aws-s3&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">s3Bucket</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Bucket</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s1">&#39;MyBucketId&#39;</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">bucketName</span><span class="o">:</span> <span class="nx">Constants</span><span class="p">.</span><span class="nx">MyBucketName</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div></li>
<li>
<p>Refer the <code>s3Bucket</code> in <code>GlueStack</code> by <code>MyBucketName</code> instead of CDK exported reference</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">requiredS3BucketName</span> <span class="o">=</span> <span class="nx">Constants</span><span class="p">.</span><span class="nx">MyBucketName</span><span class="p">;</span>
</span></span></code></pre></div></li>
</ol>
<p>Therefore, these two stacks are not directly coupled, but they are referencing the same constant variable.</p>
<p>Then, CloudFormation won&rsquo;t prevent you from updating the <code>S3Bucket</code> as there is not direct relation between these two stacks anymore.</p>
<p>This is the benefit of loose couping.</p>
<h2 id="reference"><!-- raw HTML omitted -->5<!-- raw HTML omitted --> Reference</h2>
<ul>
<li><a href="https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.CfnOutput.html">API Document: class CfnOutput (construct)</a></li>
<li><a href="https://docs.aws.amazon.com/cdk/v2/guide/stacks.html">AWS Cloud Development Kit (AWS CDK) v2</a></li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://stackoverflow.com/questions/63350346/delete-resource-with-references">https://stackoverflow.com/questions/63350346/delete-resource-with-references</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Topological Sort</title>
      <link>https://ramsayleung.github.io/en/post/2022/topological_sorting/</link>
      <pubDate>Sun, 22 May 2022 10:34:00 +0800</pubDate>
      
      <guid>https://ramsayleung.github.io/en/post/2022/topological_sorting/</guid>
      <description>1 Definition In computer science, a topological sort or topological ordering of a directed graph is a linear ordering of its vertices such that for every directed edge uv from vertex u to vertx v, u comes before v in the ordering.
It sounds pretty academic, but I am sure you are using topological sort unconsciously every single day.
2 Application Many real world situations can be modeled as a graph with directed edges where some events must occur before others.</description>
      <content:encoded><![CDATA[<h2 id="definition"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> Definition</h2>
<p>In computer science, a topological sort or topological ordering of a directed graph is a linear ordering of its vertices such that for every directed edge <code>uv</code> from vertex <code>u</code> to vertx <code>v</code>, <code>u</code> comes before <code>v</code> in the ordering.</p>
<p>It sounds pretty academic, but I am sure you are using topological sort unconsciously every single day.</p>
<h2 id="application"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> Application</h2>
<p>Many real world situations can be modeled as a graph with directed edges where some events must occur before others. Then a topological sort gives an order in which to perform these events, for instance:</p>
<h3 id="college-class-prerequisites"><!-- raw HTML omitted -->2.1<!-- raw HTML omitted --> College class prerequisites</h3>
<p>You must take course <code>b</code> first if you want to take course <code>a</code>. For example, in your alma mater, the student must complete <code>PHYS:1511(College Physics)</code> or <code>PHYS:1611(Introductory Physics I)</code> before taking <code>College Physics II</code>.</p>
<p>The courses can be represented by vertices, and there is an edge from <code>College Physics</code> to <code>College Physics II</code> since <code>PHYS:1511</code> must be finished before <code>College Physics II</code> can be enrolled.</p>
<figure><a href="/ox-hugo/course_prerequsites.png">
    <img loading="lazy" src="/ox-hugo/course_prerequsites.png"/> </a>
</figure>

<h3 id="job-scheduling"><!-- raw HTML omitted -->2.2<!-- raw HTML omitted --> Job scheduling</h3>
<p>scheduling a sequence of jobs or tasks based on their dependencies. The jobs are represented by vertices, and there is an edge from <code>x</code> to <code>y</code> if job <code>x</code> must be completed before job <code>y</code> can be started.</p>
<figure><a href="/ox-hugo/job_scheduling.png">
    <img loading="lazy" src="/ox-hugo/job_scheduling.png"/> </a>
</figure>

<p>In the context of a CI/CD pipeline, the relationships between jobs can be represented by directed graph(specifically speaking, by directed acyclic graph). For example, in a CI pipeline, <code>build</code> job should be finished before start <code>test</code> job and <code>lint</code> job.</p>
<h3 id="program-build-dependencies"><!-- raw HTML omitted -->2.3<!-- raw HTML omitted --> Program build dependencies</h3>
<p>You want to figure out in which order you should compile all the program&rsquo;s dependencies so that you will never try and compile a dependency for which you haven&rsquo;t first built all of its dependencies.</p>
<p>A typical example is <code>GNU Make</code>: you specific your targets in a <code>makefile</code>, <code>Make</code> will parse <code>makefile</code>, and figure out which target should be built firstly. Supposing you have a <code>makefile</code> like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-makefile" data-lang="makefile"><span class="line"><span class="cl"><span class="c"># Makefile for analysis report
</span></span></span><span class="line"><span class="cl"><span class="c"></span>
</span></span><span class="line"><span class="cl"><span class="nf">output/figure_1.png</span><span class="o">:</span> <span class="n">data</span>/<span class="n">input_file_</span>1.<span class="n">csv</span> <span class="n">scripts</span>/<span class="n">generate_histogram</span>.<span class="n">py</span>
</span></span><span class="line"><span class="cl"><span class="err">python</span> <span class="err">scripts/generate_histogram.py</span> <span class="err">-i</span> <span class="err">data/input_file_1.csv</span> <span class="err">-o</span> <span class="err">output/figure_1.png</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">output/figure_2.png</span><span class="o">:</span> <span class="n">data</span>/<span class="n">input_file_</span>2.<span class="n">csv</span> <span class="n">scripts</span>/<span class="n">generate_histogram</span>.<span class="n">py</span>
</span></span><span class="line"><span class="cl"><span class="err">python</span> <span class="err">scripts/generate_histogram.py</span> <span class="err">-i</span> <span class="err">data/input_file_2.csv</span> <span class="err">-o</span> <span class="err">output/figure_2.png</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">output/report.pdf</span><span class="o">:</span> <span class="n">report</span>/<span class="n">report</span>.<span class="n">tex</span> <span class="n">output</span>/<span class="n">figure_</span>1.<span class="n">png</span> <span class="n">output</span>/<span class="n">figure_</span>2.<span class="n">png</span>
</span></span><span class="line"><span class="cl"><span class="err">cd</span> <span class="err">report/</span> <span class="err">&amp;&amp;</span> <span class="err">pdflatex</span> <span class="err">report.tex</span> <span class="err">&amp;&amp;</span> <span class="err">mv</span> <span class="err">report.pdf</span> <span class="err">../output/report.pdf</span>
</span></span></code></pre></div><p><code>Make</code> will generate a DAG internally to figure out which target should be executed firstly with typological sort:</p>
<figure><a href="/ox-hugo/build_dependencies.png">
    <img loading="lazy" src="/ox-hugo/build_dependencies.png"/> </a>
</figure>

<h2 id="directed-acyclic-graph"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> Directed Acyclic Graph</h2>
<p>Back to the definition, we say that a topological ordering of a directed graph is a linear ordering of its vertices, but not all directed graphs have a topological ordering.</p>
<p>A topological ordering is possible if and only if the graph has no directed cycles, that is, if it&rsquo;s a directed acyclic graph(DAG).</p>
<p>Let us see some examples:</p>
<figure><a href="/ox-hugo/directed_acyclic_graph.png">
    <img loading="lazy" src="/ox-hugo/directed_acyclic_graph.png"/> </a>
</figure>

<p>The definition requires that only the directed acyclic graph has a topological ordering, but why? What happens if we are trying to find a topological ordering of a directed graph? Let&rsquo;s take the <code>figure 3</code> for an example.</p>
<figure><a href="/ox-hugo/dag_issue.png">
    <img loading="lazy" src="/ox-hugo/dag_issue.png"/> </a>
</figure>

<p>The directed graph problem has no solution, this is the reason why directed cycle is forbidden</p>
<h2 id="kahn-s-algorithm"><!-- raw HTML omitted -->4<!-- raw HTML omitted --> Kahn&rsquo;s Algorithm</h2>
<p>There are several <a href="https://en.wikipedia.org/wiki/Topological_sorting#Algorithms">algorithms</a> for topological sorting, Kahn&rsquo;s algorithm is one of them, based on breadth first search.</p>
<p>The intuition behind Kahn&rsquo;s algorithm is pretty straightforward:</p>
<p><strong><strong>To repeatedly remove nodes without any dependencies from the graph and add them to the topological ordering</strong></strong></p>
<p>As nodes without dependencies are removed from the graph, the original nodes depend on the removed node should be free now.</p>
<p>We keep removing nodes without dependencies from the graph until all nodes are processed, or a cycle is detected.</p>
<p>The dependencies of one node are represented as in-degree of this node.</p>
<p>Let&rsquo;s take a quick example of how to find out a topological ordering of a given graph with Kahn&rsquo;s algorithm.</p>
<figure><a href="/ox-hugo/kahn%27s_algorithm_1.png">
    <img loading="lazy" src="/ox-hugo/kahn%27s_algorithm_1.png"/> </a>
</figure>

<figure><a href="/ox-hugo/kahn%27s_algorithm_2.png">
    <img loading="lazy" src="/ox-hugo/kahn%27s_algorithm_2.png"/> </a>
</figure>

<figure><a href="/ox-hugo/kahn%27s_algorithm_3.png">
    <img loading="lazy" src="/ox-hugo/kahn%27s_algorithm_3.png"/> </a>
</figure>

<figure><a href="/ox-hugo/kahn%27s_algorithm_4.png">
    <img loading="lazy" src="/ox-hugo/kahn%27s_algorithm_4.png"/> </a>
</figure>

<p>Now we should understand how Kahn&rsquo;s algorithm works. Let&rsquo;s have a look at a C++ implementation of Kahn&rsquo;s algorithm:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C++" data-lang="C++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;deque&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="c1">// Kahn&#39;s algorithm
</span></span></span><span class="line"><span class="cl"><span class="c1">// `adj` is a directed acyclic graph represented as an adjacency list.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">findTopologicalOrder</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="o">&amp;</span><span class="n">adj</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">adj</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">in_degree</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="k">auto</span> <span class="o">&amp;</span><span class="nl">to_vertex</span> <span class="p">:</span> <span class="n">adj</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">in_degree</span><span class="p">[</span><span class="n">to_vertex</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// queue contains nodes with no incoming edges
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">std</span><span class="o">::</span><span class="n">deque</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">queue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">in_degree</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">queue</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">order</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="n">queue</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">queue</span><span class="p">.</span><span class="n">pop_front</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">order</span><span class="p">[</span><span class="n">index</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">cur</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="k">auto</span> <span class="o">&amp;</span><span class="nl">next</span> <span class="p">:</span> <span class="n">adj</span><span class="p">[</span><span class="n">cur</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="o">--</span><span class="n">in_degree</span><span class="p">[</span><span class="n">next</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">queue</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">next</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// there is no cycle
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="n">index</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">order</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// return an empty list if there is a cycle
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">{};</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="bonus"><!-- raw HTML omitted -->5<!-- raw HTML omitted --> Bonus</h2>
<p>When a pregnant woman takes calcium pills, she must make sure also that her diet is rich in vitamin D, since this vitamin makes the absorption of calcium possible.</p>
<p>After reading the demonstration of topological ordering, you (and I) too should take a certain vitamin, metaphorically speaking, to help you absorb. The vitamin D I pick for you (and myself) is two leetcode problems, which involve with the most typical use case of topological ordering &ndash; college class prerequisites:</p>
<ul>
<li><a href="https://leetcode.com/problems/course-schedule/">Course Schedule</a></li>
<li><a href="https://leetcode.com/problems/course-schedule-ii/">Course Schedule II</a></li>
</ul>
<h2 id="reference"><!-- raw HTML omitted -->6<!-- raw HTML omitted --> Reference</h2>
<ul>
<li><a href="https://www.youtube.com/watch?v=cIBFEhD77b4">Topological Sort | Kahn&rsquo;s Algorithm | Graph Theory</a></li>
<li><a href="https://docs.gitlab.com/ee/ci/directed_acyclic_graph/">Directed Acyclic Graph</a></li>
<li><a href="https://gertjanvandenburg.com/files/talk/make.html">Hands-on Tutorial on Make</a></li>
<li><a href="https://en.wikipedia.org/wiki/Topological_sorting">Topological sorting</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://ramsayleung.github.io/en/about_me/</link>
      <pubDate>Mon, 21 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ramsayleung.github.io/en/about_me/</guid>
      <description>&lt;!DOCTYPE html&gt; Responsive Heatmap Article Activity About me I&amp;rsquo;m Ramsay, a software engineer making a living by pressing keyboard, an amateur cook, an Emacs deadhead and Linux enthusiast.
The slogan of this site is In pursuit of Simplicity, because I prefer simple over complex
Projects I&amp;rsquo;ve contributed multiple projects to open source community, I mainly focus on RSpotify right now due to the constrained energy.
RSpotify: A Spotify Web API wrapper implemented in Rust.</description>
      <content:encoded><![CDATA[
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Responsive Heatmap</title>
    <style>
         
        .heatmap-container {
            display: block;
        }

         
        @media only screen and (max-width: 1024px) {
            .heatmap-container {
                display: none;
            }
        }
    </style>
</head>
<body>
    <div class="heatmap-container">
        <div>
            <div style="display: flex; justify-content: center; align-items: center">
                <p style="margin-right: 15px; margin-bottom: 0; color: #333; padding: 8px">
                    Article Activity
                </p>
                <select
                    id="yearSelector"
                    style="
                        padding: 8px 12px;
                        border: 1px solid #ccc;
                        border-radius: 5px;
                        background-color: #fff;
                        cursor: pointer;
                        transition: border-color 0.3s ease, box-shadow 0.3s ease;
                    "
                >
                    
                </select>
            </div>
            <div
                id="heatmap"
                style="
                    display: block;
                    height: 150px;
                    width: 75%;
                    padding: 2px;
                    margin: 0 auto;
                    text-align: center;
                "
            ></div>
        </div>
    </div>
</body>
</html>

<script src="https://cdn.jsdelivr.net/npm/echarts@5.3.0/dist/echarts.min.js"></script>
<script type="text/javascript">
  var chartDom = document.getElementById('heatmap');
  var myChart = echarts.init(chartDom);
  var yearSelector = document.getElementById('yearSelector');
  window.onresize = function() {
      myChart.resize();
  };
  var option;
  var postsByDate = new Map();
  var years = new Set();

  
      var date = "2024-04-13";
      var year = "2024";
      years.add(year);
      var postObj = new Map();
      postObj.set("title", "TIL: Git Blame with Following");
      postObj.set("link", "/en/post/2024/git_blame_with_following/");
      var wordCount =  425 ;
      var data = postsByDate.get(date);
      if (data === undefined) {
          data = new Map();
          data.set("posts", []);
          data.set("totalWordCount", 0);
      }
      var posts = data.get("posts");
      posts.push(postObj);
      var totalWordCount = data.get("totalWordCount");
      totalWordCount += wordCount;
      data.set("totalWordCount", totalWordCount);
      postsByDate.set(date, data);
      var date = "2024-04-07";
      var year = "2024";
      years.add(year);
      var postObj = new Map();
      postObj.set("title", "TIL: Git Conditional Configs");
      postObj.set("link", "/en/post/2024/git_conditional_configs/");
      var wordCount =  307 ;
      var data = postsByDate.get(date);
      if (data === undefined) {
          data = new Map();
          data.set("posts", []);
          data.set("totalWordCount", 0);
      }
      var posts = data.get("posts");
      posts.push(postObj);
      var totalWordCount = data.get("totalWordCount");
      totalWordCount += wordCount;
      data.set("totalWordCount", totalWordCount);
      postsByDate.set(date, data);
      var date = "2024-01-01";
      var year = "2024";
      years.add(year);
      var postObj = new Map();
      postObj.set("title", "Rewind your Github summary");
      postObj.set("link", "/en/post/2024/github_summary/");
      var wordCount =  241 ;
      var data = postsByDate.get(date);
      if (data === undefined) {
          data = new Map();
          data.set("posts", []);
          data.set("totalWordCount", 0);
      }
      var posts = data.get("posts");
      posts.push(postObj);
      var totalWordCount = data.get("totalWordCount");
      totalWordCount += wordCount;
      data.set("totalWordCount", totalWordCount);
      postsByDate.set(date, data);
      var date = "2023-06-28";
      var year = "2023";
      years.add(year);
      var postObj = new Map();
      postObj.set("title", "How to share resource between CDK stacks");
      postObj.set("link", "/en/post/2023/how_to_share_resource_between_cdk_stacks/");
      var wordCount =  683 ;
      var data = postsByDate.get(date);
      if (data === undefined) {
          data = new Map();
          data.set("posts", []);
          data.set("totalWordCount", 0);
      }
      var posts = data.get("posts");
      posts.push(postObj);
      var totalWordCount = data.get("totalWordCount");
      totalWordCount += wordCount;
      data.set("totalWordCount", totalWordCount);
      postsByDate.set(date, data);
      var date = "2022-05-22";
      var year = "2022";
      years.add(year);
      var postObj = new Map();
      postObj.set("title", "Topological Sort");
      postObj.set("link", "/en/post/2022/topological_sorting/");
      var wordCount =  874 ;
      var data = postsByDate.get(date);
      if (data === undefined) {
          data = new Map();
          data.set("posts", []);
          data.set("totalWordCount", 0);
      }
      var posts = data.get("posts");
      posts.push(postObj);
      var totalWordCount = data.get("totalWordCount");
      totalWordCount += wordCount;
      data.set("totalWordCount", totalWordCount);
      postsByDate.set(date, data);
      var date = "2021-08-05";
      var year = "2021";
      years.add(year);
      var postObj = new Map();
      postObj.set("title", "How To Design A Reliable Distributed Timer");
      postObj.set("link", "/en/post/2021/how_to_design_a_reliable_distributed_timer/");
      var wordCount =  1845 ;
      var data = postsByDate.get(date);
      if (data === undefined) {
          data = new Map();
          data.set("posts", []);
          data.set("totalWordCount", 0);
      }
      var posts = data.get("posts");
      posts.push(postObj);
      var totalWordCount = data.get("totalWordCount");
      totalWordCount += wordCount;
      data.set("totalWordCount", totalWordCount);
      postsByDate.set(date, data);
      var date = "2021-04-29";
      var year = "2021";
      years.add(year);
      var postObj = new Map();
      postObj.set("title", "Let's make everything iterable");
      postObj.set("link", "/en/post/2021/iterate_through_pagination_api/");
      var wordCount =  1004 ;
      var data = postsByDate.get(date);
      if (data === undefined) {
          data = new Map();
          data.set("posts", []);
          data.set("totalWordCount", 0);
      }
      var posts = data.get("posts");
      posts.push(postObj);
      var totalWordCount = data.get("totalWordCount");
      totalWordCount += wordCount;
      data.set("totalWordCount", totalWordCount);
      postsByDate.set(date, data);
      var date = "2020-12-13";
      var year = "2020";
      years.add(year);
      var postObj = new Map();
      postObj.set("title", "Serde Tricks");
      postObj.set("link", "/en/post/2020/serde_lesson/");
      var wordCount =  2007 ;
      var data = postsByDate.get(date);
      if (data === undefined) {
          data = new Map();
          data.set("posts", []);
          data.set("totalWordCount", 0);
      }
      var posts = data.get("posts");
      posts.push(postObj);
      var totalWordCount = data.get("totalWordCount");
      totalWordCount += wordCount;
      data.set("totalWordCount", totalWordCount);
      postsByDate.set(date, data);
      var date = "2020-02-28";
      var year = "2020";
      years.add(year);
      var postObj = new Map();
      postObj.set("title", "rspotify has come to async/await");
      postObj.set("link", "/en/post/2020/async_await_for_rspotify/");
      var wordCount =  432 ;
      var data = postsByDate.get(date);
      if (data === undefined) {
          data = new Map();
          data.set("posts", []);
          data.set("totalWordCount", 0);
      }
      var posts = data.get("posts");
      posts.push(postObj);
      var totalWordCount = data.get("totalWordCount");
      totalWordCount += wordCount;
      data.set("totalWordCount", totalWordCount);
      postsByDate.set(date, data);
  years = Array.from(years).sort().reverse();
  years.forEach(year => {
      var option = document.createElement('option');
      option.value = year;
      option.text = year;
      yearSelector.appendChild(option);
  });

  function getHeatmapData(year) {
      var heatmapData = [];
      for (const [date, data] of postsByDate.entries()) {
          if (date.startsWith(year)) {
              heatmapData.push([date, data.get("totalWordCount")]);
          }
      }
      return heatmapData;
  }

  function updateHeatmap(year) {
      option.calendar.range = year;
      option.series.data = getHeatmapData(year);
      myChart.setOption(option);
  }

  yearSelector.addEventListener('change', function() {
      updateHeatmap(this.value);
  });

  option = {
      title: {
          show: false,
      },
  legend: {
      show: false,
  },
  visualMap: {
      show: false,
      min: 0,
      max: 10000,
      type: 'piecewise',
      showLable: false,
      orient: 'horizontal',
      left: 'center',
      top: 0,
      itemGap: 10,
      inRange: {
          color: ['#c6e48b', '#7bc96f', '#239a3b', '#196127'],
      },
  },
  calendar: {
          top: 30,
          left: 30,
          right: 30,
          cellSize: ['auto', 'auto'],
          range: years[0],
          itemStyle: {
              color: '#fff',
              borderWidth: 0.5,
              borderColor: '#eee',
          },
          yearLabel: { show: false },
          dayLabel: {
              firstDay: 1,
              nameMap: "EN"
          },
          monthLabel: {
              nameMap: "EN"
          },
          splitLine: {
              show: false,
          },
      },
      tooltip: {
          hideDelay: 1000,
          enterable: true,
          formatter: function (params) {
	          const thousandWordsText = "EN" === "EN" ? 'k words': 'åå­';
	          const thousandWords = (params.data[1]/1000.0).toFixed(1);
              const date = params.data[0];
              const posts = postsByDate.get(date).get("posts");
              var content = `${date}`;
              for (const [i, post] of posts.entries()) {
                  content += "<br>";
                  var link = post.get("link");
                  var title = post.get("title");
                  content += `<a href="${link}" target="_blank">${title} | ${thousandWords}${thousandWordsText}</a>`
              }
              return content;
          }
      },
      series: {
          type: 'heatmap',
          coordinateSystem: 'calendar',
          calendarIndex: 0,
          data: getHeatmapData(years[0])
      }
  };

  option && myChart.setOption(option);
</script>

<h2 id="about-me">About me</h2>
<p>I&rsquo;m Ramsay, a software engineer making a living by pressing keyboard, an amateur cook, an Emacs deadhead and Linux enthusiast.</p>
<p>The slogan of this site is <strong><strong>In pursuit of Simplicity</strong></strong>, because I prefer simple over complex</p>
<h2 id="projects">Projects</h2>
<p>I&rsquo;ve contributed multiple projects to open source community, I mainly focus on RSpotify right now due to the constrained energy.</p>
<ul>
<li><a href="https://github.com/ramsayleung/rspotify">RSpotify</a>: A Spotify Web API wrapper implemented in Rust.</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>How To Design A Reliable Distributed Timer</title>
      <link>https://ramsayleung.github.io/en/post/2021/how_to_design_a_reliable_distributed_timer/</link>
      <pubDate>Thu, 05 Aug 2021 09:19:36 +0000</pubDate>
      
      <guid>https://ramsayleung.github.io/en/post/2021/how_to_design_a_reliable_distributed_timer/</guid>
      <description>1 Preface I have been maintained a legacy distributed timer for months for my employer, then some important pay business are leveraging on it, with 1 billion tasks handled every day and 20k tasks added per second at most.
Even though it&amp;rsquo;s old and full of black magic code, but it also also have insighted and well-designed code. Based on this old, running timer, I summarize and extract as this article, and it wont include any running code(perhaps pseudocode, and a lot of figures, as an adage says: A picture is worth a thousand words).</description>
      <content:encoded><![CDATA[<h2 id="preface"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> Preface</h2>
<p>I have been maintained a legacy distributed timer for months for my employer, then some important pay business are leveraging on it, with 1 billion tasks handled every day and 20k tasks added per second at most.</p>
<p>Even though it&rsquo;s old and full of black magic code, but it also also have insighted and well-designed code. Based on this old, running timer, I summarize and extract as this article, and it wont include any running code(perhaps pseudocode, and a lot of figures, as an adage says: <em>A picture is worth a thousand words</em>).</p>
<p>if you are curious about the reason(I personally suggest to watch the TV series <a href="https://www.imdb.com/title/tt2575988/">Silicon Valley</a>, Richard has gave us a good example and answer)</p>
<h2 id="design"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> Design</h2>
<h3 id="algorithm"><!-- raw HTML omitted -->2.1<!-- raw HTML omitted --> Algorithm</h3>
<p>There are several algorithms in the world to implement timer, such as Red-Black Tree, Min-Heap and timer wheel. The most efficient and used algorithm is timer wheel algorithm, and it&rsquo;s the algorithm we focus on.</p>
<p>As for timing wheel based timer, it can be modelled as two internal operations: <em>per-tick bookkeeping</em> and <em>expiry processing</em>.</p>
<ul>
<li>Per-tick bookkeeping: happens on every &rsquo;tick&rsquo; of the timer clock. If the unit of granularity for setting timers is T units of time (e.g. 1 second), then per-tick bookkeeping will happen every T units of time. It checks whether any outstanding timers have expired, and if so it removes them and invokes expiry processing.</li>
<li>Expiry processing: is responsible for invoked the user-supplied callback (or other user requested action, depending on your model).</li>
</ul>
<h4 id="simple-timing-wheels"><!-- raw HTML omitted -->2.1.1<!-- raw HTML omitted --> Simple Timing Wheels</h4>
<p>The simple timing wheel keeps a large timing wheel, the below timing wheel has 8 slots, and each slot is holding the task which is going to be expired. Supposing every slot presentes one second(one tick as a second), then the current slot is <code>slot 1</code>, if we want to add a task needed to be triggered 2s later, then this task will be inserted into <code>slot 3</code>.</p>
<figure>
    <img loading="lazy" src="https://raw.githubusercontent.com/ramsayleung/images/master/20210806103302.png"/> 
</figure>

<ul>
<li>per-tick bookkeeping: O(1)</li>
</ul>
<p>What happen if we want to add a task needed to be launched 20s later, the answer is we have no way to do so since there are only 8 slots. So if we have a large period of timer task, we have to maintain a large timing wheel with tons of slots, which requires exponential amount of memory.</p>
<h4 id="hashed-timing-wheel"><!-- raw HTML omitted -->2.1.2<!-- raw HTML omitted --> Hashed Timing Wheel</h4>
<p>Hashed Timing Wheel is an improved simple timing wheel. As we mentioned before, it will consume large resources if timer period is comparatively large. Instead of using one slot per time unit, we could use a form of hashing instead. Construct a circular buffer with a fixed number of slots(such as 8 slots). If current slot is 0, we want store <code>3s later</code> task, we could insert into <code>slot 3</code>, then if we want bookkeep <code>9s-later</code> task, we could insert into <code>slot 1(9 % 8 = 1)</code></p>
<ul>
<li>per-tick bookkeeping: O(1) - O(N)</li>
</ul>
<figure>
    <img loading="lazy" src="https://raw.githubusercontent.com/ramsayleung/images/master/20210806103527.png"/> 
</figure>

<p>It&rsquo;s a tradeoff strategy, We trade space with time.</p>
<h4 id="hierarchical-timing-wheels"><!-- raw HTML omitted -->2.1.3<!-- raw HTML omitted --> Hierarchical Timing Wheels</h4>
<p>Since simple timing wheels and hashed timing wheel come with drawback of time efficiency or space efficiency. Back to 1987, after studying a number of different approaches for the efficient management of timers, Varghese and Lauck posted a paper to introduce <a href="http://www.cs.columbia.edu/~nahum/w6998/papers/sosp87-timing-wheels.pdf">Hierarchical Timing Wheels</a></p>
<p>Just make a long story short, I won&rsquo;t dive deep into hierarchical timing wheels, you could easily understand it by a real life reference: the old water meter</p>
<figure>
    <img loading="lazy" src="https://raw.githubusercontent.com/ramsayleung/images/master/20210805205803.png"/> 
</figure>

<p>the firse level wheel(seconds wheel) rotates one loop, triggering the second level(minutes wheel) ticks one slot, same for the third level(hour wheel). Therefore, we present a day(60*60*24 seconds) with 60+60+24 slots. If we want to present a month, we only need to a four level wheel(month wheel) with 30 slots.</p>
<figure>
    <img loading="lazy" src="https://raw.githubusercontent.com/ramsayleung/images/master/20210806103357.png"/> 
</figure>

<ul>
<li>per-tick bookkeeping: O(1)</li>
</ul>
<h3 id="per-tick-bookkeeping"><!-- raw HTML omitted -->2.2<!-- raw HTML omitted --> Per-tick bookkeeping</h3>
<p>After introducing timing wheel algorithm, let&rsquo;s go back to the topic about designing a reliable distributed timer, it&rsquo;s essential to decide how to store timer task. Taking implementation complexity and time, space trade off, we choose the Hashed Timing Wheel algorithm.</p>
<p>There are several internal components developed by my employer, one of them is named <code>TableKV</code>, a high-availability(99.999% ~ 99.9999%) NoSql service. <code>TableKV</code> supports 10m buckets(the terminology is <code>table</code>) at most, every <code>table</code> comes with full ACID properties of transactions support. You could simply replace <code>TableKV</code> with <code>Redis</code> as it provides the similar bucket functionality.</p>
<h4 id="insert-task-into-slot"><!-- raw HTML omitted -->2.2.1<!-- raw HTML omitted --> Insert task into slot</h4>
<p>We are going to implement Hashed Timing Wheel algorithm with <code>TableKV</code>, supposing there are 10m buckets, and current time is <code>2021:08:05 11:17:33 +08=(the UNIX timestamp is =1628176653</code>), there is a  timer task which is going to be triggered 10s later with <code>start_time = 1628176653 + 10</code> (or 100000010s later, <code>start_time = 1628176653 + 10 + 100000000</code>), these tasks both will be stored into bucket <code>start_time % 100000000 = 28176663</code></p>
<figure>
    <img loading="lazy" src="https://raw.githubusercontent.com/ramsayleung/images/master/20210806195209.png"/> 
</figure>

<h4 id="pull-task-out-from-slot"><!-- raw HTML omitted -->2.2.2<!-- raw HTML omitted --> Pull task out from slot</h4>
<p>As clock tick-tacking to <code>2021:08:05 11:17:43 +08(1628176663)</code>, we need to pull tasks out from slot by calculating the bucket number: <code>current_timestamp(1628176663) % 100000000 = 28176663</code>. After locating the bucket number, we find all tasks in <code>bucket 28176663</code> with <code>start_time &lt;</code> current_timestamp=, then we get all expected expiry tasks.</p>
<figure>
    <img loading="lazy" src="https://raw.githubusercontent.com/ramsayleung/images/master/20210806195227.png"/> 
</figure>

<h3 id="global-clock-and-lock"><!-- raw HTML omitted -->2.3<!-- raw HTML omitted --> Global clock and lock</h3>
<p>As we mentioned before, when the clock tick-tacks to <strong>current_time</strong>, we fetch all expiry tasks. When our service is running on a distributed system, it&rsquo;s universal that we will have multiple hosts(physical machines or dockers), with multiple <code>current_times</code> on its machine. There is no guarantee that all clocks of multiple hosts synchronized by the same Network Time Server, then all clocks might be subtly different. Which current_time is correct?</p>
<figure>
    <img loading="lazy" src="https://raw.githubusercontent.com/ramsayleung/images/master/20210806105745.png"/> 
</figure>

<p>In order to get the correct time, it&rsquo;s necessary to maintain a monotonic global clock(Of course, it&rsquo;s not the only way to go, there are several ways to handle <a href="http://book.mixu.net/distsys/time.html">time and order</a>). Since everything we care about clock is Unix timestamp, we could maintain a global system clock represented by Unix timestamp. All machines request the global clock every second to get the current time, fetching the expiry tasks later.</p>
<p>Well, are we done? Not yet, a new issue breaks into our design: if all machines can fetch the expiry tasks, these tasks will be processed more than one time, which will cause essential problems. We also need a mutex lock to guarantee only one machine can fetch the expiry task. You can implement both global clock and mutex lock by a magnificent strategy: an <a href="https://en.wikipedia.org/wiki/Optimistic_locking">Optimistic lock</a></p>
<figure>
    <img loading="lazy" src="https://raw.githubusercontent.com/ramsayleung/images/master/20210806114120.png"/> 
</figure>

<ol>
<li>All machines fetch global timestamp(timestamp A) with version</li>
<li>All machines increase timestamp(timestamp B) and update version(optimistic locking), only one machine will success because of optimistic locking.</li>
<li>Then the machine acquired mutex is authorized to fetch expiry tasks with timestamp A, the other machines failed to acquire mutex is suspended to wait for 1 seconds.</li>
<li>Loop back to step 1 with timestamp B.</li>
</ol>
<p>We could encapsulate the role who keep acquiring lock and fetch expiry data as an individual component named <strong>scheduler</strong>.</p>
<h3 id="expiry-processing"><!-- raw HTML omitted -->2.4<!-- raw HTML omitted --> Expiry processing</h3>
<p>Expiry processing is responsible for invoked the user-supplied callback or other user requested action. In distributed computing, it&rsquo;s common to execute a procedure by RPC(Remote Procedure Call). In our case, A RPC request is executed when timer task is expiry, from timer service to callback service. Thus, the caller(user) needs to explicitly tell the timer, which service should I execute with what kind of parameters data while the timer task is triggered.</p>
<p>We could pack and serialize this meta information and parameters data into binary data, and send it to the timer. When pulling data out from slot, the timer could reconstruct Request/Response/Client type and set it with user-defined data, the next step is a piece of cake, just executing it without saying.</p>
<figure>
    <img loading="lazy" src="https://raw.githubusercontent.com/ramsayleung/images/master/20210806142855.png"/> 
</figure>

<p>Perhaps there are many expiry tasks needed to triggered, in order to handle as many tasks as possible, you could create a thread pool, process pool, coroutine pool to execute RPC concurrently.</p>
<h3 id="decoupling"><!-- raw HTML omitted -->2.5<!-- raw HTML omitted --> Decoupling</h3>
<p>Supposing the callback service needs tons of operation, it takes a hundred of millisecond. Even though you have created a thread/process/coroutine pool to handle the timer task, it will inevitably hang, resulting in the decrease of throughout.</p>
<figure>
    <img loading="lazy" src="https://raw.githubusercontent.com/ramsayleung/images/master/20210806152334.png"/> 
</figure>

<p>As for this heavyweight processing case, Message Queue is a great answer. Message queues can significantly simplify coding of decoupled services, while improving performance, reliability and scalability. It&rsquo;s common to combine message queues with Pub/Sub messaging design pattern, timer could publish task data as message, and timer subscribes the same topic of message, using message queue as a buffer. Then in subscriber, the RPC client executes to request for callback service.</p>
<figure>
    <img loading="lazy" src="https://raw.githubusercontent.com/ramsayleung/images/master/20210806161123.png"/> 
</figure>

<p>After introducing message queue, we could outline the state machine of timer task:</p>
<figure>
    <img loading="lazy" src="https://raw.githubusercontent.com/ramsayleung/images/master/20210806203653.png"/> 
</figure>

<p>Thanks to message queue, we are able to buffer, to retry or to batch work, and to smooth spiky workloads</p>
<h3 id="high-availability-guarantee"><!-- raw HTML omitted -->2.6<!-- raw HTML omitted --> High availability guarantee</h3>
<h4 id="missed-expiry-tasks"><!-- raw HTML omitted -->2.6.1<!-- raw HTML omitted --> Missed expiry tasks</h4>
<p>A missed expiry of tasks may occur because of the scheduler process being shutdown or being crashed, or because of other unknown problems. One important job is how to locate these missed tasks and re-execute them. Since we are using global `current_timestamp` to fetch expiry data, we could have another scheduler to use `delay_10min_timestamp` to fetch missed expiry data.</p>
<figure>
    <img loading="lazy" src="https://raw.githubusercontent.com/ramsayleung/images/master/20210806202724.png"/> 
</figure>

<p>In order to look for a needle in a haystack, we need to set a range(delay_10min - current time), and then to batch find cross buckets. After finding these missed tasks, the timer publishes them as a message to message queue. For other open source distributed timer projects like Quartz, which provides an instruction to handle missed(misfire) tasks: <a href="http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/tutorial-lesson-04.html">Misfire instructions</a></p>
<p>If your NoSql component doesn&rsquo;t support find-cross-buckets feature, you could also find every bucket in the range one by one.</p>
<h4 id="callback-service-error"><!-- raw HTML omitted -->2.6.2<!-- raw HTML omitted --> Callback service error</h4>
<p>Since the distributed systems are shared-nothing systems, they communicate via message passing through a network(asynchronously or synchronously), but the network is unreliable. When invoking the user-supplied callback, the RPC request might fail if the network is cut off for a while or the callback service is temporarily down.</p>
<p>Retries are a technique that helps us deal with transient errors, i.e. errors that are temporary and are likely to disappear soon. Retries help us achieve resiliency by allowing the system to send a request repeatedly until it gets an explicit response(success or fail). By leveraging message queue, you obtain the ability for retrying for free. In the meanwhile, the timer could handle the user-requested retries: It&rsquo;s not the proper time to execute callback service, retry it later.</p>
<figure>
    <img loading="lazy" src="https://raw.githubusercontent.com/ramsayleung/images/master/20210806195302.png"/> 
</figure>

<h2 id="conclusion"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> Conclusion</h2>
<p>After a long way, we are finally here. The final full architecture would look like this:</p>
<p>The whole process:</p>
<ol>
<li>Adding a timer task, with specified meta info and task info</li>
<li>Inserting task into bucket by hashed timing wheel algorithm(With <code>task_state</code> set to <code>pending</code>)</li>
<li>Fetch_current scheduler tries to acquire lock and get global current time</li>
<li>The Acquired lock scheduler fetches expiry tasks</li>
<li>Return the expected data.</li>
<li>&amp; 7. Publishing task data as message to MQ with thread pool; And then set <code>task_state</code> to <code>delivered</code></li>
<li>Message subscriber pulls message from MQ</li>
<li>Sending RPC request to callback service(set <code>task_state</code> to <code>success</code> or <code>fail</code>)</li>
<li>Retry(If necessary)</li>
</ol>
<figure>
    <img loading="lazy" src="https://raw.githubusercontent.com/ramsayleung/images/master/20210806202140.png"/> 
</figure>

<p>Wish you have fun and profit</p>
<h2 id="reference"><!-- raw HTML omitted -->4<!-- raw HTML omitted --> Reference</h2>
<ul>
<li><a href="http://www.cs.columbia.edu/~nahum/w6998/papers/ton97-timing-wheels.pdf">Paper: Hashed and Hierarchical Timing Wheels: Efficient Data Structures for Implementing a Timer Facility</a></li>
<li><a href="https://blog.acolyer.org/2015/11/23/hashed-and-hierarchical-timing-wheels/">Hashed and Hierarchical Timing Wheels</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Let&#39;s make everything iterable</title>
      <link>https://ramsayleung.github.io/en/post/2021/iterate_through_pagination_api/</link>
      <pubDate>Thu, 29 Apr 2021 11:48:00 +0800</pubDate>
      
      <guid>https://ramsayleung.github.io/en/post/2021/iterate_through_pagination_api/</guid>
      <description>Iterate through pagination in the Rest API
1 Preface About 4 months ago, icewind1991 created an exciting PR that adding Stream/Iterator based versions of methods with paginated results, which makes enpoints in Rspotify more much ergonomic to use, and Mario completed this PR.
In order to know what this PR brought to us, we have to go back to the orignal story, the paginated results in Spotify&amp;rsquo;s Rest API.
2 Orignal Story Taking the artist_albums as example, it gets Spotify catalog information about an artist&amp;rsquo;s albums.</description>
      <content:encoded><![CDATA[<p>Iterate through pagination in the Rest API</p>
<h2 id="preface"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> Preface</h2>
<p>About 4 months ago, <a href="https://github.com/icewind1991">icewind1991</a> created an exciting <a href="https://github.com/ramsayleung/rspotify/pull/166">PR</a> that adding <code>Stream/Iterator</code> based versions of methods with paginated results, which makes enpoints in <a href="https://github.com/ramsayleung/rspotify">Rspotify</a> more much ergonomic to use, and <a href="https://github.com/marioortizmanero">Mario</a> completed this PR.</p>
<p>In order to know what this PR brought to us, we have to go back to the orignal story, the paginated results in Spotify&rsquo;s Rest API.</p>
<h2 id="orignal-story"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> Orignal Story</h2>
<p>Taking the <code>artist_albums</code> as example, it gets Spotify catalog information about an artist&rsquo;s albums.</p>
<p>The HTTP response body for this endpoint contains an array of simplified <a href="https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedalbumobject">album object </a>wrapped in a <a href="https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject">paging object</a> and use <code>limit</code> field to control the number of album objects to return and <code>offset</code> field to set the index of the first album to return.</p>
<p>So designed endpoint in <code>Rspotify</code> looks like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="sd">/// Paging object
</span></span></span><span class="line"><span class="cl"><span class="sd">///
</span></span></span><span class="line"><span class="cl"><span class="sd">/// [Reference](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)
</span></span></span><span class="line"><span class="cl"><span class="sd"></span><span class="cp">#[derive(Clone, Debug, Serialize, Deserialize, PartialEq, Eq)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">Page</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">href</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">items</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">limit</span>: <span class="kt">u32</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">next</span>: <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">offset</span>: <span class="kt">u32</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">previous</span>: <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">total</span>: <span class="kt">u32</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="sd">/// Get Spotify catalog information about an artist&#39;s albums.
</span></span></span><span class="line"><span class="cl"><span class="sd">///
</span></span></span><span class="line"><span class="cl"><span class="sd">/// Parameters:
</span></span></span><span class="line"><span class="cl"><span class="sd">/// - artist_id - the artist ID, URI or URL
</span></span></span><span class="line"><span class="cl"><span class="sd">/// - album_type - &#39;album&#39;, &#39;single&#39;, &#39;appears_on&#39;, &#39;compilation&#39;
</span></span></span><span class="line"><span class="cl"><span class="sd">/// - market - limit the response to one particular country.
</span></span></span><span class="line"><span class="cl"><span class="sd">/// - limit  - the number of albums to return
</span></span></span><span class="line"><span class="cl"><span class="sd">/// - offset - the index of the first album to return
</span></span></span><span class="line"><span class="cl"><span class="sd">/// [Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-an-artists-albums)
</span></span></span><span class="line"><span class="cl"><span class="sd"></span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">artist_albums</span><span class="o">&lt;&#39;</span><span class="na">a</span><span class="o">&gt;</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">&amp;&#39;</span><span class="na">a</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">artist_id</span>: <span class="kp">&amp;</span><span class="o">&#39;</span><span class="na">a</span> <span class="nc">ArtistId</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">album_type</span>: <span class="nb">Option</span><span class="o">&lt;&amp;&#39;</span><span class="na">a</span><span class="w"> </span><span class="n">AlbumType</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">market</span>: <span class="nb">Option</span><span class="o">&lt;&amp;&#39;</span><span class="na">a</span><span class="w"> </span><span class="n">Market</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">ClientResult</span><span class="o">&lt;</span><span class="n">Page</span><span class="o">&lt;</span><span class="n">SimplifiedAlbum</span><span class="o">&gt;&gt;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>Supposing that you fetched the first page of an artist&rsquo;s ablums, then
you would to get the data of the next page, you have to parse a URL:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;next&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.spotify.com/v1/browse/categories?offset=2&amp;limit=20&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>You have to parse the URL and extract <code>limit</code> and <code>offset</code> parameters, and recall the <code>artist_albums</code> endpoint with setting <code>limit</code> to 20 and <code>offset</code> to 2.</p>
<p>We have to manually fetch the data again and again until all datas have been consumed. It is not elegant, but works.</p>
<figure>
    <img loading="lazy" src="https://raw.githubusercontent.com/ramsayleung/images/master/20210429172938.png"/> 
</figure>

<h2 id="iterator-story"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> Iterator Story</h2>
<p>Since we have the basic knowledge about the background, let&rsquo;s jump to the iterator version of pagination endpoints.</p>
<p>First of all, the iterator pattern allows us to perform some tasks on a sequence of items in turn. An iterator is responsible for the logic of itreating over each item and determining when the sequence has finished.</p>
<p>If you want to know about about <code>Iterator</code>, Jon Gjengset has covered a brilliant <a href="https://www.youtube.com/watch?v=yozQ9C69pNs">tutorial</a> to demonstrate <code>Iterators</code> in Rust.</p>
<p>All iterators implement a trait named <code>Iterator</code> that is defined in the standard library. The definition of the trait looks like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">pub</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="nb">Iterator</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">type</span> <span class="nc">Item</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">next</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Option</span><span class="o">&lt;</span><span class="bp">Self</span>::<span class="n">Item</span><span class="o">&gt;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// methods with default implementations elided
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>By implementing the <code>Iterator</code> trait on our own types, we could have iterators that do anything we want. Then working mechanism we want to iterate over paginated result will look like this:</p>
<figure>
    <img loading="lazy" src="https://raw.githubusercontent.com/ramsayleung/images/master/sync_iterator_iterate.png"/> 
</figure>

<p>Now let&rsquo;s dive deep into the code, we need to implement <code>Iterator</code> for our own types, the pseudocode looks like:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="nb">Iterator</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">PageIterator</span><span class="o">&lt;</span><span class="n">Request</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">type</span> <span class="nc">Item</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ClientResult</span><span class="o">&lt;</span><span class="n">Page</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">next</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Option</span><span class="o">&lt;</span><span class="bp">Self</span>::<span class="n">Item</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">match</span><span class="w"> </span><span class="n">call</span><span class="w"> </span><span class="n">endpoints</span><span class="w"> </span><span class="n">with</span><span class="w"> </span><span class="n">offset</span><span class="w"> </span><span class="n">and</span><span class="w"> </span><span class="n">limit</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="nb">Ok</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="n">page</span><span class="p">.</span><span class="n">items</span><span class="p">.</span><span class="n">is_empty</span><span class="p">()</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">we</span><span class="w"> </span><span class="n">are</span><span class="w"> </span><span class="n">done</span><span class="w"> </span><span class="n">here</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="nb">None</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="nb">Ok</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">offset</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="n">page</span><span class="p">.</span><span class="n">items</span><span class="p">.</span><span class="n">len</span><span class="p">()</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">u32</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="nb">Some</span><span class="p">(</span><span class="nb">Ok</span><span class="p">(</span><span class="n">page</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="nb">Err</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="nb">Err</span><span class="p">(</span><span class="n">e</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>In order to iterate paginated result from different endpoints, we need a generic type to represent different endpoints. The
<a href="https://doc.rust-lang.org/std/ops/trait.Fn.html"><code>Fn</code></a> trait comes to our mind, the function pointer that points to code, not data.</p>
<p>Then the next version of pseudocode looks like:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span><span class="w"> </span><span class="n">Request</span><span class="o">&gt;</span><span class="w"> </span><span class="nb">Iterator</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">PageIterator</span><span class="o">&lt;</span><span class="n">Request</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">where</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">Request</span>: <span class="nb">Fn</span><span class="p">(</span><span class="kt">u32</span><span class="p">,</span><span class="w"> </span><span class="kt">u32</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">ClientResult</span><span class="o">&lt;</span><span class="n">Page</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">type</span> <span class="nc">Item</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ClientResult</span><span class="o">&lt;</span><span class="n">Page</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">next</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Option</span><span class="o">&lt;</span><span class="bp">Self</span>::<span class="n">Item</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">function_pointer</span><span class="p">)(</span><span class="n">offset</span><span class="w"> </span><span class="n">and</span><span class="w"> </span><span class="n">limit</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="nb">Ok</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="n">page</span><span class="p">.</span><span class="n">items</span><span class="p">.</span><span class="n">is_empty</span><span class="p">()</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">we</span><span class="w"> </span><span class="n">are</span><span class="w"> </span><span class="n">done</span><span class="w"> </span><span class="n">here</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="nb">None</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="nb">Ok</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">offset</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="n">page</span><span class="p">.</span><span class="n">items</span><span class="p">.</span><span class="n">len</span><span class="p">()</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">u32</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="nb">Some</span><span class="p">(</span><span class="nb">Ok</span><span class="p">(</span><span class="n">page</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="nb">Err</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="nb">Err</span><span class="p">(</span><span class="n">e</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>Now, our iterator story has iterated to the end, the next item is that
current full version code is
<a href="https://github.com/ramsayleung/rspotify/blob/master/src/pagination/iter.rs">here</a>,
check it if you are interested in :)</p>
<h2 id="stream-story"><!-- raw HTML omitted -->4<!-- raw HTML omitted --> Stream Story</h2>
<p>Are we done? Not yet. Let&rsquo;s move our eyes to stream story.</p>
<p>The stream story is mostly similar with iterator story, except that
iterator is synchronous, stream is asynchronous.</p>
<p>The <code>Stream</code> trait can yield multiple values before completing, similiar
to the <code>Iterator</code> trait.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">trait</span><span class="w"> </span><span class="n">Stream</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="sd">/// The type of the value yielded by the stream.
</span></span></span><span class="line"><span class="cl"><span class="sd"></span><span class="w">    </span><span class="k">type</span> <span class="nc">Item</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="sd">/// Attempt to resolve the next item in the stream.
</span></span></span><span class="line"><span class="cl"><span class="sd"></span><span class="w">    </span><span class="sd">/// Returns `Poll::Pending` if not ready, `Poll::Ready(Some(x))` if a value
</span></span></span><span class="line"><span class="cl"><span class="sd"></span><span class="w">    </span><span class="sd">/// is ready, and `Poll::Ready(None)` if the stream has completed.
</span></span></span><span class="line"><span class="cl"><span class="sd"></span><span class="w">    </span><span class="k">fn</span> <span class="nf">poll_next</span><span class="p">(</span><span class="bp">self</span>: <span class="nc">Pin</span><span class="o">&lt;&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">Self</span><span class="o">&gt;</span><span class="p">,</span><span class="w"> </span><span class="n">cx</span>: <span class="kp">&amp;</span><span class="nc">mut</span><span class="w"> </span><span class="n">Context</span><span class="o">&lt;&#39;</span><span class="nb">_</span><span class="o">&gt;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span>-&gt; <span class="nc">Poll</span><span class="o">&lt;</span><span class="nb">Option</span><span class="o">&lt;</span><span class="bp">Self</span>::<span class="n">Item</span><span class="o">&gt;&gt;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>Since we have already known the <code>iterator</code>, let make the stream story short. We leverage the
<a href="https://github.com/tokio-rs/async-stream"><code>async-stream</code></a> for using macro as Syntactic sugar to avoid clumsy type declaration and notation.</p>
<p>We use <code>stream!</code> macro to generate an anonymous type implementing the <code>Stream</code> trait, and the <code>Item</code> associated type is the type of the values yielded from the stream, which is <code>ClientResult&lt;T&gt;</code> in this case.</p>
<p>The stream <a href="https://github.com/ramsayleung/rspotify/blob/master/src/pagination/stream.rs">full version</a> is shorter and clearer:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="sd">/// This is used to handle paginated requests automatically.
</span></span></span><span class="line"><span class="cl"><span class="sd"></span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">paginate</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span><span class="w"> </span><span class="n">Fut</span><span class="p">,</span><span class="w"> </span><span class="n">Request</span><span class="o">&gt;</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">req</span>: <span class="nc">Request</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">page_size</span>: <span class="kt">u32</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">impl</span><span class="w"> </span><span class="n">Stream</span><span class="o">&lt;</span><span class="n">Item</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ClientResult</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">where</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">T</span>: <span class="nb">Unpin</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">Fut</span>: <span class="nc">Future</span><span class="o">&lt;</span><span class="n">Output</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ClientResult</span><span class="o">&lt;</span><span class="n">Page</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">Request</span>: <span class="nb">Fn</span><span class="p">(</span><span class="kt">u32</span><span class="p">,</span><span class="w"> </span><span class="kt">u32</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Fut</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">use</span><span class="w"> </span><span class="n">async_stream</span>::<span class="n">stream</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">offset</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">stream</span><span class="o">!</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">loop</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="kd">let</span><span class="w"> </span><span class="n">page</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">req</span><span class="p">(</span><span class="n">page_size</span><span class="p">,</span><span class="w"> </span><span class="n">offset</span><span class="p">).</span><span class="k">await</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="n">offset</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="n">page</span><span class="p">.</span><span class="n">items</span><span class="p">.</span><span class="n">len</span><span class="p">()</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">u32</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="k">for</span><span class="w"> </span><span class="n">item</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">page</span><span class="p">.</span><span class="n">items</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="kr">yield</span><span class="w"> </span><span class="nb">Ok</span><span class="p">(</span><span class="n">item</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="k">if</span><span class="w"> </span><span class="n">page</span><span class="p">.</span><span class="n">next</span><span class="p">.</span><span class="n">is_none</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">break</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h2 id="appendix"><!-- raw HTML omitted -->5<!-- raw HTML omitted --> Appendix</h2>
<p>Whew! It took more than I expected. Since iterators is the Rust features inspired by functional programming language ideas, which contributes to Rust&rsquo;s capability to clearly express high-level ideas at low-level performance.</p>
<p>It&rsquo;s good to leverage iterators wherever possible, now we can be thrilled to say that all endpoints don&rsquo;t need to manuallly loop over anymore, they are all iterable and rusty.</p>
<p>Thanks Mario and icewind1991 again for their works :)</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Serde Tricks</title>
      <link>https://ramsayleung.github.io/en/post/2020/serde_lesson/</link>
      <pubDate>Sun, 13 Dec 2020 22:29:00 +0800</pubDate>
      
      <guid>https://ramsayleung.github.io/en/post/2020/serde_lesson/</guid>
      <description>The lesson learned from refactoring rspotify
1 Preface Recently, I and Mario are working on refactoring rspotify, trying to improve performance, documentation, error-handling, data model and reduce compile time, to make it easier to use. (For those who has never heard about rspotify, it is a Spotify HTTP SDK implemented in Rust).
I am partly focusing on polishing the data model, based on the issue created by Koxiaet.
Since rspotify is API client for Spotify, it has to handle the request and response from Spotify HTTP API.</description>
      <content:encoded><![CDATA[<p>The lesson learned from refactoring rspotify</p>
<h2 id="preface"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> Preface</h2>
<p>Recently, I and <a href="https://github.com/marioortizmanero">Mario</a> are working on refactoring <a href="https://github.com/ramsayleung/rspotify"><code>rspotify</code></a>, trying to improve performance, documentation, error-handling, data model and reduce compile time, to make it easier to use. (For those who has never heard about <code>rspotify</code>, it is a Spotify HTTP SDK implemented in Rust).</p>
<p>I am partly focusing on polishing the data model, based on the <a href="https://github.com/ramsayleung/rspotify/issues/127">issue</a> created by <a href="https://github.com/Koxiaet">Koxiaet</a>.</p>
<p>Since <code>rspotify</code> is API client for Spotify, it has to handle the request and response from Spotify HTTP API.</p>
<p>Generally speaking, the data model is something about how to structure the response data, and used <a href="http://serde.rs/"><code>Serde</code></a> to parse JSON response from HTTP API to Rust <code>struct</code>, and I have learnt a lot Serde tricks from refactoring.</p>
<h2 id="serde-lesson"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> Serde Lesson</h2>
<h3 id="deserialize-json-map-to-vec-based-on-its-value-dot"><!-- raw HTML omitted -->2.1<!-- raw HTML omitted --> Deserialize JSON map to Vec based on its value.</h3>
<p>An actions object which contains a <code>disallows</code> object, allows to update the user interface based on which playback actions are available within the current context.</p>
<p>The response JSON data from HTTP API:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="err">...</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;disallows&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	    <span class="nt">&#34;resuming&#34;</span><span class="p">:</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="err">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>The original model representing actions was:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="cp">#[derive(Clone, Debug, Serialize, PartialEq, Eq)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">Actions</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">disallows</span>: <span class="nc">HashMap</span><span class="o">&lt;</span><span class="n">DisallowKey</span><span class="p">,</span><span class="w"> </span><span class="kt">bool</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="cp">#[derive(Clone, Serialize, Deserialize, Copy, PartialEq, Eq, Debug, Hash, ToString)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="cp">#[serde(rename_all = </span><span class="s">&#34;snake_case&#34;</span><span class="cp">)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="cp">#[strum(serialize_all = </span><span class="s">&#34;snake_case&#34;</span><span class="cp">)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">enum</span> <span class="nc">DisallowKey</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">InterruptingPlayback</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">Pausing</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">Resuming</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">..</span><span class="p">.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>And Koxiaet gave great advice about how to polish <code>Actions</code>:</p>
<blockquote>
<p><code>Actions::disallows</code> can be replaced with a <code>Vec&lt;DisallowKey&gt;</code> or <code>HashSet&lt;DisallowKey&gt;</code> by removing all entires whose value is false, which will result in a simpler API.</p>
</blockquote>
<p>To be honest, I was not that familiar with <code>Serde</code> before, after digging in its official documentation for a while, it seems there is now a built-in way to convert JSON map to <code>Vec&lt;T&gt;</code> base on map&rsquo;s value.</p>
<p>After reading the <a href="https://serde.rs/custom-serialization.html">Custom serialization</a> from documentation, there was a simple solution came to my mind, so I wrote my first customized deserialize function.</p>
<p>I created a dumb <code>Actions</code> struct inside the <code>deserialize</code> function, and converted <code>HashMap</code> to <code>Vec</code> by filtering its value.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="cp">#[derive(Clone, Debug, Serialize, PartialEq, Eq)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">Actions</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">disallows</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="n">DisallowKey</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">impl</span><span class="o">&lt;&#39;</span><span class="na">de</span><span class="o">&gt;</span><span class="w"> </span><span class="n">Deserialize</span><span class="o">&lt;&#39;</span><span class="na">de</span><span class="o">&gt;</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Actions</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">deserialize</span><span class="o">&lt;</span><span class="n">D</span><span class="o">&gt;</span><span class="p">(</span><span class="n">deserializer</span>: <span class="nc">D</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="bp">Self</span><span class="p">,</span><span class="w"> </span><span class="n">D</span>::<span class="n">Error</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">where</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">D</span>: <span class="nc">Deserializer</span><span class="o">&lt;&#39;</span><span class="na">de</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="cp">#[derive(Deserialize)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">struct</span> <span class="nc">OriginalActions</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="k">pub</span><span class="w"> </span><span class="n">disallows</span>: <span class="nc">HashMap</span><span class="o">&lt;</span><span class="n">DisallowKey</span><span class="p">,</span><span class="w"> </span><span class="kt">bool</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">let</span><span class="w"> </span><span class="n">orignal_actions</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">OriginalActions</span>::<span class="n">deserialize</span><span class="p">(</span><span class="n">deserializer</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="nb">Ok</span><span class="p">(</span><span class="n">Actions</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="n">disallows</span>: <span class="nc">orignal_actions</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">.</span><span class="n">disallows</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">.</span><span class="n">into_iter</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">.</span><span class="n">filter</span><span class="p">(</span><span class="o">|</span><span class="p">(</span><span class="n">_</span><span class="p">,</span><span class="w"> </span><span class="n">value</span><span class="p">)</span><span class="o">|</span><span class="w"> </span><span class="o">*</span><span class="n">value</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="w"> </span><span class="n">_</span><span class="p">)</span><span class="o">|</span><span class="w"> </span><span class="n">key</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">.</span><span class="n">collect</span><span class="p">(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">})</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>The types should be familiar if you&rsquo;ve used <code>Serde</code> before.</p>
<p>If you&rsquo;re not used to Rust then the function signature will likely look a little strange. What it&rsquo;s trying to tell is that d will be something that implements <code>Serde</code>&rsquo;s <code>Deserializer</code> trait, and that any references to memory will live for the <code>'de</code> lifetime.</p>
<h3 id="deserialize-unix-milliseconds-timestamp-to-datetime"><!-- raw HTML omitted -->2.2<!-- raw HTML omitted --> Deserialize Unix milliseconds timestamp to Datetime</h3>
<p>A currently playing object which contains information about currently playing item, and the <code>timestamp</code> field is an integer, representing the Unix millisecond timestamp when data was fetched.</p>
<p>The response JSON data from HTTP API:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="err">...</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;timestamp&#34;</span><span class="p">:</span> <span class="mi">1490252122574</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;progress_ms&#34;</span><span class="p">:</span> <span class="mi">44272</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;is_playing&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;currently_playing_type&#34;</span><span class="p">:</span> <span class="s2">&#34;track&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;actions&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;disallows&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	    <span class="nt">&#34;resuming&#34;</span><span class="p">:</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="err">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>The original model was:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="sd">/// Currently playing object
</span></span></span><span class="line"><span class="cl"><span class="sd">///
</span></span></span><span class="line"><span class="cl"><span class="sd">/// [Reference](https://developer.spotify.com/documentation/web-api/reference/player/get-the-users-currently-playing-track/)
</span></span></span><span class="line"><span class="cl"><span class="sd"></span><span class="cp">#[derive(Clone, Debug, Serialize, Deserialize, PartialEq, Eq)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">CurrentlyPlayingContext</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">timestamp</span>: <span class="kt">u64</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">progress_ms</span>: <span class="nb">Option</span><span class="o">&lt;</span><span class="kt">u32</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">is_playing</span>: <span class="kt">bool</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">item</span>: <span class="nb">Option</span><span class="o">&lt;</span><span class="n">PlayingItem</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">currently_playing_type</span>: <span class="nc">CurrentlyPlayingType</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">actions</span>: <span class="nc">Actions</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>As before, Koxiaet made a great point about <code>timestamp</code> and =progress_ms=(I will talk about it later):</p>
<blockquote>
<p><code>CurrentlyPlayingContext::timestamp</code> should be a <code>chrono::DateTime&lt;Utc&gt;</code>, which could be easier to use.</p>
</blockquote>
<p>The polished struct looks like:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="cp">#[derive(Clone, Debug, Serialize, Deserialize, PartialEq, Eq)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">CurrentlyPlayingContext</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">context</span>: <span class="nb">Option</span><span class="o">&lt;</span><span class="n">Context</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cp">#[serde(
</span></span></span><span class="line"><span class="cl"><span class="cp">	deserialize_with = </span><span class="s">&#34;from_millisecond_timestamp&#34;</span><span class="cp">,
</span></span></span><span class="line"><span class="cl"><span class="cp">	serialize_with = </span><span class="s">&#34;to_millisecond_timestamp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">    )]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">timestamp</span>: <span class="nc">DateTime</span><span class="o">&lt;</span><span class="n">Utc</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">progress_ms</span>: <span class="nb">Option</span><span class="o">&lt;</span><span class="kt">u32</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">is_playing</span>: <span class="kt">bool</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">item</span>: <span class="nb">Option</span><span class="o">&lt;</span><span class="n">PlayingItem</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">currently_playing_type</span>: <span class="nc">CurrentlyPlayingType</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">actions</span>: <span class="nc">Actions</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>Using the <code>deserialize_with</code> attribute tells <code>Serde</code> to use custom deserialization code for the <code>timestamp</code> field. The
<code>from_millisecond_timestamp</code> code is:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="sd">/// Deserialize Unix millisecond timestamp to `DateTime&lt;Utc&gt;`
</span></span></span><span class="line"><span class="cl"><span class="sd"></span><span class="k">pub</span><span class="p">(</span><span class="k">in</span><span class="w"> </span><span class="k">crate</span><span class="p">)</span><span class="w"> </span><span class="k">fn</span> <span class="nf">from_millisecond_timestamp</span><span class="o">&lt;&#39;</span><span class="na">de</span><span class="p">,</span><span class="w"> </span><span class="n">D</span><span class="o">&gt;</span><span class="p">(</span><span class="n">d</span>: <span class="nc">D</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="n">DateTime</span><span class="o">&lt;</span><span class="n">Utc</span><span class="o">&gt;</span><span class="p">,</span><span class="w"> </span><span class="n">D</span>::<span class="n">Error</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">where</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">D</span>: <span class="nc">de</span>::<span class="n">Deserializer</span><span class="o">&lt;&#39;</span><span class="na">de</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">d</span><span class="p">.</span><span class="n">deserialize_u64</span><span class="p">(</span><span class="n">DateTimeVisitor</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>The code calls <code>d.deserialize_u64</code> passing in a struct. The passed in struct implements <code>Serde</code>&rsquo;s <code>Visitor</code>, and look like:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="c1">// Vistor to help deserialize unix millisecond timestamp to `chrono::DateTime`
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">struct</span> <span class="nc">DateTimeVisitor</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">impl</span><span class="o">&lt;&#39;</span><span class="na">de</span><span class="o">&gt;</span><span class="w"> </span><span class="n">de</span>::<span class="n">Visitor</span><span class="o">&lt;&#39;</span><span class="na">de</span><span class="o">&gt;</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">DateTimeVisitor</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">type</span> <span class="nc">Value</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">DateTime</span><span class="o">&lt;</span><span class="n">Utc</span><span class="o">&gt;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">expecting</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">formatter</span>: <span class="kp">&amp;</span><span class="nc">mut</span><span class="w"> </span><span class="n">fmt</span>::<span class="n">Formatter</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">fmt</span>::<span class="nb">Result</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="fm">write!</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="n">formatter</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="s">&#34;an unix millisecond timestamp represents DataTime&lt;UTC&gt;&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">visit_u64</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">v</span>: <span class="kt">u64</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="bp">Self</span>::<span class="n">Value</span><span class="p">,</span><span class="w"> </span><span class="n">E</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">where</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">E</span>: <span class="nc">de</span>::<span class="n">Error</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="o">..</span><span class="p">.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>The struct <code>DateTimeVisitor</code> doesn&rsquo;t have any fields, it just a type implemented the custom visitor which delegates to parse the <code>u64</code>.</p>
<p>Since there is no way to construct <code>DataTime</code> directly from Unix millisecond timestamp, I have to figure out how to handle the
construction. And it turns out that there is a way to construct <code>DateTime</code> from seconds and nanoseconds:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">chrono</span>::<span class="p">{</span><span class="n">DateTime</span><span class="p">,</span><span class="w"> </span><span class="n">TimeZone</span><span class="p">,</span><span class="w"> </span><span class="n">NaiveDateTime</span><span class="p">,</span><span class="w"> </span><span class="n">Utc</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="n">dt</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">DateTime</span>::<span class="o">&lt;</span><span class="n">Utc</span><span class="o">&gt;</span>::<span class="n">from_utc</span><span class="p">(</span><span class="n">NaiveDateTime</span>::<span class="n">from_timestamp</span><span class="p">(</span><span class="mi">61</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">),</span><span class="w"> </span><span class="n">Utc</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>Thus, what I need to do is just convert millisecond to second and nanosecond:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">fn</span> <span class="nf">visit_u64</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">v</span>: <span class="kt">u64</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="bp">Self</span>::<span class="n">Value</span><span class="p">,</span><span class="w"> </span><span class="n">E</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">where</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">E</span>: <span class="nc">de</span>::<span class="n">Error</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">second</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">v</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">v</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">1000</span><span class="p">)</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="mi">1000</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">nanosecond</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">((</span><span class="n">v</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">1000</span><span class="p">)</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">1000000</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">u32</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// The maximum value of i64 is large enough to hold millisecond, so it would be safe to convert it i64
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">dt</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">DateTime</span>::<span class="o">&lt;</span><span class="n">Utc</span><span class="o">&gt;</span>::<span class="n">from_utc</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">NaiveDateTime</span>::<span class="n">from_timestamp</span><span class="p">(</span><span class="n">second</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">i64</span><span class="p">,</span><span class="w"> </span><span class="n">nanosecond</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">Utc</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nb">Ok</span><span class="p">(</span><span class="n">dt</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>The <code>to_millisecond_timestamp</code> function is similar to <code>from_millisecond_timestamp</code>, but it&rsquo;s eaiser to implement, check
<a href="https://github.com/ramsayleung/rspotify/pull/157/files#">this PR</a> for more detail.</p>
<h3 id="deserialize-milliseconds-to-duration"><!-- raw HTML omitted -->2.3<!-- raw HTML omitted --> Deserialize milliseconds to Duration</h3>
<p>The simplified episode object contains the simplified episode information, and the <code>duration_ms</code> field is an integer, which represents the episode length in milliseconds.</p>
<p>The response JSON data from HTTP API:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="err">...</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;audio_preview_url&#34;</span> <span class="p">:</span> <span class="s2">&#34;https://p.scdn.co/mp3-preview/83bc7f2d40e850582a4ca118b33c256358de06ff&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;description&#34;</span> <span class="p">:</span> <span class="s2">&#34;FÃ¶lj med Tobias Svanelid till Sveriges Ã¤ldsta tegelkyrka&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;duration_ms&#34;</span> <span class="p">:</span> <span class="mi">2685023</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;explicit&#34;</span> <span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="err">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>The original model was</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="cp">#[derive(Clone, Debug, Serialize, Deserialize, PartialEq, Eq)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">SimplifiedEpisode</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">audio_preview_url</span>: <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">description</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">duration_ms</span>: <span class="kt">u32</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">..</span><span class="p">.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>As before without saying, Koxiaet pointed out that</p>
<blockquote>
<p><code>SimplifiedEpisode::duration_ms</code> should be replaced with a <code>duration</code> of type <code>Duration</code>, since a built-in <code>Duration</code> type works better than primitive type.</p>
</blockquote>
<p>Since I have worked with <code>Serde</code>&rsquo;s custome deserialization, it&rsquo;s not a hard job for me any more. I easily figure out how to deserialize <code>u64</code> to <code>Duration</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="cp">#[derive(Clone, Debug, Serialize, Deserialize, PartialEq, Eq)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">SimplifiedEpisode</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">audio_preview_url</span>: <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">description</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cp">#[serde(
</span></span></span><span class="line"><span class="cl"><span class="cp">	deserialize_with = </span><span class="s">&#34;from_duration_ms&#34;</span><span class="cp">,
</span></span></span><span class="line"><span class="cl"><span class="cp">	serialize_with = </span><span class="s">&#34;to_duration_ms&#34;</span><span class="cp">,
</span></span></span><span class="line"><span class="cl"><span class="cp">	rename = </span><span class="s">&#34;duration_ms&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">    )]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">duration</span>: <span class="nc">Duration</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">..</span><span class="p">.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="sd">/// Vistor to help deserialize duration represented as millisecond to `std::time::Duration`
</span></span></span><span class="line"><span class="cl"><span class="sd"></span><span class="k">struct</span> <span class="nc">DurationVisitor</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">impl</span><span class="o">&lt;&#39;</span><span class="na">de</span><span class="o">&gt;</span><span class="w"> </span><span class="n">de</span>::<span class="n">Visitor</span><span class="o">&lt;&#39;</span><span class="na">de</span><span class="o">&gt;</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">DurationVisitor</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">type</span> <span class="nc">Value</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Duration</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">expecting</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">formatter</span>: <span class="kp">&amp;</span><span class="nc">mut</span><span class="w"> </span><span class="n">fmt</span>::<span class="n">Formatter</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">fmt</span>::<span class="nb">Result</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="fm">write!</span><span class="p">(</span><span class="n">formatter</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;a milliseconds represents std::time::Duration&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">visit_u64</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">v</span>: <span class="kt">u64</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="bp">Self</span>::<span class="n">Value</span><span class="p">,</span><span class="w"> </span><span class="n">E</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">where</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">E</span>: <span class="nc">de</span>::<span class="n">Error</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="nb">Ok</span><span class="p">(</span><span class="n">Duration</span>::<span class="n">from_millis</span><span class="p">(</span><span class="n">v</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="sd">/// Deserialize `std::time::Duration` from millisecond(represented as u64)
</span></span></span><span class="line"><span class="cl"><span class="sd"></span><span class="k">pub</span><span class="p">(</span><span class="k">in</span><span class="w"> </span><span class="k">crate</span><span class="p">)</span><span class="w"> </span><span class="k">fn</span> <span class="nf">from_duration_ms</span><span class="o">&lt;&#39;</span><span class="na">de</span><span class="p">,</span><span class="w"> </span><span class="n">D</span><span class="o">&gt;</span><span class="p">(</span><span class="n">d</span>: <span class="nc">D</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="n">Duration</span><span class="p">,</span><span class="w"> </span><span class="n">D</span>::<span class="n">Error</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">where</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">D</span>: <span class="nc">de</span>::<span class="n">Deserializer</span><span class="o">&lt;&#39;</span><span class="na">de</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">d</span><span class="p">.</span><span class="n">deserialize_u64</span><span class="p">(</span><span class="n">DurationVisitor</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>Now, the life is easier than before.</p>
<h3 id="deserialize-milliseconds-to-option"><!-- raw HTML omitted -->2.4<!-- raw HTML omitted --> Deserialize milliseconds to Option</h3>
<p>Let&rsquo;s go back to <code>CurrentlyPlayingContext</code> model, since we have replaced millisecond (represents as <code>u32</code>) with <code>Duration</code>, it makes sense to replace all millisecond fields to <code>Duration</code>.</p>
<p>But hold on, it seems <code>progress_ms</code> field is a bit different.</p>
<p>The <code>progress_ms</code> field is either not present or a millisecond, the <code>u32</code> handles the milliseconds, as its value might not be present in the response, it&rsquo;s an <code>Option&lt;u32&gt;</code>, so it won&rsquo;t work with <code>from_duration_ms</code>.</p>
<p>Thus, it&rsquo;s necessary to figure out how to handle the <code>Option</code> type, and the answer is in the documentation, the <code>deserialize_option</code> function:</p>
<blockquote>
<p>Hint that the <code>Deserialize</code> type is expecting an optional value.</p>
</blockquote>
<!-- raw HTML omitted -->
<blockquote>
<p>This allows deserializers that encode an optional value as a nullable value to convert the null value into <code>None</code> and a regular value into <code>Some(value)</code>.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="cp">#[derive(Clone, Debug, Serialize, Deserialize, PartialEq, Eq)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">CurrentlyPlayingContext</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">context</span>: <span class="nb">Option</span><span class="o">&lt;</span><span class="n">Context</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cp">#[serde(
</span></span></span><span class="line"><span class="cl"><span class="cp">	deserialize_with = </span><span class="s">&#34;from_millisecond_timestamp&#34;</span><span class="cp">,
</span></span></span><span class="line"><span class="cl"><span class="cp">	serialize_with = </span><span class="s">&#34;to_millisecond_timestamp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">    )]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">timestamp</span>: <span class="nc">DateTime</span><span class="o">&lt;</span><span class="n">Utc</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cp">#[serde(default)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cp">#[serde(
</span></span></span><span class="line"><span class="cl"><span class="cp">	deserialize_with = </span><span class="s">&#34;from_option_duration_ms&#34;</span><span class="cp">,
</span></span></span><span class="line"><span class="cl"><span class="cp">	serialize_with = </span><span class="s">&#34;to_option_duration_ms&#34;</span><span class="cp">,
</span></span></span><span class="line"><span class="cl"><span class="cp">	rename = </span><span class="s">&#34;progress_ms&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">    )]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">progress</span>: <span class="nb">Option</span><span class="o">&lt;</span><span class="n">Duration</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="sd">/// Deserialize `Option&lt;std::time::Duration&gt;` from millisecond(represented as u64)
</span></span></span><span class="line"><span class="cl"><span class="sd"></span><span class="k">pub</span><span class="p">(</span><span class="k">in</span><span class="w"> </span><span class="k">crate</span><span class="p">)</span><span class="w"> </span><span class="k">fn</span> <span class="nf">from_option_duration_ms</span><span class="o">&lt;&#39;</span><span class="na">de</span><span class="p">,</span><span class="w"> </span><span class="n">D</span><span class="o">&gt;</span><span class="p">(</span><span class="n">d</span>: <span class="nc">D</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="nb">Option</span><span class="o">&lt;</span><span class="n">Duration</span><span class="o">&gt;</span><span class="p">,</span><span class="w"> </span><span class="n">D</span>::<span class="n">Error</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">where</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">D</span>: <span class="nc">de</span>::<span class="n">Deserializer</span><span class="o">&lt;&#39;</span><span class="na">de</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">d</span><span class="p">.</span><span class="n">deserialize_option</span><span class="p">(</span><span class="n">OptionDurationVisitor</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>As before, the <code>OptionDurationVisitor</code> is an empty struct implemented <code>Visitor</code> trait, but key point is in order to work with
<code>deserialize_option</code>, the <code>OptionDurationVisitor</code> has to implement the <code>visit_none</code> and <code>visit_some</code> method:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">impl</span><span class="o">&lt;&#39;</span><span class="na">de</span><span class="o">&gt;</span><span class="w"> </span><span class="n">de</span>::<span class="n">Visitor</span><span class="o">&lt;&#39;</span><span class="na">de</span><span class="o">&gt;</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">OptionDurationVisitor</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">type</span> <span class="nc">Value</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">Option</span><span class="o">&lt;</span><span class="n">Duration</span><span class="o">&gt;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">expecting</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">formatter</span>: <span class="kp">&amp;</span><span class="nc">mut</span><span class="w"> </span><span class="n">fmt</span>::<span class="n">Formatter</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">fmt</span>::<span class="nb">Result</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="fm">write!</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="n">formatter</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="s">&#34;a optional milliseconds represents std::time::Duration&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">visit_none</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="bp">Self</span>::<span class="n">Value</span><span class="p">,</span><span class="w"> </span><span class="n">E</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">where</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">E</span>: <span class="nc">de</span>::<span class="n">Error</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="nb">Ok</span><span class="p">(</span><span class="nb">None</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">visit_some</span><span class="o">&lt;</span><span class="n">D</span><span class="o">&gt;</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">deserializer</span>: <span class="nc">D</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="bp">Self</span>::<span class="n">Value</span><span class="p">,</span><span class="w"> </span><span class="n">D</span>::<span class="n">Error</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">where</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">D</span>: <span class="nc">de</span>::<span class="n">Deserializer</span><span class="o">&lt;&#39;</span><span class="na">de</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="nb">Ok</span><span class="p">(</span><span class="nb">Some</span><span class="p">(</span><span class="n">deserializer</span><span class="p">.</span><span class="n">deserialize_u64</span><span class="p">(</span><span class="n">DurationVisitor</span><span class="p">)</span><span class="o">?</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>The <code>visit_none</code> method return <code>Ok(None)</code> so the <code>progress</code> value in the struct will be None, and the <code>visit_some</code> delegates the parsing logic to <code>DurationVisitor</code> via the <code>deserialize_u64</code> call, so deserializing <code>Some(u64)</code> works like the <code>u64</code>.</p>
<h3 id="deserialize-enum-from-number"><!-- raw HTML omitted -->2.5<!-- raw HTML omitted --> Deserialize enum from number</h3>
<p>An <code>AudioAnalysisSection</code> model contains a <code>mode</code> field, which indicates the modality(major or minor) of a track, the type of scle from which its melodic content is derived. This field will contain a 0 for <code>minor</code>, a 1 for <code>major</code>, or a -1 for no result.</p>
<p>The response JSON data from HTTP API:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="err">...</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;mode&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;mode_confidence&#34;</span><span class="p">:</span> <span class="mf">0.414</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="err">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>The original struct representing <code>AudioAnalysisSection</code> was like this, since <code>mode</code> field was stored into a <code>f32=(=f8</code> was a better choice for this case):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="cp">#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">AudioAnalysisSection</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">..</span><span class="p">.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">pub</span><span class="w"> </span><span class="n">mode</span>: <span class="kt">f32</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">mode_confidence</span>: <span class="kt">f32</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">..</span><span class="p">.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>Koxiaet made a great point about <code>mode</code> field:</p>
<blockquote>
<p><code>AudioAnalysisSection::mode</code> and <code>AudioFeatures::mode</code> are <code>f32=s but should be =Option&lt;Mode&gt;=s where =enum Mode { Major, Minor }</code> as it is more useful.</p>
</blockquote>
<p>In this case, we don&rsquo;t need the <code>Opiton</code> type and in order to deserialize enum from number, we firstly need to define a C-like enum:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">pub</span><span class="w"> </span><span class="k">enum</span> <span class="nc">Modality</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cp">#[serde(rename = </span><span class="s">&#34;0&#34;</span><span class="cp">)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">Minor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cp">#[serde(rename = </span><span class="s">&#34;1&#34;</span><span class="cp">)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">Major</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cp">#[serde(rename = </span><span class="s">&#34;1&#34;</span><span class="cp">)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">NoResult</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">AudioAnalysisSection</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">..</span><span class="p">.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">pub</span><span class="w"> </span><span class="n">mode</span>: <span class="nc">Modality</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">mode_confidence</span>: <span class="kt">f32</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">..</span><span class="p">.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>And then, what&rsquo;s the next step? It seems serde doesn&rsquo;t allow C-like enums to be formatted as integers rather that strings in JSON natively:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="err">working</span> <span class="err">version:</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="err">...</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;mode&#34;</span><span class="p">:</span> <span class="s2">&#34;0&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;mode_confidence&#34;</span><span class="p">:</span> <span class="mf">0.414</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="err">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">failed</span> <span class="err">version:</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="err">...</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;mode&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;mode_confidence&#34;</span><span class="p">:</span> <span class="mf">0.414</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="err">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Then the failed version is exactly what we want. I know that the serde&rsquo;s official documentation has a solution for this case, the <a href="https://github.com/dtolnay/serde-repr">serde_repr</a> crate provides alternative derive macros that derive the same Serialize and Deserialize traits but delegate to the underlying representation of a C-like enum.</p>
<p>Since we are trying to reduce the compiled time of rspotify, so we are cautious about introducing new dependencies. So a custom-made serialize function would be a better choice, it just needs to <code>match</code> the number, and convert to a related enum value.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="sd">/// Deserialize/Serialize `Modality` to integer(0, 1, -1).
</span></span></span><span class="line"><span class="cl"><span class="sd"></span><span class="k">pub</span><span class="p">(</span><span class="k">in</span><span class="w"> </span><span class="k">crate</span><span class="p">)</span><span class="w"> </span><span class="k">mod</span> <span class="nn">modality</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">use</span><span class="w"> </span><span class="k">super</span>::<span class="n">enums</span>::<span class="n">Modality</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">use</span><span class="w"> </span><span class="n">serde</span>::<span class="p">{</span><span class="n">de</span><span class="p">,</span><span class="w"> </span><span class="n">Deserialize</span><span class="p">,</span><span class="w"> </span><span class="n">Serializer</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">deserialize</span><span class="o">&lt;&#39;</span><span class="na">de</span><span class="p">,</span><span class="w"> </span><span class="n">D</span><span class="o">&gt;</span><span class="p">(</span><span class="n">d</span>: <span class="nc">D</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="n">Modality</span><span class="p">,</span><span class="w"> </span><span class="n">D</span>::<span class="n">Error</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">where</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">D</span>: <span class="nc">de</span>::<span class="n">Deserializer</span><span class="o">&lt;&#39;</span><span class="na">de</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">let</span><span class="w"> </span><span class="n">v</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kt">i8</span>::<span class="n">deserialize</span><span class="p">(</span><span class="n">d</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">match</span><span class="w"> </span><span class="n">v</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="mi">0</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="nb">Ok</span><span class="p">(</span><span class="n">Modality</span>::<span class="n">Minor</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="mi">1</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="nb">Ok</span><span class="p">(</span><span class="n">Modality</span>::<span class="n">Major</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="o">-</span><span class="mi">1</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="nb">Ok</span><span class="p">(</span><span class="n">Modality</span>::<span class="n">NoResult</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="n">_</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="nb">Err</span><span class="p">(</span><span class="n">de</span>::<span class="n">Error</span>::<span class="n">invalid_value</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">de</span>::<span class="n">Unexpected</span>::<span class="n">Signed</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">into</span><span class="p">()),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="o">&amp;</span><span class="s">&#34;valid value: 0, 1, -1&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">serialize</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;</span><span class="p">(</span><span class="n">x</span>: <span class="kp">&amp;</span><span class="nc">Modality</span><span class="p">,</span><span class="w"> </span><span class="n">s</span>: <span class="nc">S</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="n">S</span>::<span class="nb">Ok</span><span class="p">,</span><span class="w"> </span><span class="n">S</span>::<span class="n">Error</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">where</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">S</span>: <span class="nc">Serializer</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">match</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="n">Modality</span>::<span class="n">Minor</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="n">serialize_i8</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="n">Modality</span>::<span class="n">Major</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="n">serialize_i8</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="n">Modality</span>::<span class="n">NoResult</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="n">serialize_i8</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h2 id="move-into-module"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> Move into module</h2>
<p>Update:</p>
<p>2021-01-15</p>
<ul>
<li><code>from(to)_millisecond_timestamp</code> have been moved into its module <code>millisecond_timestamp</code> and rename them to <code>deserialize</code> &amp; <code>serialize</code></li>
<li><code>from(to)_duration_ms</code> have been moved into its module <code>duration_ms</code> and rename them to <code>deserialize</code> &amp; <code>serialize</code></li>
<li><code>from(to)_option_duration_ms</code> have been moved into its module <code>option_duration_ms</code> and rename them to <code>deserialize</code> &amp; <code>serialize</code></li>
</ul>
<h2 id="summary"><!-- raw HTML omitted -->4<!-- raw HTML omitted --> Summary</h2>
<p>To be honest, it&rsquo;s the first time I have needed some customized works, which took me some time to understand how does <code>Serde</code> works. Finally, all investments paid off, it works great now.</p>
<p>Serde is such an awesome deserialize/serialize framework which I have learnt a lot of from and still have a lot of to learn from.</p>
<h2 id="reference"><!-- raw HTML omitted -->5<!-- raw HTML omitted --> Reference</h2>
<ul>
<li><a href="https://chrismcg.com/2019/04/30/deserializing-optional-datetimes-with-serde/">Deserializing optional datetimes with serde</a></li>
<li><a href="https://github.com/ramsayleung/rspotify/pull/157">PR: Keep polishing the models</a></li>
<li><a href="https://github.com/ramsayleung/rspotify/pull/145">PR: Refactor model</a></li>
<li><a href="https://github.com/ramsayleung/rspotify/pull/177">PR: Deserialize enum from number</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>rspotify has come to async/await</title>
      <link>https://ramsayleung.github.io/en/post/2020/async_await_for_rspotify/</link>
      <pubDate>Fri, 28 Feb 2020 01:27:00 +0800</pubDate>
      
      <guid>https://ramsayleung.github.io/en/post/2020/async_await_for_rspotify/</guid>
      <description>1 Preface Today, I am exited to introduce you the v0.9 release I have been continued to work on it for the past few weeks that adds async/await support now!
2 The road to async/await What is rspotify: &amp;gt; For those who has never heared about rspotify before, rspotify is a Spotify web Api wrapper implemented in Rust.
With async/await&amp;rsquo;s forthcoming stabilization and reqwest adds async/await support now, I think it&amp;rsquo;s time to let rspotify leverage power from async/await.</description>
      <content:encoded><![CDATA[<h2 id="preface"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> Preface</h2>
<p>Today, I am exited to introduce you the <a href="https://github.com/ramsayleung/rspotify/releases/tag/v0.9">v0.9</a> release I have been continued to work on it for the past few weeks that
adds <code>async/await</code> support now!</p>
<h2 id="the-road-to-async-await"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> The road to async/await</h2>
<p>What is rspotify: &gt; For those who has never heared about rspotify
before, <a href="https://github.com/ramsayleung/rspotify">rspotify</a> is a
Spotify web Api wrapper implemented in Rust.</p>
<p>With async/await&rsquo;s forthcoming stabilization and reqwest adds
<code>async/await</code> support now, I think it&rsquo;s time to let rspotify leverage
power from <code>async/await</code>. To be honest, I was not familiar with
<code>async/await</code> before, because of my Java background from where I just
get used to multiple thread and sync stuff(Yes, I know Java has <code>future</code>
either).</p>
<p>After reading some good learning resources, such as <a href="https://rust-lang.github.io/async-book/">Async book</a>, <a href="https://www.youtube.com/watch?v=skos4B5x7qE">Zero-cost Async IO</a>, I
started to step into the world of <code>async/await</code>. <code>async/await</code> is a way
to write functions that can &ldquo;pause&rdquo;, return control to the runtime, ant
then pick up from where they left off.</p>
<p>I think perhaps the most important part of <code>async/await</code> is runtime, which defines how to
schedule the functions.</p>
<p>Now, by leveraging the <code>async/await</code> power of <code>reqwest</code>, rspotify could
send HTTP request and handle response asynchronously.</p>
<p>Futhermore, not only do I refactor the old blocking endpoint functions to <code>async/await</code>
version, but also keep the old blocking endpoint functions with a new
additional feature <code>blocking</code>, then other developers could choose API to
their taste.</p>
<h2 id="overview"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> Overview</h2>
<p><code>album</code> example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">rspotify</span>::<span class="n">client</span>::<span class="n">Spotify</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">rspotify</span>::<span class="n">oauth2</span>::<span class="n">SpotifyClientCredentials</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="cp">#[tokio::main]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">async</span><span class="w"> </span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Set client_id and client_secret in .env file or
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="c1">// export CLIENT_ID=&#34;your client_id&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="c1">// export CLIENT_SECRET=&#34;secret&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">client_credential</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">SpotifyClientCredentials</span>::<span class="n">default</span><span class="p">().</span><span class="n">build</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Or set client_id and client_secret explictly
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="c1">// let client_credential = SpotifyClientCredentials::default()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="c1">//     .client_id(&#34;this-is-my-client-id&#34;)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="c1">//     .client_secret(&#34;this-is-my-client-secret&#34;)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="c1">//     .build();
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">spotify</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Spotify</span>::<span class="n">default</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">.</span><span class="n">client_credentials_manager</span><span class="p">(</span><span class="n">client_credential</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">.</span><span class="n">build</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">birdy_uri</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;spotify:album:0sNOF9WDwhWunNAHPD3Baj&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">albums</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">spotify</span><span class="p">.</span><span class="n">album</span><span class="p">(</span><span class="n">birdy_uri</span><span class="p">).</span><span class="k">await</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;{:?}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">albums</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>Just change the default API to async, and moving the previous
synchronous API to <code>blocking</code> module.</p>
<p>Notes that I think the v0.9 release of rspotify is going to be a huge
break change because of the support for <code>async/await</code>, which definitely
breaks backward compatibility.</p>
<p>So I decide to make an other break change
into the next release, just refactoring the project structure to shorten
the import path:</p>
<p>before:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">rspotify</span>::<span class="n">spotify</span>::<span class="n">client</span>::<span class="n">Spotify</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">rspotify</span>::<span class="n">spotify</span>::<span class="n">oauth2</span>::<span class="n">SpotifyClientCredentials</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>after:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">rspotify</span>::<span class="n">client</span>::<span class="n">Spotify</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">rspotify</span>::<span class="n">oauth2</span>::<span class="n">SpotifyClientCredentials</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>the <code>spotify</code> module is unnecessary and inelegant, so I just remove it.</p>
<h2 id="conclusion"><!-- raw HTML omitted -->4<!-- raw HTML omitted --> Conclusion</h2>
<p><a href="https://github.com/ramsayleung/rspotify/releases/tag/v0.9">rspotify v0.9</a> is now available! There is <a href="https://docs.rs/crate/rspotify/">documentation</a>, <a href="https://github.com/ramsayleung/rspotify/tree/master/examples">examples</a> and an <a href="https://github.com/ramsayleung/rspotify/issues/new">issue</a>
tracker!</p>
<p>Please provide any feedback, as I would love to improve this library any way I can! Thanks <a href="https://github.com/Rigellute">@Alexander</a> so much for actively participate in the refactor work for support
<code>async/await</code>.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>

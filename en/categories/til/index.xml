<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>til on In Pursuit of Hubris</title>
    <link>https://ramsayleung.github.io/en/categories/til/</link>
    <description>Recent content in til on In Pursuit of Hubris</description>
    <image>
      <title>In Pursuit of Hubris</title>
      <url>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>See this site&#39;s source code [here](https://github.com/ramsayleung/ramsayleung.github.io), licensed under GPLv3 Â·</copyright>
    <lastBuildDate>Sat, 13 Apr 2024 12:46:00 -0700</lastBuildDate><atom:link href="https://ramsayleung.github.io/en/categories/til/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TIL: Git Blame with Following</title>
      <link>https://ramsayleung.github.io/en/post/2024/git_blame_with_following/</link>
      <pubDate>Sat, 13 Apr 2024 12:46:00 -0700</pubDate>
      
      <guid>https://ramsayleung.github.io/en/post/2024/git_blame_with_following/</guid>
      <description>Developers usually use git blame in GUI tools like GitHub Blame or using GitLens blame in VSCode: Even though GUI tools is intuitive, but the Git CLI has much more powerful tooling for finding something closer to the real story behind your code. There are many scenarios that CLI is valuable, the first is ignoring the whitespace changes. For example, if you formatted your C++ codebase with clang-format or Javascript codebase with prettier, you haven&amp;rsquo;t actually changed the codebase, but you&amp;rsquo;re the owner of tons of lines of code.</description>
      <content:encoded><![CDATA[<p>Developers usually use <code>git blame</code> in GUI tools like GitHub Blame <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/github_blame.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>or using GitLens blame in VSCode: <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/git_blame_git_lens_vscode.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>Even though GUI tools is intuitive, but the Git CLI has much more powerful tooling for finding something closer to the real story behind your code. <!-- raw HTML omitted --></p>
<p>There are many scenarios that CLI is valuable, the first is ignoring the whitespace changes. <!-- raw HTML omitted --></p>
<p>For example, if you formatted your C++ codebase with <code>clang-format</code> or Javascript codebase with <code>prettier</code>, you haven&rsquo;t actually changed the codebase, but you&rsquo;re the owner of tons of lines of code. <!-- raw HTML omitted --></p>
<p>The <code>git blame -w</code> option will ignore these type of whitespace changes. <!-- raw HTML omitted --></p>
<p>The other great option is <code>-C</code> which will look for code movement between files in a commit. <!-- raw HTML omitted --></p>
<p>For example, if you refactor a function from one file to another, the normal <code>git</code> blame will simply show you as the author in the new file, but the <code>-C</code> option will follow that movement and show the last person who actually change those lines of code. <!-- raw HTML omitted --></p>
<p><code>-C</code> is extremely helpful when I need to find out the original author of some lines of code after file renames or refactors, to know more about the background and context behind this code <!-- raw HTML omitted --></p>
<p>According to the <code>git blame</code> doc, you could pass <code>-C</code> up to three times to ask Git try even harder: <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">-C<span class="o">[</span>&lt;num&gt;<span class="o">]</span>
</span></span><span class="line"><span class="cl">           In addition to -M, detect lines moved or copied from other files that were modified in the same commit.
</span></span><span class="line"><span class="cl">           This is useful when you reorganize your program and move code around across files.
</span></span><span class="line"><span class="cl">           When this option is given twice, the <span class="nb">command</span> additionally looks <span class="k">for</span> copies from other files in the commit that creates the file.
</span></span><span class="line"><span class="cl">           When this option is given three times, the <span class="nb">command</span> additionally looks <span class="k">for</span> copies from other files in any commit.
</span></span></code></pre></div><p>(it&rsquo;s a bit of odd design) <!-- raw HTML omitted --></p>
<p>Let&rsquo;s take <a href="https://github.com/rails/rails/blob/main/activemodel/lib/active_model/access.rb">the access.rb file of ActiveModel module in Rails framework</a> for example: <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git blame activemodel/lib/active_model/access.rb
</span></span></code></pre></div><p><figure>
    <img loading="lazy" src="/ox-hugo/normal_git_blame.png"
         alt="Figure 1: Vanilla git blame"/> <figcaption>
            <p><!-- raw HTML omitted -->Figure 1: <!-- raw HTML omitted -->Vanilla git blame</p>
        </figcaption>
</figure>
 <!-- raw HTML omitted --></p>
<p>Ok, it looks like Jonathan Hefner wrote all of this code it appears, let&rsquo;s look at the same code with <code>git blame -w -C -C -C activemodel/lib/active_model/access.rb</code> <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/git_blame_-w_-C_-C_-C.png"
         alt="Figure 2: git blame -w -C -C -C"/> <figcaption>
            <p><!-- raw HTML omitted -->Figure 2: <!-- raw HTML omitted -->git blame -w -C -C -C</p>
        </figcaption>
</figure>
 <!-- raw HTML omitted --></p>
<p>Now we can see that Git has followed this code from file to file over the course of multiple renames, it turns out Jonathan Hefner is the most recent file renamer, Guillermo Iguaran is the original author. <!-- raw HTML omitted --></p>
<p>If we want to know the history about this file, it&rsquo;s much better to ask Guillermo rather than Jonathan, which is beyond what the GUI blame or normal Git blame tool reveals <!-- raw HTML omitted --></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>TIL: Git Conditional Configs</title>
      <link>https://ramsayleung.github.io/en/post/2024/git_conditional_configs/</link>
      <pubDate>Sun, 07 Apr 2024 12:38:00 -0700</pubDate>
      
      <guid>https://ramsayleung.github.io/en/post/2024/git_conditional_configs/</guid>
      <description>Every Git user will have probably been asked to set up their Git at the first time: git config --global user.name &amp;#34;Ramsay Leung&amp;#34; git config --global user.email ramsayleung@gmail.com The above command will simply add the user.name and user.email value into your ~/.gitconfig file &amp;gt; cat ~/.gitconfig [user] name = Ramsay Leung email = ramsayleung@gmail.com [core] quotepath = false [init] defaultBranch = master You could also specify --local argument to writes the config values to .</description>
      <content:encoded><![CDATA[<p>Every Git user will have probably been asked to set up their Git at the first time: <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git config --global user.name <span class="s2">&#34;Ramsay Leung&#34;</span>
</span></span><span class="line"><span class="cl">git config --global user.email ramsayleung@gmail.com
</span></span></code></pre></div><p>The above command will simply add the <code>user.name</code> and <code>user.email</code> value into your <code>~/.gitconfig</code> file <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">&gt; cat ~/.gitconfig
</span></span><span class="line"><span class="cl"><span class="o">[</span>user<span class="o">]</span>
</span></span><span class="line"><span class="cl">    <span class="nv">name</span> <span class="o">=</span> Ramsay Leung
</span></span><span class="line"><span class="cl">    <span class="nv">email</span> <span class="o">=</span> ramsayleung@gmail.com
</span></span><span class="line"><span class="cl"><span class="o">[</span>core<span class="o">]</span>
</span></span><span class="line"><span class="cl">    <span class="nv">quotepath</span> <span class="o">=</span> <span class="nb">false</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>init<span class="o">]</span>
</span></span><span class="line"><span class="cl">    <span class="nv">defaultBranch</span> <span class="o">=</span> master
</span></span></code></pre></div><p>You could also specify <code>--local</code> argument to writes the config values to <code>.git/config</code> in whatever project you&rsquo;re currently in. <!-- raw HTML omitted --></p>
<p>If you need to simultaneously contribute to your work and open source project on the same laptop, with different Git config values, e.g.(company email address for work-specific projects, personal email address for open source project), what should you do? <!-- raw HTML omitted --></p>
<p>You could definitely set up work-specific config as global config, then set up personal config with <code>--local</code> for every personal project separately. It works, but tedious and easy to mess-up. <!-- raw HTML omitted --></p>
<p>Fortunately, starting from Git version 2.13, Git supports conditional configuration includes, you are capable of setting up different configs for different repositories. <!-- raw HTML omitted --></p>
<p>If you add the following config to your global config file: <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="p">[</span><span class="nx">includeIf</span> <span class="s2">&#34;gitdir:~/projects/oss/&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="nx">path</span> <span class="p">=</span> <span class="err">~/</span><span class="p">.</span><span class="nx">gitconfig-oss</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">includeIf</span> <span class="s2">&#34;gitdir:~/projects/work/&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="nx">path</span> <span class="p">=</span> <span class="err">~/</span><span class="p">.</span><span class="nx">gitconfig-work</span>
</span></span></code></pre></div><p>Then Git will look in the <code>~/.gitconfig-oss</code> files for values only if the project you are currently working on matches <code>~/projects/oss/</code>. <!-- raw HTML omitted --></p>
<p><strong><strong>Caution</strong></strong>: If you forget to specify the &ldquo;/&rdquo; at the end of the git dir, e.g. &ldquo;~/projects/oss&rdquo;, Conditional Config won&rsquo;t work! <!-- raw HTML omitted --></p>
<p>Therefore, you could have a &ldquo;work&rdquo; directory and work-specific config here and an &ldquo;oss&rdquo; directory with values for your open source projects, etc. <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/conditional_config.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>Git also supports other filters more than <code>gitdir</code>, you could specify a branch name as an include filter with <code>onbranch</code> <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl">  <span class="err">;</span> <span class="nx">include</span> <span class="nx">only</span> <span class="nx">if</span> <span class="nx">we</span> <span class="nx">are</span> <span class="nx">in</span> <span class="nx">a</span> <span class="nx">worktree</span> <span class="nx">where</span> <span class="nx">foo-branch</span> <span class="nx">is</span>
</span></span><span class="line"><span class="cl"><span class="err">;</span> <span class="nx">currently</span> <span class="nx">checked</span> <span class="nx">out</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">includeIf</span> <span class="s2">&#34;onbranch:foo-branch&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="nx">path</span> <span class="p">=</span> <span class="nx">foo</span><span class="p">.</span><span class="nx">inc</span>
</span></span></code></pre></div><p>Check out <a href="https://git-scm.com/docs/git-config?ref=blog.gitbutler.com#_includes">the Git docs</a> for more details <!-- raw HTML omitted --></p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>

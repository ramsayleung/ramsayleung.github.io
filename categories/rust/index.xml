<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rust on In Pursuit of Hubris</title><link>https://ramsayleung.github.io/categories/rust/</link><description>Recent content in rust on In Pursuit of Hubris</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 29 Apr 2021 11:48:00 +0800</lastBuildDate><atom:link href="https://ramsayleung.github.io/categories/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>Let's make everything iterable</title><link>https://ramsayleung.github.io/post/2021/iterate_through_pagination_api/</link><pubDate>Thu, 29 Apr 2021 11:48:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2021/iterate_through_pagination_api/</guid><description>Iterate through pagination in the Rest API
1 Preface About 4 months ago, icewind1991 created an exciting PR that adding Stream/Iterator based versions of methods with paginated results, which makes enpoints in Rspotify more much ergonomic to use, and Mario completed this PR.
In order to know what this PR brought to us, we have to go back to the orignal story, the paginated results in Spotify&amp;rsquo;s Rest API.
2 Orignal Story Taking the artist_albums as example, it gets Spotify catalog information about an artist&amp;rsquo;s albums.</description></item><item><title>Serde Tricks</title><link>https://ramsayleung.github.io/post/2020/serde_lesson/</link><pubDate>Sun, 13 Dec 2020 22:29:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2020/serde_lesson/</guid><description>The lesson learned from refactoring rspotify
1 Preface Recently, I and Mario are working on refactoring rspotify, trying to improve performance, documentation, error-handling, data model and reduce compile time, to make it easier to use. (For those who has never heard about rspotify, it is a Spotify HTTP SDK implemented in Rust).
I am partly focusing on polishing the data model, based on the issue created by Koxiaet.
Since rspotify is API client for Spotify, it has to handle the request and response from Spotify HTTP API.</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Eshell on 过河卒</title>
    <link>https://ramsayleung.github.io/zh/tags/eshell/</link>
    <description>Recent content in Eshell on 过河卒</description>
    <image>
      <title>过河卒</title>
      <url>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.146.7</generator>
    <language>zh</language>
    <copyright>See this site&amp;rsquo;s source code here, licensed under GPLv3 ·</copyright>
    <lastBuildDate>Thu, 09 Jan 2025 19:20:26 -0800</lastBuildDate>
    <atom:link href="https://ramsayleung.github.io/zh/tags/eshell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Eshell实现fzf的历史命令搜索功能</title>
      <link>https://ramsayleung.github.io/zh/post/2017/search_eshell_history_like_fzf/</link>
      <pubDate>Sun, 17 Dec 2017 15:46:00 -0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2017/search_eshell_history_like_fzf/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; 前言&lt;/h2&gt;
&lt;p&gt;目标: 在=Eshell=中像在bash/zsh中使用=fzf=那般搜索历史命令&lt;/p&gt;
&lt;h2 id=&#34;fzf&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; fzf&lt;/h2&gt;
&lt;p&gt;我的主力Shell 是Eshell, 但是平时我也会用Zsh, 而&lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;fzf&lt;/a&gt; 是一个非常好用的命令行工具，用了=fzf=搜索历史命令:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>目标: 在=Eshell=中像在bash/zsh中使用=fzf=那般搜索历史命令</p>
<h2 id="fzf"><span class="section-num">2</span> fzf</h2>
<p>我的主力Shell 是Eshell, 但是平时我也会用Zsh, 而<a href="https://github.com/junegunn/fzf">fzf</a> 是一个非常好用的命令行工具，用了=fzf=搜索历史命令:</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-ae06a" hidden>
    <label for="zoomCheck-ae06a">
    
    
    <img class="zoomCheck" loading="lazy" src="https://i.imgur.com/pPMxauw.gif"
         alt="Figure 1: fzf"/> 
    
    
    </label><figcaption>
            <p><span class="figure-number">Figure 1: </span>fzf</p>
        </figcaption>
</figure>

<h2 id="eshell"><span class="section-num">3</span> Eshell</h2>
<p>我日常的操作基本都是在 Eshell 上面进行的，不过 Eshell 是没办法直接像 Bash 那样调用 =fzf=来查找命令历史的，所以我希望把这个功能迁移到到Eshell 上面来。</p>
<p>我在 Emacs 使用的补全框架是 <code>Ivy/Counsel</code>,它有一个 <code>counsel-esh-history=的命令可以使用 =Ivy</code> 来搜索命令，但是没办法使用用户已经输入的内容来过滤命令，所以我就在自己折腾了一个</p>
<p><code>counsel-esh-history</code> 命令。效果如下：</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-a5648" hidden>
    <label for="zoomCheck-a5648">
    
    
    <img class="zoomCheck" loading="lazy" src="https://i.imgur.com/3tvGDzW.gif"
         alt="Figure 2: 感觉很不错嘛 :)"/> 
    
    
    </label><figcaption>
            <p><span class="figure-number">Figure 2: </span>感觉很不错嘛 :)</p>
        </figcaption>
</figure>

<h2 id="源代码"><span class="section-num">4</span> 源代码</h2>
<p>得益于 =Ivy=强大的内置函数, 功能实现起来相当便利，完整代码如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">defun</span> <span class="nv">samray/esh-history</span> <span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Interactive search eshell history.&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nv">interactive</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nf">require</span> <span class="ss">&#39;em-hist</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nv">save-excursion</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="k">let*</span> <span class="p">((</span><span class="nv">start-pos</span> <span class="p">(</span><span class="nv">eshell-bol</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">           <span class="p">(</span><span class="nv">end-pos</span> <span class="p">(</span><span class="nv">point-at-eol</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">           <span class="p">(</span><span class="nv">input</span> <span class="p">(</span><span class="nv">buffer-substring-no-properties</span> <span class="nv">start-pos</span> <span class="nv">end-pos</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="k">let*</span> <span class="p">((</span><span class="nv">command</span> <span class="p">(</span><span class="nv">ivy-read</span> <span class="s">&#34;Command: &#34;</span>
</span></span><span class="line"><span class="cl">                                <span class="p">(</span><span class="nv">delete-dups</span>
</span></span><span class="line"><span class="cl">                                 <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nf">&gt;</span> <span class="p">(</span><span class="nv">ring-size</span> <span class="nv">eshell-history-ring</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                                   <span class="p">(</span><span class="nv">ring-elements</span> <span class="nv">eshell-history-ring</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">                                <span class="ss">:preselect</span> <span class="nv">input</span>
</span></span><span class="line"><span class="cl">                                <span class="ss">:action</span> <span class="nf">#&#39;</span><span class="nv">ivy-completion-in-region-action</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">             <span class="p">(</span><span class="nv">cursor-move</span> <span class="p">(</span><span class="nf">length</span> <span class="nv">command</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="nv">kill-region</span> <span class="p">(</span><span class="nf">+</span> <span class="nv">start-pos</span> <span class="nv">cursor-move</span><span class="p">)</span> <span class="p">(</span><span class="nf">+</span> <span class="nv">end-pos</span> <span class="nv">cursor-move</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="p">)))</span>
</span></span><span class="line"><span class="cl">  <span class="c1">;; move cursor to eol</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nv">end-of-line</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>代码不是很复杂, 主要功能是获取用户输入的命令, 然后把所有的历史命令读取出来,最后使用=ivy-read=内置的=ivy-completion-in-region-action=功能, 用用户的输入的命令与历史命令进行匹配, 由用户选择最终的命令.</p>
<p>=ivy-read=是Emacs内置=completing-read=的函数的强化, 关于=ivy-read=具体用法可以参考文档<a href="https://oremacs.com/swiper/#getting-started">ivy-read</a>.</p>
<h2 id="总结"><span class="section-num">5</span> 总结</h2>
<p>最后, 我也顺便把代码分享到 <a href="https://www.reddit.com/r/emacs/comments/7k54px/snippet_share_make_eshell_search_command_history/">Emacs社区</a>, 而 <a href="https://github.com/manateelazycat">manateelazycat</a>也把这段代码的功能加入到<a href="https://github.com/manateelazycat/aweshell/commit/ecaddac98b87f881910dbee8b51a98f00b6d9d5d">aweshell</a>, Oh yeah !</p>
<div center class="qr-container">
<img src="/ox-hugo/qrcode_gh_e06d750e626f_1.jpg" alt="qrcode_gh_e06d750e626f_1.jpg" width="160px" height="160px" center="t" class="qr-container" />
公号同步更新，欢迎关注👻
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Eshell提示符优化</title>
      <link>https://ramsayleung.github.io/zh/post/2017/tweak_eshell_prompt/</link>
      <pubDate>Wed, 07 Jun 2017 00:00:00 -0700</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2017/tweak_eshell_prompt/</guid>
      <description>Tweak with Emacs shell prompt</description>
      <content:encoded><![CDATA[<h2 id="发现帅气的提示符"><span class="section-num">1</span> 发现帅气的提示符</h2>
<p>近日，我在浏览 <a href="https://www.reddit.com/r/emacs/comments/6f0rkz/my_fancy_eshell_prompt/">Reddit</a> 的时候，发现了一位 Emacs 用户把他的 Eshell 提示符修改得很帅，如图：</p>
<p><a href="/ox-hugo/eshell_prompt.png"><img loading="lazy" src="/ox-hugo/eshell_prompt.png"></a>
本着拿来主义的想法，我就直接把这位小哥的代码添加到了我的配置文件里面：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">setq</span> <span class="nv">eshell-prompt-function</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="nb">lambda</span> <span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="nf">concat</span>
</span></span><span class="line"><span class="cl">         <span class="p">(</span><span class="nf">propertize</span> <span class="s">&#34;┌─[&#34;</span> <span class="ss">&#39;face</span> <span class="o">`</span><span class="p">(</span><span class="nb">:foreground</span> <span class="s">&#34;green&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">         <span class="p">(</span><span class="nf">propertize</span> <span class="p">(</span><span class="nf">user-login-name</span><span class="p">)</span> <span class="ss">&#39;face</span> <span class="o">`</span><span class="p">(</span><span class="nb">:foreground</span> <span class="s">&#34;red&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">         <span class="p">(</span><span class="nf">propertize</span> <span class="s">&#34;@&#34;</span> <span class="ss">&#39;face</span> <span class="o">`</span><span class="p">(</span><span class="nb">:foreground</span> <span class="s">&#34;green&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">         <span class="p">(</span><span class="nf">propertize</span> <span class="p">(</span><span class="nf">system-name</span><span class="p">)</span> <span class="ss">&#39;face</span> <span class="o">`</span><span class="p">(</span><span class="nb">:foreground</span> <span class="s">&#34;blue&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">         <span class="p">(</span><span class="nf">propertize</span> <span class="s">&#34;]──[&#34;</span> <span class="ss">&#39;face</span> <span class="o">`</span><span class="p">(</span><span class="nb">:foreground</span> <span class="s">&#34;green&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">         <span class="p">(</span><span class="nf">propertize</span> <span class="p">(</span><span class="nf">format-time-string</span> <span class="s">&#34;%H:%M&#34;</span> <span class="p">(</span><span class="nf">current-time</span><span class="p">))</span> <span class="ss">&#39;face</span> <span class="o">`</span><span class="p">(</span><span class="nb">:foreground</span> <span class="s">&#34;yellow&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">         <span class="p">(</span><span class="nf">propertize</span> <span class="s">&#34;]──[&#34;</span> <span class="ss">&#39;face</span> <span class="o">`</span><span class="p">(</span><span class="nb">:foreground</span> <span class="s">&#34;green&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">         <span class="p">(</span><span class="nf">propertize</span> <span class="p">(</span><span class="nf">concat</span> <span class="p">(</span><span class="nv">eshell/pwd</span><span class="p">))</span> <span class="ss">&#39;face</span> <span class="o">`</span><span class="p">(</span><span class="nb">:foreground</span> <span class="s">&#34;white&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">         <span class="p">(</span><span class="nf">propertize</span> <span class="s">&#34;]\n&#34;</span> <span class="ss">&#39;face</span> <span class="o">`</span><span class="p">(</span><span class="nb">:foreground</span> <span class="s">&#34;green&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">         <span class="p">(</span><span class="nf">propertize</span> <span class="s">&#34;└─&gt;&#34;</span> <span class="ss">&#39;face</span> <span class="o">`</span><span class="p">(</span><span class="nb">:foreground</span> <span class="s">&#34;green&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">         <span class="p">(</span><span class="nf">propertize</span> <span class="p">(</span><span class="nb">if</span> <span class="p">(</span><span class="nf">=</span> <span class="p">(</span><span class="nf">user-uid</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span> <span class="s">&#34; # &#34;</span> <span class="s">&#34; $ &#34;</span><span class="p">)</span> <span class="ss">&#39;face</span> <span class="o">`</span><span class="p">(</span><span class="nb">:foreground</span> <span class="s">&#34;green&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">         <span class="p">)))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>效果自然是很 sexy.</p>
<h2 id="与原有提示符冲突"><span class="section-num">2</span> 与原有提示符冲突</h2>
<p>但是我原来使用的 <a href="https://github.com/kaihaosw/eshell-prompt-extras">eshell-prompt-extra</a> 的效果就被覆盖了。而 <code>eshell_prompt_extra</code> 可以提供的额外信息非常多，包括：git, python virtualenv, 以及远程登录时的主机信息，如图：</p>

<figure><a href="/ox-hugo/eshell_extra_prompt.png">
    
    
    <input type="checkbox" id="zoomCheck-0fac0" hidden>
    <label for="zoomCheck-0fac0">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/eshell_extra_prompt.png"/> 
    
    
    </label></a>
</figure>

<p>如果用上这个 sexy 的提示符，eshell-extra-prompt 的额外的信息就不能显示，感觉好亏:(</p>
<p>鱼和熊掌我都想要，似乎太贪心了？怎么办，自己去修改 <code>eshell_prompt_extra</code> 的<a href="https://github.com/kaihaosw/eshell-prompt-extras/blob/master/eshell-prompt-extras.el">源码</a> :).</p>
<h2 id="折腾源码"><span class="section-num">3</span> 折腾源码</h2>
<p><code>eshell_prompt_extra</code> 这个包注释加上全部代码也只是 400 行，代码也写得很清晰. 其中大部份是辅助函数，而 Eshell 的提示符效果是通过两个 eshell-theme 函数来实现的。use-package 的配置：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">use-package</span> <span class="nv">eshell-prompt-extras</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:ensure</span> <span class="no">t</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:load-path</span> <span class="s">&#34;~/Code/github/eshell-prompt-extras&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:config</span> <span class="p">(</span><span class="nb">progn</span>
</span></span><span class="line"><span class="cl">            <span class="p">(</span><span class="nb">with-eval-after-load</span> <span class="s">&#34;esh-opt&#34;</span>
</span></span><span class="line"><span class="cl">              <span class="p">(</span><span class="nb">use-package</span> <span class="nv">virtualenvwrapper</span> <span class="nb">:ensure</span> <span class="no">t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">              <span class="p">(</span><span class="nv">venv-initialize-eshell</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">              <span class="p">(</span><span class="nf">autoload</span> <span class="ss">&#39;epe-theme-lambda</span> <span class="s">&#34;eshell-prompt-extras&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">              <span class="p">(</span><span class="nb">setq</span> <span class="nv">eshell-highlight-prompt</span> <span class="no">nil</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">eshell-prompt-function</span> <span class="ss">&#39;epe-theme-lambda</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">            <span class="p">))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>而 <code>epe-theme-lambda</code> 的代码如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">defun</span> <span class="nv">epe-theme-lambda</span> <span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;A eshell-prompt lambda theme.&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">setq</span> <span class="nv">eshell-prompt-regexp</span> <span class="s">&#34;^[^#\nλ]*[#λ] &#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nf">concat</span>
</span></span><span class="line"><span class="cl">   <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nv">epe-remote-p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nv">epe-colorize-with-face</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="nf">concat</span> <span class="p">(</span><span class="nv">epe-remote-user</span><span class="p">)</span> <span class="s">&#34;@&#34;</span> <span class="p">(</span><span class="nv">epe-remote-host</span><span class="p">)</span> <span class="s">&#34; &#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="ss">&#39;epe-remote-face</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">   <span class="p">(</span><span class="nb">when</span> <span class="nv">epe-show-python-info</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nf">fboundp</span> <span class="ss">&#39;epe-venv-p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">       <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nb">and</span> <span class="p">(</span><span class="nv">epe-venv-p</span><span class="p">)</span> <span class="nv">venv-current-name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">         <span class="p">(</span><span class="nv">epe-colorize-with-face</span>
</span></span><span class="line"><span class="cl">          <span class="p">(</span><span class="nf">concat</span> <span class="s">&#34;(&#34;</span> <span class="nv">venv-current-name</span> <span class="s">&#34;) &#34;</span><span class="p">)</span> <span class="ss">&#39;epe-venv-face</span><span class="p">))))</span>
</span></span><span class="line"><span class="cl">   <span class="p">(</span><span class="nb">let</span> <span class="p">((</span><span class="nv">f</span> <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nf">eq</span> <span class="nv">epe-path-style</span> <span class="ss">&#39;fish</span><span class="p">)</span> <span class="ss">&#39;epe-fish-path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                  <span class="p">((</span><span class="nf">eq</span> <span class="nv">epe-path-style</span> <span class="ss">&#39;single</span><span class="p">)</span> <span class="ss">&#39;epe-abbrev-dir-name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                  <span class="p">((</span><span class="nf">eq</span> <span class="nv">epe-path-style</span> <span class="ss">&#39;full</span><span class="p">)</span> <span class="ss">&#39;abbreviate-file-name</span><span class="p">))))</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nv">epe-colorize-with-face</span> <span class="p">(</span><span class="nf">funcall</span> <span class="nv">f</span> <span class="p">(</span><span class="nv">eshell/pwd</span><span class="p">))</span> <span class="ss">&#39;epe-dir-face</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">   <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nv">epe-git-p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nf">concat</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="nv">epe-colorize-with-face</span> <span class="s">&#34;:&#34;</span> <span class="ss">&#39;epe-dir-face</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="nv">epe-colorize-with-face</span>
</span></span><span class="line"><span class="cl">       <span class="p">(</span><span class="nf">concat</span> <span class="p">(</span><span class="nv">epe-git-branch</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">               <span class="p">(</span><span class="nv">epe-git-dirty</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">               <span class="p">(</span><span class="nv">epe-git-untracked</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">               <span class="p">(</span><span class="nb">let</span> <span class="p">((</span><span class="nv">unpushed</span> <span class="p">(</span><span class="nv">epe-git-unpushed-number</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">                 <span class="p">(</span><span class="nb">unless</span> <span class="p">(</span><span class="nf">=</span> <span class="nv">unpushed</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                   <span class="p">(</span><span class="nf">concat</span> <span class="s">&#34;:&#34;</span> <span class="p">(</span><span class="nf">number-to-string</span> <span class="nv">unpushed</span><span class="p">)))))</span>
</span></span><span class="line"><span class="cl">       <span class="ss">&#39;epe-git-face</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">   <span class="p">(</span><span class="nv">epe-colorize-with-face</span> <span class="s">&#34; λ&#34;</span> <span class="ss">&#39;epe-symbol-face</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">(</span><span class="nv">epe-colorize-with-face</span> <span class="p">(</span><span class="nb">if</span> <span class="p">(</span><span class="nf">=</span> <span class="p">(</span><span class="nf">user-uid</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span> <span class="s">&#34;#&#34;</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                           <span class="ss">&#39;epe-sudo-symbol-face</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="s">&#34; &#34;</span><span class="p">))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>代码主要逻辑是调用之前定义的辅助函数，判断是否需要显示 git, python, 远程主机等信息，然后对相应的提示符进行拼接。</p>
<p>而其中出现得比较频繁的 <code>epe-colorize-with-face</code> 就是作者定义的一个宏(macro), 用来显示字符串以及对应的 face(其实就是不同的颜色啦). 看懂了代码就好办了，现在就可以自己添加一个 Eshell 主题。</p>
<h3 id="定义所需的-face"><span class="section-num">3.1</span> 定义所需的 face</h3>
<p>因为我需要显示的 face(颜色), <code>eshell-extra-prompt</code> 并没有定义，所以就只好自己动手啦：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">defface</span> <span class="nv">epe-pipeline-delimiter-face</span>
</span></span><span class="line"><span class="cl">  <span class="o">&#39;</span><span class="p">((</span><span class="no">t</span> <span class="nb">:foreground</span> <span class="s">&#34;green&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Face for pipeline theme delimiter.&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:group</span> <span class="ss">&#39;epe</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">defface</span> <span class="nv">epe-pipeline-user-face</span>
</span></span><span class="line"><span class="cl">  <span class="o">&#39;</span><span class="p">((</span><span class="no">t</span> <span class="nb">:foreground</span> <span class="s">&#34;red&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Face for user in pipeline theme.&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:group</span> <span class="ss">&#39;epe</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">defface</span> <span class="nv">epe-pipeline-host-face</span>
</span></span><span class="line"><span class="cl">  <span class="o">&#39;</span><span class="p">((</span><span class="no">t</span> <span class="nb">:foreground</span> <span class="s">&#34;blue&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Face for host in pipeline theme.&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:group</span> <span class="ss">&#39;epe</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">defface</span> <span class="nv">epe-pipeline-time-face</span>
</span></span><span class="line"><span class="cl">  <span class="o">&#39;</span><span class="p">((</span><span class="no">t</span> <span class="nb">:foreground</span> <span class="s">&#34;yellow&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Face for time in pipeline theme.&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:group</span> <span class="ss">&#39;epe</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后就是按着原有的 Eshell 提示符来组装一个新的 Eshell 主题了，然后把这个主题定义成 pipeline (其实是我自己也没想出比较新颖的名字啦):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">defun</span> <span class="nv">epe-theme-pipeline</span> <span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;A eshell-prompt theme with full path, smiliar to oh-my-zsh theme.&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">setq</span> <span class="nv">eshell-prompt-regexp</span> <span class="s">&#34;^[^#\nλ]* λ[#]* &#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nf">concat</span>
</span></span><span class="line"><span class="cl">   <span class="p">(</span><span class="nb">if</span> <span class="p">(</span><span class="nv">epe-remote-p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">       <span class="p">(</span><span class="nb">progn</span>
</span></span><span class="line"><span class="cl">         <span class="p">(</span><span class="nf">concat</span>
</span></span><span class="line"><span class="cl">          <span class="p">(</span><span class="nv">epe-colorize-with-face</span> <span class="s">&#34;┌─[&#34;</span> <span class="ss">&#39;epe-pipeline-delimiter-face</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="p">(</span><span class="nv">epe-colorize-with-face</span> <span class="p">(</span><span class="nv">epe-remote-user</span><span class="p">)</span> <span class="ss">&#39;epe-pipeline-user-face</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="p">(</span><span class="nv">epe-colorize-with-face</span> <span class="s">&#34;@&#34;</span> <span class="ss">&#39;epe-pipeline-delimiter-face</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="p">(</span><span class="nv">epe-colorize-with-face</span> <span class="p">(</span><span class="nv">epe-remote-host</span><span class="p">)</span> <span class="ss">&#39;epe-pipeline-host-face</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">         <span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nb">progn</span>
</span></span><span class="line"><span class="cl">       <span class="p">(</span><span class="nf">concat</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="nv">epe-colorize-with-face</span> <span class="s">&#34;┌─[&#34;</span> <span class="ss">&#39;epe-pipeline-delimiter-face</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="nv">epe-colorize-with-face</span> <span class="p">(</span><span class="nf">user-login-name</span><span class="p">)</span> <span class="ss">&#39;epe-pipeline-user-face</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="nv">epe-colorize-with-face</span> <span class="s">&#34;@&#34;</span> <span class="ss">&#39;epe-pipeline-delimiter-face</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="nv">epe-colorize-with-face</span> <span class="p">(</span><span class="nf">system-name</span><span class="p">)</span> <span class="ss">&#39;epe-pipeline-host-face</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">     <span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">(</span><span class="nf">concat</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="nv">epe-colorize-with-face</span> <span class="s">&#34;]──[&#34;</span> <span class="ss">&#39;epe-pipeline-delimiter-face</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="nv">epe-colorize-with-face</span> <span class="p">(</span><span class="nf">format-time-string</span> <span class="s">&#34;%H:%M&#34;</span> <span class="p">(</span><span class="nf">current-time</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                            <span class="ss">&#39;epe-pipeline-time-face</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="nv">epe-colorize-with-face</span> <span class="s">&#34;]──[&#34;</span> <span class="ss">&#39;epe-pipeline-delimiter-face</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="nv">epe-colorize-with-face</span> <span class="p">(</span><span class="nf">concat</span> <span class="p">(</span><span class="nv">eshell/pwd</span><span class="p">))</span> <span class="ss">&#39;epe-dir-face</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="nv">epe-colorize-with-face</span>  <span class="s">&#34;]\n&#34;</span> <span class="ss">&#39;epe-pipeline-delimiter-face</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="nv">epe-colorize-with-face</span> <span class="s">&#34;└─&gt;&#34;</span> <span class="ss">&#39;epe-pipeline-delimiter-face</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">(</span><span class="nb">when</span> <span class="nv">epe-show-python-info</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nf">fboundp</span> <span class="ss">&#39;epe-venv-p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">       <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nb">and</span> <span class="p">(</span><span class="nv">epe-venv-p</span><span class="p">)</span> <span class="nv">venv-current-name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">         <span class="p">(</span><span class="nv">epe-colorize-with-face</span>
</span></span><span class="line"><span class="cl">          <span class="p">(</span><span class="nf">concat</span> <span class="s">&#34;(&#34;</span> <span class="nv">venv-current-name</span> <span class="s">&#34;) &#34;</span><span class="p">)</span> <span class="ss">&#39;epe-venv-face</span><span class="p">))))</span>
</span></span><span class="line"><span class="cl">   <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nv">epe-git-p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nf">concat</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="nv">epe-colorize-with-face</span> <span class="s">&#34;:&#34;</span> <span class="ss">&#39;epe-dir-face</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="nv">epe-colorize-with-face</span>
</span></span><span class="line"><span class="cl">       <span class="p">(</span><span class="nf">concat</span> <span class="p">(</span><span class="nv">epe-git-branch</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">               <span class="p">(</span><span class="nv">epe-git-dirty</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">               <span class="p">(</span><span class="nv">epe-git-untracked</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">               <span class="p">(</span><span class="nb">let</span> <span class="p">((</span><span class="nv">unpushed</span> <span class="p">(</span><span class="nv">epe-git-unpushed-number</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">                 <span class="p">(</span><span class="nb">unless</span> <span class="p">(</span><span class="nf">=</span> <span class="nv">unpushed</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                   <span class="p">(</span><span class="nf">concat</span> <span class="s">&#34;:&#34;</span> <span class="p">(</span><span class="nf">number-to-string</span> <span class="nv">unpushed</span><span class="p">)))))</span>
</span></span><span class="line"><span class="cl">       <span class="ss">&#39;epe-git-face</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">   <span class="p">(</span><span class="nv">epe-colorize-with-face</span> <span class="s">&#34; λ&#34;</span> <span class="ss">&#39;epe-symbol-face</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">(</span><span class="nv">epe-colorize-with-face</span> <span class="p">(</span><span class="nb">if</span> <span class="p">(</span><span class="nf">=</span> <span class="p">(</span><span class="nf">user-uid</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span> <span class="s">&#34;#&#34;</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                           <span class="ss">&#39;epe-sudo-symbol-face</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="s">&#34; &#34;</span><span class="p">))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="总结"><span class="section-num">4</span> 总结</h2>
<p>这样一个新的 Eshell 主题就完工了，然后我给 <code>eshell-extra-prompt</code> 发了一个<a href="https://github.com/kaihaosw/eshell-prompt-extras/pull/16">Pull Request</a>, 最终效果如下：</p>

<figure><a href="/ox-hugo/epe.png">
    
    
    <input type="checkbox" id="zoomCheck-45cf5" hidden>
    <label for="zoomCheck-45cf5">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/epe.png"/> 
    
    
    </label></a>
</figure>

<p>Enjoy Emacs, Enjor Tweaking :)</p>
<div center class="qr-container">
<img src="/ox-hugo/qrcode_gh_e06d750e626f_1.jpg" alt="qrcode_gh_e06d750e626f_1.jpg" width="160px" height="160px" center="t" class="qr-container" />
公号同步更新，欢迎关注👻
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Shell神器fasd与Eshell的不期而遇</title>
      <link>https://ramsayleung.github.io/zh/post/2017/fasd-meet-eshell/</link>
      <pubDate>Thu, 02 Mar 2017 00:00:00 -0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2017/fasd-meet-eshell/</guid>
      <description>An introduction about tweaking eshell with fasd</description>
      <content:encoded><![CDATA[<blockquote>
<p>fasd - quick access to files and directory</p></blockquote>
<p>之前一位 Windows 用户看到我在 Shell 下面的操作，他很奇怪，觉得明明已经有图形化界面，为什么还要用这种命令行呢，直接用鼠标点击不就很好了么。</p>
<p>我觉得很难直接跟他解释，因为他没有用过Linux/Unix,完全不熟悉命令行，不知道其强大之处，其高效率是图形化界面完全无法比拟的(当然，命令行的学习成本和学习曲线肯定比图型化界面高), So I live in terminal.</p>
<p>而今天我要介绍的神器 fasd 就是可以让命令行操作变得更加高效</p>
<h2 id="fasd"><span class="section-num">1</span> Fasd</h2>
<p>在 Shell 下面有非常多的命令操作是与文件和目录相关的，如果你要进入到另外一个目 录你可以使用相对或者绝对路径来访问该目录，但是如果这是一个与当前目录不相关的目 录你就只能通过绝对路径来访问。</p>
<p>以我自己的目录为例，当前目录是 <strong><em>home/samray</em>.emacs.d/elisp/</strong> ,我希望访问 <strong>Document</strong> 目录下一个的子目录 <strong>Python</strong>, 我可以通过下面的命令来访问：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">cd</span> ~/Document/Programming/Python
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> /home/samray/Document/Programming/Python
</span></span></code></pre></td></tr></table>
</div>
</div><p>这就是我需要的命令，虽然可以通过 <strong>tab</strong> 进行目录名的补全，但是我还是觉得要输入的东西太多了(正如 Larry Wall 所说，懒惰是程序员的美德). 然后，我发现了 <a href="https://github.com/clvv/fasd">Fasd </a>这个神器。它可以让我只输入 <strong>Python</strong> 就进入到我想访问的 <strong>Python</strong> 目录，</p>
<p>神奇吧！:)</p>
<hr>
<p>Fasd以访问的频繁程度和最近是否有访问对文件和目录分配优先级，然后通过判断已访问的文件以及其优先级来切换目录或者打开文件，所以如果你之前已经访问过某个目录.</p>
<p>那么 你很容易就可以切换到那个目录</p>
<h3 id="常用选项"><span class="section-num">1.1</span> 常用选项</h3>
<ul>
<li>
<p><strong>-a(any)</strong>: 匹配文件和目录</p>
</li>
<li>
<p><strong>-i(interactive)</strong>: 以交互的方式选择文件或者目录</p>
</li>
<li>
<p><strong>-s(show/search)</strong>: 按照优先级展示文件或者目录</p>
</li>
<li>
<p><strong>-e &lt;cmd&gt;</strong>:对匹配的文件调用命令&lt;cmd&gt;</p>
</li>
<li>
<p><strong>-d</strong>:只匹配目录</p>
</li>
<li>
<p><strong>-f</strong>:只匹配文件
Fasd 文档还建议你为 fasd的命令选项设置别名</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">a</span><span class="o">=</span><span class="s1">&#39;fasd -a&#39;</span>        <span class="c1"># any</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">s</span><span class="o">=</span><span class="s1">&#39;fasd -si&#39;</span>       <span class="c1"># show / search / select</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">d</span><span class="o">=</span><span class="s1">&#39;fasd -d&#39;</span>        <span class="c1"># directory</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">f</span><span class="o">=</span><span class="s1">&#39;fasd -f&#39;</span>        <span class="c1"># file</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">sd</span><span class="o">=</span><span class="s1">&#39;fasd -sid&#39;</span>     <span class="c1"># interactive directory selection</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">sf</span><span class="o">=</span><span class="s1">&#39;fasd -sif&#39;</span>     <span class="c1"># interactive file selection</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">z</span><span class="o">=</span><span class="s1">&#39;fasd_cd -d&#39;</span>     <span class="c1"># cd, same functionality as j in autojump</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">zz</span><span class="o">=</span><span class="s1">&#39;fasd_cd -d -i&#39;</span> <span class="c1"># cd with interactive selection</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这样你就可以通过 <strong>z some-dir</strong> 直接进入到某个目录或者 <strong>zz some-dir</strong> 选择进入有多个匹配的特定目录。</p>
<p>Fasd 还会判断应该显示所有的匹配选项或者是直接选择最佳匹配. 例如你也可以将fasd配合 <em>subshell</em> 使用，例如打开 <strong>foo</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">vim <span class="sb">`</span>f foo<span class="sb">`</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>又或者打开  <strong>/etc/rc.conf</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">vim <span class="sb">`</span>f rc conf<span class="sb">`</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="例子"><span class="section-num">1.2</span> 例子</h3>
<p>你可以将fasd 配合正则表达式使用，例如列举以 <em>py</em> 结尾的最近访问的文件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">f py$
</span></span></code></pre></td></tr></table>
</div>
</div><p>又或者使用Emacs 打开最近频繁访问的文件 <em>bar</em></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">f -e emacs bar
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="fasd-plus-eshell"><span class="section-num">2</span> Fasd +Eshell</h2>
<p>fasd 真的可以大幅度提高效率，但是我有点不太满意的是，我是个 Emacser, 我的操作基本是在 Emacs 里完成的，而我在 Emacs里面使用的 shell 是 Eshell,Eshell 似乎不能与 fasd 无缝结合，似乎可以折腾一下。</p>
<hr>
<p><strong>z</strong> 和 <strong>zz</strong> 命令是无法在Eshell 里面运行，因为 <strong>z</strong> 是 <strong>fasd_cd</strong> 的别名，而*fasd_cd* 是一个shell script 函数，Eshell无法运行该函数，代码如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">fasd_cd <span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">[</span> <span class="nv">$#</span> -le <span class="m">1</span> <span class="o">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">then</span>
</span></span><span class="line"><span class="cl">        fasd <span class="s2">&#34;</span><span class="nv">$@</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span>
</span></span><span class="line"><span class="cl">        <span class="nb">local</span> <span class="nv">_fasd_ret</span><span class="o">=</span><span class="s2">&#34;</span><span class="k">$(</span>fasd -e <span class="s1">&#39;printf %s&#39;</span> <span class="s2">&#34;</span><span class="nv">$@</span><span class="s2">&#34;</span><span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="o">[</span> -z <span class="s2">&#34;</span><span class="nv">$_fasd_ret</span><span class="s2">&#34;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="k">return</span>
</span></span><span class="line"><span class="cl">        <span class="o">[</span> -d <span class="s2">&#34;</span><span class="nv">$_fasd_ret</span><span class="s2">&#34;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">cd</span> <span class="s2">&#34;</span><span class="nv">$_fasd_ret</span><span class="s2">&#34;</span> <span class="o">||</span> <span class="nb">printf</span> %s<span class="se">\n</span> <span class="s2">&#34;</span><span class="nv">$_fasd_ret</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Eshell无法运行该函数，因为Eshell文档的匮乏，我也不知道如何编写跟上面代码等价的 &ldquo;Eshell script&rdquo;,所以就用 elisp 写一段同样功能的函数好了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">defun</span> <span class="nv">samray/eshell-fasd-z</span> <span class="p">(</span><span class="kp">&amp;rest</span> <span class="nv">args</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Use fasd to change directory more effectively by passing ARGS.&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">setq</span> <span class="nv">args</span> <span class="p">(</span><span class="nv">eshell-flatten-list</span> <span class="nv">args</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">let*</span> <span class="p">((</span><span class="nv">fasd</span> <span class="p">(</span><span class="nf">concat</span> <span class="s">&#34;fasd &#34;</span> <span class="p">(</span><span class="nf">car</span> <span class="nv">args</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">         <span class="p">(</span><span class="nv">fasd-result</span> <span class="p">(</span><span class="nv">shell-command-to-string</span> <span class="nv">fasd</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">         <span class="p">(</span><span class="nv">path</span> <span class="p">(</span><span class="nv">replace-regexp-in-string</span> <span class="s">&#34;\n$&#34;</span> <span class="s">&#34;&#34;</span> <span class="nv">fasd-result</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">         <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="nv">eshell/cd</span> <span class="nv">path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="nv">eshell/echo</span> <span class="nv">path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>函数功能很快就写好了，实现了 <strong>z</strong> 的功能，但是原来的代码一直不能正常运行，折腾了一个多小时都没解决，输出什么都正常，最后 debug 发现是因为显示的路径后面多了一个换行符即 <strong>/home/samray</strong> 变成了 <strong>/home/samray\n</strong>,而输出换行符又不会显示，真
的坑。</p>
<p>最后为命令赋予别名就可以像在 <strong>zsh</strong> 下那样工作了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">alias</span> z <span class="s1">&#39;samray/shell-fasd-z $1&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<p>更多的用法就要查阅官方文档了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">man fasd
</span></span></code></pre></td></tr></table>
</div>
</div><p>Enjoy Emacs and Shell :)</p>
<p>参考：
<a href="https://github.com/clvv/fasd">https://github.com/clvv/fasd</a></p>
<div center class="qr-container">
<img src="/ox-hugo/qrcode_gh_e06d750e626f_1.jpg" alt="qrcode_gh_e06d750e626f_1.jpg" width="160px" height="160px" center="t" class="qr-container" />
公号同步更新，欢迎关注👻
</div>
]]></content:encoded>
    </item>
    <item>
      <title>(翻译)Mastering Eshell</title>
      <link>https://ramsayleung.github.io/zh/post/2017/master_eshell/</link>
      <pubDate>Tue, 28 Feb 2017 00:00:00 -0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2017/master_eshell/</guid>
      <description>An complete instroduction about Eshell</description>
      <content:encoded><![CDATA[<p>Emacs 支持若干种shell,但是就功能丰富度，以及与Emacs 的集成程度而言，
无一能望Eshell项背。</p>
<p>Eshell 是一个完全由Emacs Lisp 编写的shell,但是不要以为这样Eshell在功能上就会先天不足，它能代替绝大部分GNU核心功能集和Bourne shell家族的命令以及相关特性。</p>
<p>此外，通过用Emacs Lisp 重写了类似 <code>ls</code> 和 <code>cp</code> 等常用命令，使Eshell 可以成为真正的跨平台Shell.</p>
<p>但是，Eshell 有一个很大的不足，那就是Eshell 严重缺乏文档与之形成鲜明对比的是，Emacs 及其生态都拥有丰富的文档</p>
<h2 id="overview">Overview</h2>
<p>与Emacs 中的其他shell 不一样的是，Eshell 不是继承默认与的子进程进行交互的 <code>comint-mode</code>
因为Eshell 不是一个子进程，所以它就没有必要使用 <code>comint-mode</code> 了；不过似乎这是件
好事，因为这意味着 <code>comint-mode</code> 的例程和钩子是不会作用于Eshell 的。</p>
<p>此外，几乎所有 <code>comint-mode</code> 的常用命令，都在Eshell 中重新实现了，并且使用相同的按键绑定.</p>
<p>当然，也有为数不多的按键绑定没有迁移到Eshell,例如在Eshll 中搜索历史命令的=comint-history-isearch-backward-regexp= 是绑定到了 <code>M-r</code>,
而原来shell中相同功能的命令的按键就是 <code>C-r</code> Eshell 可以在所有的平台都正常工作.</p>
<p>其实和Eshell 真正进行交互的是一个通用的中间件(即 Emacs Lisp/C 的一个库),而该中间件又会跟你的操作系统进行通信，处理例如复制文件 等相关操作。</p>
<p>此外，这个中间件甚至支持在Eshell 中使用 <code>Tramp</code> 的特性, 由于Emacs 是血统纯正的Unix 产物，Eshell 是可以重现例如bash 等传统Unix shell 以及 其他GNU 工具链的同样功能的。</p>
<p>此外，如果你使用的是Windows,你应该感到庆幸，因为你再也不用折腾 <code>cygwin</code> ,也不需要为跨平台移植Emacs 而担忧依赖问题。</p>
<p>事实上，对比=cygwin= 的bash,在很多方面，Eshell 对Windows 的支持是做得更好滴。</p>
<p>例如，你不再需要 <code>/cygdrive/c</code> 来扩展相应的功能，因为Eshell 自身就支持Windows/MS-DOS 的路径
(所以 <code>cd D:</code> 或者 <code>D:</code> 同样都可以进入D 盘)</p>
<p>虽然Eshell 有很多好处，但是我还是要列出那些让人们很困惑的观点(或者说是误解):</p>
<ul>
<li>Eshell 不是一个终端模拟器，它不是跟shell 进行通信，事实上，它就是一个shell. 它做的所有工作，无论是在屏幕展示数据，还是获取目录里面的信息，它都是通过Emacs 实现的，然后Emacs会再跟你的操作系统进行通信</li>
<li>由于Eshell 跟其他进程通信的方式 (特别是异步通信),所以可能导致它的缓冲区(Buffers) 和其他中断操作出现问题</li>
<li>Eshell 无法直接支持交互命令 (按照Eshell 的说法，叫做“可视化命令”),例如top ,所以你一定要告诉Eshll应在单独的 <code>ansi-term</code> 实例运行此类命令</li>
<li>它不是 <code>bash</code> 或者 <code>zsh</code>,更不是 <code>csh</code>,所以不要像操作它们那样操作Eshell 即使Eshell 跟它们真的很像。因此，如果你想更加高效地使用Eshell,你最好把它当作一个不一样的shell</li>
</ul>
<h2 id="commands">Commands</h2>
<p>Eshell 是可以调用几乎所有的已加载的elisp 函数的；这种灵活性是其它shell 无法想象的也是它们力所不能及的。</p>
<p>事实上，这种在shell 里面跟elisp 函数结合的玩法理应得到更多人的支持和推崇，因为它真的很酷(当然也很有用).假如你想在Emacs 里面打开 <code>foobar.txt</code> ,你只需调用 <code>find-file foobar.txt</code>,Eshell 就会调用对应的 <code>(find-file &quot;foobar.txt&quot;)</code> ,并为你打开文件</p>
<h2 id="technical-details">Technical Details</h2>
<p>所有被Eshell 执行的命令都有一个执行的顺序，这是必需传递给Emacs 的有序列表，
因为这个列表决定了Eshell 的哪一部分应该处理该命令的。</p>
<p>如果该列表中没有找到可以执行你的操作的函数或者对应命令，你会被告知，你输入的是无效命令</p>
<p>假设 你想调用 <code>cp</code> 命令，调用顺序如下：</p>
<ol>
<li>完整的路径 (即 <code>/bin/cp</code>),在 <code>/bin</code> 目录下执行 <code>cp</code></li>
<li>寻找命令的前缀， <em>eshell-explict-command-char</em> (默认值是 &ldquo;=&rdquo;),如果有前缀的话,那么，在搜索路径寻找对应的命令</li>
<li>寻找shell 命令的别名 (<code>alias</code> 命令)</li>
<li>在搜索路径寻找 <code>cp</code> ,即 <code>$PATH</code> (或者 <code>eshell-path-env</code>) 定义的路径</li>
<li>寻找叫做 <code>cp</code> 的Lisp 函数 或者 叫 <code>eshell/cp</code> 的elisp 函数</li>
</ol>
<p>变量 <code>eshell-prefer-lisp-functions</code> 让内部的elisp 函数调用要先于外部调用，这意味着，当该变量值为 <code>t</code> 的时候，Eshell 会 <code>最先</code> 调用elisp 函数，而不是 =最后=才调用；</p>
<p>但是，当命令前缀(即 <em>eshll-explicit-command-char</em>)被指定，该变量会被忽略</p>
<h2 id="built-in-commands">Built-in Commands</h2>
<p>Eshell 有很多很好用的通过Emacs-Lisp 重写的命令，这些命令实现了绝大部分GNU 核心工具集
或者你所钟爱的shell 的特性，所以这些命令被称为&quot;Alias functions&quot;(别名函数).</p>
<p>但是Eshell 并不是全盘模拟其他Shell 的功能特性，如果你传递了一些参数，试图调用Eshell未实现的功能时，Eshell 会自动调用外部的对应的命令来实现你想要的功能 (当然前提是你已经安装该命令)
下面列出Eshell 已经重新实现的命令：
<code>cat</code> , <code>cp</code> , <code>ls</code> , <code>cd</code> , <code>export</code> , <code>dirs</code> , <code>du</code> , <code>echo</code> , <code>env</code> , <code>kill</code>
<code>ln</code> , <code>mkdir</code> , <code>mv</code> , <code>alias</code> , <code>popd</code> , <code>pushd</code> , <code>pwd</code> , <code>rm</code> , <code>rmdir</code>
<code>time</code> , <code>umask</code>.
Eshell 注重跟原有的GNU工具功能同步，所以你不用担心因Eshell 命令跟其他原生Shell 命令不一致而导致的问题</p>
<h2 id="command-interception">Command Interception</h2>
<p>Eshell 有一个很cool 的特性，那就是某些命令会被拦截并且传递给Emacs.</p>
<p>这种机制允许你调用一个命令例如 <code>man ls</code>,但是真正调用处理的是Emacs 内置的 <code>man</code>.</p>
<p>此外，对于之前提及的交互式命令而言，这种特性是很重要的，因为Eshell 是没有能力处理该命令的。</p>
<p>但真正展现该特性威力的还是那么复杂的命令，例如 <code>grep</code> <code>diff</code>,因为Emacs 本身就内置了更加强大的 <em>grep</em> 和 <em>diff</em> 工具。</p>
<p>这种特性真真实实展示了Eshell 对比其他shell 的强大之处</p>
<p>下列的命令都会被重定向到Emacs内置的功能去：
<code>agrep</code> , <code>diff</code> , <code>egrep</code> , <code>fgrep</code> , <code>glimpse</code> , <code>grep</code> , <code>info</code> , <code>jobs</code>
<code>locate</code> , <code>man</code> , <code>occur</code> , <code>su</code> , <code>sudo</code> , <code>whoami</code>
<code>su</code> <code>sudo</code> <code>whoami</code> 是与 <code>TRAMP</code> 相关的命令，所以如果你是连接到远程shell 的
这些命令也是可以正常工作的</p>
<h2 id="subshells">Subshells</h2>
<p>你可以使用 <code>$()</code> 来调用命令，并且把命令对应的输出当作接下来命令的参数，就好像你在bash 那样使用。</p>
<p>但是你要谨记的一样事情就是你是无法使用反引号 =``=来生成一个subshell的。</p>
<p>虽然你也可以使用像调用subshell 的语法来调用标准的elisp form: <code>(form ....)</code> 注意没有了 <code>$</code>,不过我并不推荐这种用法，因为很多情况，这种用法都是不行的</p>
<h2 id="useful-elisp-commands">Useful Elisp Commands</h2>
<p>Eshell 有一套可以让你每天的生活变得更美好的帮助函数(helper function), 此外你可以在Eshell调用几乎所有的elisp 函数，这就意味着，你拥有无上的能力来控制你的shell.</p>
<p>接下来，我会列举那些为Eshell 专门编写的命令和一些我觉得很有用的命令。</p>
<p>我也编写了挺多的elisp 函数了 (部分是专门写给Eshell,其他的就不是了)</p>
<h3 id="listify-args">listify ARGS</h3>
<p>将字符串参数解析成 elisp 列表符号，然后打印到屏幕。</p>
<p>该函数不仅可以解析 POSIX 类型的参数，也可以解析 MS-DOS/Windows 类型参数</p>
<h3 id="addpath-path">addpath PATH</h3>
<p>将参数 (必须是文件路径) 添加到环境变量 <code>$PATH</code>,如果没有参数被指定的话，那么将原有的变量值输出到屏幕</p>
<h3 id="unset-env-var">unset ENV-VAR</h3>
<p>移除已有的环境变量</p>
<h3 id="find-file-file">find-file FILE</h3>
<p>搜索文件FILE,然后在Emacs 中打开该文件。这个函数与 <code>TRAMP</code> 相关，所以也可以远程工作</p>
<h3 id="dired-directory">dired DIRECTORY</h3>
<p>在目录 <code>DIRECTORY</code> 下打开一个 dired 缓冲区</p>
<h3 id="calc-eval-expr">calc-eval EXPR</h3>
<p>在Emacs calculator 执行该表达式 <code>EXPR</code></p>
<h3 id="upcase-str-downcase-str">upcase STR /downcase STR</h3>
<p>字符串 STR 大小写转换</p>
<h3 id="vc-dir-directory">vc-dir DIRECTORY</h3>
<p>展示在版本控制下的目录 <code>DIRECTORY</code> 的状态，跟大多数版本控制工具的 <code>status</code> 命令相同</p>
<h3 id="ediff-files-file1-file2">ediff-files FILE1 FILE2</h3>
<p>使用Emacs 的比较引擎 (diff engine) ediff,对文件 <code>FILE1</code> <code>FILE2</code> 进行比较</p>
<h2 id="aliasing">Aliasing</h2>
<p>你可以像在其它主流的shell 那样给Eshell命令赋予别名，操作是一样滴，此外，你甚至可以混合使用elisp 函数和Eshell 命令。</p>
<p><code>alias</code> 命令的格式是 <code>alias alias-name definition</code> <code>definition</code> 必须由一对单引号 <code>''</code> 包围。</p>
<p>你也可以使用其它shell 的参数引用形式：</p>
<p>例如 <code>$1</code> 指第一个参数， <code>$2</code> 指第二个参数，依此类推，或者 <code>$=</code> 指所有的参数。
当参数没有在 <code>definition</code> 被引用，Eshell 会自动把参数添加到命令的末尾，并把参数忽略</p>
<p>如果想移除一条命令的别名，只需不对变量 <code>definition</code> 赋值 (即 <code>alias alias-name</code>) 别名就会被自动移除，如果想列出所有的别名，只需输入 <code>alias</code></p>
<p>Eshell 会把命令的别名及其定义写入到变量 <code>eshell-aliases-file</code> 然后统一被变量 <code>Eshell-directory-name</code> 管理；然后别名默认会被统一写入到 <code>~/.Eshell/alias</code>.</p>
<p>每次你更改一个命令别名，都会重复上面的流程, 另外一个很有用的特性就是别名自动修正 (<em>auto-correcting aliasing</em>),
如果你输入 一个无效的命令太多次 (变量 <code>eshll-bad-command-tolerance</code> 表示触发自动更正的最低 次数，默认值为3),Eshell会为你真正想执行的命令提供别名.</p>
<p>例如你想输入的是 <code>cp</code> 但是输入了太多次的 <code>co</code>,所以下次你输入 <code>co</code> 的时候，Eshell 就会自动执行 <code>cp</code>.</p>
<p>当然，如果你不喜欢这种特性的话，你可以把最低次数设得很大</p>
<h3 id="useful-examples">Useful Examples</h3>
<p>让我们把长长的 <code>find-file</code> 命令映射到更顺手的别名 <code>ff</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">alias</span> ff <span class="s1">&#39;find-file $1&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>把 <code>dired</code> 映射到 <code>d</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">alias</span> d <span class="s1">&#39;dired $1&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="visual-commands">Visual Commands</h2>
<p>有一些对Eshell 而言是太复杂的命令，Eshell 是无法直接显示的，所以需要特殊的处理</p>
<p>例如 <code>top</code> ,是无法与一些哑终端(dumb terminal)一起正常工作的。</p>
<p>为了使这些命令正常工作，Eshell 会运行一个终端模拟器 <code>term</code> 来执行这些的命令 (即被称为可视化的命令)</p>
<p>如果你想修改可视化命令的列表，你可以修改变量 <code>eshell-visual-commands</code></p>
<h2 id="command-history">Command History</h2>
<p>Eshell 有功能丰富的命令行历史机制，但是因为Eshell 不是继承 <code>comint-mode</code> 的</p>
<p>所以 <code>comint-mode</code> 与历史相关的功能，Eshell 是没法用的，不过它绝大部份的功能都已经在Eshell 重新实现了</p>
<h3 id="m-r-m-s">M-r /M-s</h3>
<p>向前或者向后搜索命令，支持正则表达式</p>
<h3 id="m-p-m-n">M-p/M-n</h3>
<p>在历史命令列表中前进或者后退</p>
<h3 id="c-p-c-n">C-p/C-n</h3>
<p>Eshell上一条命令或者下一条命令</p>
<h3 id="c-c-m-r-c-c-m-s">C-c M-r /C-c M-s</h3>
<p>回到上一条/下一条历史命令，历史命令必须与现在的命令输入一致。</p>
<p>例如现在的输入是：
<code>ls</code> ,那么回到的上一条 /下一条历史命令必须是 <code>ls</code>,或者以 <code>ls</code> 开头的命令，如 <code>lsmod</code></p>
<p>不足的是，新的经过修改的命令 <code>comint-history-isearch-backward-regexp</code> (在 <code>comint</code> 键绑定是 <code>M-r</code>)在Eshll 是无法使用的，因为Eshell 不是继承于 <code>comint</code> (所以在升级中被忽略了)</p>
<h2 id="history-interaction">History Interaction</h2>
<p>像bash 和其它shell 那样，Eshell 也支持历史的修改和交互。</p>
<p>如果想要知道历史交互是怎么操作的，你就需要回去翻一下 bash 的手册了。接下来我会总结一下Eshell 大部份的历史交互用法</p>
<h3 id="ef9fcd">!!</h3>
<p>重复上一条命令</p>
<h3 id="ls">!ls</h3>
<p>重复上一条以 <code>ls</code> 开头的命令</p>
<h3 id="ls">!?ls</h3>
<p>重复上一条包含 <code>ls</code> 的命令</p>
<h3 id="ls-n">!ls:n</h3>
<p>从上一条以 <code>ls</code> 开头的命令截取第n个参数</p>
<h3 id="ls-tab">!ls&lt;tab&gt;</h3>
<p>使用命令补全，显示补全结果中包含 <code>ls</code> 的命令</p>
<h3 id="old-new">^old^new</h3>
<p>快速替换，对于上一条命令，使用 <code>old</code> 来代替命令中的 <code>new</code> (备注：似乎有Bug)</p>
<h3 id="792e5b">$_</h3>
<p>返回上一条执行的命令的最后一个参数</p>
<p>Eshll 也支持bash 历史修改(例如 !!:s/old/new/),如果你想了解更多的信息，
<a href="https://www.gnu.org/software/bash/manual/bash.html#History-Interaction">the bash reference on history interaction</a> 可以告诉你你想知道的东西</p>
<h2 id="commandline-interaction">Commandline Interaction</h2>
<h2 id="the-eshell-prompt">The Eshell Prompt</h2>
<p>你可以通过修改变量 <code>eshell-prompt-function</code> 来自定义Eshell 的提示符；该变量
有一个函数定义了Eshell 命令行提示符应该包含的内容。</p>
<p>通过用elisp 来管理Eshell 命令行提示符的配置，你就可以实现你想要的任何特性。</p>
<p>你需要注意的事情就是：你需要告诉Eshell,命令行提示符长什么样子，所以你必须修改变量 <code>eshell-prompt-regexp</code>
,那样 Eshell 就会知道你想要的提示符长什么样子了</p>
<h2 id="the-commandline">The Commandline</h2>
<p>Eshell 可以使用反斜杠 <code>\</code> 来转义新行，以及基本的多行输入。</p>
<p>另外一个输入多行的文学字符串 (literal string)的方法就是使用单引号：输入一个单引号，然后回车，
接着你就可以输入你想输入的内容，最后用另外一个单引号结束输入。</p>
<p>如果你使用双引号的话，Eshell 会自动展开 subshell 命令并且展开相应的变量得益于Eshell 的调用机制，你甚至可以回去继续修改引号里面的文本。</p>
<p>当你想回去修改你不喜欢的内容，让Eshell像你预期那样工作的时候，你就会觉得这种特性真的相当
有用</p>
<h2 id="useful-keybindings">Useful Keybindings</h2>
<p>Eshell 做了很多与Eamcs 进行交互的功能的改进，而且，这些改进足以影响你的生活
质量，让我为你一一道来：</p>
<h3 id="c-c-m-b">C-c M-b</h3>
<p>将已经某个缓冲区的名字插入到当前光标</p>
<h3 id="c-c-m-i">C-c M-i</h3>
<p>将已经某个进程的名字插入到当前光标</p>
<h3 id="c-c-m-v">C-c M-v</h3>
<p>将一个环境变量的名字插入到当前光标</p>
<h3 id="c-c-m-d">C-c M-d</h3>
<p>在直接输入和延迟输入(回车确认)之间切换 (对不能与来源于其他缓冲区的输入正常工作
的命令来说就很有用了)</p>
<h2 id="argument-predicates">Argument Predicates</h2>
<p>参数谓词是一个很擅长过滤文件，甚至elisp列表的工具。</p>
<p>Eshell的谓词语法是参照zsh 的，所以如果你熟悉zsh的参数谓词，你也可以以同样的方式来使用Eshell.</p>
<p>与Eshell 绝大部分迥异的是，参数谓词是有详细的文档的。你可以通过输入 <code>eshell-display-predicate-help</code></p>
<p>或者 <code>eshell-display-modifier-help</code> 来查看帮助文档参数谓词用来过滤有相同模式的文件是很有用，你不需再花费额外的时间来使用诸如 <code>find</code> <code>ls</code> 此类命令。</p>
<p>虽然有帮助手册，但是手册还是很简单，不尽人意，所以我自己总结了一些用法来帮助读者了解相关特性。</p>
<p>但是最好的学习方法还是多尝试，多出错，多总结</p>
<h3 id="syntax-reference">Syntax Reference</h3>
<p>我就不把那么多的谓词和修饰符一一列出来了，因为Eshell 的手册已经作了很详细的解释了，你需要做的就是自己查看</p>
<h3 id="globbing">Globbing</h3>
<p>Eshell 的匹配模式和其他常用shell 的是基本一致滴：shell 会扩展文件和路径的匹配 模式，然后将匹配后的列表当作参数传递给相应的命令，例如 <code>ls</code>.</p>
<p>这就是为什么你一起使用 <code>find</code> 和 <code>xargs</code> 命令的时候，最好要把 <code>-print0</code> 传递给 <code>find</code> 并且把 <code>-0</code>
传递给 <code>xargs</code>.</p>
<p>因为如果你不这样做的话，文件名或者路径名中的特殊字符或者空格就会 让 <code>xargs</code> 不知道如何正确地处理。通过使用 <code>NUL</code> 字符作为分隔符，保证字符可以被正确地标记，并且文件中紧跟着 <code>/</code> 的 <code>NUL</code> 字符会被标记为无效字符</p>
<h3 id="elisp-lists">Elisp Lists</h3>
<p>如果你把Eshell 的列表理解成输出的 <code>form</code> 的elisp列表，你会发现理解起来变得容易因为事实上Eshell 是可以通过Elisp 来处理列表的，而处理列表恰恰是Lisp 擅长的东西最简单的模式扩展就是 <code>echo *</code>,该命令会把当前文件夹下所有匹配的文件以列表的形式 打印出来。</p>
<p>因为，正如我先前提及的那样，通配符扩展是同步一致进行的，所以我可以在 在使用 <code>*</code> 的同时再使用另外一个修饰符。</p>
<p>例如: 我们把当前文件夹下的所有文件名变成大写的形式，并以列表的形式打印出来：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">/ $ <span class="nb">echo</span> *<span class="o">(</span>:U<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span><span class="s2">&#34;BAR&#34;</span> <span class="s2">&#34;BIN/&#34;</span> <span class="s2">&#34;DEV/&#34;</span> <span class="s2">&#34;ETC/&#34;</span> <span class="s2">&#34;FOO&#34;</span> <span class="s2">&#34;HOME/&#34;</span> <span class="s2">&#34;LIB/&#34;</span> <span class="s2">&#34;TMP/&#34;</span> <span class="s2">&#34;USR/&#34;</span> <span class="s2">&#34;VAR/&#34;</span><span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>请注意，我是怎样在使用模式扩展的同时使用 <code>()</code>.这对括号可以让你使用参数修饰符或者 是谓词。</p>
<p>修饰符是可以修饰你的结果列表的(很惊讶吧).</p>
<p>修饰符总是以冒号 <code>:</code> 开头滴， 而谓词却不一样。</p>
<p>我会展示另外一个例子，这次这个例子我会使用谓词来过滤目录：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">/ $ <span class="nb">echo</span> *<span class="o">(</span>^/<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span><span class="s2">&#34;bar&#34;</span> <span class="s2">&#34;foo&#34;</span><span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这个 <code>^</code> 在上面的命令的作用，是跟在正则表达式中一样，用作取反，而斜杠的作用 <code>/</code>
是只代表目录，所以上面的作用就是打印所有文件</p>
<p>对于修饰符和谓词，我也可以不使用模式扩展</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">/ $ <span class="nb">echo</span> <span class="o">(</span><span class="s2">&#34;foo&#34;</span> <span class="s2">&#34;bar&#34;</span> <span class="s2">&#34;baz&#34;</span> <span class="s2">&#34;foo&#34;</span><span class="o">)(</span>:gs/foo/blarg<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span><span class="s2">&#34;blarg&#34;</span> <span class="s2">&#34;bar&#34;</span> <span class="s2">&#34;baz&#34;</span> <span class="s2">&#34;blarg&#34;</span><span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这次我是把所有的 <code>foo</code> 代替为 <code>blarg</code>.</p>
<p>你可以发现语法是相同的，只是这次我不是使用模式匹配来获取文件列表，而是直接输入文件的列表.</p>
<p>使用参数谓词和修饰符的好处是你大大减少了输入的命令行数量，因为用谓词可以处理权限 ，属主，文件属性，甚至更多方面的问题</p>
<h3 id="adding-new-modifiers-and-predicates">Adding New Modifiers and Predicates</h3>
<p>你也可以添加自己的谓词 (<code>eshell-predicate-alist</code>)或者修饰符 (<code>eshell-modifier-alist</code>):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nv">add-to-list</span> <span class="ss">&#39;eshell-modifier-alist</span> <span class="o">&#39;</span><span class="p">(</span><span class="sc">?X</span> <span class="o">.</span> <span class="o">&#39;</span><span class="p">(</span><span class="nb">lambda</span><span class="p">(</span><span class="nv">lst</span><span class="p">)(</span><span class="nf">mapcar</span> <span class="ss">&#39;rot13</span> <span class="nv">lst</span><span class="p">))))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>我已经将 <code>rot13</code> 绑定到 <code>X</code> 了，替换结果如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">/ $ <span class="nb">echo</span> <span class="o">(</span><span class="s2">&#34;foo&#34;</span> <span class="s2">&#34;bar&#34;</span> <span class="s2">&#34;baz&#34;</span><span class="o">)(</span>:X<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span><span class="s2">&#34;sbb&#34;</span> <span class="s2">&#34;one&#34;</span> <span class="s2">&#34;onm&#34;</span><span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="plan-9-smart-shell">Plan 9 Smart Shell</h2>
<p>Eshell 有一个 <code>Plan 9</code> 终端的弱化版，叫做 <strong>the Eshell smart display</strong>.</p>
<p>Eshell 的智能展示(smart display)意味着它改进了所有黑客所习惯的 <strong>输入－运行－修改</strong> 工作流程。</p>
<p>智能展示特别之处在于，Eshell 的光标不会像普通的shell那样，落在你运行
的命令的输出后面；</p>
<p>相反，光标的位置会保持在你输入命令的位置，让你可以通过 <code>M-p</code> <code>M-n</code> 或者其他修改历史的命令更容易地修改你输入的命令.</p>
<p>如果你启用了 <code>smart display</code> 模式，你还可以使用 <code>SPC</code> 向下翻页，或者使用 <code>BACKSPACE</code>
向上翻页来查看那些长时间运行的命令的输出。</p>
<p>如果你按下了任何其它的按键，光标会直接跳到你缓冲区的结尾，就好像你没有启用 <code>smart display</code> 运行命令时那样</p>
<p>值得注意的是，如果Eshell 检测到你想回顾最后一条执行的命令时，Eshell 会很贴心地帮你回顾的，但是，如果你没有这样的行为，Eshell 的光标会直接跳转到缓冲区的结尾.</p>
<p>这么看来，Eshell真的很智能，而且它也有一些设置可以让你微调相关的行为。</p>
<p>你会发现智能显示 (smart display)真的非常有用，特别是你可以通过移动按键就能修改</p>
<p>刚刚执行过的命令；例如修改拼写错误的命令或者是给相应的命令添加参数, 智能显示还可以被设置成当命令成功执行时，不使用扩展的 <code>edit mode</code>;并且隐藏命令输出, 就好像你执行 <code>chown</code> 那样。</p>
<p>这也是我喜欢的玩法，如果你也想试试这种玩法，你可以把下面的elisp 代码添加到你的 <code>.emacs</code> 文件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;eshell</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;em-smart</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">setq</span> <span class="nv">eshell-where-to-jump</span> <span class="ss">&#39;begin</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">setq</span> <span class="nv">eshell-review-quick-commands</span> <span class="no">nil</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">setq</span> <span class="nv">eshell-smart-space-goes-to-end</span> <span class="no">t</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果Eshell 已经被初始化(即你已经在Emacs运行了一个Eshell实例),那样的话，运行
上面的代码是不会起作用的。</p>
<p>你必须在Eshell 里面按下 <code>M-:</code> 然后输入 <code>(shell-smart-initialize)</code> ,或者直接重启Emacs
智能显示真的是非常有用的特性，但是你一时半刻是很难完全领会其全部的精妙之处滴。</p>
<p>你直接输入一个命令，Eshell的光标就会跳转到缓冲区的结尾，所以你会觉得光标似乎本来就在那里</p>
<h2 id="redirection">Redirection</h2>
<p>Eshell 的重定向跟其它shell 的工作方式基本是一样的，但是，有一项非常重要的差异就是Eshell 必须模拟可能不存在的伪设备，例如Windows 平台上的 <code>/dev/null</code> 其实是 <code>NUL</code></p>
<p>另外一个值得注意的地方就是：虽然Eshell 支持重定向，但是只是支持输出重定向，是 不支持输入重定向的。</p>
<p>为了避免跳进输入重定向这个坑，你最好使用管道。</p>
<p>重定向到标准输入 标准输出，标准错误都是可以正常工作的，此外，你也可以重定向到多个目标，很不错的特性吧</p>
<h2 id="to-emacs">To Emacs</h2>
<p>因为Eshell 在内部用Elisp重新实现了各种伪设备，所以也就无需跟Unix 的设备文件打交道了，甚至，可以用Elisp实现自己的伪设备。</p>
<p>一个很好的例子就是，你可以把重定向到一个你选择的缓冲区，用下面的命令就能实现：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">/ $ cat mylog.log &gt;&gt; <span class="c1">#&lt;buffer *scratch*&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>我之前提到的快捷键 <code>C-c M-b</code> 就是可以把一个选定的缓冲区的名字插入到光标前</p>
<p>此外，你也可以把输出直接重定向到Elisp 的符号(不过注意，不要执行错误的设置)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">/ $ <span class="nb">echo</span> foo bar baz &gt; <span class="c1">#&#39;myvar</span>
</span></span><span class="line"><span class="cl">/ $ <span class="nb">echo</span> <span class="k">$(</span>cadr myvar<span class="k">)</span>
</span></span><span class="line"><span class="cl">bar
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果你将变量 <code>eshell-buffer-shorthand</code> 设置为 <code>t</code> 的话。</p>
<p>你就可以使用缓冲区的速记名, 例如 <code>#'*scratch*'</code>,但是你就不能直接重定向到Elisp 的符号了</p>
<h2 id="to-pseudo-devices">To Pseudo-Devices</h2>
<p>Eshell 重新实现了以下的伪设备：</p>
<h3 id="dev-eshell">/dev/eshell</h3>
<p>以交互的方式，把结果输出到Eshell</p>
<h3 id="dev-null">/dev/null</h3>
<p>把结果输出到 <code>NULL</code> 设备</p>
<h3 id="dev-clip">/dev/clip</h3>
<p>把结果输出到剪切板</p>
<h3 id="dev-kill">/dev/kill</h3>
<p>把结果输出到 <code>kill ring</code></p>
<p>跟通用的shell 一样，使用 <code>&gt;</code> 代表覆盖(或者新建);使用 <code>&gt;&gt;</code> 代表追加</p>
<h3 id="to-custom-virtual-target">To custom virtual target</h3>
<p>你通过修改变量 <code>eshell-virtual-targets</code> 创建自己的可视化目标(即存储你想创建的 伪设备的名字的一个列表),以及修改代表重定向行为(即覆盖或追加或插入)的函数 <code>mode</code></p>
<h2 id="tramp">TRAMP</h2>
<p>Eshell 可以很好地支持TRAMP,这意味着如果Eshell 所在的目录是在远程服务器的话， 像 <code>su</code> <code>sudo</code> <code>whoami</code> 这样的命令会自动作用在远程服务器</p>
<p>想直接使用TRAMP,你可以像使用 <code>C-x C-f</code> 寻找文件那样输入TRAMP的命令符，然后你就可以使用TRAMP 了。</p>
<p>虽然你会觉得Eshell里面使用TRAMP有点奇怪，但是你的确得到了 一个TRAMP的远程shell,不是么？</p>
<p>此外，你不应把TRAMP局限在使用远程shell, 你可以在本地 使用 <code>sudo</code> 和 <code>su</code> 命令的</p>
<p>有关TRAMP 的更详细的用法，我总结在了另外一篇文章，不过如果你迫不及待想了解更多
有关TRAMP的用法，<a href="http://www.gnu.org/software/tramp/">官方手册</a> 是一个很好的选择</p>
<h2 id="startup-scripts">Startup Scripts</h2>
<p>跟其它的shell 一样，Eshell 也支持 <code>login</code> 和 <code>profile</code> 的配置文件。</p>
<p><code>login</code> 和 <code>profile</code> 配置文件的绝对路径分别保存在变量 <code>eshell-login-script</code> 和 <code>eshell-rc-script</code>
不过默认情况下，上述两个配置文件都保存在 <code>~/.eshell/</code>.</p>
<p>顺便说一下，Eshell的配置文件也是使用 <code>#</code> 来注释变量和语句的</p>
<h2 id="more-customization">More Customization</h2>
<p>如果你想折腾的话，Eshell 有成百上千的选项供你选择。</p>
<p>如果你想配置Eshell 的话，按下 <code>M-x</code> 然后输入 <code>customize-group</code> 回车，然后输入 <code>eshell</code> 回车确认</p>
<h2 id="conclusion">Conclusion</h2>
<p>额，我觉得我已经总结了Eshell 的大部份用法了，希望你可以在其中发现乐趣。</p>
<p>因为与Emacs 的紧密结合，Eshell 有了各种各样突出好用的特性，但是你需要理解的是，Eshell 的诞生不是
为了全盘取代bash 或者其它你喜欢的终端模拟器，它只是希望在Emacs 里面就可以完成我们
日常必需的命令行操作。</p>
<p>如果你要运行很多交互式的命令，Eshell 就可能不是很有用了 因为为了运行你输入的每一条可视化命令，Eshell 都会在Emacs 里面启动一个新的终端模拟器。</p>
<p>Eshell 有TRAMP支持，自定义伪设备，袖珍的elisp REPL和很多非常有用的命令，例如对你打开的文件或者目录，调用 <code>find-file</code> 或者 <code>dired</code>.正是这种种有用的特性， 让Eshell 成为我工具箱里面一个非常可靠的工具。</p>
<p>原文地址 <a href="https://www.masteringemacs.org/article/complete-guide-mastering-eshell">Mastering Eshell</a> ,在下翻译水平有限，如有错误，还望指出</p>
<div center class="qr-container">
<img src="/ox-hugo/qrcode_gh_e06d750e626f_1.jpg" alt="qrcode_gh_e06d750e626f_1.jpg" width="160px" height="160px" center="t" class="qr-container" />
公号同步更新，欢迎关注👻
</div>
]]></content:encoded>
    </item>
  </channel>
</rss>

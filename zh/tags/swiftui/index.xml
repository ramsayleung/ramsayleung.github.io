<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>swiftui on 自由庄园</title>
    <link>https://ramsayleung.github.io/zh/tags/swiftui/</link>
    <description>Recent content in swiftui on 自由庄园</description>
    <image>
      <title>自由庄园</title>
      <url>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>See this site&#39;s source code [here](https://github.com/ramsayleung/ramsayleung.github.io), licensed under GPLv3 ·</copyright>
    <lastBuildDate>Tue, 09 Apr 2024 19:04:00 -0700</lastBuildDate><atom:link href="https://ramsayleung.github.io/zh/tags/swiftui/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>100 Days of SwiftUI</title>
      <link>https://ramsayleung.github.io/zh/post/2024/100_days_of_swiftui/</link>
      <pubDate>Tue, 09 Apr 2024 19:04:00 -0700</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2024/100_days_of_swiftui/</guid>
      <description>1 缘起 我花了半年多的时间，在闲暇时间，学习了苹果的Swift语言和SwiftUI框架，想体验下IOS开发，再看下有没有机会通过写软件来做点副</description>
      <content:encoded><![CDATA[<h2 id="缘起"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> 缘起</h2>
<p>我花了半年多的时间，在闲暇时间，学习了苹果的Swift语言和SwiftUI框架，想体验下IOS开发，再看下有没有机会通过写软件来做点副业。 <!-- raw HTML omitted --></p>
<p>先花了大概3个月时间，通过阅读 <a href="https://docs.swift.org/swift-book/documentation/the-swift-programming-language/guidedtour/">The Swift Programming Language</a> 这本官方电子书<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>来学习Swift这门语言，又花了接近4个月的时候来学习 <a href="https://www.hackingwithswift.com/100/swiftui">100 Days of SwiftUI</a> 这门课程<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>，每天花费1到2小时来学习一课，总共100课，所以顾名思义叫 100 Days of SwiftUI. <!-- raw HTML omitted --></p>
<p>每完成一课，就在Twitter上发一条推文，今天刚好把第100天的推文发了. <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/tweet_day_100.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/tweet_day_99.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/tweet_day_96.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>今天是结课之日，我通过了结课的考试，总分100分，考了91分，喜提课程证书一枚. <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/100_days_of_swiftui_certificate.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>在整个课程中，我写了19个IOS App(虽说大部分是功能简单的App), 源码也基本放在<a href="https://github.com/ramsayleung?tab=repositories&amp;q=&amp;type=&amp;language=swift&amp;sort="> GitHub</a> <sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>上了，不过所有的App都没有上架App Store，因为我还没有给苹果交税(99美刀的开发者注册费). <!-- raw HTML omitted --></p>
<p>经过这100节课和19个APP的训练，我自觉已经掌握了使用Swift和SwiftUI的基础开发技能，算是个入门的IOS开发了, 现在我可以说自己是前端，后端，数据开发，IOS开发都搞过的全栈(<del>干</del>)工程师了（不是） <!-- raw HTML omitted --></p>
<p>但是在苹果对SwiftUI开发思路做出改变之前，我SwiftUI之旅可能就先到此为止了，原因下文再谈 <!-- raw HTML omitted --></p>
<h2 id="swift-初体验"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> Swift 初体验</h2>
<p>Swift 是由LLVM之父 <a href="https://en.wikipedia.org/wiki/Chris_Lattner">Chris Lattner</a> <sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>在2010开始开发，在2014年的WWDC苹果开发者大会正式推出的一门编程语言。 <!-- raw HTML omitted --></p>
<p>按照官方的说法，Swift从 Objective-C, Rust, Haskell, Ruby, Python, C#身上都有不同程度的借鉴和学习。 <!-- raw HTML omitted --></p>
<p>因为我对上面提到的语言多少有涉猎，所以学习Swift起来基本没有什么困难，=Optional=, <code>Error Handling</code>, <code>Result</code>, <code>Generic</code>, <code>Enumerations</code>, <code>Protocol</code> 这些概念都和Rust的大同小异。 <!-- raw HTML omitted --></p>
<p>又是由LLVM之父来操刀，所以语言本身也设计得很优雅. <!-- raw HTML omitted --></p>
<p>让我眼前一亮的可能是借鉴自 <a href="https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/extension-methods">C# Extension Methods</a> <sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>的 <code>extension</code> 功能 , 可以对已有的 class, enum 或者是 protocol 类型增加新的函数，也就是在不修改源码的情况下，扩展已有的功能. <!-- raw HTML omitted --></p>
<p>例如，以下的代码就可以扩展内置的 <code>Double</code> 类型, 实现以米为单位，进行千米, 厘米，毫米，公尺的转换: <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-swift" data-lang="swift"><span class="line"><span class="cl"><span class="kd">extension</span> <span class="nc">Double</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nv">km</span><span class="p">:</span> <span class="nb">Double</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">self</span> <span class="o">*</span> <span class="mf">1_000.0</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nv">m</span><span class="p">:</span> <span class="nb">Double</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">self</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nv">cm</span><span class="p">:</span> <span class="nb">Double</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">self</span> <span class="o">/</span> <span class="mf">100.0</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nv">mm</span><span class="p">:</span> <span class="nb">Double</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">self</span> <span class="o">/</span> <span class="mf">1_000.0</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nv">ft</span><span class="p">:</span> <span class="nb">Double</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">self</span> <span class="o">/</span> <span class="mf">3.28084</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nv">oneInch</span> <span class="p">=</span> <span class="mf">25.4</span><span class="p">.</span><span class="n">mm</span>
</span></span><span class="line"><span class="cl"><span class="bp">print</span><span class="p">(</span><span class="s">&#34;One inch is </span><span class="si">\(</span><span class="n">oneInch</span><span class="si">)</span><span class="s"> meters&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">// Prints &#34;One inch is 0.0254 meters&#34;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nv">threeFeet</span> <span class="p">=</span> <span class="mf">3.</span><span class="n">ft</span>
</span></span><span class="line"><span class="cl"><span class="bp">print</span><span class="p">(</span><span class="s">&#34;Three feet is </span><span class="si">\(</span><span class="n">threeFeet</span><span class="si">)</span><span class="s"> meters&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">// Prints &#34;Three feet is 0.914399970739201 meters&#34;</span>
</span></span></code></pre></div><p>总体而言, Swift是一门吸收了众多PL理论的现代编程语言, 官方说支持Linux，Windows，MacOS等多个平台，不过我估计大多是在MacOS上用来写IOS和Mac应用 <!-- raw HTML omitted --></p>
<h2 id="swiftui"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> SwiftUI</h2>
<p>SwiftUI 使用的声明式语法，让开发者写页面布局和效果变得简洁清晰, 例如通过 <code>VStack</code>, <code>HStack</code>, <code>ZStack</code> 就可以实现X轴，Y轴，和Z轴方向的布局 <!-- raw HTML omitted --></p>
<p>例如下面这个就是通过 <code>ZStack</code> 几行代码实现的叠加效果: <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-swift" data-lang="swift"><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nv">colors</span><span class="p">:</span> <span class="p">[</span><span class="n">Color</span><span class="p">]</span> <span class="p">=</span>
</span></span><span class="line"><span class="cl">    <span class="p">[.</span><span class="n">red</span><span class="p">,</span> <span class="p">.</span><span class="n">orange</span><span class="p">,</span> <span class="p">.</span><span class="n">yellow</span><span class="p">,</span> <span class="p">.</span><span class="n">green</span><span class="p">,</span> <span class="p">.</span><span class="n">blue</span><span class="p">,</span> <span class="p">.</span><span class="n">purple</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nv">body</span><span class="p">:</span> <span class="n">some</span> <span class="n">View</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">ZStack</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ForEach</span><span class="p">(</span><span class="mf">0.</span><span class="p">.&lt;</span><span class="n">colors</span><span class="p">.</span><span class="bp">count</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">Rectangle</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                <span class="p">.</span><span class="n">fill</span><span class="p">(</span><span class="n">colors</span><span class="p">[</span><span class="nv">$0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">                <span class="p">.</span><span class="n">frame</span><span class="p">(</span><span class="n">width</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span> <span class="n">height</span><span class="p">:</span> <span class="mi">100</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">CGFloat</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span> <span class="o">*</span> <span class="mf">10.0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="n">y</span><span class="p">:</span> <span class="n">CGFloat</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span> <span class="o">*</span> <span class="mf">10.0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><figure>
    <img loading="lazy" src="/ox-hugo/zstack_rectangle.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>除了声明式语法之外，SwiftUI让人赏心悦目的就是动画。好的动画在App里面绝对能起到画龙点睛的作用，而SwiftUI的内置动画已经非常强大了，下面就是使用内置动画实现的动画效果: <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-swift" data-lang="swift"><span class="line"><span class="cl"><span class="kd">struct</span> <span class="nc">ContentView</span><span class="p">:</span> <span class="n">View</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">@</span><span class="n">State</span> <span class="kd">private</span> <span class="kd">var</span> <span class="nv">dragAmount</span> <span class="p">=</span> <span class="n">CGSize</span><span class="p">.</span><span class="n">zero</span>
</span></span><span class="line"><span class="cl">    <span class="p">@</span><span class="n">State</span> <span class="kd">private</span> <span class="kd">var</span> <span class="nv">enable</span> <span class="p">=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nv">letters</span> <span class="p">=</span> <span class="s">&#34;Hello, World&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nv">body</span><span class="p">:</span> <span class="n">some</span> <span class="n">View</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">HStack</span><span class="p">(</span><span class="n">spacing</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">ForEach</span><span class="p">(</span><span class="mf">0.</span><span class="p">.&lt;</span><span class="n">letters</span><span class="p">.</span><span class="bp">count</span><span class="p">,</span> <span class="n">id</span><span class="p">:</span> <span class="err">\</span><span class="p">.</span><span class="kc">self</span><span class="p">)</span> <span class="p">{</span> <span class="n">index</span> <span class="k">in</span>
</span></span><span class="line"><span class="cl">                <span class="n">Text</span><span class="p">(</span><span class="nb">String</span><span class="p">(</span><span class="n">letters</span><span class="p">[</span><span class="n">letters</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="n">letters</span><span class="p">.</span><span class="n">startIndex</span><span class="p">,</span> <span class="n">offsetBy</span><span class="p">:</span> <span class="n">index</span><span class="p">)]))</span>
</span></span><span class="line"><span class="cl">                    <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="p">.</span><span class="n">font</span><span class="p">(.</span><span class="n">title</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">enable</span> <span class="p">?</span> <span class="p">.</span><span class="n">green</span> <span class="p">:</span> <span class="p">.</span><span class="n">blue</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="n">dragAmount</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="p">.</span><span class="n">animation</span><span class="p">(.</span><span class="n">linear</span><span class="p">.</span><span class="n">delay</span><span class="p">(</span><span class="nb">Double</span><span class="p">(</span><span class="n">index</span><span class="p">)</span> <span class="o">/</span> <span class="mi">20</span><span class="p">),</span> <span class="n">value</span><span class="p">:</span> <span class="n">dragAmount</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}.</span><span class="n">gesture</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">DragGesture</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                <span class="p">.</span><span class="n">onChanged</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">dragAmount</span> <span class="p">=</span> <span class="nv">$0</span><span class="p">.</span><span class="n">translation</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="p">.</span><span class="n">onEnded</span> <span class="p">{</span> <span class="kc">_</span> <span class="k">in</span>
</span></span><span class="line"><span class="cl">                    <span class="n">dragAmount</span> <span class="p">=</span> <span class="n">CGSize</span><span class="p">.</span><span class="n">zero</span>
</span></span><span class="line"><span class="cl">                    <span class="n">enable</span><span class="p">.</span><span class="n">toggle</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><figure>
    <img loading="lazy" src="/ox-hugo/drag_animation.gif"/> 
</figure>
 <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-swift" data-lang="swift"><span class="line"><span class="cl">  <span class="kd">struct</span> <span class="nc">HeartBeatView</span><span class="p">:</span> <span class="n">View</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">@</span><span class="n">State</span> <span class="kd">private</span> <span class="kd">var</span> <span class="nv">animationAmount</span> <span class="p">=</span> <span class="mf">1.0</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nv">body</span><span class="p">:</span> <span class="n">some</span> <span class="n">View</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Button</span><span class="p">(</span><span class="s">&#34;SOS&#34;</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">background</span><span class="p">(.</span><span class="n">red</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">foregroundColor</span><span class="p">(.</span><span class="n">white</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">clipShape</span><span class="p">(</span><span class="n">Circle</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">overlay</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">Circle</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                <span class="p">.</span><span class="n">stroke</span><span class="p">(.</span><span class="n">red</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="p">.</span><span class="n">scaleEffect</span><span class="p">(</span><span class="n">animationAmount</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="p">.</span><span class="n">opacity</span><span class="p">(</span><span class="mi">2</span> <span class="o">-</span> <span class="n">animationAmount</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="p">.</span><span class="n">animation</span><span class="p">(.</span><span class="n">easeOut</span><span class="p">(</span><span class="n">duration</span><span class="p">:</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="p">.</span><span class="n">repeatForever</span><span class="p">(</span><span class="n">autoreverses</span><span class="p">:</span> <span class="kc">false</span><span class="p">),</span> <span class="n">value</span><span class="p">:</span> <span class="n">animationAmount</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">onAppear</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">animationAmount</span> <span class="p">=</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><figure>
    <img loading="lazy" src="/ox-hugo/hearbeat.gif"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>而Xcode 15新增的预览功能也很好用，可以让开发者不需要启动iPhone模拟器就能预览页面效果，节省了非常多的等待时间。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/xcode_preview.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<h2 id="问题"><!-- raw HTML omitted -->4<!-- raw HTML omitted --> 问题</h2>
<p>听起来好像很美好: IDE新功能好用，编程语言优雅, UI框架简洁好用; 但是苹果的开发思路却有大问题： 苹果开发的SwiftUI不向后兼容老版本的IOS。 <!-- raw HTML omitted --></p>
<p>SwiftUI大部分功能都是只支持IOS16及以后的版本，而苹果新出来的数据持久框架 <code>SwiftData</code> 甚至只支持IOS17, <!-- raw HTML omitted -->
更离谱的是，SwiftUI的 BugFix 也只支持高版本IOS, 这就意味着用户不升级IOS版本，甚至SwiftUI的bug开发者都没法修复。 <!-- raw HTML omitted --></p>
<p>不支持旧版本的IOS就让一大批的开发者和公司都没有动力去使用SwiftUI: <!-- raw HTML omitted --></p>
<p>对于开发新应用的开发者而言，只支持IOS17就意味着会流失一大群使用IOS16及以下版本的用户， <!-- raw HTML omitted -->
而对于拥有存量用户的公司而言，更没有动力去使用SwiftUI，用了之后，旧版本IOS的用户可能直接无法打开应用。 <!-- raw HTML omitted --></p>
<p>因此SwiftUI就陷入了一个尴尬的境地，东西做得好，但是不会有人用; <!-- raw HTML omitted --></p>
<p>没有人自然就不用有人分享，宣传这门技术，自然就导致相关的学习资料非常匮乏, 进一步加深了初学者的学习难度; <!-- raw HTML omitted --></p>
<p>开发遇到问题连懂的人都不用，官方文档写了又约等于没有写, 直接劝退初学者，恶性循环。 <!-- raw HTML omitted --></p>
<p>又因为接受SwiftUI的开发者还不多，苹果版本迭代起来更加肆无忌惮，新版本又引入一堆的Breaking change，导致开发者更新版本非常痛苦. <!-- raw HTML omitted --></p>
<p>另外一个问题就是SwiftUI与苹果现有框架整合得不够好，如 <code>CoreImage</code> 框架，顾名思义是用来作图片处理. <!-- raw HTML omitted --></p>
<p>但之前是使用Objective-C写的，通过SwiftUI来调用，就会变成相当恶心，需要把Swift的数据结构传换成Objective-C来处理, 如： <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-swift" data-lang="swift"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">applyProcess</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">    <span class="k">guard</span> <span class="kd">let</span> <span class="nv">outputImage</span> <span class="p">=</span> <span class="n">currentFilter</span><span class="p">.</span><span class="n">outputImage</span> <span class="k">else</span> <span class="p">{</span><span class="k">return</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">guard</span> <span class="kd">let</span> <span class="nv">cgImage</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">createCGImage</span><span class="p">(</span><span class="n">outputImage</span><span class="p">,</span> <span class="n">from</span><span class="p">:</span> <span class="n">outputImage</span><span class="p">.</span><span class="n">extent</span><span class="p">)</span> <span class="k">else</span><span class="p">{</span><span class="k">return</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nv">uiImage</span> <span class="p">=</span> <span class="n">UIImage</span><span class="p">(</span><span class="n">cgImage</span><span class="p">:</span> <span class="n">cgImage</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">processedImage</span> <span class="p">=</span> <span class="n">Image</span><span class="p">(</span><span class="n">uiImage</span><span class="p">:</span> <span class="n">uiImage</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">loadImage</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Task</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">guard</span> <span class="kd">let</span> <span class="nv">imageData</span> <span class="p">=</span> <span class="k">try</span> <span class="n">await</span> <span class="n">selectedItem</span><span class="p">?.</span><span class="n">loadTransferable</span><span class="p">(</span><span class="n">type</span><span class="p">:</span> <span class="n">Data</span><span class="p">.</span><span class="kc">self</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span><span class="k">return</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">guard</span> <span class="kd">let</span> <span class="nv">inputImage</span> <span class="p">=</span> <span class="n">UIImage</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="n">imageData</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span><span class="k">return</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">let</span> <span class="nv">beginImage</span> <span class="p">=</span> <span class="n">CIImage</span><span class="p">(</span><span class="n">image</span><span class="p">:</span> <span class="n">inputImage</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">currentFilter</span><span class="p">.</span><span class="n">setValue</span><span class="p">(</span><span class="n">beginImage</span><span class="p">,</span> <span class="n">forKey</span><span class="p">:</span> <span class="n">kCIInputImageKey</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">applyProcess</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>把 <code>CoreImage</code> 框架的 <code>CIImage</code> 转成 <code>CoreGraphics</code> 框架的 <code>CGImage</code>, 然后再把 <code>CGImage</code> 转换成 <code>UIKit</code> 框架 <code>UIImage</code>, 然后再转换回SwiftUI 内置的 <code>Image</code> 类型, 可谓是相当麻烦了. <!-- raw HTML omitted --></p>
<p>但是对比SwiftUI只支持高版本的问题，Objective-C和Swift的互操作问题也只能算是恶心，但是起码有解决方法，对于前者，开发者是完全没法自行解决. <!-- raw HTML omitted --></p>
<h2 id="总结"><!-- raw HTML omitted -->5<!-- raw HTML omitted --> 总结</h2>
<p>过了一把野生IOS开发的瘾，但是除非是苹果愿意让SwiftUI支持低版本的IOS， <!-- raw HTML omitted -->
不然我是不会继续使用SwiftUI来开发IOS了，受众太有限了，也没有太大的前景。 <!-- raw HTML omitted --></p>
<p>想要支持低版本的IOS，就只能走UIKit和Objective-C这条历史老路，我对此着实是望而生畏，有空还是学习点其他有趣的东西。 <!-- raw HTML omitted --></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://docs.swift.org/swift-book/documentation/the-swift-programming-language/guidedtour/">https://docs.swift.org/swift-book/documentation/the-swift-programming-language/guidedtour/</a> <!-- raw HTML omitted -->&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://www.hackingwithswift.com/100/swiftui">https://www.hackingwithswift.com/100/swiftui</a> <!-- raw HTML omitted -->&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="https://github.com/ramsayleung?tab=repositories&amp;q=&amp;type=&amp;language=swift&amp;sort">https://github.com/ramsayleung?tab=repositories&amp;q=&amp;type=&amp;language=swift&amp;sort</a>= <!-- raw HTML omitted -->&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p><a href="https://en.wikipedia.org/wiki/Chris_Lattner">https://en.wikipedia.org/wiki/Chris_Lattner</a>  <!-- raw HTML omitted -->&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p><a href="https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/extension-methods">https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/extension-methods</a>  <!-- raw HTML omitted -->&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    
  </channel>
</rss>

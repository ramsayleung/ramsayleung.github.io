<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>emacs on 自由庄园</title>
    <link>https://ramsayleung.github.io/zh/tags/emacs/</link>
    <description>Recent content in emacs on 自由庄园</description>
    <image>
      <title>自由庄园</title>
      <url>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.120.4</generator>
    <language>zh</language>
    <copyright>See this site&amp;rsquo;s source code here, licensed under GPLv3 ·</copyright>
    <lastBuildDate>Wed, 11 Dec 2024 17:12:06 +0800</lastBuildDate>
    <atom:link href="https://ramsayleung.github.io/zh/tags/emacs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>单独使用Emacs的Magit插件</title>
      <link>https://ramsayleung.github.io/zh/post/2024/%E5%8D%95%E7%8B%AC%E4%BD%BF%E7%94%A8emacs%E7%9A%84magit%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Wed, 11 Dec 2024 16:00:00 +0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2024/%E5%8D%95%E7%8B%AC%E4%BD%BF%E7%94%A8emacs%E7%9A%84magit%E6%8F%92%E4%BB%B6/</guid>
      <description>1 Emacs 与 Magit 不知不觉，我已经使用Emacs 快10年了，在我使用过的编辑器中，Emacs是扩展性最强的编辑器，毕竟Emacs是个披着编辑器外衣的L</description>
      <content:encoded><![CDATA[<h2 id="emacs-与-magit"><span class="section-num">1</span> Emacs 与 Magit</h2>
<p>不知不觉，我已经使用Emacs 快10年了，在我使用过的编辑器中，Emacs是扩展性最强的编辑器，毕竟Emacs是个披着编辑器外衣的Lisp虚拟机。</p>
<p>在Emacs无所不能的扩展性之下，诞生了非常多强大的插件，
也让Emacs有了「伪装成操作系统的编辑器」的美名，而Emacs公认的杀手锏插件有两个，一个是 <a href="https://orgmode.org/">org-mode</a>，另一个是 <a href="https://magit.vc/">magit</a>. (我个人觉得还有个 <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html">dired</a>)</p>
<p>Orgmode是类似Markdown，与Emacs深度绑定优化的标记语言，使用Emacs来编写org-mode 文档就有下笔有神，文思泉涌，如丝般顺滑(这篇文章也是用org-mode写的)。</p>
<p>因为org-mode 与Emacs 深度结合，自然无法脱离Emacs单独使用，而其他编辑器模仿org-mode 开发的插件，如 <a href="https://github.com/jceb/vim-orgmode">vim-orgmode</a>, <a href="https://github.com/nvim-orgmode/orgmode">nvim-orgmode</a> 和 <a href="https://github.com/vscode-org-mode/vscode-org-mode">vscode-orgmode</a>, 难免只得其形，未得其神，还不如用Markdown.</p>
<p>而 Magit 是 Git的Emacs图形化客户端, 也是我用过的最好用的Git 客户端软件，既直观又易用(看看Emacs 道友们夸 Magit 的<a href="https://emacs-china.org/t/magit/22521/5">帖子</a>):</p>
<figure>
    <img loading="lazy" src="/ox-hugo/magit_dashboard.jpg"/> 
</figure>

<p>虽然我已经用了Emacs很多年，但是已经过了Live with Emacs的境界, 不会用Emacs处理所有事情, 比如用VSCode 写Rust, 用Intellij Idea写Java, 既然 Magit 那么好用，有没可能独立于Emacs使用呢?</p>
<h2 id="emacs-daemon"><span class="section-num">2</span> Emacs daemon</h2>
<p>作为无所不能的「操作系统」, Emacs 作为<a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html">server</a> 一直在后台运行，然后再使用 <code>emacsclient</code> 连接 server:</p>
<p>前文提到, Emacs 是批着编辑器外衣的Lisp VM, 而 Magit 本质也只是一个 lisp function, 只要在启动emacsclient的时候，再调用 magit的函数, 那么就可以启动 Magit:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">magit</span><span class="o">=</span><span class="s2">&#34;emacsclient -nw -eval &#39;(magit-status)&#39;&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure>
    <img loading="lazy" src="/ox-hugo/magit.gif"/> 
</figure>

<p>这样就可以在VSCode和Idea里面愉快地使用 magit了.</p>
<h2 id="总结"><span class="section-num">3</span> 总结</h2>
<p>在Emacs-China 论坛搜索Magit的时候, 发现了也有一个帖子讨论把 <a href="https://emacs-china.org/t/magit/25527/6">magit当作的单独的工具</a>, 没想到有个回复的思路和我一样，使用Emacs作为daemon 来启用.</p>
<p>只是没有想到他更evil, 在Nvim 里面使用Magit, 我也学习一下 Nvim+Emacs 的组合 :)</p>
<h2 id="参考"><span class="section-num">4</span> 参考</h2>
<ul>
<li><a href="https://orgmode.org/">https://orgmode.org/</a></li>
<li><a href="https://magit.vc/">https://magit.vc/</a></li>
<li><a href="https://emacs-china.org/t/magit/22521/5">https://emacs-china.org/t/magit/22521/5</a></li>
<li><a href="https://emacs-china.org/t/magit/25527/6">https://emacs-china.org/t/magit/25527/6</a></li>
<li><a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html">https://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html</a></li>
<li><a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html">https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Emacs技巧分享: 使用eww打开在线org-mode文档</title>
      <link>https://ramsayleung.github.io/zh/post/2023/emacs%E6%8A%80%E5%B7%A7%E5%88%86%E4%BA%AB_%E4%BD%BF%E7%94%A8eww%E6%89%93%E5%BC%80%E5%9C%A8%E7%BA%BForg-mode%E6%96%87%E6%A1%A3/</link>
      <pubDate>Sat, 04 Mar 2023 21:55:00 +0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2023/emacs%E6%8A%80%E5%B7%A7%E5%88%86%E4%BA%AB_%E4%BD%BF%E7%94%A8eww%E6%89%93%E5%BC%80%E5%9C%A8%E7%BA%BForg-mode%E6%96%87%E6%A1%A3/</guid>
      <description>1 技巧 对于使用org-mode 格式的文本，例如Emacs官方 tree-sitter 的使用教程 在线阅读不是很易读，相当于人脑解析 org-mode. 我的个人习惯是使用 eww 浏览器来阅读</description>
      <content:encoded><![CDATA[<h2 id="技巧"><span class="section-num">1</span> 技巧</h2>
<p>对于使用org-mode 格式的文本，例如Emacs官方<a href="https://git.savannah.gnu.org/cgit/emacs.git/plain/admin/notes/tree-sitter/starter-guide?h=feature/tree-sitter"> tree-sitter 的使用教程</a></p>
<p>在线阅读不是很易读，相当于人脑解析 <code>org-mode</code>. 我的个人习惯是使用 <code>eww</code> 浏览器来阅读:</p>
<figure><a href="/ox-hugo/tree-sitter-doc.png">
    <img loading="lazy" src="/ox-hugo/tree-sitter-doc.png"/> </a>
</figure>

<ol>
<li>复制网页链接</li>
<li>使用 <code>eww</code> 打开链接</li>
<li><code>major-mode</code> 切换到 <code>org-mode</code>, 就可以愉快地使用 Emacs 来阅读 <code>org-mode</code> 文本.</li>
</ol>
<figure><a href="/ox-hugo/eww.gif">
    <img loading="lazy" src="/ox-hugo/eww.gif"/> </a>
</figure>

]]></content:encoded>
    </item>
    <item>
      <title>Emacs 技巧分享：dired-mode 批量修改文件名</title>
      <link>https://ramsayleung.github.io/zh/post/2023/%E6%8A%80%E5%B7%A7%E5%88%86%E4%BA%AB_dired%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%90%8D/</link>
      <pubDate>Sat, 04 Mar 2023 21:34:00 +0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2023/%E6%8A%80%E5%B7%A7%E5%88%86%E4%BA%AB_dired%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%90%8D/</guid>
      <description>1 技巧 分享一下平时使用 dired-mode 批量修改文件名的技巧: C-x C-f 指定的文件目录，进入 dired-mode C-x C-q dired-toggle-read-only: Edit Dired buffer with Wdired. 批量修改，手段有 使用 query-replace 批量修改文件名 使用evil的多</description>
      <content:encoded><![CDATA[<h2 id="技巧"><span class="section-num">1</span> 技巧</h2>
<p>分享一下平时使用 <code>dired-mode</code> 批量修改文件名的技巧:</p>
<ol>
<li><code>C-x C-f</code> 指定的文件目录，进入 <code>dired-mode</code></li>
<li><code>C-x C-q</code> <code>dired-toggle-read-only</code>: Edit Dired buffer with Wdired.</li>
<li>批量修改，手段有
<ul>
<li>使用 <code>query-replace</code> 批量修改文件名</li>
<li>使用evil的多行编辑模式</li>
<li>使用 <code>rectangle-command</code>: <code>C-x r t</code> <code>string-rectangle</code></li>
</ul>
</li>
<li><code>C-c C-c</code> 提交修改或 <code>C-c C-k</code> 放弃修改</li>
</ol>
<figure><a href="/ox-hugo/dired_rename_multi_files.gif">
    <img loading="lazy" src="/ox-hugo/dired_rename_multi_files.gif"
         alt="Figure 1: 使用 rectangle-command 进行批量修改"/> </a><figcaption>
            <p><span class="figure-number">Figure 1: </span>使用 <code>rectangle-command</code> 进行批量修改</p>
        </figcaption>
</figure>

<figure><a href="/ox-hugo/dired_rename_multi_files_2.gif">
    <img loading="lazy" src="/ox-hugo/dired_rename_multi_files_2.gif"
         alt="Figure 2: 使用 evil的多行编辑模式进行批量修改"/> </a><figcaption>
            <p><span class="figure-number">Figure 2: </span>使用 evil的多行编辑模式进行批量修改</p>
        </figcaption>
</figure>

]]></content:encoded>
    </item>
    <item>
      <title>Eshell实现fzf的历史命令搜索功能</title>
      <link>https://ramsayleung.github.io/zh/post/2017/search_eshell_history_like_fzf/</link>
      <pubDate>Sun, 17 Dec 2017 15:46:00 +0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2017/search_eshell_history_like_fzf/</guid>
      <description>1 前言 目标: 在Eshell中像在bash/zsh中使用fzf那般搜索历史命令 2 fzf 我的主力Shell 是Eshell, 但是平时我也会用Zsh, 而</description>
      <content:encoded><![CDATA[<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>目标: 在<code>Eshell</code>中像在bash/zsh中使用<code>fzf</code>那般搜索历史命令</p>
<h2 id="fzf"><span class="section-num">2</span> fzf</h2>
<p>我的主力Shell 是Eshell, 但是平时我也会用Zsh, 而<a href="https://github.com/junegunn/fzf">fzf</a> 是一个非常好用的命令行工具，用了<code>fzf</code>搜索历史命令:</p>
<figure>
    <img loading="lazy" src="https://i.imgur.com/pPMxauw.gif"
         alt="Figure 1: fzf"/> <figcaption>
            <p><span class="figure-number">Figure 1: </span>fzf</p>
        </figcaption>
</figure>

<h2 id="eshell"><span class="section-num">3</span> Eshell</h2>
<p>我日常的操作基本都是在 Eshell 上面进行的，不过 Eshell 是没办法直接像 Bash 那样调用 <code>fzf</code>来查找命令历史的，所以我希望把这个功能迁移到到Eshell 上面来。</p>
<p>我在 Emacs 使用的补全框架是 <code>Ivy/Counsel</code>,它有一个 <code>counsel-esh-history</code>的命令可以使用 <code>Ivy</code> 来搜索命令，但是没办法使用用户已经输入的内容来过滤命令，所以我就在自己折腾了一个</p>
<p><code>counsel-esh-history</code> 命令。效果如下：</p>
<figure>
    <img loading="lazy" src="https://i.imgur.com/3tvGDzW.gif"
         alt="Figure 2: 感觉很不错嘛 :)"/> <figcaption>
            <p><span class="figure-number">Figure 2: </span>感觉很不错嘛 :)</p>
        </figcaption>
</figure>

<h2 id="源代码"><span class="section-num">4</span> 源代码</h2>
<p>得益于 <code>Ivy</code>强大的内置函数, 功能实现起来相当便利，完整代码如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">defun</span> <span class="nv">samray/esh-history</span> <span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Interactive search eshell history.&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nv">interactive</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nf">require</span> <span class="ss">&#39;em-hist</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nv">save-excursion</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="k">let*</span> <span class="p">((</span><span class="nv">start-pos</span> <span class="p">(</span><span class="nv">eshell-bol</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	   <span class="p">(</span><span class="nv">end-pos</span> <span class="p">(</span><span class="nv">point-at-eol</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	   <span class="p">(</span><span class="nv">input</span> <span class="p">(</span><span class="nv">buffer-substring-no-properties</span> <span class="nv">start-pos</span> <span class="nv">end-pos</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="k">let*</span> <span class="p">((</span><span class="nv">command</span> <span class="p">(</span><span class="nv">ivy-read</span> <span class="s">&#34;Command: &#34;</span>
</span></span><span class="line"><span class="cl">				<span class="p">(</span><span class="nv">delete-dups</span>
</span></span><span class="line"><span class="cl">				 <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nf">&gt;</span> <span class="p">(</span><span class="nv">ring-size</span> <span class="nv">eshell-history-ring</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				   <span class="p">(</span><span class="nv">ring-elements</span> <span class="nv">eshell-history-ring</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">				<span class="ss">:preselect</span> <span class="nv">input</span>
</span></span><span class="line"><span class="cl">				<span class="ss">:action</span> <span class="nf">#&#39;</span><span class="nv">ivy-completion-in-region-action</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	     <span class="p">(</span><span class="nv">cursor-move</span> <span class="p">(</span><span class="nf">length</span> <span class="nv">command</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">	<span class="p">(</span><span class="nv">kill-region</span> <span class="p">(</span><span class="nf">+</span> <span class="nv">start-pos</span> <span class="nv">cursor-move</span><span class="p">)</span> <span class="p">(</span><span class="nf">+</span> <span class="nv">end-pos</span> <span class="nv">cursor-move</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">)))</span>
</span></span><span class="line"><span class="cl">  <span class="c1">;; move cursor to eol</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nv">end-of-line</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>代码不是很复杂, 主要功能是获取用户输入的命令, 然后把所有的历史命令读取出来,最后使用<code>ivy-read</code>内置的<code>ivy-completion-in-region-action</code>功能, 用用户的输入的命令与历史命令进行匹配, 由用户选择最终的命令.</p>
<p><code>ivy-read</code>是Emacs内置<code>completing-read</code>的函数的强化, 关于<code>ivy-read</code>具体用法可以参考文档<a href="https://oremacs.com/swiper/#getting-started">ivy-read</a>.</p>
<h2 id="总结"><span class="section-num">5</span> 总结</h2>
<p>最后, 我也顺便把代码分享到 <a href="https://www.reddit.com/r/emacs/comments/7k54px/snippet_share_make_eshell_search_command_history/">Emacs社区</a>, 而 <a href="https://github.com/manateelazycat">manateelazycat</a>也把这段代码的功能加入到<a href="https://github.com/manateelazycat/aweshell/commit/ecaddac98b87f881910dbee8b51a98f00b6d9d5d">aweshell</a>, Oh yeah !</p>
]]></content:encoded>
    </item>
    <item>
      <title>Eshell提示符优化</title>
      <link>https://ramsayleung.github.io/zh/post/2017/tweak_eshell_prompt/</link>
      <pubDate>Wed, 07 Jun 2017 00:00:00 +0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2017/tweak_eshell_prompt/</guid>
      <description>Tweak with Emacs shell prompt</description>
      <content:encoded><![CDATA[<h2 id="发现帅气的提示符"><span class="section-num">1</span> 发现帅气的提示符</h2>
<p>近日，笔者在浏览 <a href="https://www.reddit.com/r/emacs/comments/6f0rkz/my_fancy_eshell_prompt/">Reddit</a> 的时候，发现了一位 Emacs 用户把他的 Eshell 提示符修改得很帅，如图：</p>
<p><a href="/ox-hugo/eshell_prompt.png"><img loading="lazy" src="/ox-hugo/eshell_prompt.png" alt=""  />
</a>
本着拿来主义的想法，我就直接把这位小哥的代码添加到了我的配置文件里面：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">setq</span> <span class="nv">eshell-prompt-function</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="nb">lambda</span> <span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">(</span><span class="nf">concat</span>
</span></span><span class="line"><span class="cl">	 <span class="p">(</span><span class="nf">propertize</span> <span class="s">&#34;┌─[&#34;</span> <span class="ss">&#39;face</span> <span class="o">`</span><span class="p">(</span><span class="nb">:foreground</span> <span class="s">&#34;green&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	 <span class="p">(</span><span class="nf">propertize</span> <span class="p">(</span><span class="nf">user-login-name</span><span class="p">)</span> <span class="ss">&#39;face</span> <span class="o">`</span><span class="p">(</span><span class="nb">:foreground</span> <span class="s">&#34;red&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	 <span class="p">(</span><span class="nf">propertize</span> <span class="s">&#34;@&#34;</span> <span class="ss">&#39;face</span> <span class="o">`</span><span class="p">(</span><span class="nb">:foreground</span> <span class="s">&#34;green&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	 <span class="p">(</span><span class="nf">propertize</span> <span class="p">(</span><span class="nf">system-name</span><span class="p">)</span> <span class="ss">&#39;face</span> <span class="o">`</span><span class="p">(</span><span class="nb">:foreground</span> <span class="s">&#34;blue&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	 <span class="p">(</span><span class="nf">propertize</span> <span class="s">&#34;]──[&#34;</span> <span class="ss">&#39;face</span> <span class="o">`</span><span class="p">(</span><span class="nb">:foreground</span> <span class="s">&#34;green&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	 <span class="p">(</span><span class="nf">propertize</span> <span class="p">(</span><span class="nf">format-time-string</span> <span class="s">&#34;%H:%M&#34;</span> <span class="p">(</span><span class="nf">current-time</span><span class="p">))</span> <span class="ss">&#39;face</span> <span class="o">`</span><span class="p">(</span><span class="nb">:foreground</span> <span class="s">&#34;yellow&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	 <span class="p">(</span><span class="nf">propertize</span> <span class="s">&#34;]──[&#34;</span> <span class="ss">&#39;face</span> <span class="o">`</span><span class="p">(</span><span class="nb">:foreground</span> <span class="s">&#34;green&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	 <span class="p">(</span><span class="nf">propertize</span> <span class="p">(</span><span class="nf">concat</span> <span class="p">(</span><span class="nv">eshell/pwd</span><span class="p">))</span> <span class="ss">&#39;face</span> <span class="o">`</span><span class="p">(</span><span class="nb">:foreground</span> <span class="s">&#34;white&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	 <span class="p">(</span><span class="nf">propertize</span> <span class="s">&#34;]\n&#34;</span> <span class="ss">&#39;face</span> <span class="o">`</span><span class="p">(</span><span class="nb">:foreground</span> <span class="s">&#34;green&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	 <span class="p">(</span><span class="nf">propertize</span> <span class="s">&#34;└─&gt;&#34;</span> <span class="ss">&#39;face</span> <span class="o">`</span><span class="p">(</span><span class="nb">:foreground</span> <span class="s">&#34;green&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	 <span class="p">(</span><span class="nf">propertize</span> <span class="p">(</span><span class="nb">if</span> <span class="p">(</span><span class="nf">=</span> <span class="p">(</span><span class="nf">user-uid</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span> <span class="s">&#34; # &#34;</span> <span class="s">&#34; $ &#34;</span><span class="p">)</span> <span class="ss">&#39;face</span> <span class="o">`</span><span class="p">(</span><span class="nb">:foreground</span> <span class="s">&#34;green&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	 <span class="p">)))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>效果自然是很 sexy.</p>
<h2 id="与原有提示符冲突"><span class="section-num">2</span> 与原有提示符冲突</h2>
<p>但是我原来使用的 <a href="https://github.com/kaihaosw/eshell-prompt-extras">eshell-prompt-extra</a> 的效果就被覆盖了。而 <code>eshell_prompt_extra</code> 可以提供的额外信息非常多，包括：git, python virtualenv, 以及远程登录时的主机信息，如图：</p>
<figure><a href="/ox-hugo/eshell_extra_prompt.png">
    <img loading="lazy" src="/ox-hugo/eshell_extra_prompt.png"/> </a>
</figure>

<p>如果用上这个 sexy 的提示符，eshell-extra-prompt 的额外的信息就不能显示，感觉好亏:(</p>
<p>鱼和熊掌我都想要，似乎太贪心了？怎么办，自己去修改 <code>eshell_prompt_extra</code> 的<a href="https://github.com/kaihaosw/eshell-prompt-extras/blob/master/eshell-prompt-extras.el">源码</a> :).</p>
<h2 id="折腾源码"><span class="section-num">3</span> 折腾源码</h2>
<p><code>eshell_prompt_extra</code> 这个包注释加上全部代码也只是 400 行，代码也写得很清晰. 其中大部份是辅助函数，而 Eshell 的提示符效果是通过两个 eshell-theme 函数来实现的。use-package 的配置：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">use-package</span> <span class="nv">eshell-prompt-extras</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:ensure</span> <span class="no">t</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:load-path</span> <span class="s">&#34;~/Code/github/eshell-prompt-extras&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:config</span> <span class="p">(</span><span class="nb">progn</span>
</span></span><span class="line"><span class="cl">	    <span class="p">(</span><span class="nb">with-eval-after-load</span> <span class="s">&#34;esh-opt&#34;</span>
</span></span><span class="line"><span class="cl">	      <span class="p">(</span><span class="nb">use-package</span> <span class="nv">virtualenvwrapper</span> <span class="nb">:ensure</span> <span class="no">t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	      <span class="p">(</span><span class="nv">venv-initialize-eshell</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	      <span class="p">(</span><span class="nf">autoload</span> <span class="ss">&#39;epe-theme-lambda</span> <span class="s">&#34;eshell-prompt-extras&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	      <span class="p">(</span><span class="nb">setq</span> <span class="nv">eshell-highlight-prompt</span> <span class="no">nil</span>
</span></span><span class="line"><span class="cl">		    <span class="nv">eshell-prompt-function</span> <span class="ss">&#39;epe-theme-lambda</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	    <span class="p">))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>而 <code>epe-theme-lambda</code> 的代码如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">defun</span> <span class="nv">epe-theme-lambda</span> <span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;A eshell-prompt lambda theme.&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">setq</span> <span class="nv">eshell-prompt-regexp</span> <span class="s">&#34;^[^#\nλ]*[#λ] &#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nf">concat</span>
</span></span><span class="line"><span class="cl">   <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nv">epe-remote-p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nv">epe-colorize-with-face</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="nf">concat</span> <span class="p">(</span><span class="nv">epe-remote-user</span><span class="p">)</span> <span class="s">&#34;@&#34;</span> <span class="p">(</span><span class="nv">epe-remote-host</span><span class="p">)</span> <span class="s">&#34; &#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="ss">&#39;epe-remote-face</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">   <span class="p">(</span><span class="nb">when</span> <span class="nv">epe-show-python-info</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nf">fboundp</span> <span class="ss">&#39;epe-venv-p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">       <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nb">and</span> <span class="p">(</span><span class="nv">epe-venv-p</span><span class="p">)</span> <span class="nv">venv-current-name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	 <span class="p">(</span><span class="nv">epe-colorize-with-face</span>
</span></span><span class="line"><span class="cl">	  <span class="p">(</span><span class="nf">concat</span> <span class="s">&#34;(&#34;</span> <span class="nv">venv-current-name</span> <span class="s">&#34;) &#34;</span><span class="p">)</span> <span class="ss">&#39;epe-venv-face</span><span class="p">))))</span>
</span></span><span class="line"><span class="cl">   <span class="p">(</span><span class="nb">let</span> <span class="p">((</span><span class="nv">f</span> <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nf">eq</span> <span class="nv">epe-path-style</span> <span class="ss">&#39;fish</span><span class="p">)</span> <span class="ss">&#39;epe-fish-path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		  <span class="p">((</span><span class="nf">eq</span> <span class="nv">epe-path-style</span> <span class="ss">&#39;single</span><span class="p">)</span> <span class="ss">&#39;epe-abbrev-dir-name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		  <span class="p">((</span><span class="nf">eq</span> <span class="nv">epe-path-style</span> <span class="ss">&#39;full</span><span class="p">)</span> <span class="ss">&#39;abbreviate-file-name</span><span class="p">))))</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nv">epe-colorize-with-face</span> <span class="p">(</span><span class="nf">funcall</span> <span class="nv">f</span> <span class="p">(</span><span class="nv">eshell/pwd</span><span class="p">))</span> <span class="ss">&#39;epe-dir-face</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">   <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nv">epe-git-p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nf">concat</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="nv">epe-colorize-with-face</span> <span class="s">&#34;:&#34;</span> <span class="ss">&#39;epe-dir-face</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="nv">epe-colorize-with-face</span>
</span></span><span class="line"><span class="cl">       <span class="p">(</span><span class="nf">concat</span> <span class="p">(</span><span class="nv">epe-git-branch</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	       <span class="p">(</span><span class="nv">epe-git-dirty</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	       <span class="p">(</span><span class="nv">epe-git-untracked</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	       <span class="p">(</span><span class="nb">let</span> <span class="p">((</span><span class="nv">unpushed</span> <span class="p">(</span><span class="nv">epe-git-unpushed-number</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">		 <span class="p">(</span><span class="nb">unless</span> <span class="p">(</span><span class="nf">=</span> <span class="nv">unpushed</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		   <span class="p">(</span><span class="nf">concat</span> <span class="s">&#34;:&#34;</span> <span class="p">(</span><span class="nf">number-to-string</span> <span class="nv">unpushed</span><span class="p">)))))</span>
</span></span><span class="line"><span class="cl">       <span class="ss">&#39;epe-git-face</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">   <span class="p">(</span><span class="nv">epe-colorize-with-face</span> <span class="s">&#34; λ&#34;</span> <span class="ss">&#39;epe-symbol-face</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">(</span><span class="nv">epe-colorize-with-face</span> <span class="p">(</span><span class="nb">if</span> <span class="p">(</span><span class="nf">=</span> <span class="p">(</span><span class="nf">user-uid</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span> <span class="s">&#34;#&#34;</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			   <span class="ss">&#39;epe-sudo-symbol-face</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="s">&#34; &#34;</span><span class="p">))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>代码主要逻辑是调用之前定义的辅助函数，判断是否需要显示 git, python, 远程主机等信息，然后对相应的提示符进行拼接。</p>
<p>而其中出现得比较频繁的 <code>epe-colorize-with-face</code> 就是作者定义的一个宏(macro), 用来显示字符串以及对应的 face(其实就是不同的颜色啦). 看懂了代码就好办了，现在就可以自己添加一个 Eshell 主题。</p>
<h3 id="定义所需的-face"><span class="section-num">3.1</span> 定义所需的 face</h3>
<p>因为我需要显示的 face(颜色), <code>eshell-extra-prompt</code> 并没有定义，所以就只好自己动手啦：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">defface</span> <span class="nv">epe-pipeline-delimiter-face</span>
</span></span><span class="line"><span class="cl">  <span class="o">&#39;</span><span class="p">((</span><span class="no">t</span> <span class="nb">:foreground</span> <span class="s">&#34;green&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Face for pipeline theme delimiter.&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:group</span> <span class="ss">&#39;epe</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">defface</span> <span class="nv">epe-pipeline-user-face</span>
</span></span><span class="line"><span class="cl">  <span class="o">&#39;</span><span class="p">((</span><span class="no">t</span> <span class="nb">:foreground</span> <span class="s">&#34;red&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Face for user in pipeline theme.&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:group</span> <span class="ss">&#39;epe</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">defface</span> <span class="nv">epe-pipeline-host-face</span>
</span></span><span class="line"><span class="cl">  <span class="o">&#39;</span><span class="p">((</span><span class="no">t</span> <span class="nb">:foreground</span> <span class="s">&#34;blue&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Face for host in pipeline theme.&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:group</span> <span class="ss">&#39;epe</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">defface</span> <span class="nv">epe-pipeline-time-face</span>
</span></span><span class="line"><span class="cl">  <span class="o">&#39;</span><span class="p">((</span><span class="no">t</span> <span class="nb">:foreground</span> <span class="s">&#34;yellow&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Face for time in pipeline theme.&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:group</span> <span class="ss">&#39;epe</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后就是按着原有的 Eshell 提示符来组装一个新的 Eshell 主题了，然后把这个主题定义成 pipeline (其实是我自己也没想出比较新颖的名字啦):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">defun</span> <span class="nv">epe-theme-pipeline</span> <span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;A eshell-prompt theme with full path, smiliar to oh-my-zsh theme.&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">setq</span> <span class="nv">eshell-prompt-regexp</span> <span class="s">&#34;^[^#\nλ]* λ[#]* &#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nf">concat</span>
</span></span><span class="line"><span class="cl">   <span class="p">(</span><span class="nb">if</span> <span class="p">(</span><span class="nv">epe-remote-p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">       <span class="p">(</span><span class="nb">progn</span>
</span></span><span class="line"><span class="cl">	 <span class="p">(</span><span class="nf">concat</span>
</span></span><span class="line"><span class="cl">	  <span class="p">(</span><span class="nv">epe-colorize-with-face</span> <span class="s">&#34;┌─[&#34;</span> <span class="ss">&#39;epe-pipeline-delimiter-face</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	  <span class="p">(</span><span class="nv">epe-colorize-with-face</span> <span class="p">(</span><span class="nv">epe-remote-user</span><span class="p">)</span> <span class="ss">&#39;epe-pipeline-user-face</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	  <span class="p">(</span><span class="nv">epe-colorize-with-face</span> <span class="s">&#34;@&#34;</span> <span class="ss">&#39;epe-pipeline-delimiter-face</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	  <span class="p">(</span><span class="nv">epe-colorize-with-face</span> <span class="p">(</span><span class="nv">epe-remote-host</span><span class="p">)</span> <span class="ss">&#39;epe-pipeline-host-face</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	 <span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nb">progn</span>
</span></span><span class="line"><span class="cl">       <span class="p">(</span><span class="nf">concat</span>
</span></span><span class="line"><span class="cl">	<span class="p">(</span><span class="nv">epe-colorize-with-face</span> <span class="s">&#34;┌─[&#34;</span> <span class="ss">&#39;epe-pipeline-delimiter-face</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">(</span><span class="nv">epe-colorize-with-face</span> <span class="p">(</span><span class="nf">user-login-name</span><span class="p">)</span> <span class="ss">&#39;epe-pipeline-user-face</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">(</span><span class="nv">epe-colorize-with-face</span> <span class="s">&#34;@&#34;</span> <span class="ss">&#39;epe-pipeline-delimiter-face</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">(</span><span class="nv">epe-colorize-with-face</span> <span class="p">(</span><span class="nf">system-name</span><span class="p">)</span> <span class="ss">&#39;epe-pipeline-host-face</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">     <span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">(</span><span class="nf">concat</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="nv">epe-colorize-with-face</span> <span class="s">&#34;]──[&#34;</span> <span class="ss">&#39;epe-pipeline-delimiter-face</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="nv">epe-colorize-with-face</span> <span class="p">(</span><span class="nf">format-time-string</span> <span class="s">&#34;%H:%M&#34;</span> <span class="p">(</span><span class="nf">current-time</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">			    <span class="ss">&#39;epe-pipeline-time-face</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="nv">epe-colorize-with-face</span> <span class="s">&#34;]──[&#34;</span> <span class="ss">&#39;epe-pipeline-delimiter-face</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="nv">epe-colorize-with-face</span> <span class="p">(</span><span class="nf">concat</span> <span class="p">(</span><span class="nv">eshell/pwd</span><span class="p">))</span> <span class="ss">&#39;epe-dir-face</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="nv">epe-colorize-with-face</span>  <span class="s">&#34;]\n&#34;</span> <span class="ss">&#39;epe-pipeline-delimiter-face</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="nv">epe-colorize-with-face</span> <span class="s">&#34;└─&gt;&#34;</span> <span class="ss">&#39;epe-pipeline-delimiter-face</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">(</span><span class="nb">when</span> <span class="nv">epe-show-python-info</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nf">fboundp</span> <span class="ss">&#39;epe-venv-p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">       <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nb">and</span> <span class="p">(</span><span class="nv">epe-venv-p</span><span class="p">)</span> <span class="nv">venv-current-name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	 <span class="p">(</span><span class="nv">epe-colorize-with-face</span>
</span></span><span class="line"><span class="cl">	  <span class="p">(</span><span class="nf">concat</span> <span class="s">&#34;(&#34;</span> <span class="nv">venv-current-name</span> <span class="s">&#34;) &#34;</span><span class="p">)</span> <span class="ss">&#39;epe-venv-face</span><span class="p">))))</span>
</span></span><span class="line"><span class="cl">   <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nv">epe-git-p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nf">concat</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="nv">epe-colorize-with-face</span> <span class="s">&#34;:&#34;</span> <span class="ss">&#39;epe-dir-face</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="nv">epe-colorize-with-face</span>
</span></span><span class="line"><span class="cl">       <span class="p">(</span><span class="nf">concat</span> <span class="p">(</span><span class="nv">epe-git-branch</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	       <span class="p">(</span><span class="nv">epe-git-dirty</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	       <span class="p">(</span><span class="nv">epe-git-untracked</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	       <span class="p">(</span><span class="nb">let</span> <span class="p">((</span><span class="nv">unpushed</span> <span class="p">(</span><span class="nv">epe-git-unpushed-number</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">		 <span class="p">(</span><span class="nb">unless</span> <span class="p">(</span><span class="nf">=</span> <span class="nv">unpushed</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		   <span class="p">(</span><span class="nf">concat</span> <span class="s">&#34;:&#34;</span> <span class="p">(</span><span class="nf">number-to-string</span> <span class="nv">unpushed</span><span class="p">)))))</span>
</span></span><span class="line"><span class="cl">       <span class="ss">&#39;epe-git-face</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">   <span class="p">(</span><span class="nv">epe-colorize-with-face</span> <span class="s">&#34; λ&#34;</span> <span class="ss">&#39;epe-symbol-face</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">(</span><span class="nv">epe-colorize-with-face</span> <span class="p">(</span><span class="nb">if</span> <span class="p">(</span><span class="nf">=</span> <span class="p">(</span><span class="nf">user-uid</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span> <span class="s">&#34;#&#34;</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			   <span class="ss">&#39;epe-sudo-symbol-face</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="s">&#34; &#34;</span><span class="p">))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="总结"><span class="section-num">4</span> 总结</h2>
<p>这样一个新的 Eshell 主题就完工了，然后我给 <code>eshell-extra-prompt</code> 发了一个<a href="https://github.com/kaihaosw/eshell-prompt-extras/pull/16">Pull Request</a>, 最终效果如下：</p>
<figure><a href="/ox-hugo/epe.png">
    <img loading="lazy" src="/ox-hugo/epe.png"/> </a>
</figure>

<p>Enjoy Emacs, Enjor Tweaking :)</p>
]]></content:encoded>
    </item>
    <item>
      <title>(翻译)从Helm到Ivy</title>
      <link>https://ramsayleung.github.io/zh/post/2017/from-helm-to-ivy/</link>
      <pubDate>Sun, 05 Mar 2017 00:00:00 +0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2017/from-helm-to-ivy/</guid>
      <description>An Translated Post about switch from helm to ivy</description>
      <content:encoded><![CDATA[<p>最近，我发现很多Emacs 用户对Ivy 很感兴趣；而且大部份用户都是已经了解过Helm 或者Ido的
当有人在Reddit 上面问 <a href="https://www.reddit.com/r/emacs/comments/51lqn9/helm_or_ivy/">选择Helm 还是Ido</a>这类问题的时候，我觉得我会给出我自己的选择：
<strong>Ivy</strong>,即使我是一个前Helm 的狂热用户
<img loading="lazy" src="http://www.feer-mcqueen.com/blog/wp-content/uploads/2015/11/miimalism-vs.-maximilasim-700x334.jpg" alt=""  />

<em>最大或者最小</em></p>
<p><strong>Helm 和Ivy 都是补全框架</strong>.这意味着它们都是Emacs生态系统中用来在用户输入后缩窄可供选择选项的范围的工具。
很自然而然想起的通用例子就是搜索文件。Helm 和Ivy 都可以帮助用户快速搜索文件</p>
<p>它们两者都是框架，这意味着它们都可以用在那些需要补全或者缩窄范围的复杂命令。</p>
<p>例如Helm 有一个命令(<strong>helm-google-suggest</strong>)可以模拟Goole 的搜索框，并在你输入时给出相应的google 提示</p>
<p>Ivy 和Helm 都有相同的目标，但是它们实现的方法却是迥然不同</p>
<p>现在我想站在用户的角度来比较一下这两个工具。我这里指的用户观点是我在不需要了解Helm 和Ivy 的内部工作原理的前提下对这两个工具进行比较。</p>
<p>其实，因为我对 <strong>elisp</strong>还谈不上精通，所以也没办法就两者实现细节来进行比较。但是这两个工具我都使用过，所以我可以从用户的角度，跟你分享我使用它们的不同感受。最后，我从Helm 切换到了Ivy</p>
<p>我想先谈Helm.当我使用Spacemacs 的时候，我学会了怎么使用Helm,以Helm 的方式思考, 如何自定义Helm,怎么把Helm 配置得称心如意。</p>
<p>我想我应该算得上是一个中级的Helm 用户吧。我有读过<a href="http://tuhdo.github.io/helm-intro.html">这篇文章</a> 还有<a href="http://tuhdo.github.io/helm-projectile.html">这篇文章</a> 以及<a href="https://github.com/emacs-helm/helm/wiki">Wiki</a> 此外，在长达一年的时间里，我每天都是使用Helm的</p>
<p><strong>Helm 是一个非常成熟的工具</strong>.根据git 的提交历史，Helm 的开发工作是在2009年左右开始的。
在写这篇文章的时候，Helm 官方的git 仓库有超过26000行elisp 代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git clone https://github.com/emacs-helm/helm.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> helm
</span></span><span class="line"><span class="cl">cat *.el <span class="p">|</span> wc -l
</span></span><span class="line"><span class="cl"><span class="c1"># =&gt; 26431</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这还是没有把在MELPA 上查询到跟Helm 有关的包有142个的情况考虑在内的呢。</p>
<p>你可以用Helm来完成任何事情它主要的强大之处在于你可以把Helm 和很多Emacs 的行为整合在一起。你可以以Helm 为中心构造接口，就像Spacemacs 做的那样。Helm 支持非常一致的接口，你可以通过Helm 来做任何事</p>
<p>你可以搜索文件，搜索缓冲区，搜索颜色，搜索项目，搜索你最近编辑过的文件，搜索系统进程, 搜索音乐，搜索网络资源，搜索补全，搜索代码片段，搜索正则表达式，搜索命令，文档
相关描述，手册&hellip;.</p>
<p>你可以用Helm-projectile(一个Helm 对projectile 非常好的包装)来管理你的项目。你可以用<a href="https://www.gitignore.io/">gitignore.io</a>来生成gitignore文件，你可以用Helm-bibtex来管理你的参考书目，你可以浏览你的火狐书签</p>
<p>你可以用Helm 来完成任何事。</p>
<p>基于 <strong>tuhdo</strong> 对我在<a href="https://www.reddit.com/r/emacs/comments/52lnad/from_helm_to_ivy_a_user_perspective/d7lypeu/">Reddit</a> 上面问题的回复，我想指出的一个特性就是Helm 是不使用 <em>minibuffer</em>,但是Ivy 是使用的。</p>
<p>所以它可以被配置成总是在当前打开的窗口展示。对于那些大屏幕显示器的用户而言，这个特性真的非常有用，因为你的目光不用在 <em>minibuffer</em> 来回切换：</p>
<figure>
    <img loading="lazy" src="http://i.imgur.com/g1Oz9JY.png"
         alt="Figure 1: 补全结果总是显示在同一个窗口"/> <figcaption>
            <p><span class="figure-number">Figure 1: </span>补全结果总是显示在同一个窗口</p>
        </figcaption>
</figure>

<p>最终的比较结果是Helm 是非常便利的工具，相信会有数量非常多的Spacemacs 用户告诉你同样的看法。</p>
<p>而Helm 主要的缺点就是它的代码量太大了。我想虽然Helm 的代码量很大，但是它的开发者利用 <strong>elisp</strong> 成功把它打造成了一个相当快的工具了</p>
<p>而且有些时候，Helm 似乎把简单的问题复杂化了;它配置起来也感觉相当臃肿；有时它也会有一些很奇怪的表现，然后导致卡顿，或者让Emacs 过载，即使你做的只是很简单的查询。</p>
<p>或许那些Helm 的高手用户看到这里，会觉得如果我也是个 <strong>elisp</strong> 高手，就不会出现上述问题了。虽然我已经使用Helm 超过一年了，我还是没有找到方法让可以Helm更加稳定。我觉得Helm 在用自己做例子来讲述了什么是化简为繁吧</p>
<p>你可以用Helm 来做任何事；但事实上你并不需要。你可以这样做并不意味着你应该这样做。</p>
<p>在使用Helm 一年以后，我可以告诉你我只是使用了Helm 三分之一或者更小的功能。有些功能我觉得真的很棒，昨天在读了<a href="http://tuhdo.github.io/helm-intro.html">这篇文章</a> 之后，我又发现了一些新的东西。大部分时间，我都是使用简单的命令来切换缓冲区，或者列举文件</p>
<blockquote>
<p>Helm 只是一个用来补全的包，就好像Ido或者Ivy.它可能很容易使用，一旦有人经历过配置它的困难，就会发现它很难做到让你随心所欲。</p>
<p>有些人觉得只要可以让他们使用好的工具，即使他们完全不了解这些工具也无所谓。</p>
<p>但是我就做不到</p>
<p>&ndash;abo-abo,Ivy 的开发者，回答<a href="https://github.com/abo-abo/swiper/issues/3">&ldquo;为什么不选择Helm&rdquo;</a> 这个问题</p>
</blockquote>
<p><strong>Ivy 为实现最小化，简单化，可定制化，可发现化而努力</strong>.这四个形容词告诉我们很多Helm
和Ivy 这两个工具间不同的设计理念。阅读<a href="http://oremacs.com/swiper/">Ivy介绍</a> 以便更好了解Ivy的理念。</p>
<p>在写这篇文章的时候，Ivy 只有大概3400行代码，为Ivy 所打造的生态系统：即Swipter 和
Counsel 也只有7500 行代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git clone https://github.com/abo-abo/swiper.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> swiper
</span></span><span class="line"><span class="cl"><span class="c1">## Only ivy ?</span>
</span></span><span class="line"><span class="cl">cat ivy.el <span class="p">|</span> wc -l
</span></span><span class="line"><span class="cl"><span class="c1"># =&gt; 3442</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## count lines of code into the whole swiper ecosystem</span>
</span></span><span class="line"><span class="cl">cat *.el <span class="p">|</span> wc -l
</span></span><span class="line"><span class="cl"><span class="c1"># =&gt; 7526</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Ivy 真的是很容易上手，下面就是我的全部配置：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">use-package</span> <span class="nv">ivy</span> <span class="nb">:ensure</span> <span class="no">t</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:diminish</span> <span class="p">(</span><span class="nv">ivy-mode</span> <span class="o">.</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:bind</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">:map</span> <span class="nv">ivy-mode-map</span>
</span></span><span class="line"><span class="cl">	<span class="p">(</span><span class="s">&#34;C-&#39;&#34;</span> <span class="o">.</span> <span class="nv">ivy-avy</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:config</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nv">ivy-mode</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="c1">;; add ‘recentf-mode’ and bookmarks to ‘ivy-switch-buffer’.</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">setq</span> <span class="nv">ivy-use-virtual-buffers</span> <span class="no">t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="c1">;; number of result lines to display</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">setq</span> <span class="nv">ivy-height</span> <span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="c1">;; does not count candidates</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">setq</span> <span class="nv">ivy-count-format</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="c1">;; no regexp by default</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">setq</span> <span class="nv">ivy-initial-inputs-alist</span> <span class="no">nil</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="c1">;; configure regexp engine.</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">setq</span> <span class="nv">ivy-re-builders-alist</span>
</span></span><span class="line"><span class="cl">	<span class="c1">;; allow input not in order</span>
</span></span><span class="line"><span class="cl">	<span class="o">&#39;</span><span class="p">((</span><span class="no">t</span>   <span class="o">.</span> <span class="nv">ivy--regex-ignore-order</span><span class="p">))))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Ivy 是很低调的；它不想让你把一切都整合到Ivy去。它仅仅是提供你必需的补全。你不能像Helm 那样用Ivy 来做任何事；那为什么我还要切换到Ivy 去呢？</p>
<p>虽然Ivy 已经最小化，但是我依然可以用Ivy 来代替我绝大部分日常使用的Helm命令。</p>
<p>因为Ivy是如此简洁， <em>abo-abo</em> 在它上开发了一个叫 <strong>Counsel</strong> 的包； <strong>Counsel</strong> 可以为你提供非常非常多像你在Helm使用的命令</p>
<p>你可以切换缓冲区，搜索文件，在项目级别进行搜索和替换，与Projectile 整合，搜索你最近
编辑过的文件，搜索Emacs 命令，搜索文档，搜索按键绑定，浏览 kill-ring</p>
<p>让我向你介绍我是怎样用Ivy 代替Helm 的。下面是我对那些我需要使用Ivy 来代替Helm的最常用命令的总结。</p>
<p>这些基本是我一直以来最常用的方法。我每分钟会使用三次的 <strong>ivy-switch-buffer</strong> ,我一天会使用五次的 <strong>helm-swoop</strong>, <strong>swiper</strong> 跟 <strong>helm-swoop</strong> 不分伯仲；</p>
<p>对于那些大文件， <strong>Counsel</strong> 有 <strong>counsel-grep-or-swiper</strong>.</p>
<p>我已经用一些非常非常大的标记语言的文件(一百万行左右)来测试过了，一点问题也没有。</p>
<table>
<thead>
<tr>
<th>Helm</th>
<th>Ivy</th>
<th>What ?</th>
</tr>
</thead>
<tbody>
<tr>
<td>helm-mini</td>
<td>ivy-switch-buffer</td>
<td>search for currently opened buffers</td>
</tr>
<tr>
<td>helm-recentf</td>
<td>counsel-recentf</td>
<td>search for recently edited files</td>
</tr>
<tr>
<td>helm-find-files</td>
<td>counsel-find-files</td>
<td>search files starting from ./</td>
</tr>
<tr>
<td>helm-ag</td>
<td>counsel-ag</td>
<td>search regexp occurence in current project</td>
</tr>
<tr>
<td>helm-grep-do-git-grep</td>
<td>counsel-git-grep</td>
<td>search regexp in current project</td>
</tr>
<tr>
<td>helm-swoop</td>
<td>swiper</td>
<td>search string interactively in current buffer</td>
</tr>
<tr>
<td>helm-show-kill-ring</td>
<td>counsel-yank-pop</td>
<td>search copy-paste history</td>
</tr>
<tr>
<td>helm-projectile</td>
<td>counsel-projectile</td>
<td>search project and file in it</td>
</tr>
<tr>
<td>helm-ls-git-ls</td>
<td>counsel-git</td>
<td>search file in current git project</td>
</tr>
<tr>
<td>helm-themes</td>
<td>counsel-load-theme</td>
<td>switch themes</td>
</tr>
<tr>
<td>helm-descbinds</td>
<td>counsel-descbinds</td>
<td>describe keybindings and associated functions</td>
</tr>
<tr>
<td>helm-M-x</td>
<td>counsel-M-x</td>
<td>enhanced M-x command</td>
</tr>
</tbody>
</table>
<p>我觉得你可以看到Ivy 基本的命令对比Helm 的命令也是毫不逊色的。它们可以代替你日常使用的每一条Helm命令。我不是说你可以像Helm 那样用Ivy 来做任何事，但是它已经足够好用了，正如我说的那样，你也不需要任何事都使用Helm 来完成。</p>
<p>说到补全理念这个话题上，Helm 和Ivy 之间的差异并没有那么大。作为一个用户，我可以告诉你的是：Ivy 会让你感觉到更少的臃肿，更加的直观，更加地容易理解。每一次的补全都是可以预见的。</p>
<p>最后，这真的跟个人的品味有关。对于我自己来说，&ldquo;Ivy 还是Helm&rdquo; 这样的争论跟&quot;Emacs 还是Spacemacs&quot; &ldquo;Emacs 还是Ide&rdquo; &ldquo;C 还是Java&rdquo; &ldquo;简洁还是全能&rdquo; &ldquo;Thelonious 还是 Duke&rdquo;(译者注，两者都是爵士乐作曲家),&ldquo;Van Der Rohe 还是 Gaudi.&quot;(译者注：前者是德国美国
的建筑风格，后者是西班牙加泰罗尼亚的建筑风格)这样的争论是非常相似的。</p>
<p>你选择Helm呢，你会得到一个巨型的包，一系列你不会用到的特性，一堆你可能只是偶尔用一下的功能，一些你会一个小时使用50次的特性。如果你选择Ivy,你会得到一个只拥有那些让你顺心的必要特性的精简的包，你可以很容易地通过 <strong>Counsel</strong> 或者简单的函数对它进行扩展</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nv">ivy-read</span> <span class="s">&#34;Pick:&#34;</span> <span class="p">(</span><span class="nf">mapcar</span> <span class="nf">#&#39;number-to-string</span> <span class="p">(</span><span class="nv">number-sequence</span> <span class="mi">1</span> <span class="mi">10</span><span class="p">)))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果你想要通过Helm 来扩展：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nv">helm</span>
</span></span><span class="line"><span class="cl"> <span class="nb">:sources</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="nv">helm-build-sync-source</span> <span class="s">&#34;one-to-ten&#34;</span>
</span></span><span class="line"><span class="cl">			 <span class="nb">:candidates</span>
</span></span><span class="line"><span class="cl">			 <span class="p">(</span><span class="nf">mapcar</span> <span class="nf">#&#39;number-to-string</span> <span class="p">(</span><span class="nv">number-sequence</span> <span class="mi">1</span> <span class="mi">10</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">			 <span class="nb">:fuzzy-match</span> <span class="no">t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> <span class="nb">:buffer</span>
</span></span><span class="line"><span class="cl"> <span class="s">&#34;*helm one-to-ten*&#34;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>或者简单的列表：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nv">helm-comp-read</span> <span class="s">&#34;Pick:&#34;</span> <span class="p">(</span><span class="nf">mapcar</span> <span class="nf">#&#39;number-to-string</span> <span class="p">(</span><span class="nv">number-sequence</span> <span class="mi">1</span> <span class="mi">10</span><span class="p">)))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Helm 为用户作了非常多的决定，Ivy 让用户按需求进行定制；Helm 通过耗费非常多的内存来变得快速，Ivy 通过保持简洁来实现快速；Helm 很成熟，Ivy 很青涩；Helm 为Emacs 提供一致性，Ivy 为Emacs 提供简洁性和可预见性；Helm 需要你进行一定的配置，Ivy 开箱即用</p>
<p>我自己是稍偏向Ivy 的，因为我正在使用它；
它更符合我的口味。但是作为一个用户，Helm和Ivy并没有那么大的差别。它们都是非常优秀的包，只是以不用的方式去实现相同的目标</p>
<p>原文地址 <a href="https://sam217pa.github.io/2016/09/13/from-helm-to-ivy/">https://sam217pa.github.io/2016/09/13/from-helm-to-ivy/</a></p>
<p>在下翻译水平有限，如有错误，还请指出</p>
]]></content:encoded>
    </item>
    <item>
      <title>(翻译)An Introduction to Magit</title>
      <link>https://ramsayleung.github.io/zh/post/2017/magit/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2017/magit/</guid>
      <description>An introduction to Magit</description>
      <content:encoded><![CDATA[<p>如果你足够幸运(或者不幸运，取决于你怎么看待了)可以使用 <em>git</em> 作为你工作流的一部分。</p>
<p>你可能已经 <strong>邂逅</strong> 过 <em>magit</em> 这个Emacs 的git接口了。 <em>magit</em> 是Emacs 上的非常优秀的git 接口，它假定你是了解你正在对 <em>magit</em> 或者 <em>git</em> 做的种种操作的 <strong>注意</strong> ：该文章是针对 magit 1.x 的，对 magit 2.x 并不适用 Magit 有非常完整的文档，包含了Magit 的各种操作，但是和大多数的文档一样，Magit 的文档并没有介绍如何将Magit 和你的工作流结合；</p>
<p>Magit 假定你是熟悉Magit 并且了解如何合理地使用Magit(但大多数情况并不是这样).</p>
<p>Magit 现在还是处于活跃的开发中。在2013年12月，增加了很多很多新的很有用特性的一次 release, 让Magit 变得比以前更强大了，所以本教程是基于比较新的Magit 版本的，并且 假定你也已经安装了新的版本</p>
<p>如果想安装处于 <code>master</code> 分支的Magit,我建议你使用 <code>Melpa</code> 来安装；此外你也可以选择直接拉取<a href="https://github.com/magit/magit">magit github</a> 仓库的最新版本，然后按照README 上面的指导来构建 <code>magit</code></p>
<p>这是我Magit 教程的第一部分。这部分会介绍状态窗口(status window); 已暂存和未暂存的项目 (staging and unstagin item);已经提交的更改 (committing changes) 和查看历史提交 (history view)</p>
<h2 id="getting-started"><span class="section-num">1</span> Getting Started</h2>
<p>首先：Magit 并没有隐藏git 的复杂性，所以，如果你想高效地使用Magit ,你最好清楚了解git 究竟做了哪些工作。</p>
<p>事实上，我更原意把Magit 当作一个取代了git 枯燥的纯命令行操作的工具，它也表现得出乎意料地好。</p>
<p>你可以通过 <code>M-x magit-status</code> 来使用Magit,该命令会打开一个窗口(如果你的缓冲区 所在的目录不是一个git 项目，Magit 会提示你进入一个git项目的目录),然后展示Magit 当前的状态。</p>
<p>你是通过 <code>magit-status</code> 这个接口来使用Magit 的。此外，如果你是使用 Emacs VC的，你需要知道的是，Magit是没有集成到Emacs VC(Version Control)的 抽象层。</p>
<p>虽然你没法在VC 使用Magit,不过你还是可以在大多数版本控制工具使用Magit 的，Magit 为这些版本控制工具都提供了统一的接口；你如果想调用Magit,你只需要 <code>M-x magit-status</code></p>
<h2 id="the-magit-status"><span class="section-num">2</span> The Magit Status</h2>
<figure>
    <img loading="lazy" src="https://www.masteringemacs.org/static/uploads/Screenshot-from-2013-12-06-114511.png"/> 
</figure>

<p>你首先会注意到关于Magit的事情应该就是当你打开Magit 的状态窗口时，Magit 的状态窗口是可以与你的Emacs 窗口配置配合工作的，你也可以像在其他Emacs 窗口那样，通过按下 <code>q</code>
来关闭窗口。</p>
<p>几乎你在Magit 执行的所有操作都是通过在底部打开一个 <code>command console</code> 窗口，然后按下对应的单字符指令执行；你也可以重新定义你自己的指令。</p>
<p>这种交互的方式真的非常好用，可能正是这么强大的特性让Magit变得如此优秀吧。</p>
<p>我个人真的非常喜欢这种交互的方式，我甚至把这部分特性的代码复制到了我自己的Emacs项目上，因为这真的真的非常好用。</p>
<p>Magit 之前的稳定版本在帮助用户更好使用Magit这方面做得略有不足，所以在最新的版本有了相应的改进，你可以通过按下 ~?&lt;/kbd&gt; 来显示一系列带注解说明的操作。我觉得在最开始的时候，Magit 真的很难用，因为我总是在「茫茫」的菜单选项中迷失，好不容易才能找到我想要的操作。</p>
<p>即使是现在，也并不是所有的操作都有注解说明了；有一些命令
(对于我的工作流来说很重要的命令)依然是没有说明的，特别是用来重新定位的 <code>E</code>.</p>
<h2 id="staging-and-unstaging-items"><span class="section-num">3</span> Staging and Unstaging Items</h2>
<p>把你的文件放到git下面是你经常需要完成工作之一，Magit 有一系列的按键绑定和工具可以帮助你更好地完成工作。</p>
<p>Magit 操作不仅可以暂存文件，还可以暂存在 <strong>diff</strong> 中选定 的代码块。</p>
<p>Magit&quot;杀手级&quot;特性之一就是它使用不同的等级来显示相关的信息。Magit 可以让你通过 <code>tab</code> 展开或者折叠已经暂存或者未暂存文件。</p>
<p>如果你想更加细颗粒度地暂存或者未暂存文件，你可以使用 <strong>M-1</strong> 到 <strong>M-4</strong> 来操作所有的文件；此外，也可以使用 <strong>1</strong> 到 <strong>4</strong>
操作选定的文件</p>
<figure>
    <img loading="lazy" src="https://www.masteringemacs.org/static/uploads/diff-hunk-refined-level-4.png"/> 
</figure>

<ol>
<li>
<p>等级1会把所有的东西隐藏到一个分类里面(即已暂存的文件);</p>
</li>
<li>
<p>等级 2在一个分类里面只是显示文件名 (这是默认的等级);</p>
</li>
<li>
<p>等级3会显示git代码块的头部；等级4 会显示所有做出了修改的代码块。</p>
<p>我使用最多的是等级2和等级4, 如果你使用按键 <code>TAB</code>,Magit会完成你想要的等级操作的。你拥有一系列可以让你的</p>
</li>
</ol>
<p>生活变得更加美好的按键绑定，例如： <code>n</code> 和 <code>p</code> 可以在你前一个单元和后一个单元(通常以代码块为单元)
之间移动；<code>M-n</code> 和 <code>M-p</code> 可以在相邻单元之间移动，例如在等级4中的每个文件间移动。</p>
<p>你也可以使用 <code>+</code> 或者 <code>-</code> 放大或者缩小每段代码，使用 <code>0</code> 可以恢复默认设置。此外你也可以按下 <code>H</code> 给代码块 添加额外的代码高亮。</p>
<p>最后，你按下回车 <code>RET</code> 可以打开你修改的文件，代码块或者文件都适用该操作。</p>
<hr>
<p>你可以通过按下 <code>s</code> 或者 <code>u</code> 来暂存或者撤销暂存文件(或者代码块),此外，奉送一个很有用的小提示：如果你选定某部分的代码，然后按下暂存(撤销暂存)按键，Magit 会自动暂存(撤销)你选定的那部分代码。</p>
<p>当你发现 <em>diff</em> 选定的代码块不符合你的要求的时候，你会发现这种细颗粒度的操作真的非常有用</p>
<hr>
<p>有时候你对某些修改并不在意，你也不关心这部分修改是否已经提交；你可以像上面的暂存(撤销暂存)操作一样，通过按下按键 <code>K</code> 来忽略选定的代码块和文件，并且从你的电脑删除未提交到暂存区(untracked)的文件；</p>
<p>这个命令可以比暂存(撤销暂存)命令完成更多的操作，例如，删除已保存的文件或目录(stash)</p>
<h2 id="committing-changes"><span class="section-num">4</span> Committing Changes</h2>
<p>如果你想打开提交菜单，只需按下 <code>c</code>,然后你就会看到琳罗满目的选项，不过大部份选项 你都是用不上的了。你真正有用的操作，不仅可以让你提交已暂存的修改，还可以完成更多的任务：</p>
<ul>
<li>你可以扩展(extend <code>e</code>) <em>HEAD</em> 所指向的提交</li>
<li>你可以修改(amend <code>a</code>) 有关的提交信息</li>
<li>如果你不喜欢现在的提交信息，你可以重写(reword <code>r</code>)提交信息</li>
<li>你同时也可以修整(fixup <code>f</code>)和压缩(squash <code>s</code>)当前这次的提交。如果你之前用 <code>.</code> 标记了一次提交，那么今次使用的就是被标记的那次提交。</li>
</ul>
<p>扩展一次提交其实就是在当前提交上附加修改，所以，如果你忘记了提交本属于此次提交的东西你可以使用 <em>扩展</em> 选项。</p>
<p>如果你想修改当前的提交信息，那就使用 <em>修改</em> 选项吧</p>
<p>重写可以重写你的提交信息但是无需提交你已暂存的修改；如果你不小心按错了选项，想重写你的提交信息，<em>重写</em> 选项就是你最好的选择</p>
<p>如果你想在最新一次提交下创建一个 <code>fixup</code> 或者 <code>squash</code> 提交的话，使用修整或压缩命令 可以重整或者 <code>--(自动压缩)autosquash</code> 最新一次提交。</p>
<p>如果你不会去重写你的git历史或者你未使用过重整，你可能觉得这两个命令不是很有用</p>
<h2 id="logging"><span class="section-num">5</span> Logging</h2>
<figure>
    <img loading="lazy" src="https://www.masteringemacs.org/static/uploads/Screenshot-from-2013-12-06-142317.png"/> 
</figure>

<p>我觉得Magit非常强大的特性之一就是它有不计其数的选项可以用来对你的git 历史进行 过滤，排序，查找。</p>
<p>Magit 不仅可以展示你的git信息，还可以让你执行交互操作。如果你想打开日志的菜单，你只需按下 <code>l</code>.</p>
<p>你应该知道的第一个有用的按键就是 <code>l l</code>, 这个 按键会为你展示缩略的日志信息：你会看到单行的提交信息, 作者的名字, 修改提交距今的时间, 树状结构的git 日志, 各种的标签信息，例如 <code>HEAD</code> 指针的位置或者分支标记的位置</p>
<p>如果你不小心玩坏了git 的提交信息，命令 <code>git reflog</code> 会是你的救星；此外，对于magit 的引用日志(reflog)机制(<code>l h</code>)，它也有很友好稳定的UI界面支持。</p>
<hr>
<p>引用日志和普通的日志都有非常丰富的按键绑定。在日志里，你对单个的提交可以进行非常多的操作：</p>
<ul>
<li><code>.</code>: 为此次提交作标记以便进行后续的操作例如提交修整 (<code>c f</code>)或者提交压缩 (<code>c s</code>)</li>
<li><code>x</code>: 重置你的 <code>HEAD</code> 指针到选定的提交</li>
<li><code>v</code>: 撤销提交</li>
<li><code>d</code>: 将你的工作区与选定的提交进行比较</li>
<li><code>a</code>: 将选定的提交作用在你的工作区</li>
<li><code>A</code>: 选择位于你工作区顶部的提交</li>
<li><code>E</code>: 以交互的方式重置你的 <code>HEAD</code> 指针到选定的工作区。如果你想重写历史，该命令会非常有用</li>
<li><code>C-w</code>: 复制你此次提交的hash值</li>
<li><code>SPC</code>: 展示完整的提交历史</li>
</ul>
<p>需要注意的是：即使你关闭了日志的窗口，标记的命令还是会继续作用的；标记是非常有用的工具，但是你很容易忘记你是否曾经作过标记。如果你在magit 使用 <code>M-n</code> 或者 <code>N-p</code> 向上或者向下浏览日志，
maigt 会自动为你在另外一个窗口显示提交信息</p>
<h2 id="conclusion"><span class="section-num">6</span> Conclusion</h2>
<p>对于有经验的Git 用户来说，Magit 是一个非常好的工具；此外，如果你是Git 的新手， Magit可以帮助你了解Git 是怎么工作的，但是它永远不会教你使用Git.</p>
<p>在我看来，阻碍 你使用Magit 最大的障碍就是Magit缺乏对选项的描述说明；即使Magit 包含了成千上万 Git的选项，参数和操作，但是它并没有教你如何找到并使用这些命令。</p>
<p>我发现Git 的命令行真的无可替代(不是因为我喜欢git 的命令行我才这么说，事实是它真的很棒)因为我 想要完成的操作真的隐藏得很深，没有那么容易在Magit找到。</p>
<p>不过最新版本的改进真的很好，你可以通过按下 <code>?</code> 查看一系列带有注解说明的命令(但不是全部命令，不过这也已经是一个很大的改进了).</p>
<p>如果你曾被Magit 的学习曲线所吓倒，抑或者你已经尝试Magit, 却无奈放弃；我建议你再试一次。我打算写更多关于Magit 的博文</p>
<hr>
<p>原文地址 <a href="https://www.masteringemacs.org/article/introduction-magit-emacs-mode-git">https://www.masteringemacs.org/article/introduction-magit-emacs-mode-git</a>
在下翻译水平有限，如有错误，还请指出</p>
]]></content:encoded>
    </item>
    <item>
      <title>Shell神器fasd与Eshell的不期而遇</title>
      <link>https://ramsayleung.github.io/zh/post/2017/fasd-meet-eshell/</link>
      <pubDate>Thu, 02 Mar 2017 00:00:00 +0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2017/fasd-meet-eshell/</guid>
      <description>An introduction about tweaking eshell with fasd</description>
      <content:encoded><![CDATA[<blockquote>
<p>fasd - quick access to files and directory</p>
</blockquote>
<p>之前一位 Windows 用户看到我在 Shell 下面的操作，他很奇怪，觉得明明已经有图形化界面，为什么还要用这种命令行呢，直接用鼠标点击不就很好了么。</p>
<p>我觉得很难直接跟他解释，因为他没有用过Linux/Unix,完全不熟悉命令行，不知道其强大之处，其高效率是图形化界面完全无法比拟的(当然，命令行的学习成本和学习曲线肯定比图型化界面高), So I live in terminal.</p>
<p>而今天我要介绍的神器 fasd 就是可以让命令行操作变得更加高效</p>
<h2 id="fasd"><span class="section-num">1</span> Fasd</h2>
<p>在 Shell 下面有非常多的命令操作是与文件和目录相关的，如果你要进入到另外一个目 录你可以使用相对或者绝对路径来访问该目录，但是如果这是一个与当前目录不相关的目 录你就只能通过绝对路径来访问。</p>
<p>以我自己的目录为例，当前目录是 <strong><em>home/samray</em>.emacs.d/elisp/</strong> ,我希望访问 <strong>Document</strong> 目录下一个的子目录 <strong>Python</strong>, 我可以通过下面的命令来访问：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">cd</span> ~/Document/Programming/Python
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> /home/samray/Document/Programming/Python
</span></span></code></pre></td></tr></table>
</div>
</div><p>这就是我需要的命令，虽然可以通过 <strong>tab</strong> 进行目录名的补全，但是我还是觉得要输入的东西太多了(正如 Larry Wall 所说，懒惰是程序员的美德). 然后，我发现了 <a href="https://github.com/clvv/fasd">Fasd </a>这个神器。它可以让我只输入 <strong>Python</strong> 就进入到我想访问的 <strong>Python</strong> 目录，</p>
<p>神奇吧！:)</p>
<hr>
<p>Fasd以访问的频繁程度和最近是否有访问对文件和目录分配优先级，然后通过判断已访问的文件以及其优先级来切换目录或者打开文件，所以如果你之前已经访问过某个目录.</p>
<p>那么 你很容易就可以切换到那个目录</p>
<h3 id="常用选项"><span class="section-num">1.1</span> 常用选项</h3>
<ul>
<li>
<p><strong>-a(any)</strong>: 匹配文件和目录</p>
</li>
<li>
<p><strong>-i(interactive)</strong>: 以交互的方式选择文件或者目录</p>
</li>
<li>
<p><strong>-s(show/search)</strong>: 按照优先级展示文件或者目录</p>
</li>
<li>
<p><strong>-e &lt;cmd&gt;</strong>:对匹配的文件调用命令&lt;cmd&gt;</p>
</li>
<li>
<p><strong>-d</strong>:只匹配目录</p>
</li>
<li>
<p><strong>-f</strong>:只匹配文件
Fasd 文档还建议你为 fasd的命令选项设置别名</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">a</span><span class="o">=</span><span class="s1">&#39;fasd -a&#39;</span>        <span class="c1"># any</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">s</span><span class="o">=</span><span class="s1">&#39;fasd -si&#39;</span>       <span class="c1"># show / search / select</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">d</span><span class="o">=</span><span class="s1">&#39;fasd -d&#39;</span>        <span class="c1"># directory</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">f</span><span class="o">=</span><span class="s1">&#39;fasd -f&#39;</span>        <span class="c1"># file</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">sd</span><span class="o">=</span><span class="s1">&#39;fasd -sid&#39;</span>     <span class="c1"># interactive directory selection</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">sf</span><span class="o">=</span><span class="s1">&#39;fasd -sif&#39;</span>     <span class="c1"># interactive file selection</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">z</span><span class="o">=</span><span class="s1">&#39;fasd_cd -d&#39;</span>     <span class="c1"># cd, same functionality as j in autojump</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">zz</span><span class="o">=</span><span class="s1">&#39;fasd_cd -d -i&#39;</span> <span class="c1"># cd with interactive selection</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这样你就可以通过 <strong>z some-dir</strong> 直接进入到某个目录或者 <strong>zz some-dir</strong> 选择进入有多个匹配的特定目录。</p>
<p>Fasd 还会判断应该显示所有的匹配选项或者是直接选择最佳匹配. 例如你也可以将fasd配合 <em>subshell</em> 使用，例如打开 <strong>foo</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">vim <span class="sb">`</span>f foo<span class="sb">`</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>又或者打开  <strong>/etc/rc.conf</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">vim <span class="sb">`</span>f rc conf<span class="sb">`</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="例子"><span class="section-num">1.2</span> 例子</h3>
<p>你可以将fasd 配合正则表达式使用，例如列举以 <em>py</em> 结尾的最近访问的文件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">f py$
</span></span></code></pre></td></tr></table>
</div>
</div><p>又或者使用Emacs 打开最近频繁访问的文件 <em>bar</em></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">f -e emacs bar
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="fasd-plus-eshell"><span class="section-num">2</span> Fasd +Eshell</h2>
<p>fasd 真的可以大幅度提高效率，但是我有点不太满意的是，我是个 Emacser, 我的操作基本是在 Emacs 里完成的，而我在 Emacs里面使用的 shell 是 Eshell,Eshell 似乎不能与 fasd 无缝结合，似乎可以折腾一下。</p>
<hr>
<p><strong>z</strong> 和 <strong>zz</strong> 命令是无法在Eshell 里面运行，因为 <strong>z</strong> 是 <strong>fasd_cd</strong> 的别名，而<strong>fasd_cd</strong> 是一个shell script 函数，Eshell无法运行该函数，代码如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">fasd_cd <span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">[</span> <span class="nv">$#</span> -le <span class="m">1</span> <span class="o">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">then</span>
</span></span><span class="line"><span class="cl">	fasd <span class="s2">&#34;</span><span class="nv">$@</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span>
</span></span><span class="line"><span class="cl">	<span class="nb">local</span> <span class="nv">_fasd_ret</span><span class="o">=</span><span class="s2">&#34;</span><span class="k">$(</span>fasd -e <span class="s1">&#39;printf %s&#39;</span> <span class="s2">&#34;</span><span class="nv">$@</span><span class="s2">&#34;</span><span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="o">[</span> -z <span class="s2">&#34;</span><span class="nv">$_fasd_ret</span><span class="s2">&#34;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="o">[</span> -d <span class="s2">&#34;</span><span class="nv">$_fasd_ret</span><span class="s2">&#34;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">cd</span> <span class="s2">&#34;</span><span class="nv">$_fasd_ret</span><span class="s2">&#34;</span> <span class="o">||</span> <span class="nb">printf</span> %s<span class="se">\n</span> <span class="s2">&#34;</span><span class="nv">$_fasd_ret</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Eshell无法运行该函数，因为Eshell文档的匮乏，我也不知道如何编写跟上面代码等价的 &ldquo;Eshell script&rdquo;,所以就用 elisp 写一段同样功能的函数好了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">defun</span> <span class="nv">samray/eshell-fasd-z</span> <span class="p">(</span><span class="kp">&amp;rest</span> <span class="nv">args</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Use fasd to change directory more effectively by passing ARGS.&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">setq</span> <span class="nv">args</span> <span class="p">(</span><span class="nv">eshell-flatten-list</span> <span class="nv">args</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">let*</span> <span class="p">((</span><span class="nv">fasd</span> <span class="p">(</span><span class="nf">concat</span> <span class="s">&#34;fasd &#34;</span> <span class="p">(</span><span class="nf">car</span> <span class="nv">args</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">	 <span class="p">(</span><span class="nv">fasd-result</span> <span class="p">(</span><span class="nv">shell-command-to-string</span> <span class="nv">fasd</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	 <span class="p">(</span><span class="nv">path</span> <span class="p">(</span><span class="nv">replace-regexp-in-string</span> <span class="s">&#34;\n$&#34;</span> <span class="s">&#34;&#34;</span> <span class="nv">fasd-result</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	 <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="nv">eshell/cd</span> <span class="nv">path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="nv">eshell/echo</span> <span class="nv">path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>函数功能很快就写好了，实现了 <strong>z</strong> 的功能，但是原来的代码一直不能正常运行，折腾了一个多小时都没解决，输出什么都正常，最后 debug 发现是因为显示的路径后面多了一个换行符即 <strong>/home/samray</strong> 变成了 <strong>/home/samray\n</strong>,而输出换行符又不会显示，真
的坑。</p>
<p>最后为命令赋予别名就可以像在 <strong>zsh</strong> 下那样工作了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">alias</span> z <span class="s1">&#39;samray/shell-fasd-z $1&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<p>更多的用法就要查阅官方文档了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">man fasd
</span></span></code></pre></td></tr></table>
</div>
</div><p>Enjoy Emacs and Shell :)</p>
<p>参考：
<a href="https://github.com/clvv/fasd">https://github.com/clvv/fasd</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>在Emacs中使用Ipython</title>
      <link>https://ramsayleung.github.io/zh/post/2017/emacs_ipython/</link>
      <pubDate>Wed, 22 Feb 2017 00:00:00 +0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2017/emacs_ipython/</guid>
      <description>Use Ipython in Emasc</description>
      <content:encoded><![CDATA[<h2 id="emacs-ipython-输出错误"><span class="section-num">1</span> Emacs Ipython 输出错误</h2>
<p>在Emacs 运行 <strong>run-python</strong> 的时候，报错了，如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span class="line"><span class="cl"><span class="p">[</span><span class="sc">?1</span><span class="nv">2l</span><span class="p">[</span><span class="sc">?2</span><span class="nv">5h2+2</span>
</span></span><span class="line"><span class="cl">      <span class="p">[</span><span class="nv">J</span><span class="p">[</span><span class="sc">?7</span><span class="nv">h</span><span class="p">[</span><span class="sc">?1</span><span class="nv">2l</span><span class="p">[</span><span class="sc">?2</span><span class="nv">5h</span><span class="p">[</span><span class="sc">?2</span><span class="nv">004l</span><span class="p">[</span><span class="sc">?7</span><span class="nv">hOut</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">:</span> <span class="mi">4</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>因为我的版本时Ipython5,查阅文档<a href="http://ipython.readthedocs.io/en/stable/whatsnew/version5.html#id1">http://ipython.readthedocs.io/en/stable/whatsnew/version5.html#id1</a>
之后，发现Ipython5 有了新的terminal 接口，和Emacs 继承的shell 不兼容，所以
会出现上述的错误，只要给Ipython 加上运行参数就能解决了，所以只要在 <strong>.emacs</strong>
或者对应的初始化文件加上下面语句</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">setq</span> <span class="nv">python-shell-interpreter</span> <span class="s">&#34;ipython&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="nv">python-shell-interpreter-args</span> <span class="s">&#34;--simple-prompt -i&#34;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h3 id="update-2017-3-15"><span class="section-num">1.1</span> Update 2017-3-15</h3>
<p>在添加了 <strong>&ndash;simple-promp -i</strong> 参数以后，虽说乱码的问题解决了，但是新的问题又出现了
在Ipython 里面是没法无法输入多行内容的，即使是一个简单的循环，详情查看这条issue
<a href="https://github.com/ipython/ipython/issues/9816">https://github.com/ipython/ipython/issues/9816</a>. 现在Ipython 开发社区还没有解决这个
问题，所以现在的权宜之计就是使用 Ipython4,等到社区解决了这个问题在升级为 Ipython5</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">pip install --force-reinstall <span class="nv">ipython</span><span class="o">==</span>4.2.1
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="emacs-ipython-的使用优化"><span class="section-num">2</span> Emacs Ipython 的使用优化</h2>
<h3 id="python-pop"><span class="section-num">2.1</span> python-pop</h3>
<p>因为我之前使用Emacs的时候，是使用Spacemacs的配置的，但是后来觉得还是自己的
配置用的更舒服，所以又切换回自己的配置，但是我还是很想念Spacemacs的一些绑定
例如shell在底下弹出，或者是关闭，然后找到了<a href="https://github.com/kyagi/shell-pop-el">Shell-pop</a> 这package,就可以用回
Spacemacs的shell使用习惯。然后我觉得，Ipython shell也可以这样配置，只不过
我没有发现类似的package,又因为Emacs Lisp的强大，所以我自己写了一段小函数实现
shell-pop 的功能</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">defun</span> <span class="nv">samray/python-pop</span> <span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Run python and switch to the python buffer.
</span></span></span><span class="line"><span class="cl"><span class="s">similar to shell-pop&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">interactive</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">if</span> <span class="p">(</span><span class="nf">get-buffer</span> <span class="s">&#34;*Python*&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="nb">if</span> <span class="p">(</span><span class="nv">string=</span> <span class="p">(</span><span class="nf">buffer-name</span><span class="p">)</span> <span class="s">&#34;*Python*&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	  <span class="p">(</span><span class="nb">if</span> <span class="p">(</span><span class="nv">not</span> <span class="p">(</span><span class="nv">one-window-p</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	      <span class="p">(</span><span class="nb">progn</span> <span class="p">(</span><span class="nv">bury-buffer</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		     <span class="p">(</span><span class="nv">delete-window</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	    <span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">(</span><span class="nb">progn</span> <span class="p">(</span><span class="nv">switch-to-buffer-other-window</span> <span class="s">&#34;*Python*&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	       <span class="p">(</span><span class="nv">end-of-buffer</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	       <span class="p">(</span><span class="nv">evil-insert-state</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="nb">progn</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="nv">run-python</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="nv">switch-to-buffer-other-window</span> <span class="s">&#34;*Python*&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="nv">end-of-buffer</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="nv">evil-insert-state</span><span class="p">))))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果没有使用Evil,可以把 **(evil-insert-state)**去掉</p>
<h3 id="ipython-history"><span class="section-num">2.2</span> Ipython History</h3>
<p>我在普通的Shell使用Ipython的时候，很自然地使用上下方向键翻到上一条/下一条
执行的命令，因为shell的使用习惯就是这样滴，但是在Emacs里面使用Ipython,上下
方向键是去到上一行/下一行，就好像 vim 的 <strong>j</strong> <strong>k</strong>,如果要翻到上一条命令，快捷键
是 <strong>M-p</strong>,实在很不习惯，所以在查了一下Emacs manual 后，我改了一下按键绑定就实现了
我想要的效果</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nf">define-key</span> <span class="nv">comint-mode-map</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&#34;&lt;up&gt;&#34;</span><span class="p">)</span> <span class="ss">&#39;comint-previous-input</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nf">define-key</span> <span class="nv">comint-mode-map</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&#34;&lt;down&gt;&#34;</span><span class="p">)</span> <span class="ss">&#39;comint-next-input</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Enjoy Emacs :)</p>
]]></content:encoded>
    </item>
    <item>
      <title>提高Emacs启动速度</title>
      <link>https://ramsayleung.github.io/zh/post/2017/emacs_startup/</link>
      <pubDate>Wed, 22 Feb 2017 00:00:00 +0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2017/emacs_startup/</guid>
      <description>Tips to reduce emacs startup time</description>
      <content:encoded><![CDATA[<p>之前看到个笑话：</p>
<blockquote>
<ul>
<li>A: 在等待emacs 加载的时间里，你会干什么？</li>
<li>B: 打开Vim,修改代码，保存，退出</li>
</ul>
</blockquote>
<p>有时候，经常看到社区里面有人吐嘈Emacs 什么都好，就是启动时间太长了，其实是存在一些技巧来缩短加载时间的</p>
<h2 id="技巧1"><span class="section-num">1</span> 技巧1</h2>
<p>在你的 <strong>.emacs</strong> 或者相应的初始化文件里面添加如下代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span class="line"><span class="cl"><span class="err">#</span> <span class="nv">Increase</span> <span class="nv">the</span> <span class="nv">garbage</span> <span class="nv">collection</span> <span class="nv">threshold</span> <span class="nv">to</span> <span class="mi">128</span> <span class="nv">MB</span> <span class="nv">to</span> <span class="nv">ease</span> <span class="nv">startup</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">setq</span> <span class="nv">gc-cons-threshold</span> <span class="p">(</span><span class="nf">*</span> <span class="mi">128</span> <span class="mi">1024</span> <span class="mi">1024</span> <span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="err">#</span> <span class="nv">your</span> <span class="nv">configuration</span> <span class="nv">code</span>
</span></span><span class="line"><span class="cl"><span class="err">#</span> <span class="o">......</span>
</span></span><span class="line"><span class="cl"><span class="err">#</span> <span class="nv">Garbage</span> <span class="nv">collector-decrease</span> <span class="nv">threshold</span> <span class="nv">to</span> <span class="mi">5</span> <span class="nv">MB</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;after-init-hook</span> <span class="p">(</span><span class="nb">lambda</span> <span class="p">()</span> <span class="p">(</span><span class="nb">setq</span> <span class="nv">gc-cons-threshold</span> <span class="p">(</span><span class="nf">*</span> <span class="mi">5</span> <span class="mi">1024</span> <span class="mi">1024</span><span class="p">))))</span>
</span></span><span class="line"><span class="cl"><span class="err">#</span> <span class="nv">init.el</span> <span class="nv">ends</span> <span class="nv">here</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>gc-cons-threshold</strong> 指定了emacs 进行垃圾回收的阀值，默认值是 <strong>800000byte</strong>,实在是太小了，所以Emacs 会在启动期间进行非常多次的垃圾回收，启动时间自然长了。</p>
<p>在加载完以后，再把 <strong>gc-cons-threshold</strong> 的值调低，当然，如果你的内存很大，也可以不改回来</p>
<h2 id="技巧2"><span class="section-num">2</span> 技巧2</h2>
<p><strong>(let((file-name-hander-alist nil))init.file)</strong> 包裹(wrap)你的初始化文件，即：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">setq</span> <span class="nv">gc-cons-threshold</span> <span class="p">(</span><span class="nf">*</span> <span class="mi">500</span> <span class="mi">1024</span> <span class="mi">1024</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">let</span> <span class="p">((</span><span class="nv">file-name-handler-alist</span> <span class="no">nil</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">  <span class="o">...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nv">**</span> <span class="nv">your</span> <span class="nv">config</span> <span class="nv">goes</span> <span class="nv">here</span> <span class="nv">**</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="o">...</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;after-init-hook</span> <span class="p">(</span><span class="nb">lambda</span> <span class="p">()</span> <span class="p">(</span><span class="nb">setq</span> <span class="nv">gc-cons-threshold</span> <span class="p">(</span><span class="nf">*</span> <span class="mi">5</span> <span class="mi">1024</span> <span class="mi">1024</span><span class="p">))))</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">provide</span> <span class="ss">&#39;init</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">;;; init.el ends here</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>因为 <strong>file-name-handler-alist</strong> 的默认值是一些正则表达式，也就是说Emacs 在启动过程中加载el和elc 文件都会将文件名和正则表达式进行匹配</p>
<h2 id="技巧3"><span class="section-num">3</span> 技巧3</h2>
<p>Emacs lisp 有一项auto-load 的技术，类似延迟加载，合理运用延迟，让笔者的Emacs启动加载时间减少一半，因为笔者用 <strong>use-package</strong> 这个macro,而 <strong>use-package</strong> 又集成了延迟加载的功能，所以笔者就直接拿自己的代码举例了</p>
<h3 id="after"><span class="section-num">3.1</span> :after</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span class="line"><span class="cl"><span class="c1">;;; Export to twitter bootstrap</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">use-package</span> <span class="nv">ox-twbs</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:after</span> <span class="nv">org</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:ensure</span> <span class="nv">ox-twbs</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>:after</strong> 关键字的作用基本跟 <strong>with-eval-after-load</strong> 的作用是相同的，所以笔者所
有类似的org-mode 插件包都会在org-mode 加载以后才会加载</p>
<h3 id="commands"><span class="section-num">3.2</span> :commands</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">use-package</span> <span class="nv">avy</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:commands</span> <span class="p">(</span><span class="nv">avy-goto-char</span> <span class="nv">avy-goto-line</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:ensure</span> <span class="no">t</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这里就贴上<a href="https://github.com/jwiegley/use-package">use-package</a>文档 的说明了</p>
<blockquote>
<p>When you use the :commands keyword, it creates autoloads for those commands
and defers loading of the module until they are used</p>
</blockquote>
<p>也就是 <strong>:commands</strong> 关键字就创建了后面所接的命令的 <strong>autoloads</strong> 机制了</p>
<h3 id="bind-mode"><span class="section-num">3.3</span> :bind :mode</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">use-package</span> <span class="nv">hi-lock</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:bind</span> <span class="p">((</span><span class="s">&#34;M-o l&#34;</span> <span class="o">.</span> <span class="nv">highlight-lines-matching-regexp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	 <span class="p">(</span><span class="s">&#34;M-o r&#34;</span> <span class="o">.</span> <span class="nv">highlight-regexp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	 <span class="p">(</span><span class="s">&#34;M-o w&#34;</span> <span class="o">.</span> <span class="nv">highlight-phrase</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">use-package</span> <span class="nv">vue-mode</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:ensure</span> <span class="no">t</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:mode</span> <span class="p">(</span><span class="s">&#34;\\.vue\\&#39;&#34;</span> <span class="o">.</span> <span class="nv">vue-mode</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:config</span> <span class="p">(</span><span class="nb">progn</span>
</span></span><span class="line"><span class="cl">	    <span class="p">(</span><span class="nb">setq</span> <span class="nv">mmm-submode-decoration-level</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	    <span class="p">))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>附上文档说明</p>
<blockquote>
<p>In almost all cases you don&rsquo;t need to manually specify :defer t. This is implied
whenever :bind or :mode or :interpreter is used</p>
</blockquote>
<p>也就是说，当你使用了 <strong>:bind</strong> 或者 <strong>:mode</strong> 关键字的时候，不用明确指定 <strong>:defer</strong> 也可以实现延迟加载机制。</p>
<p>当然你也可以，直接使用 <strong>:defer</strong> 关键字来指定延迟加载. 不过前提是，你要明确它加载的时机</p>
<blockquote>
<p>Typically, you only need to specify :defer if you know for a fact that some
other package will do something to cause your package to load at the appropriate
time, and thus you would like to defer loading even though use-package isn&rsquo;t
creating any autoloads for you.</p>
</blockquote>
<p>贴上笔者自己的代码，可以更加清晰</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">use-package</span> <span class="nv">anaconda-mode</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:defer</span> <span class="no">t</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:ensure</span> <span class="no">t</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:init</span><span class="p">(</span><span class="nb">progn</span>
</span></span><span class="line"><span class="cl">	 <span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;python-mode-hook</span> <span class="ss">&#39;anaconda-mode</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	 <span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;python-mode-hook</span> <span class="ss">&#39;anaconda-eldoc-mode</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	 <span class="p">))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这样 <strong>anaconda-mode</strong> 就会在 <strong>python-mode</strong> 加载以后被加载</p>
<p>Enjoy Emacs :)</p>
]]></content:encoded>
    </item>
  </channel>
</rss>

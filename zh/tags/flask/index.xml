<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>flask on 自由庄园</title>
    <link>https://ramsayleung.github.io/zh/tags/flask/</link>
    <description>Recent content in flask on 自由庄园</description>
    <image>
      <title>自由庄园</title>
      <url>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.120.4</generator>
    <language>zh</language>
    <copyright>See this site&amp;rsquo;s source code here, licensed under GPLv3 ·</copyright>
    <lastBuildDate>Wed, 23 Feb 2022 22:37:41 +0800</lastBuildDate>
    <atom:link href="https://ramsayleung.github.io/zh/tags/flask/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>flask牛刀小试之微信公众号开发</title>
      <link>https://ramsayleung.github.io/zh/post/2017/weixin_flask/</link>
      <pubDate>Thu, 23 Feb 2017 00:00:00 +0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2017/weixin_flask/</guid>
      <description>An flask project</description>
      <content:encoded><![CDATA[<p><a href="http://flask.pocoo.org/">flask</a> 是一个轻量级的python 框架(官网称为微型框架),很容易上手，之前因为笔者跟朋友开发小程序的时候使用过 flask,过后就遗忘了。</p>
<p>为了重拾flask, 笔者决定写点小东西，之前开发小程序，不如现在再玩玩公众号开发</p>
<h2 id="验证服务器"><span class="section-num">1</span> 验证服务器</h2>
<p>开发公众号之前，要先验证服务器的有效性，官网有详细的说明：<a href="https://mp.weixin.qq.com/wiki/8/f9a0b8382e0b77d87b3bcc1ce6fbc104.html">公众开发平台文档</a></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>signature</td>
<td>微信加密签名，signature结合了开发者填写的token参数和请求中的timestamp参数、nonce参数。</td>
</tr>
<tr>
<td>timestamp</td>
<td>时间戳</td>
</tr>
<tr>
<td>nonce</td>
<td>随机数</td>
</tr>
<tr>
<td>echostr</td>
<td>随机字符串</td>
</tr>
</tbody>
</table>
<p>校验流程：加密/校验流程如下：</p>
<ol>
<li>将token、timestamp、nonce三个参数进行字典序排序</li>
<li>将三个参数字符串拼接成一个字符串进行sha1加密</li>
<li>开发者获得加密后的字符串可与signature对比，标识该请求来源于微信</li>
</ol>
<p>流程并不复杂，官网给出了代码示例，只不过是PHP的，换成python 也是很容易滴：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nd">@app.route</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span><span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span><span class="s1">&#39;POST&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">	<span class="k">def</span> <span class="nf">wechat</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span><span class="o">==</span><span class="s1">&#39;GET&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	    <span class="n">token</span><span class="o">=</span><span class="s1">&#39;your token&#39;</span>
</span></span><span class="line"><span class="cl">	    <span class="n">data</span><span class="o">=</span><span class="n">request</span><span class="o">.</span><span class="n">args</span>
</span></span><span class="line"><span class="cl">	    <span class="n">signature</span><span class="o">=</span><span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;signature&#39;</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	    <span class="n">timestamp</span><span class="o">=</span><span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;timestamp&#39;</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	    <span class="n">nonce</span> <span class="o">=</span><span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;nonce&#39;</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	    <span class="n">echostr</span><span class="o">=</span><span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;echostr&#39;</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	    <span class="n">s</span><span class="o">=</span><span class="p">[</span><span class="n">timestamp</span><span class="p">,</span><span class="n">nonce</span><span class="p">,</span><span class="n">token</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	    <span class="n">s</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	    <span class="n">s</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span><span class="p">(</span><span class="n">hashlib</span><span class="o">.</span><span class="n">sha1</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">()</span><span class="o">==</span><span class="n">signature</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">make_response</span><span class="p">(</span><span class="n">echostr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	    <span class="n">rec</span><span class="o">=</span><span class="n">request</span><span class="o">.</span><span class="n">stream</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	    <span class="n">xml_rec</span><span class="o">=</span><span class="n">ET</span><span class="o">.</span><span class="n">fromstring</span><span class="p">(</span><span class="n">rec</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	    <span class="n">tou</span> <span class="o">=</span> <span class="n">xml_rec</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;ToUserName&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span>
</span></span><span class="line"><span class="cl">	    <span class="n">fromu</span> <span class="o">=</span> <span class="n">xml_rec</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;FromUserName&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span>
</span></span><span class="line"><span class="cl">	    <span class="n">content</span> <span class="o">=</span> <span class="n">xml_rec</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;Content&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span>
</span></span><span class="line"><span class="cl">	    <span class="n">xml_rep</span> <span class="o">=</span> <span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span><span class="n">xml</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span><span class="n">ToUserName</span><span class="o">&gt;&lt;</span><span class="err">!</span><span class="p">[</span><span class="n">CDATA</span><span class="p">[</span><span class="o">%</span><span class="n">s</span><span class="p">]]</span><span class="o">&gt;&lt;/</span><span class="n">ToUserName</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span><span class="n">FromUserName</span><span class="o">&gt;&lt;</span><span class="err">!</span><span class="p">[</span><span class="n">CDATA</span><span class="p">[</span><span class="o">%</span><span class="n">s</span><span class="p">]]</span><span class="o">&gt;&lt;/</span><span class="n">FromUserName</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span><span class="n">CreateTime</span><span class="o">&gt;%</span><span class="n">s</span><span class="o">&lt;/</span><span class="n">CreateTime</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span><span class="n">MsgType</span><span class="o">&gt;&lt;</span><span class="err">!</span><span class="p">[</span><span class="n">CDATA</span><span class="p">[</span><span class="n">text</span><span class="p">]]</span><span class="o">&gt;&lt;/</span><span class="n">MsgType</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span><span class="n">Content</span><span class="o">&gt;&lt;</span><span class="err">!</span><span class="p">[</span><span class="n">CDATA</span><span class="p">[</span><span class="o">%</span><span class="n">s</span><span class="p">]]</span><span class="o">&gt;&lt;/</span><span class="n">Content</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span><span class="n">FuncFlag</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&lt;/</span><span class="n">FuncFlag</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;/</span><span class="n">xml</span><span class="o">&gt;</span><span class="s2">&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这样服务器就校验成功了，就可以编写相关的业务逻辑了</p>
<h2 id="歌词查询"><span class="section-num">2</span> 歌词查询</h2>
<p>笔者自己平时是打开音乐播放器，戴上耳机，就开始播放音乐；所以经常出现笔者听到某首歌曲觉得旋律非常熟悉，但是就无法想起歌名的情况，这种感觉实在不好，所以笔者觉得可以编写一个通过歌词查询歌曲，并返回所有歌词的功能。</p>
<p>思路大概是编写爬虫，通过歌词进行查询，然后对返回的html 页面进行检索和信息提取。剩下的事就是爬虫和解析页面了，笔者是使用<a href="http://www.xiami.com/">虾米</a> 进行歌词查询的，使用 request 发送 http 请求，使用 lxml进行解析，其他就不一一细表了</p>
<h2 id="单词查询"><span class="section-num">3</span> 单词查询</h2>
<p>有时候，笔者在微信需要查询单词，但是又不想退出微信，所以就打算用公众号来查单词其实很简单，就是服务获取用户发给微信公众号的数据，再去请求有道之类词典的api,再把结果返回给服务器，服务器转发给用户</p>
<h2 id="电影查询"><span class="section-num">4</span> 电影查询</h2>
<p>有时无聊想去看电影，但是不知道看什么电影，因为选择太多，质量参差不齐的片太多了所以笔者会先去豆瓣看一下新上影的电影，看一下评分，然后再决定看什么电影。所以，笔者可以把这个功能搬到公众号来。如何实现呢？还是爬虫</p>
<h2 id="总结"><span class="section-num">5</span> 总结</h2>
<p>感觉这次开发公众号，笔者就是用 flask 编写 restful api, 然后做的其他事情就是编写爬虫。</p>
<p><a href="https://github.com/samrayleung/SamrayJustForFun">项目github地址</a></p>
]]></content:encoded>
    </item>
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Design on 菠萝油与天光墟</title>
    <link>https://ramsayleung.github.io/zh/tags/design/</link>
    <description>Recent content in Design on 菠萝油与天光墟</description>
    <image>
      <title>菠萝油与天光墟</title>
      <url>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.146.7</generator>
    <language>zh</language>
    <copyright>See this site&amp;rsquo;s source code here, licensed under GPLv3 ·</copyright>
    <lastBuildDate>Sun, 14 Sep 2025 22:35:50 -0700</lastBuildDate>
    <atom:link href="https://ramsayleung.github.io/zh/tags/design/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>基于贝叶斯算法的Telegram广告拦截机器人（二）：上线半月的故障、挑战与优化之路</title>
      <link>https://ramsayleung.github.io/zh/post/2025/%E5%9F%BA%E4%BA%8E%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%AE%97%E6%B3%95%E7%9A%84telegram%E5%B9%BF%E5%91%8A%E6%8B%A6%E6%88%AA%E6%9C%BA%E5%99%A8%E4%BA%BA%E4%BA%8C/</link>
      <pubDate>Sat, 13 Sep 2025 14:28:00 -0700</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2025/%E5%9F%BA%E4%BA%8E%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%AE%97%E6%B3%95%E7%9A%84telegram%E5%B9%BF%E5%91%8A%E6%8B%A6%E6%88%AA%E6%9C%BA%E5%99%A8%E4%BA%BA%E4%BA%8C/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; 引言&lt;/h2&gt;
&lt;p&gt;半个月前，我发布了一个基于贝叶斯算法的Telegram广告拦截机器人 &lt;code&gt;@BayesSpamSniperBot&lt;/code&gt; (&lt;a href=&#34;https://t.me/BayesSpamSniperBot&#34;&gt;https://t.me/BayesSpamSniperBot&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;项目地址：&lt;a href=&#34;https://github.com/ramsayleung/bayes_spam_sniper&#34;&gt;https://github.com/ramsayleung/bayes_spam_sniper&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;系列文章:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ramsayleung.github.io/zh/post/2025/%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AD%A6%E4%B9%A0%E7%9A%84telegram%E5%B9%BF%E5%91%8A%E6%8B%A6%E6%88%AA%E6%9C%BA%E5%99%A8%E4%BA%BA/&#34;&gt;基于贝叶斯算法的Telegram广告拦截机器人（一）：从问题到产品&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;尽管项目代码开源，但我始终以产品思维运营它。上线半个月以来，经历了故障、用户反馈与持续优化，现将这段经历分享出来。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="引言"><span class="section-num">1</span> 引言</h2>
<p>半个月前，我发布了一个基于贝叶斯算法的Telegram广告拦截机器人 <code>@BayesSpamSniperBot</code> (<a href="https://t.me/BayesSpamSniperBot">https://t.me/BayesSpamSniperBot</a>)</p>
<p>项目地址：<a href="https://github.com/ramsayleung/bayes_spam_sniper">https://github.com/ramsayleung/bayes_spam_sniper</a></p>
<p>系列文章:</p>
<ul>
<li><a href="/zh/post/2025/%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AD%A6%E4%B9%A0%E7%9A%84telegram%E5%B9%BF%E5%91%8A%E6%8B%A6%E6%88%AA%E6%9C%BA%E5%99%A8%E4%BA%BA/">基于贝叶斯算法的Telegram广告拦截机器人（一）：从问题到产品</a></li>
</ul>
<p>尽管项目代码开源，但我始终以产品思维运营它。上线半个月以来，经历了故障、用户反馈与持续优化，现将这段经历分享出来。</p>
<h2 id="上线即故障"><span class="section-num">2</span> 上线即故障</h2>
<p>没想到我的产品的第一个线上故障来得这么快，发布的时候直接不可用，把正常消息都给删了，用户在各种途径都向我反馈：</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-c7b58" hidden>
    <label for="zoomCheck-c7b58">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/delete_all_message_1.jpg"/> 
    
    
    </label>
</figure>


<figure>
    
    
    <input type="checkbox" id="zoomCheck-80e7c" hidden>
    <label for="zoomCheck-80e7c">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/delete_all_message_2.jpg"/> 
    
    
    </label>
</figure>

<p>故障的原因是我当时一直在收集垃圾广告的数据，太专注于垃圾广告数据，而忽略了收集的正常数据，
导致垃圾广告数据过多，消息都被认为是垃圾广告，被误删了。</p>
<p>通过补充大量正常消息数据，重新平衡训练集，模型逐渐恢复正常识别能力。</p>
<h2 id="挑战"><span class="section-num">3</span> 挑战</h2>
<h3 id="邮件与即时消息的差异"><span class="section-num">3.1</span> 邮件与即时消息的差异</h3>
<p>我在<a href="/zh/post/2025/%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AD%A6%E4%B9%A0%E7%9A%84telegram%E5%B9%BF%E5%91%8A%E6%8B%A6%E6%88%AA%E6%9C%BA%E5%99%A8%E4%BA%BA/">《基于贝叶斯算法的Telegram广告拦截机器人（一）：从问题到产品》</a>里面提到过：</p>
<blockquote>
<p>常见的 Telegram 广告机器人是大多是基于关键字的，通过匹配关键字进行文本拦截，非常容易被发垃圾广告的人绕过。</p>
<p>这不禁让我想起了保罗.格雷厄姆在《黑客与画家》一书在2002年介绍的情况：</p>
<p>当时电子邮件兴起，也有非常多的垃圾邮件，常见的垃圾广告拦截方式是关键字匹配+邮件地址黑名单，但是既低效也容易被绕过。</p>
<p>保罗.格雷厄姆就创造性地使用贝叶斯算法(Bayes Theorem)实现了一个广告拦截器, 效果竟然出奇地好。</p></blockquote>
<p>但产品上线之后，我发现聊天软件消息和Email虽然都是文字，还是有很大差别的:</p>
<p>Email 大多时候都是长文的，内容较长，并且大多情况，一封邮件上下文本身也很完整，就有较多的内容，较高的准确度来判断是否是广告。</p>
<p>而 Telegram, 微信这类的即时聊天软件，聊天消息大多都不长，可能把内容分成多条消息来发，就没有完整的上下文，比如:</p>
<blockquote>
<p>换U</p></blockquote>
<!--quoteend-->
<blockquote>
<p>找我</p></blockquote>
<p>单条消息很较难准确判断是否是广告，所以对即时消息做广告拦截本身就更难, 「短文本+无上下文」是NLP中的经典难题，也是本项目最大的技术挑战。</p>
<h3 id="漏删与误删"><span class="section-num">3.2</span> 漏删与误删</h3>
<p>漏删与误删是广告拦截中不可避免的矛盾权衡。</p>
<p>若想提高拦截率（召回率），就需降低置信度阈值，将更多疑似广告的消息拦截，但这也会增加误删正常消息的风险。</p>
<p>反之，若想避免误删（提高精确率），则必须提高置信度阈值，但这又会导致更多广告被漏掉。</p>
<p>在即时消息短小、上下文缺失的特性下，想同时实现零误删和零漏删几乎是不可能的。</p>
<p>权衡之下，我选择优先保证用户体验： <strong><strong>宁可漏删，不可误删</strong></strong></p>
<p>因为漏掉的广告，群友可以举报或由管理员手动删除；但误删的正常消息却无法恢复，对用户的伤害更大。</p>
<p>因此，我将拦截阈值设置为95%，即仅当模型有极高把握（&gt;95%概率）判定为广告时才会删除。</p>
<p>这虽然会放过一些疑似广告，但最大程度地保障了正常聊天不被误删。</p>
<h2 id="优化之路"><span class="section-num">4</span> 优化之路</h2>
<h3 id="自动删除消息"><span class="section-num">4.1</span> 自动删除消息</h3>
<p>产品上线之后，很快就有用户来试用了，然后其中一个用户就提了一个非常好的优化建议。</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-28a2c" hidden>
    <label for="zoomCheck-28a2c">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/detect_spam_and_ban_user.jpg"/> 
    
    
    </label>
</figure>

<p>这个警告的消息不会自动删除，如果有很多人在群里发广告，那么群里就会有一堆这样的消息，也算是对群消息的污染。</p>
<p>所以用户建议:</p>
<blockquote>
<p>可以发这个提醒，但在几分钟后也把这个提醒消息删除掉</p></blockquote>
<p>我觉得这是个非常好的优化体验，因为就把这个功能给加上了，提醒消息本身会在5分钟后自动删除。</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-3c682" hidden>
    <label for="zoomCheck-3c682">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/auto_delete_warning_message.jpg"/> 
    
    
    </label>
</figure>

<p>倾听用户的声音是非常重要的，他们可能就会从他们的角度提出非常好的建议。</p>
<p>但是不要盲目听从用户的建议，比如也有用户建议：</p>
<blockquote>
<p>我觉得还应该有以下功能.</p>
<ol>
<li>恢复消息, 恢复用户. (让管理员恢复误删的消息和用户)</li>
<li>主动投喂正常消息. (让管理员主动投喂一些消息. 比如, 群里面昨天 的消息, 随便选一些正常的, 投喂给机器人)</li>
</ol></blockquote>
<p>恢复消息这个功能没有太大必要，并且也不实用，因为恢复消息这个功能本身就很微妙，是直接恢复被删除的消息呢，还是重新发一条新消息？</p>
<p>如：</p>
<blockquote>
<ul>
<li>2025-09-09 10:01:00 张三: 我今天吃了鸡翅</li>
<li>2025-09-09 10:02:00 李四：鸡翅有啥好的（被误删消息）</li>
<li>2025-09-09 10:03:00 王五：人家就喜欢吃，你管得着嘛</li>
</ul></blockquote>
<p>如果是直接恢复被删除的消息，当前时间是 <code>2025-09-09 11:00:00</code> ，把消息恢复之后，还有人会手动刷历史消息，查找旧消息么？</p>
<p>Telegram客户端不一定支持会跳转被恢复的旧消息，这意味着，你恢复误删的消息，也没人看得到。</p>
<p>假如是重新发一条新消息 <code>鸡翅有啥好的</code>, 因为缺失了上下文，群里的人反而会疑惑，你在说什么。</p>
<p>解决误删问题本质是提高拦截的准确率，而非考虑如何恢复被误删消息，准确率提高了，误删就会减少，
自然就不需要考虑如何恢复消息，用户体验还会更好.</p>
<p>而主动投喂消息这个想法有点理所当然了。</p>
<p>没有任何群管理员有意愿帮忙训练这个机器人，对用户而言，他们只想要一个好用的广告拦截机器人，至于怎么开发，训练出来的，用户并不在乎。</p>
<p>所以用户不会有意愿和动力来优化这个机器人，不好用就再换一个好了，更何况，逐条消息收集的效率实在太慢太慢了，
所以我后面想出了一个比手工收集数据提效至少100倍的主意。</p>
<h3 id="过滤重复消息"><span class="section-num">4.2</span> 过滤重复消息</h3>
<p>发现人难免会有误区，总会以为别人会和自己一样，之前看到发垃圾广告的人的时候，总会觉得他们是正常的用户手工发。</p>
<p>但是最近几天发现了一些规律，有用户把同一条消息反复发，不同的群还是发同样的内容
即使是复制粘贴也难免会多个或者少个空格，然后消息被删了还一直发同样的内容。</p>
<p>此外，还有一些群，内容的聊天内容都是广告，我还很奇怪，大家都在发广告，正常用户不都跑了嘛?</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-fc97b" hidden>
    <label for="zoomCheck-fc97b">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/spam_group.jpg"/> 
    
    
    </label>
</figure>

<p>此时，我才意识到，发消息的都是机器人。</p>
<p>所以我加了个优化，计算消息内容的 hash 值，保存到数据库，并为这个字段建立索引。</p>
<p>后面检测消息的时候，先根据 hash 值查询，检查是否存在已有的消息，如果消息已经存在且已经被标记成广告或者正常消息，那么就无需再使用模型检测，可以直接返回之前的检测结果。</p>
<p>这样既提高了准确度，也优化了性能，也减少了人工干预的成本。</p>
<p>同一个用户如果在同一个群发了三条广告，那么就会自动被封禁掉，也就是相同的广告只要发三条，就会马上被自动封禁掉。</p>
<hr>
<p>为什么是计算 hash 值并为该Hash值建立索引而非对完整的文本消息建立索引？</p>
<p>因为文本消息是变长的，并且聊天消息可能会很长，对这样的 <code>TEXT</code> 建立索引会产生非常大的索引结构，占用大量的磁盘空间，每次进入查找，插入和排序操作，速度都会较慢。</p>
<p>而 hash 值是定长且非常短（相对原始消息而言），建立索引速度非常快，此外 hash 函数保证只有相同的输入一定会产生相同的输出，而即使一个字符不一致，其计算出来的 hash 值就会不一致，就能判断内容文本不一致。</p>
<h3 id="自动收集数据"><span class="section-num">4.3</span> 自动收集数据</h3>
<p>使用机器学习算法来实现一个类似的垃圾广告过滤器并不难，困难的持续收集高质量的训练数据，训练数据是非常宝贵的，毕竟数据才是核心资产。</p>
<p>而对于我这个产品来说，最难的是冷启动时的训练数据问题：</p>
<p>因为没有训练数据，模型就不准确，模型不好用就不会有人使用，自然也无法通过用户来收集垃圾广告数据，就无法良性循环，
存在一个鸡生蛋，还是蛋生鸡的问题。</p>
<p>所以冷启动时，我是手动加了非常多的 Telegram大群，然后人工在里面收集垃圾广告.</p>
<p>但是这个效率实在是太低了，我收集了快一周才只有几百条数据，
一个是我无法一直盯着各个群，另外是这种20w的大群，一般都会有几个管理员，会手工删除广告，一会没有看垃圾广告数据就会被删掉了。</p>
<p>这样手工收集数据实在在太痛苦了，我就在想有没有什么办法自动收集数据呢？</p>
<p>我本来想的是直接把我的机器人拉到这些大群里面，即使没有管理员权限无法删除消息，也可以收集数据嘛，后面才意识到 Telegram 有个规定，只有群管理员才有权限加机器人，因为我不是管理员，所以自动没有权限添加机器人。</p>
<p>但是 telegram 的客户端是开源的，他们提供了 <a href="https://github.com/tdlib/td">tdlib</a> <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>这个跨平台的 C++ 库便于社区构建第三方的 Telegram 客户端，那么我自然可以使用这个库来登录我自己的账号，然后使用我的模型来过滤消息，然后把疑似广告的数据都收集起来，我再人工确认下。</p>
<p>（顺便说一下，tdlib 和 <a href="https://github.com/tdlib/telegram-bot-api">telegram-bot-api</a> <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>这两个库竟然都是同一个<a href="https://github.com/levlam">作者 Aliaksei Levin</a> <sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>在维护，实在是太强了。）</p>
<p>我现在需要做的就是添加各种大群，然后程序就会自动监听并收集数据，我再人工批量确认下。</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-b4635" hidden>
    <label for="zoomCheck-b4635">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/spam_group_list.jpg"/> 
    
    
    </label>
</figure>


<figure>
    
    
    <input type="checkbox" id="zoomCheck-153f7" hidden>
    <label for="zoomCheck-153f7">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/telegram_data_collector.jpg"/> 
    
    
    </label>
</figure>


<figure>
    
    
    <input type="checkbox" id="zoomCheck-cbf5b" hidden>
    <label for="zoomCheck-cbf5b">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/maybe_spam_list.jpg"/> 
    
    
    </label>
</figure>

<p>实现起来也不复杂， 200行代码就实现了这个监听消息，分析，并且收集的功能。</p>
<p>得益于这个自动化的数据收集程序，我1周不到就收集了近上万条的高质量训练数据了，效率实在高太多太多了。</p>
<p>懒惰真的是程序员的美德, 这个经历再次证明：自动化工具往往能成倍提升效率，这正是工程师价值的体现.</p>
<h2 id="推广"><span class="section-num">5</span> 推广</h2>
<p>所谓酒香也怕巷子深，没有用户使用，代码写得再好也没有意义。从产品角度，运营推广至关重要。</p>
<p>作为个人开发者，我没有大量粉丝关注，也没有营销预算，因此采用了传统的推广方式：撰写博客并在相关社区分享。</p>
<p>我撰写了两篇双语博客文章，中文版本分享至：</p>
<ul>
<li>V2EX: <a href="https://www.v2ex.com/t/1156542">https://www.v2ex.com/t/1156542</a>]]</li>
<li>Emacs China: <a href="https://emacs-china.org/t/emacs-telegram/30043">https://emacs-china.org/t/emacs-telegram/30043</a></li>
<li>微信公众号「宫孙说」：<a href="https://mp.weixin.qq.com/s/Sgq9vDqpHykwge11bwZJrw">https://mp.weixin.qq.com/s/Sgq9vDqpHykwge11bwZJrw</a></li>
<li>项目被收录到<a href="https://www.ruanyifeng.com/blog/2025/09/weekly-issue-364.html">阮一峰的科技爱好者周刊（第 364 期）</a></li>
</ul>
<p>英文版本发布至：</p>
<ul>
<li>Reddit: <a href="https://old.reddit.com/r/rails/comments/1n6p791/built_my_first_rails_project_a_telegram_spam/">Built my first Rails project: A Telegram spam blocker bot</a> <sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>- 获得一些讨论</li>
<li>HackerNews：<a href="https://news.ycombinator.com/item?id=45105908">https://news.ycombinator.com/item?id=45105908</a></li>
<li>Twitter: <a href="https://x.com/foobar_ramsay/status/1967277792267247916">https://x.com/foobar_ramsay/status/1967277792267247916</a></li>
</ul>
<p>虽然推广效果有限，但这些努力为项目带来了最初的用户关注。</p>
<h2 id="成果与数据"><span class="section-num">6</span> 成果与数据</h2>
<p>上线半个月，截止到目前为止, 已经有超过80个群使用过这个机器人，用户数已经比我预期要多了:</p>
<table>
  <thead>
      <tr>
          <th>指标</th>
          <th>数值</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>GitHub Stars</td>
          <td>106</td>
      </tr>
      <tr>
          <td>使用群组数</td>
          <td>83</td>
      </tr>
      <tr>
          <td>训练数据量</td>
          <td>10543</td>
      </tr>
  </tbody>
</table>
<p>最开心的是看到我自己的程序在这些群成功拦截垃圾广告，就很有成就感，证明我做的东西真的能用户解决问题。</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-1fd72" hidden>
    <label for="zoomCheck-1fd72">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/detect_spam_success.jpg"/> 
    
    
    </label>
</figure>

<h2 id="结语"><span class="section-num">7</span> 结语</h2>
<p>这半个月的运营让我深刻体会到：产品不是代码写完就结束，而是从用户反馈中不断迭代的开始。</p>
<p>产品是需要持续运营的，而写代码只是产品生命周期的其中一个环节，甚至不是最耗费时间的环节。</p>
<p>下一步，我计划进一步优化模型准确率，并探索多语言支持，也欢迎关注我的频道或提交Issue一起讨论。</p>
<ul>
<li>开源地址：<a href="https://github.com/ramsayleung/bayes_spam_sniper">https://github.com/ramsayleung/bayes_spam_sniper</a></li>
<li>立即体验：<a href="https://t.me/BayesSpamSniperBot">https://t.me/BayesSpamSniperBot</a></li>
<li>我的频道（菠萝油与天光墟）: <a href="https://t.me/pipeapplebun">https://t.me/pipeapplebun</a></li>
</ul>
<div class="qr-container" center>
<img src="/ox-hugo/qrcode_gh_e06d750e626f_1.jpg" alt="qrcode_gh_e06d750e626f_1.jpg" class="qr-container" width="160px" height="160px" center="t" />
公号同步更新，欢迎关注👻
</div>
<h3 id="推荐阅读">推荐阅读</h3>
<ul>
<li>旅加经历
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E8%BF%99%E4%BA%9B%E5%B9%B4%E8%B5%B0%E8%BF%87%E7%9A%84%E8%B7%AF_%E4%BB%8E%E5%B9%BF%E5%B7%9E%E5%88%B0%E6%B8%A9%E5%93%A5%E5%8D%8E/">这些年走过的路：从广州到温哥华</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E5%8A%A0%E6%8B%BF%E5%A4%A7%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C/">加拿大之初体验</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E7%99%BB%E9%99%86%E5%8A%A0%E6%8B%BF%E5%A4%A7%E4%B8%80%E5%B9%B4%E7%9A%84%E4%BD%93%E4%BC%9A/">登陆加拿大一年后的体会</a></li>
</ul>
</li>
<li>工具流分享
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E7%AE%80%E6%98%8E%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/">简明写作指南</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E5%86%99%E4%BD%9C%E6%B5%81/">我的写作流</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E7%94%BB%E5%9B%BE%E6%B5%81/">我的画图流：画图工具与技巧分享</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E6%90%9C%E7%B4%A2%E6%B5%81/">我的搜索流：高效搜索经验分享</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2022/feynman_technique/">最好的学习方式：费曼学习法(Feynman Technique)</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2021/%E7%B3%BB%E7%BB%9F%E6%80%9D%E8%80%83/">系统思考：既见树木，又见森林</a></li>
</ul>
</li>
<li>思考感悟
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E7%BC%96%E7%A8%8B%E5%8D%81%E5%B9%B4%E7%9A%84%E6%84%9F%E6%82%9F/">编程十年的感悟</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E4%BB%8E%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E7%A6%BB%E7%BA%BF_%E6%88%91%E5%B8%A6%E8%B5%B0%E4%BA%86%E4%BB%80%E4%B9%88/">那些年，我从微信支付学到的东西</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2025/%E6%9D%82%E8%B0%88ai%E5%8F%96%E4%BB%A3%E7%A8%8B%E5%BA%8F%E5%91%98/">杂谈ai取代程序员</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E7%BD%AE%E8%BA%AB%E4%BA%8B%E5%86%85/">为什么梦想买不起，故乡回不去</a></li>
</ul>
</li>
<li>软件工程
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2025/a_philosophy_of_software_design/">软件设计的哲学</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2025/structure_and_interpretation_of_computer_programs/">一本读了八年还没读完的书</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%B8%80_%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E8%AE%A4%E7%9F%A5/">测试技能进阶(一): 软件质量认知</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%BA%8C_parameterized_tests/">测试技能进阶(二): Parameterized Tests</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%B8%89_property_based_testing/">测试技能进阶(三): Property Based Testing</a></li>
</ul>
</li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://github.com/tdlib/td">https://github.com/tdlib/td</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://github.com/tdlib/telegram-bot-api">https://github.com/tdlib/telegram-bot-api</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="https://github.com/levlam">https://github.com/levlam</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p><a href="https://old.reddit.com/r/rails/comments/1n6p791/built_my_first_rails_project_a_telegram_spam/">https://old.reddit.com/r/rails/comments/1n6p791/built_my_first_rails_project_a_telegram_spam/</a>&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>基于贝叶斯算法的Telegram广告拦截机器人（一）：从问题到产品</title>
      <link>https://ramsayleung.github.io/zh/post/2025/%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AD%A6%E4%B9%A0%E7%9A%84telegram%E5%B9%BF%E5%91%8A%E6%8B%A6%E6%88%AA%E6%9C%BA%E5%99%A8%E4%BA%BA/</link>
      <pubDate>Thu, 28 Aug 2025 23:45:00 -0700</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2025/%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AD%A6%E4%B9%A0%E7%9A%84telegram%E5%B9%BF%E5%91%8A%E6%8B%A6%E6%88%AA%E6%9C%BA%E5%99%A8%E4%BA%BA/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://ramsayleung.github.io/en/post/2025/a_telegram_spam_blocker_bot_based_on_bayesian/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;系列文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ramsayleung.github.io/zh/post/2025/%E5%9F%BA%E4%BA%8E%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%AE%97%E6%B3%95%E7%9A%84telegram%E5%B9%BF%E5%91%8A%E6%8B%A6%E6%88%AA%E6%9C%BA%E5%99%A8%E4%BA%BA%E4%BA%8C/&#34;&gt;基于贝叶斯算法的Telegram广告拦截机器人（二）：上线半月的故障、挑战与优化之路&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;序言&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; 序言&lt;/h2&gt;
&lt;p&gt;我花了一周末时间，写了一个自学习的 Telegram 广告拦截机器人 &lt;code&gt;@BayesSpamSniperBot&lt;/code&gt; (&lt;a href=&#34;https://t.me/BayesSpamSniperBot&#34;&gt;https://t.me/BayesSpamSniperBot&lt;/a&gt;)，项目开源在：&lt;a href=&#34;https://github.com/ramsayleung/bayes_spam_sniper&#34;&gt;https://github.com/ramsayleung/bayes_spam_sniper&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;telegram&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1.1&lt;/span&gt; Telegram&lt;/h3&gt;
&lt;p&gt;Telegram 是一个流行的即时通讯软件，类似微信，Whatsapp，已有超过10亿用户，支持许多强大的功能，如聊天记录云存储，支持Linux, Mac, Windows, Android, IOS, Web 多个平台，客户端都是开源，类似微信公众号的频道功能(Channel)，还有我见过的最强大的机器人系统。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><a href="https://ramsayleung.github.io/en/post/2025/a_telegram_spam_blocker_bot_based_on_bayesian/">English Version</a></p>
<p>系列文章：</p>
<ul>
<li><a href="/zh/post/2025/%E5%9F%BA%E4%BA%8E%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%AE%97%E6%B3%95%E7%9A%84telegram%E5%B9%BF%E5%91%8A%E6%8B%A6%E6%88%AA%E6%9C%BA%E5%99%A8%E4%BA%BA%E4%BA%8C/">基于贝叶斯算法的Telegram广告拦截机器人（二）：上线半月的故障、挑战与优化之路</a></li>
</ul>
<h2 id="序言"><span class="section-num">1</span> 序言</h2>
<p>我花了一周末时间，写了一个自学习的 Telegram 广告拦截机器人 <code>@BayesSpamSniperBot</code> (<a href="https://t.me/BayesSpamSniperBot">https://t.me/BayesSpamSniperBot</a>)，项目开源在：<a href="https://github.com/ramsayleung/bayes_spam_sniper">https://github.com/ramsayleung/bayes_spam_sniper</a></p>
<h3 id="telegram"><span class="section-num">1.1</span> Telegram</h3>
<p>Telegram 是一个流行的即时通讯软件，类似微信，Whatsapp，已有超过10亿用户，支持许多强大的功能，如聊天记录云存储，支持Linux, Mac, Windows, Android, IOS, Web 多个平台，客户端都是开源，类似微信公众号的频道功能(Channel)，还有我见过的最强大的机器人系统。</p>
<h2 id="缘起"><span class="section-num">2</span> 缘起</h2>
<p>平时我跑步和做饭都习惯会听播客，而《<a href="https://podcasts.apple.com/us/podcast/%E8%BD%AF%E4%BB%B6%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/id1147186605">软件那些事儿</a>》<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>是我最喜欢的播客之一，主持人是<a href="https://liuyandong.com/sample-page">栋哥</a> <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, 我也因为喜欢栋哥的节目，趁机加了栋哥的电报频道。</p>
<p>栋哥的电报频道<a href="https://t.me/huruanhuying">汗牛充栋</a> <sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>主要是用来发布播客信息，
之前打开过一段时间的留言功能，没有想到引来了一堆的币圈的用户来发广告，因此将评论功能就关了：</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-be4f5" hidden>
    <label for="zoomCheck-be4f5">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/spam_concert.jpg"/> 
    
    
    </label>
</figure>

<p>另外一个我关注的频道 <a href="https://t.me/kaedeharakazuha17">Ray Tracing</a> <sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>也在吐槽币圈的广告，不堪其忧:</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-d541b" hidden>
    <label for="zoomCheck-d541b">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/ray_tracing_spam.jpg"/> 
    
    
    </label>
</figure>

<h2 id="黑客与画家"><span class="section-num">3</span> 黑客与画家</h2>
<p>常见的 Telegram 广告机器人是大多是基于关键字的，通过匹配关键字进行文本拦截，非常容易被发垃圾广告的人绕过。</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-1401f" hidden>
    <label for="zoomCheck-1401f">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/keyword_based_blocker.jpg"/> 
    
    
    </label>
</figure>

<p>被绕过的话主要是靠管理员人工删除。</p>
<p>这不禁让我想起了保罗.格雷厄姆在《黑客与画家》一书在2002年介绍的情况：</p>
<p>当时电子邮件兴起，也有非常多的垃圾邮件，常见的垃圾广告拦截方式是关键字匹配+邮件地址黑名单，但是既低效也容易被绕过。</p>
<p>保罗.格雷厄姆就创造性地使用贝叶斯算法(Bayesian Theorem)实现了一个<a href="https://paulgraham.com/spam.html">广告拦截器</a> <sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>, 效果竟然出奇地好。</p>
<p>对于 Telegram 的垃圾广告而言，这不是类似的问题嘛？</p>
<p>那我岂不是可以用类似的解决方案来解决 Telegram 广告的问题嘛</p>
<h3 id="贝叶斯定理"><span class="section-num">3.1</span> 贝叶斯定理</h3>
<p>提起概率算法，最经典的例子莫过于「抛硬币」这一古典概率——每次抛掷都是独立事件，前一次的结果不会影响下一次的概率。</p>
<p>然而，现实中的很多场景并不能像抛硬币那样无限重复，事件之间也往往并非相互独立。</p>
<p>这时候，贝叶斯定理就显示出其独特的价值。</p>
<p>它是一种「由果溯因」的概率方法，用于在已知某些证据的条件下，更新我们对某一假设的置信程度。</p>
<p>换句话说，贝叶斯算法能够根据不断出现的新证据，动态调整对某个事件发生概率的估计。</p>
<p>简单来说，就像人脑的学习过程：我们原本有一个初步认知，在获得新信息之后，会据此修正原有的看法，进而调整下一步的行动。</p>
<p>保罗·格雷厄姆就是通过贝叶斯定理，不断地根据已被标记为垃圾广告或者非垃圾广告的邮件，对新出现的邮件进行分类，判断其是否为垃圾广告。</p>
<p>如果想更直观地理解贝叶斯定理，推荐两个讲解清晰、生动易懂的视频：</p>
<ul>
<li>《<a href="https://www.youtube.com/watch?v=Pu675cHJ7bg">Bayes&rsquo; Theorem 贝叶斯定理</a>》<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup>(中文)</li>
<li>《<a href="https://www.youtube.com/watch?v=HZGCoVF3YvM">Bayes theorem, the geometry of changing beliefs</a>》<sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup>(英文)</li>
</ul>
<h2 id="架构设计"><span class="section-num">4</span> 架构设计</h2>
<p>Telegram Bot 支持两种与 Telegram 服务器交互的模式，分别是：</p>
<ol>
<li>
<p>Webhook: Telegram 服务器会在 Bot 收到新消息时主动回调此前 Bot 注册的地址，Bot Server 只需要处理回调的消息</p>
</li>
<li>
<p>Long Polling: Bot Server 一直轮询 Telegram 服务器，看是否有新消息，有就处理，本机器人使用的是此模式</p>

    <figure>
        
        
        <input type="checkbox" id="zoomCheck-ca97a" hidden>
        <label for="zoomCheck-ca97a">
        
        
        <img class="zoomCheck" loading="lazy" src="/ox-hugo/webhook_vs_long_polling.jpg"/> 
        
        
        </label>
    </figure>

</li>
</ol>
<h4 id="消息分析"><span class="section-num">4.0.1</span> 消息分析</h4>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-e2518" hidden>
    <label for="zoomCheck-e2518">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/spam_analyze.jpg"/> 
    
    
    </label>
</figure>

<p>Bot Server 收到消息之后，会派发到单独的 <code>telegram_bot_worker</code> 处理，然后根据预训练的模型判断是否是垃圾广告，如果是，调用 Bot API 删除消息。</p>
<h4 id="封禁并训练"><span class="section-num">4.0.2</span> 封禁并训练</h4>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-04d7c" hidden>
    <label for="zoomCheck-04d7c">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/mark_spam_and_ban_user.jpg"/> 
    
    
    </label>
</figure>

<p>Bot Server 收到消息之后，会派发到单独的 <code>telegram_bot_worker</code> 处理， <code>telegram_bot_worker</code> 会调用 bot API 删除消息并封禁用户，并插入一条训练数据，标记为垃圾广告(spam)</p>
<p>保存训练数据会触发 hook, 创建一个训练消息，投递到消息队列 <code>training</code>, 会有另外的 worker <code>classifier_trainer</code> 订阅 <code>training</code> 消息，并使用新消息重新训练和更新模型</p>
<p>使用队列和后台进程 <code>classifier_trainer</code> 来训练任务而非直接使用 <code>telegram_bot_worker</code> 主要是为了返回 Bot请求与训练模型解耦，否则随着模型规模的增大，训练时间会越来越长，响应时间会越来越长。</p>
<p>解耦后就易于水平扩展了，在设计上为后续性能优化和扩展预留空间。</p>
<h2 id="why-rails"><span class="section-num">5</span> Why Rails</h2>
<p>看了我项目源代码的朋友，难免会浮起疑问，为什么使用 Ruby on Rails 实现的?</p>
<p>因为我工作中会有用到JVM系的编程语言(Java/Kotlin/Scala)和 Rust, 所以我对 Java/Rust 相当熟悉，又觉得模型训练可能对性能要求很高，所以最开始的<a href="https://gist.github.com/ramsayleung/5848af0177a70a01d41f624e361b1b5d">原型</a> <sup id="fnref:8"><a href="#fn:8" class="footnote-ref" role="doc-noteref">8</a></sup>我是用 Rust 实现的，大概就花了半个多小时。</p>
<p>但是当我想把原型扩展成 Telegram 机器人时，就发现需要处理相当多与机器人交互的逻辑，主要涉及到 API 与数据库操作，其中大部分都是和模型无关的，因此我又想到了 Ruby on Rails。</p>
<p>论单个工程师做产品原型，就我个人而言，实在是没有比 <code>Ruby on Rails</code> 更高效的框架了，因此我就切换到 Ruby on Rails 去。</p>
<p>Rails 8 的新特性，把 Rails 向所谓的「一人全栈框架」又推进了不少，通过关系型数据库内置对消息队列 <code>Solid Queue</code> 的支持，甚至不再需要类似 Redis 这样的存储来支持队列实现。</p>
<p>架构设计中的队列和后台进程，只需要几行代码就实现了，甚至不需要额外的配置，如果队列不存在，框架会自动创建：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">ClassifierTrainerJob</span> <span class="o">&lt;</span> <span class="no">ApplicationJob</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># Job to train classifier asynchronously</span>
</span></span><span class="line"><span class="cl">  <span class="n">queue_as</span> <span class="ss">:training</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">def</span> <span class="nf">perform</span><span class="p">(</span><span class="n">group_id</span><span class="p">,</span> <span class="n">group_name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="no">SpamClassifierService</span><span class="o">.</span><span class="n">rebuild_for_group</span><span class="p">(</span><span class="n">group_id</span><span class="p">,</span> <span class="n">group_name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>得益于 Rails 强大的 ORM 框架，内置各种生命周期的 hook, 对新插入训练数据后触发后台进程重新训练模型的代码也只有寥寥几行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">TrainedMessage</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># Automatically train classifier after creating/updating a message</span>
</span></span><span class="line"><span class="cl">  <span class="n">after_create</span> <span class="ss">:retrain_classifier</span>
</span></span><span class="line"><span class="cl">  <span class="n">after_destroy</span> <span class="ss">:retrain_classifier</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">def</span> <span class="nf">retrain_classifier</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># For efficiency, we could queue this as a background job</span>
</span></span><span class="line"><span class="cl">    <span class="no">ClassifierTrainerJob</span><span class="o">.</span><span class="n">perform_later</span><span class="p">(</span><span class="n">group_id</span><span class="p">,</span> <span class="n">group_name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在 Rails 各种内置强大工具的加持下，我只用了一天时间就把整个机器人的功能给实现出来了。</p>
<p>看到这里，有朋友可能会担心性能，觉得 Ruby 性能不行，并且还是动态语言，不好维护。</p>
<p>我持有的观点还是和之前的博文《<a href="https://ramsayleung.github.io/zh/post/2024/%E7%BC%96%E7%A8%8B%E5%8D%81%E5%B9%B4%E7%9A%84%E6%84%9F%E6%82%9F/">编程十年的感悟</a>》<sup id="fnref:9"><a href="#fn:9" class="footnote-ref" role="doc-noteref">9</a></sup>一样：</p>
<p>先跑起来再说，先做个原型跑起来，有用户愿意用你的产品再说，
当运行速度成为瓶颈时，你的业务肯定非常大了，肯定有足够的资源招一打程序员把项目优化成 Rust/C++, 甚至是汇编。</p>
<p>没有用户，谈性能只是个伪命题。</p>
<p>至于动态语言一时爽，代码维护火葬场，我也是相当认同的。</p>
<p>因此我在为团队选型时我绝对不会考虑动态语言，只会上编译型的语言，
甚至是Rust这种强类型，但是现在只有我一个人来做原型，我自己是什么顺手就用什么的。</p>
<h3 id="vibe-coding"><span class="section-num">5.1</span> Vibe Coding?</h3>
<p>Vibe Coding等AI编程概念可谓是铺天盖地，甚嚣尘上，难免会有朋友好奇我这个项目是否 Vibe Coding生成的。</p>
<p>答案是，我尝试了几个小时之后，直接放弃了， Claude 4 和 Gemini 2.5 Pro 都试过了。</p>
<p>开始是使用 Rust + Cloudflare Worker 的技术栈，Rust + Cloudflare Worker 是个相当小众的领域，训练语料少，Vibe Coding 出来的代码编译无法通过</p>
<p>后面换成 Ruby on Rails, 问题还更严重了，Ruby 是弱类型的动态语言，语法写起来和英语一样，Rails 又还有很多黑魔法，所以到运行时才报错，代码生成省下来的开发时间，debug过程全补回来了。</p>
<p>另外一个是 Vibe Coding 生成的代码很多都是没有设计的，比如把 <code>Classifier</code> 和 <code>TrainedMessage</code> 的类耦合在一起，在 <code>Classifier</code> 里面持久化 <code>TrainedMessage</code></p>
<p>又直接在 <code>telegram_bot_worker</code> 进程里面，接收到训练信息马上同步训练新模型，训练完再返回调用命令的结果，完全没考虑解耦接收训练语料和模型训练。</p>
<p>只能说 Vibe Coding 非常适合 Rust 这样的强类型编译型语言，生成的出来的代码起码要编译通过，保证质量的下限。</p>
<p>而对于那些说「一行代码都不用写/改，就能做出一个APP」的言论，此时我脑海不禁升起疑问？</p>
<p>究竟是代码好到一行都不用改？还是开发者看不出症结所在，所以一行都不改？</p>
<h2 id="设计理念"><span class="section-num">6</span> 设计理念</h2>
<p>开发完原型，在机器人整体功能可用之后，脑中又有不少的想法冒出来，当时就马不停蹄地给机器人加上，
因此机器人就支持快十个命令，还支持私聊和群聊的不同模式。</p>
<p>加着加着，连我自己都疑惑起来：这么多的功能，有点像国内的各种大而全的App了，我不禁对此产生疑问：</p>
<p>真的会有用户用这么多功能么？真的有用户会用这些功能嘛？太多功能不是也会有额外的心智负担嘛?</p>
<p>我最喜欢的广告拦截器 <a href="https://ublockorigin.com/">Ublock Origin</a> <sup id="fnref:10"><a href="#fn:10" class="footnote-ref" role="doc-noteref">10</a></sup>拦截效果非常好，但是使用起来却非常简单，易上手。</p>
<p>想起《<a href="https://ramsayleung.github.io/zh/post/2025/a_philosophy_of_software_design/">软件设计的哲学</a>》<sup id="fnref:11"><a href="#fn:11" class="footnote-ref" role="doc-noteref">11</a></sup>里面提到的设计理念，接口应该是简单易用的，但是功能可以是复杂丰富的。</p>
<p>因此我只能忍痛把此前新增的，但与核心功能无关的命令都删掉；</p>
<p>此外考虑到可能绝大多数的用户都没有技术背景，也可能不知道命令怎么用，因此将命令尽可能地优化成按钮，用户可以直接点击，改善易用性:</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-e207f" hidden>
    <label for="zoomCheck-e207f">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/start_zh.jpg"/> 
    
    
    </label>
</figure>


<figure>
    
    
    <input type="checkbox" id="zoomCheck-ca4b6" hidden>
    <label for="zoomCheck-ca4b6">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/help_page_zh.jpg"/> 
    
    
    </label>
</figure>

<p>我还希望可以支持多语言，比如根据用户的系统语言，自动切换到中文或者英文，这个就需要不同语言的文案。</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-5f8d5" hidden>
    <label for="zoomCheck-5f8d5">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/start_en.jpg"/> 
    
    
    </label>
</figure>


<figure>
    
    
    <input type="checkbox" id="zoomCheck-bc48d" hidden>
    <label for="zoomCheck-bc48d">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/help_en.jpg"/> 
    
    
    </label>
</figure>

<p><a href="https://github.com/ramsayleung/bayes_spam_sniper/blob/master/app/services/telegram_botter.rb">telegram_botter.rb</a> 这个核心服务类里面有超过60%的代码都是为了此类易用性改进而引入的。</p>
<p>简单留给用户，复杂留给开发</p>
<h3 id="如何使用"><span class="section-num">6.1</span> 如何使用</h3>
<p>只需两步，机器人就可以自动工作。</p>
<ul>
<li>将机器人（@BayesSpamSniperBot）<a href="https://t.me/BayesSpamSniperBot?startgroup=true">添加到您的群组</a></li>
<li>给予机器人管理员权限（删除消息(delete message )，封禁用户权限(ban user )）</li>
</ul>
<p>完成这两步后，机器人不仅会自动开始工作，自动识别群内广告，然后删除文本消息，如果发送垃圾广告超过3次，将会被封禁；</p>
<p>还会随着社区的使用（通过 <code>/markspam</code> 和 <code>/feedspam</code> ），变得越来越智能</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-28a2c" hidden>
    <label for="zoomCheck-28a2c">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/detect_spam_and_ban_user.jpg"/> 
    
    
    </label>
</figure>

<p>此机器人的设计理念就是最小化打扰管理员与用户，提供简单的操作命令，并最大可能地自动化，
所以本机器人只提供以下三个命令（支持&quot;/&ldquo;开头自动补全）:</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-ecf1f" hidden>
    <label for="zoomCheck-ecf1f">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/command_auto_completion.jpg"/> 
    
    
    </label>
</figure>

<h4 id="markspam"><span class="section-num">6.1.1</span> <code>/markspam</code></h4>
<p>删除垃圾消息并封禁用户, 需要管理员权限。</p>
<p>在某条你想封禁的信息下回复 <code>/markspam</code>, 机器人就会自动把该条消息删除被封禁用户.</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-14d59" hidden>
    <label for="zoomCheck-14d59">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/markspam_2.jpg"/> 
    
    
    </label>
</figure>

<p>(消息也被删除)
<img loading="lazy" src="/ox-hugo/markspam.jpg"></p>
<p>与常见的群管理机器人不同，这条命令不仅会删除垃圾消息并封禁用户, 因为这条消息还被管理员标记成垃圾广告，有非常高的置信度，所以系统就会以这条垃圾广告为训练数据，对模型进行实时更新。</p>
<p>下次类似的发言不仅会被识别，所有使用本机器人的群组都会受益，也会把类似的文本标记成垃圾广告</p>
<h4 id="listspam"><span class="section-num">6.1.2</span> <code>/listspam</code></h4>
<p>查看封禁账户列表, 需要管理员权限。</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-d0038" hidden>
    <label for="zoomCheck-d0038">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/listspam.jpg"/> 
    
    
    </label>
</figure>

<p>查看已封禁的用户列表，并主动解封。</p>
<h4 id="feedspam"><span class="section-num">6.1.3</span> <code>/feedspam</code></h4>
<p>投喂垃圾信息来训练，无任何权限要求，可私聊投喂或在群组内投喂.</p>
<p>私聊投喂:</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-2a139" hidden>
    <label for="zoomCheck-2a139">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/feedspam.jpg"/> 
    
    
    </label>
</figure>

<p>群组内投喂:</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-1fc12" hidden>
    <label for="zoomCheck-1fc12">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/feedspam2.jpg"/> 
    
    
    </label>
</figure>

<h2 id="eating-your-own-dog-food"><span class="section-num">7</span> Eating your own dog food</h2>
<p>在软件开发领域，有这么一句俗话，Eating your own dog food(吃你自己的狗粮)，大意是你自己的开发的东西，要自己先用起来。</p>
<p>因此我建了一个自己的频道：<a href="https://t.me/pipeapplebun">菠萝油与天光墟</a> <sup id="fnref:12"><a href="#fn:12" class="footnote-ref" role="doc-noteref">12</a></sup>用于测试，可惜订阅者寥寥，
就吸引不来太多的发垃圾广告的用户，所以欢迎大家订阅或者进来发广告，以吸引更多的发垃圾广告的用户。</p>
<p>在我这个频道，每个人都有自由发言的权利(美中不足只是次数受限)</p>
<p>既然没有人来我的频道发广告，苦于没有训练数据，我只能主动出击，赤膊上阵，割肉喂鹰去加了各种币圈群，黄色群，主动去看各种广告了：</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-3779e" hidden>
    <label for="zoomCheck-3779e">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/telegram_group1.jpg"/> 
    
    
    </label>
</figure>


<figure>
    
    
    <input type="checkbox" id="zoomCheck-35262" hidden>
    <label for="zoomCheck-35262">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/telegram_group2.jpg"/> 
    
    
    </label>
</figure>


<figure>
    
    
    <input type="checkbox" id="zoomCheck-b0b9b" hidden>
    <label for="zoomCheck-b0b9b">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/spam_sample.jpg"/> 
    
    
    </label>
</figure>

<p>自从开发了这个机器人之后，我对广告的看法就变了，以前在别的群看到广告就烦，现在在别的群看到广告就很开心，
这都是宝贵的训练数据，要趁着还没被删，赶紧记录下来。</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-511dc" hidden>
    <label for="zoomCheck-511dc">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/feedspam3.jpg"/> 
    
    
    </label>
</figure>

<h3 id="八仙过海的垃圾广告"><span class="section-num">7.1</span> 八仙过海的垃圾广告</h3>
<p>别人故事里的算法效果总是出奇的好，到自己实际运行的时候，总是发现会有这样那样的 case 没有覆盖，总有各种意外惊喜</p>
<p>许多在 Telegram 发广告的用户都是久经考验的反拦截器斗士了。</p>
<p>虽然关键词封禁效率不高，但是那些能让我们见到的广告说明已经是绕过关键词拦截的。</p>
<p>比如:</p>
<blockquote>
<p>在 币圈 想 赚 钱，那 你 不关 注 这 个 王 牌 社 区，真的太可惜了，真 心 推 荐，每 天 都 有 免 费 策 略</p></blockquote>
<p>又或者</p>
<blockquote>
<p>这人简-介挂的 合-约-报单群组挺牛的ETH500点，大饼5200点！ + @BTCETHl6666</p></blockquote>
<p>前者通过空格分隔来绕过关键词，后者通过添加标点符号来绕过关键词。</p>
<p>与英文等基于拉丁字母的语言天然通过空格分词不同，中文使用贝叶斯算法进行统计时，需要先进行分词</p>
<blockquote>
<p>the fox jumped over the lazy dog</p>
<p>我们的中文就不一样了</p></blockquote>
<p>「我们的中文就不一样了」就会被分词成「我们 | 的 | 中文 | 就 | 不 | 一样 | 了」, 然后才能对词频进行统计。</p>
<p>但是像广告 <code>在 币圈 想 赚 钱，那 你 不关 注 这 个 王 牌 社 区，真的太可惜了，真 心 推 荐，每 天 都 有 免 费 策 略</code> , 空格除了会影响关键字匹配，也会影响分词，这句话的分词结果就会变成:</p>
<p><code>在 | | 币圈 | | 想 | | 赚 | | 钱 | ， | 那 | | 你 | | 不 | 关 | | 注 | | 这 | | 个 | | 王 | | 牌 | | 社 | | 区 | ， | 真的 | 太 | 可惜 | 了 | ， | 真 | | 心 | | 推 | | 荐 | ， | 每 | | 天 | | 都 | | 有 | | 免 | | 费 | | 策 | | 略</code></p>
<p><code>这人简-介挂的 合-约-报单群组挺牛的ETH500点，大饼5200点！ + @BTCETHl6666</code> 也会被分词成：</p>
<p><code>这人简 | - | 介挂 | 的 | | 合 | - | 约 | - | 报单 | 群组 | 挺 | 牛 | 的 | ETH500 | 点 | ， | 大饼 | 5200 | 点 | ！ | | + | | @ | BTCETHl6666</code></p>
<p>未经处理的训练数据就会影响模型的结果，可见训练数据的质量也非常重要，因此我就对训练语料做了相应的预处理：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="c1"># Step 1: 处理 anti-spam 分隔符</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 把中英文之间的非中英文及数字去掉，即 &#34;合-约&#34; -&gt; &#34;合约&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">previous</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="n">previous</span> <span class="o">!=</span> <span class="n">cleaned</span>
</span></span><span class="line"><span class="cl">  <span class="n">previous</span> <span class="o">=</span> <span class="n">cleaned</span><span class="o">.</span><span class="n">dup</span>
</span></span><span class="line"><span class="cl">  <span class="n">cleaned</span> <span class="o">=</span> <span class="n">cleaned</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/([一-龯A-Za-z0-9])[^一-龯A-Za-z0-9\s]+([一-龯A-Za-z0-9])/</span><span class="p">,</span> <span class="s1">&#39;\1\2&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Step 2: 处理中文字符 anti-spam 空格</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 处理 &#34;想 赚 钱&#34; -&gt; &#34;想赚钱&#34; case</span>
</span></span><span class="line"><span class="cl"><span class="n">previous</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="n">previous</span> <span class="o">!=</span> <span class="n">cleaned</span>
</span></span><span class="line"><span class="cl">  <span class="n">previous</span> <span class="o">=</span> <span class="n">cleaned</span><span class="o">.</span><span class="n">dup</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># 匹配中文汉字之间的一个或多个空格，然后删除掉</span>
</span></span><span class="line"><span class="cl">  <span class="n">cleaned</span> <span class="o">=</span> <span class="n">cleaned</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/([一-龯])(\s+)([一-龯])/</span><span class="p">,</span> <span class="s1">&#39;\1\3&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Step 3: 增加汉字与英文之间的空格</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 以及帮助分词算法如(jieba)更好地分词, e.g., &#34;社区ETH&#34; -&gt; &#34;社区 ETH&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">cleaned</span> <span class="o">=</span> <span class="n">cleaned</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/([一-龯])([A-Za-z0-9])/</span><span class="p">,</span> <span class="s1">&#39;\1 \2&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">cleaned</span> <span class="o">=</span> <span class="n">cleaned</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/([A-Za-z0-9])([一-龯])/</span><span class="p">,</span> <span class="s1">&#39;\1 \2&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Step 4: 删除多余的空格(多个空格缩减个一个)</span>
</span></span><span class="line"><span class="cl"><span class="n">cleaned</span> <span class="o">=</span> <span class="n">cleaned</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/\s+/</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">)</span><span class="o">.</span><span class="n">strip</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>预处理之后， <code>在 币圈 想 赚 钱，那 你 不关 注 这 个 王 牌 社 区，真的太可惜了，真 心 推 荐，每 天 都 有 免 费 策 略</code> 就会变成 <code>在币圈想赚钱那你不关注这个王牌社区真的太可惜了真心推荐每天都有免费策略</code> (这里把合法的逗号也去掉了，我觉得相较过多标点符号对分词的影响，把标点去掉分词结果反而是能接受的), 分词结果是:</p>
<p><code>在 | 币圈 | 想 | 赚钱 | 那 | 你 | 不 | 关注 | 这个 | 王牌 | 社区 | 真的 | 太 | 可惜 | 了 | 真心 | 推荐 | 每天 | 都 | 有 | 免费 | 策略</code></p>
<p><code>这人简-介挂的 合-约-报单群组挺牛的ETH500点，大饼5200点！ + @BTCETHl6666</code> 就会变成 <code>这人简介挂的合约报单群组挺牛的 ETH500 点大饼 5200 点！ + @BTCETHl6666</code> ,分词结果是：</p>
<p><code>这 | 人 | 简介 | 挂 | 的 | 合约 | 报单 | 群组 | 挺 | 牛 | 的 | | ETH500 | | 点 | 大饼 | | 5200 | | 点 | ！ | | + | | @ | BTCETHl6666</code></p>
<h4 id="广告新花样"><span class="section-num">7.1.1</span> 广告新花样</h4>
<p>广告看多了，不得不感慨发广告的人的创造力。</p>
<p>因为在消息发垃圾广告会被广告拦截器拦截，他们创新性地玩出了新花样：</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-fe0e1" hidden>
    <label for="zoomCheck-fe0e1">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/spam_by_username.jpg"/> 
    
    
    </label>
</figure>

<p>消息发的都是正常的文本，但是头像和用户名都是广告，这样广告拦截器就无法工作了，真的是太有创意了。</p>
<p>对手这么有创意，我也因地制宜地建立对用户名的训练模型，检测的时候消息文本的模型和用户名的模型都过一次，
只要有任何一个认为是垃圾广告，那就禁掉。</p>
<p>更进一步的可以对头像做OCR提取文本，再增加一个对头像的训练模型，不过OCR成本挺高的，就先不搞了。</p>
<h3 id="优化"><span class="section-num">7.2</span> 优化</h3>
<p>没有用户的话，做啥优化也没有必要，毕竟过早的优化是万恶之源，
因此我就把想法先做成原型，搞出来再说，但这不意味着这个原型没有优化的空间。</p>
<p>脑海中还是有不少优化的点的：</p>
<ol>
<li>jieba 分词的效果可能不是最好的，后续可以使用效果更好的分词器进行优化；或者是添加自己的词库。</li>
<li>每次有训练消息都进行重新训练，效率稍低，可以增加 batching 机制：有新消息时，等待5分钟或者等到100条消息再处理</li>
<li>现在整个模型都是在内存中计算，计算完就持久化成 DB, 可以在内存和数据库之间增加一层缓存来优化性能</li>
<li>贝叶斯算法可能效果不够好，换个复杂的机器学习模型</li>
</ol>
<p>但是这些优化点都算是 Good to have, 不是 Must have, 后面遇到实际问题再进行优化好了。</p>
<h2 id="实战效果"><span class="section-num">8</span> 实战效果</h2>
<p>使用变换之后的垃圾广告词进行发送:</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-cdd9f" hidden>
    <label for="zoomCheck-cdd9f">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/spam_messge_2.jpg"/> 
    
    
    </label>
</figure>

<p>成功被检测出来，自动删除了:</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-78c5f" hidden>
    <label for="zoomCheck-78c5f">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/deleted_spam.jpg"/> 
    
    
    </label>
</figure>

<p>有朋友可能会说，这只是卖家秀，为什么别人在我群里发的广告还是没有被识别？</p>
<p>因为贝叶斯算法本质是个概率算法，如果它没有见过类似的广告，那么它就没法判断是否垃圾广告 :(</p>
<p>稍安勿躁，你需要做只是使用 <code>/markspam</code> 删除消息并封禁用户，就可以帮助训练这个bot, 所有使用这个 bot 的用户都会因此受益</p>
<h2 id="结语"><span class="section-num">9</span> 结语</h2>
<p>我相当享受这种从发现问题、灵光一现，到构建原型，再到最终打磨出一个完整项目的创造过程。</p>
<p>虽然这完全是「用爱发电」——代码开源，还得自掏腰包租服务器，物质上毫无回报。</p>
<p>但每当看到机器人成功拦截广告的那一刻，那种创造的喜悦，就足以令我回味无穷。</p>
<ul>
<li>开源地址：<a href="https://github.com/ramsayleung/bayes_spam_sniper">https://github.com/ramsayleung/bayes_spam_sniper</a></li>
<li>立即体验：<a href="https://t.me/BayesSpamSniperBot">https://t.me/BayesSpamSniperBot</a></li>
<li>我的频道（菠萝油与天光墟）: <a href="https://t.me/pipeapplebun">https://t.me/pipeapplebun</a></li>
</ul>
<h3 id="推荐阅读">推荐阅读</h3>
<ul>
<li>旅加经历
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E8%BF%99%E4%BA%9B%E5%B9%B4%E8%B5%B0%E8%BF%87%E7%9A%84%E8%B7%AF_%E4%BB%8E%E5%B9%BF%E5%B7%9E%E5%88%B0%E6%B8%A9%E5%93%A5%E5%8D%8E/">这些年走过的路：从广州到温哥华</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E5%8A%A0%E6%8B%BF%E5%A4%A7%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C/">加拿大之初体验</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E7%99%BB%E9%99%86%E5%8A%A0%E6%8B%BF%E5%A4%A7%E4%B8%80%E5%B9%B4%E7%9A%84%E4%BD%93%E4%BC%9A/">登陆加拿大一年后的体会</a></li>
</ul>
</li>
<li>工具流分享
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E7%AE%80%E6%98%8E%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/">简明写作指南</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E5%86%99%E4%BD%9C%E6%B5%81/">我的写作流</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E7%94%BB%E5%9B%BE%E6%B5%81/">我的画图流：画图工具与技巧分享</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E6%90%9C%E7%B4%A2%E6%B5%81/">我的搜索流：高效搜索经验分享</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2022/feynman_technique/">最好的学习方式：费曼学习法(Feynman Technique)</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2021/%E7%B3%BB%E7%BB%9F%E6%80%9D%E8%80%83/">系统思考：既见树木，又见森林</a></li>
</ul>
</li>
<li>思考感悟
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E7%BC%96%E7%A8%8B%E5%8D%81%E5%B9%B4%E7%9A%84%E6%84%9F%E6%82%9F/">编程十年的感悟</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E4%BB%8E%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E7%A6%BB%E7%BA%BF_%E6%88%91%E5%B8%A6%E8%B5%B0%E4%BA%86%E4%BB%80%E4%B9%88/">那些年，我从微信支付学到的东西</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2025/%E6%9D%82%E8%B0%88ai%E5%8F%96%E4%BB%A3%E7%A8%8B%E5%BA%8F%E5%91%98/">杂谈ai取代程序员</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E7%BD%AE%E8%BA%AB%E4%BA%8B%E5%86%85/">为什么梦想买不起，故乡回不去</a></li>
</ul>
</li>
<li>软件工程
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2025/a_philosophy_of_software_design/">软件设计的哲学</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2025/structure_and_interpretation_of_computer_programs/">一本读了八年还没读完的书</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%B8%80_%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E8%AE%A4%E7%9F%A5/">测试技能进阶(一): 软件质量认知</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%BA%8C_parameterized_tests/">测试技能进阶(二): Parameterized Tests</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%B8%89_property_based_testing/">测试技能进阶(三): Property Based Testing</a></li>
</ul>
</li>
</ul>
<div class="qr-container" center>
<img src="/ox-hugo/qrcode_gh_e06d750e626f_1.jpg" alt="qrcode_gh_e06d750e626f_1.jpg" class="qr-container" width="160px" height="160px" center="t" />
公号同步更新，欢迎关注👻
</div>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://podcasts.apple.com/us/podcast/%E8%BD%AF%E4%BB%B6%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/id1147186605">https://podcasts.apple.com/us/podcast/%E8%BD%AF%E4%BB%B6%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/id1147186605</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://liuyandong.com/sample-page">https://liuyandong.com/sample-page</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="https://t.me/huruanhuying">https://t.me/huruanhuying</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p><a href="https://t.me/kaedeharakazuha17">https://t.me/kaedeharakazuha17</a>&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p><a href="https://paulgraham.com/spam.html">https://paulgraham.com/spam.html</a>&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p><a href="https://www.youtube.com/watch?v=Pu675cHJ7bg">https://www.youtube.com/watch?v=Pu675cHJ7bg</a>&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7">
<p><a href="https://www.youtube.com/watch?v=HZGCoVF3YvM">https://www.youtube.com/watch?v=HZGCoVF3YvM</a>&#160;<a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:8">
<p><a href="https://gist.github.com/ramsayleung/5848af0177a70a01d41f624e361b1b5d">https://gist.github.com/ramsayleung/5848af0177a70a01d41f624e361b1b5d</a>&#160;<a href="#fnref:8" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:9">
<p><a href="https://ramsayleung.github.io/zh/post/2024/%E7%BC%96%E7%A8%8B%E5%8D%81%E5%B9%B4%E7%9A%84%E6%84%9F%E6%82%9F/">https://ramsayleung.github.io/zh/post/2024/%E7%BC%96%E7%A8%8B%E5%8D%81%E5%B9%B4%E7%9A%84%E6%84%9F%E6%82%9F/</a>&#160;<a href="#fnref:9" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:10">
<p><a href="https://ublockorigin.com/">https://ublockorigin.com/</a>&#160;<a href="#fnref:10" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:11">
<p><a href="https://ramsayleung.github.io/zh/post/2025/a_philosophy_of_software_design/">https://ramsayleung.github.io/zh/post/2025/a_philosophy_of_software_design/</a>&#160;<a href="#fnref:11" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:12">
<p><a href="https://t.me/pipeapplebun">https://t.me/pipeapplebun</a>&#160;<a href="#fnref:12" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>从在加拿大退货失败的一件小事思考系统设计</title>
      <link>https://ramsayleung.github.io/zh/post/2025/%E4%BB%8E%E5%9C%A8%E5%8A%A0%E6%8B%BF%E5%A4%A7%E9%80%80%E8%B4%A7%E5%A4%B1%E8%B4%A5%E7%9A%84%E4%B8%80%E4%BB%B6%E5%B0%8F%E4%BA%8B%E6%80%9D%E8%80%83%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Sat, 31 May 2025 11:00:00 -0700</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2025/%E4%BB%8E%E5%9C%A8%E5%8A%A0%E6%8B%BF%E5%A4%A7%E9%80%80%E8%B4%A7%E5%A4%B1%E8%B4%A5%E7%9A%84%E4%B8%80%E4%BB%B6%E5%B0%8F%E4%BA%8B%E6%80%9D%E8%80%83%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; 前言&lt;/h2&gt;
&lt;p&gt;前天刚写完《&lt;a href=&#34;https://ramsayleung.github.io/zh/post/2025/a_philosophy_of_software_design/&#34;&gt;软件设计的哲学&lt;/a&gt;》，满脑子还萦绕着模块耦合和接口抽象，
结果昨天就撞上一个现实中的“设计陷阱”——一次耗时数小时却无解的「退货」噩梦。&lt;/p&gt;
&lt;p&gt;今天趁着周末，决定把这场荒诞遭遇拆解出来，既当吐槽，也当案例分析.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>前天刚写完《<a href="https://ramsayleung.github.io/zh/post/2025/a_philosophy_of_software_design/">软件设计的哲学</a>》，满脑子还萦绕着模块耦合和接口抽象，
结果昨天就撞上一个现实中的“设计陷阱”——一次耗时数小时却无解的「退货」噩梦。</p>
<p>今天趁着周末，决定把这场荒诞遭遇拆解出来，既当吐槽，也当案例分析.</p>
<h2 id="来龙去脉"><span class="section-num">2</span> 来龙去脉</h2>
<p>前段时间搬了家，自然就需要重新办理宽带，一直用的是 <a href="https://www.telus.com/">Telus</a> 家的家庭宽带服务，他们家的宽带服务也支持从一个住址迁移到另外一个住址, 就预约了 Telus 技术人员上门安装。</p>
<p>技术人员上门安装完宽带之后，就需要测试一下 WI-FI 能否正常使用，就问我们的路由器在哪，他接上处理一下。</p>
<p>问题就来了：</p>
<p>我们的路由器之前是舍友设置的，还不是常见的一体路由器，而是分体式路由器，有三个不同的组件。</p>
<p>而舍友在搬完家后就回国休假了，我还真不知道怎么搞这路由器，各个接口尝试了小半个小时也没反应，师傅也没见识过，自然也不晓得弄。</p>
<p>这个又是一个非常经典的软件开发问题：</p>
<p>「在我的机器上能跑，换个环境就挂了」</p>
<p>但是一直没网也不是办法，然后师傅建议我可以把他随身带的 Telus 路由器买下来，等我舍友回来后把网络设置好，再把路由器还回来，Telus支持30天无理由退货。</p>
<p>听起来也只能这么搞了。</p>
<p>舍友休了几周假回来之后，几分钟不到，很快就把这个路由器就设置起来了:</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-1ade0" hidden>
    <label for="zoomCheck-1ade0">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/mesh_router.jpg"/> 
    
    
    </label>
</figure>

<p>剩下的就是把路由器还给 Telus, 已经过了几周，30天的免责退货时间所剩不多了。</p>
<h2 id="退货流程"><span class="section-num">3</span> 退货流程</h2>
<p>因为设备不是通过网购买的，没法直接在网上退单，也不是门店买的，无法直接拿去门店退，退货的流程是打电话给 Telus 的客服，问他们要退货指引。</p>
<p>我就给 Telus 的客服打电话，解释清楚情况后，客服说给我账户对应的邮箱发个邮件，里面有指引和退货码，我需要去 Canada Post（加拿大邮政）把路由器寄回去。</p>
<p>电话里客服说已经给我发邮件了，但是我说没有收到（此处为后面埋下伏笔），于是我提供另外一个邮箱，成功收到了。</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-77eeb" hidden>
    <label for="zoomCheck-77eeb">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/telus_return_equipment_instruction.jpg"/> 
    
    
    </label>
</figure>

<p>因为 Canada Post 最近在为涨薪闹罢工，客服提到我需要去另外一家快递公司 Purolator 寄快递。</p>
<p>剩下要做就是把路由器打包，然后寄出来(这么容易就好了), 再把快递单号告知 Telus, 退货流程就算结束了。</p>
<h2 id="坑来了"><span class="section-num">4</span> 坑来了</h2>
<h3 id="邮政罢工"><span class="section-num">4.1</span> 邮政罢工</h3>
<p>因为加拿大邮政罢工，所以只能去 Purolator 寄，但是去到 Purolator后，人家反馈:</p>
<blockquote>
<p>你这个退货码是给加拿大邮政的，我们不认哦，你要给个我们家的退货码。</p></blockquote>
<p>我只能去再打电话给 Telus 客服要退货码，花费了15分钟，终于打通了，解释完一番之后，他们说给我的邮箱发了新的 Puralator 退货码，我等了一分钟，说没有收到，然后让给我另外的一个邮箱也发一次指引，还是没有收到，然后客服说邮件会在24-48小时内到达..</p>
<p>但挂电话后再等了一个小时还是没有收到.</p>
<h3 id="邮箱收不到email"><span class="section-num">4.2</span> 邮箱收不到email</h3>
<p>只能再打电话给 Telus 的客服，又等了10几分钟终于接通了，这次换了个客服，这位客服说我们不支持 Purolator，你可以等加拿大邮政罢工结束之后再寄。</p>
<p>我也很无语，怎么你们的回复还不一致的，就和客服说，我怎么知道罢工什么时候结束呢，30天马上就要到了嘛。</p>
<p>客服说，的确很有道理，这样吧，你可以去尝试使用用加拿大邮政寄下，然后我把情况记录一下，到时超过30天也可以免责退款。</p>
<p>然后我追问到，那罢工结束时退货也是用相同的退货码么？这个退货码有过期时间么？邮件没写哦。</p>
<p>客服说，那以防万一，我再给你邮箱发个新的退货码吧。</p>
<p>我着实是怕了，不知道为什么一直没有收到邮件，就让客服把我账号对应的邮箱地址读出来, 客服就把我邮箱的逐个地址读出来。</p>
<p>前面部分听着没问题嘛，我还在寻思是什么问题，只是听着听着，怎么我邮箱还有我不认识的部分，就打开 Telus 的APP 修改, 然后被气得差点要吐血了:</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-53734" hidden>
    <label for="zoomCheck-53734">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/telus_email_address.jpg"/> 
    
    
    </label>
</figure>

<p>我的邮箱地址是 <code>ramsayleung@gmail.com</code>, 然后为了标记不同的公司，我用了<a href="https://ramsayleung.github.io/zh/post/2023/gmail%E5%9C%B0%E5%9D%80%E7%9A%84%E9%9A%90%E8%97%8F%E6%8A%80%E5%B7%A7/">《两个鲜为人知的Gmail地址技巧》</a> 提到的加号技巧来注册 Telus 账号:</p>
<p><code>ramsayleung+telus@gmail.com</code></p>
<p>之前用了一年多还是好好的，不然我也无法注册和验证邮箱成功。</p>
<p>但是现在 Telus 作了变更，直接把邮箱地址中的加号去掉了，变成了 <code>ramsayleungtelus@gmail.com</code>, 变成一个完全不同的邮箱, 肯定是不可能收到邮件的。</p>
<p>花费了近一下午，打了5-6次电话，和不同的客服沟通和练习口语，最后的结果就是隔天再去加拿大邮政试试，不行就等他们罢工结束再寄。</p>
<h2 id="糟糕设计的代价"><span class="section-num">5</span> 糟糕设计的代价</h2>
<p>这次经历虽然令人沮丧，但也印证了软件工程的一条铁律：</p>
<p><strong><strong>糟糕的设计最终会让所有人付出代价——无论是用户还是开发者。</strong></strong></p>
<p>讽刺的是，人们总希望通过「学习别人的错误」来避免踩坑，但现实中，我们往往被迫为别人的设计缺陷买单。</p>
<h3 id="单点故障与-happy-path-陷阱"><span class="section-num">5.1</span> 单点故障与「Happy Path」陷阱</h3>
<p>电话退货这个操作虽然看似落后，但是总体来说还是可以用的，在不出问题的前提下。</p>
<p>Telus 的退货流程设计暴露了一个典型的系统脆弱性：</p>
<p><strong><strong>强依赖单一服务提供商（Canada Post）</strong></strong> ，且未设计降级方案（如备用物流或线下门店退货）。</p>
<p>这种「Happy Path Only」的思维，本质上是对分布式系统设计原则的违背：</p>
<p><strong><strong>任何外部服务都可能失败，而系统必须对此容错。</strong></strong></p>
<p>让快递直接成为业务系统的「单点」故障，只考虑 Happy Path, 没有考虑异常场景，甚至发过来的退货邮件指引，都可以看出他们是把 <strong><strong>Canada Post</strong></strong> 写死在邮件。</p>
<h3 id="向后兼容性-一个被忽视的底线"><span class="section-num">5.2</span> 向后兼容性：一个被忽视的底线</h3>
<p>退货强依赖加拿大邮政这个还可以说成是产品设计的问题，但是直接把我邮箱地址给改掉这个，就一定是程序员的锅了。</p>
<p>此外，我的邮箱地址在 APP 中显示的是 <code>ramsayleung@gmail.com</code>, 只有在修改邮箱地址的时候，才会显示出 <code>ramsayleungtelus@gmail.com</code> 这也是我一直没有发现的原因。</p>
<p>但最令人匪夷所思的是邮箱地址的非兼容性变更：系统直接静默移除了存量用户邮箱中的加号:</p>
<p><code>ramsayleung+telus@gmail.com</code> -&gt; <code>ramsayleungtelus@gmail.com</code> ，导致邮件发送失败。</p>
<p>这种粗暴的修改方式违反了最基本的向后兼容性原则，而问题的暴露方式（APP显示与修改界面不一致）进一步说明：</p>
<p>其系统内部还存在的数据状态不一致性问题</p>
<p>合理的变更方式应该是：</p>
<ol>
<li>增量控制：
<ul>
<li>禁止新用户注册或修改时使用特殊符号，但保留存量数据, 保证增量用户地址正确</li>
<li>存量用户修改邮箱地址时，禁止使用带特殊符号的邮箱地址</li>
</ul>
</li>
<li>存量迁移：
<ul>
<li>通过离线数仓，查询出所有带特殊符号的邮箱地址，通过异步任务批量通知受影响用户（避免阻塞主流程）</li>
<li>提供自动清理特殊符号的“一键修复”功能（需用户确认）。</li>
</ul>
</li>
<li>监控兜底：
<ul>
<li>建立异常邮箱地址的监控或者报表，直到存量问题归零。</li>
</ul>
</li>
</ol>
<p>虽然这做法非常繁琐，但是却可以保证系统升级绝对不影响用户。</p>
<p>系统设计与维护就是如此：开始做的时候成本很低，越到后期成本越高。</p>
<h2 id="个人感悟"><span class="section-num">6</span> 个人感悟</h2>
<p>除去别人的设计错误之外，我还有些额外的个人感悟:</p>
<p>虽然 Gmail 支持邮箱地址中增加一个 <code>+</code> 这样的功能，但是并不是所有的公司都支持这特性的，重要的邮件还是不能使用这个「奇技淫巧」。</p>
<p>此外，我另外提供的邮箱也无法收到邮件，可能是我的邮箱太长了，导致客服没有拼对我的邮箱，所以最好还是准备一个短的，包含数字的备用邮箱地址，方便电话沟通时提供给对方。</p>
<p>整个故事再次印证了《<a href="https://ramsayleung.github.io/zh/post/2025/a_philosophy_of_software_design/">软件设计的哲学</a>》中的道理：</p>
<p><strong><strong>所有偷懒的设计，终将以更高的成本偿还</strong></strong></p>
<p>当然, 谁来还就是后话了</p>
<div class="qr-container" center>
<img src="/ox-hugo/qrcode_gh_e06d750e626f_1.jpg" alt="qrcode_gh_e06d750e626f_1.jpg" class="qr-container" width="160px" height="160px" center="t" />
公号同步更新，欢迎关注👻
</div>
]]></content:encoded>
    </item>
    <item>
      <title>软件设计的哲学</title>
      <link>https://ramsayleung.github.io/zh/post/2025/a_philosophy_of_software_design/</link>
      <pubDate>Fri, 30 May 2025 00:39:00 -0700</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2025/a_philosophy_of_software_design/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; 前言&lt;/h2&gt;
&lt;p&gt;知道这本书是因为在 Hacker News 上有人提问：&lt;a href=&#34;https://news.ycombinator.com/item?id=31713756&#34;&gt;你读过最好的技术书是什么&lt;/a&gt; &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;?&lt;/p&gt;
&lt;p&gt;最高赞的书是 Design Data Intensive Application(DDIA, 即《&lt;a href=&#34;https://book.douban.com/subject/30329536/&#34;&gt;数据密集型应用系统设计&lt;/a&gt;》&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;), 我觉得 DDIA 也担得起这个赞誉，然后最高赞的回答顺势提到了 &lt;a href=&#34;https://book.douban.com/subject/30218046/&#34;&gt;A Philosophy Of Software Design&lt;/a&gt; &lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;, 想来能与 DDIA 齐名的书，肯定不会差得哪里去。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>知道这本书是因为在 Hacker News 上有人提问：<a href="https://news.ycombinator.com/item?id=31713756">你读过最好的技术书是什么</a> <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>?</p>
<p>最高赞的书是 Design Data Intensive Application(DDIA, 即《<a href="https://book.douban.com/subject/30329536/">数据密集型应用系统设计</a>》<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>), 我觉得 DDIA 也担得起这个赞誉，然后最高赞的回答顺势提到了 <a href="https://book.douban.com/subject/30218046/">A Philosophy Of Software Design</a> <sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>, 想来能与 DDIA 齐名的书，肯定不会差得哪里去。</p>
<p>作者是 John Ousterhout, 斯坦福大学的教授，TCL 编程语言的创造者(Redis 的初始化版本就是用 TCL 写的)，共识算法 Raft 的作者之一.</p>
<p>这本书并不厚，全书只有200多页，读起来也并不费劲。</p>
<p>而这本书的主旨，开篇就点出来了:</p>
<blockquote>
<p>This book is about how to design software systems to minimize their complexity.</p>
<p>本书讲述如何设计软件系统以最小化其复杂度</p></blockquote>
<p>而软件工程的本质就是如何管理复杂度，全书围绕如何降低软件复杂性提出的思考和解决方案，
主要围绕抽象，异常，文档，一致性，设计原则这五个方向。</p>
<p>许多原则我看着都深有共鸣，尤其在设计过相当多的系统之后，犯过许多错误之后，才会意识到这些原则的重要之处。</p>
<p>很多原则看上去说的和没说一样，但只有踩过坑，实践起来都知道是金科玉律, 除了道出「软件设计」的真谛之外, 这本书其他论点也可谓字字珠玑.</p>
<p>关于谨慎暴露过多的配置给用户，尽量让程序动态计算各种参数值，尽量提供默认参数。</p>
<blockquote>
<p>开发软件时，开发者主动承担一些额外痛苦，从而减少用户的痛苦。</p>
<p>When developing a module, look for opportunities to take a little bit of extra suffering upon yourself in order to reduce the suffering of your users.</p></blockquote>
<p>关于接口设计的原则:</p>
<blockquote>
<p>模块拥有简单的接口比简单的实现更重要。</p>
<p>it&rsquo;s more important for a module to have simple interface than a simple implementation</p></blockquote>
<p>关于异常处理的洞见:</p>
<blockquote>
<p>解决问题的最好方式是避免出现问题。</p>
<p>The best way to eliminate exception handling complexity is to define your APIs so that there are no exceptions to handle: <strong><strong>define errors out of existence</strong></strong></p>
<p>归根结底，减少 Bug 的最佳方法是让软件更简单(少即是多)</p>
<p><strong><strong>Overall, the best way to reduce bugs is to make software simpler.</strong></strong></p></blockquote>
<h2 id="抽象"><span class="section-num">2</span> 抽象</h2>
<p>所谓的抽象，用我自己的话来说的就是把复杂的东西简单地呈现出来。</p>
<h3 id="模块深度"><span class="section-num">2.1</span> 模块深度</h3>
<p>为了直观地感受一个模块设计是否足够抽象，作者提出一个模块深度的概念:</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-ff3dd" hidden>
    <label for="zoomCheck-ff3dd">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/deep_module.jpg"/> 
    
    
    </label>
</figure>

<p>矩形的表层长度即是接口的复杂程度，而矩形的面积代表模块实现的功能，好的模块应该是深的(deep), 这意味着它有简单的接口，但是内部有复杂且丰富的实现.</p>
<p>例如 Unix 的文件读写接口:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">open</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">path</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">,</span> <span class="kt">mode_t</span> <span class="n">permissions</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">ssize_t</span> <span class="nf">read</span><span class="p">(</span><span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span> <span class="n">buffer</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">count</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">ssize_t</span> <span class="nf">write</span><span class="p">(</span><span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span><span class="o">*</span> <span class="n">buffer</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">count</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">off_t</span> <span class="nf">lseek</span><span class="p">(</span><span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="kt">off_t</span> <span class="n">offset</span><span class="p">,</span> <span class="kt">int</span> <span class="n">referencePosition</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">close</span><span class="p">(</span><span class="kt">int</span> <span class="n">fd</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>接口非常简单，但是其内部的实现可能需要成千上万行的代码，
需要支持文件目录的读写，文件权限，读写缓冲区，磁盘读写等等功能，这就是「深的」模块。</p>
<p>与其相反的就是浅的模块(shallow), 接口很复杂，但是功能却很简单。</p>
<h3 id="信息的漏与藏"><span class="section-num">2.2</span> 信息的漏与藏</h3>
<p>实现抽象的关键手段就是辨别出信息的重要程度，对于不重要的信息，就要对用户隐藏起来，关键的信息，就要暴露给用户, 实现「去粗存精，开箱即用」。</p>
<p>一个典型的例子就是参数配置，把参数暴露给用户，除非用户非常熟悉这个系统，不然他也不知道怎么算，
不需要用户关注的参数就提供默认值，能程序动态计算就由程序自己来算.</p>
<p>我很反感的一种设计就是引入一个配置系统，系统的运行参数都要由工程师配置，美其名是提供灵活度。</p>
<p>但这不仅引入额外的系统依赖（须知复杂度的根源就来自依赖与不明确），还大大增加了的运维成本，
更何况这样的配置还无法自适应，换种机型又要重新配置，导致配置越来越复杂。</p>
<p>除非是业务的黑名单或者白名单，系统的运行参数能用默认的就用默认，能动态计算就动态计算。</p>
<p>想想TCP/IP 的重试延迟时长如果不是动态计算，那么配置什么值比较合适，网络畅通和网络延迟又该是什么值，
开始恢复时和开始堵塞时又应该是什么值的呢?</p>
<h2 id="异常"><span class="section-num">3</span> 异常</h2>
<p>异常处理是系统复杂度的关键来源之一，异常就是一种特殊的分支，系统为了处理特殊 case难免需要写很多额外的逻辑。</p>
<p>而作者提出的降低异常处理来系统复杂度影响的方法，就是优化设计，减少必须处理异常的地方。</p>
<p>解决一个问题最好的方法是避免其发生，听起来很空洞或者是很不可思议，作者举出来的例子就是 Java 的 <code>substring(int beginIndex, int endIndex)</code> 用于截取子字符串的接口, 如果 <code>endIndex</code> 超出字符长度，Java 就会抛出一个 <code>IndexOutOfBoundException</code>, 调用方就是需要考虑越界的问题。</p>
<p>但是如果 Java 的 <code>substring</code> 接口本身可以像 Python 那样支持越界，返回一个空字符串，那么调用方就完全不需要考虑越界导致的异常</p>
<p>另外一个例子是作者设计的TCL脚本中的 <code>unset</code> 指令，原意是用来删除一个变量，因为他最初的设想是变量如果不存在，用户不可能调用 <code>unset</code> 的，那么当 <code>unset</code> 操作的变量不存在，那么就会抛出异常。</p>
<p>但是很多用户就是用 <code>unset</code> 来清理可能被初始化或者未初始化的变量，现在的设计就意味用户还需要包一层 <code>try/catch</code> 才能使用 <code>unset</code>.</p>
<p>意识到这个设计错误之后，作者对 <code>unset</code> 的语义作了稍微的修正，用 <code>unset</code> 来确保指定的变量不再存在(如果变量本身不存在，那么它什么都不需要做)</p>
<p>更经典的例子就是 Windows 下面删除一个文件，相信使用过 Windows 的朋友尝试删除文件时都会遇到这样的弹窗：「文件已被打开，无法删除，请重试」</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-bbb1b" hidden>
    <label for="zoomCheck-bbb1b">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/windows_delete_opening_file.png"/> 
    
    
    </label>
</figure>

<p>用户只能费尽心思去找打开这个文件的进程，然后把它杀掉再尝试删除，甚至只能通过关机重启来尝试删除文件。</p>
<p>但是 Unix 的处理方式就更优雅，它允许用户删除已经被其他进程打开的文件，它会对该文件做标记，让用户看来它已经被删除了，但是在打开它的进程结束前文件对应的数据都会一直存在。</p>
<p>只有在进程结束后，文件数据才会被删除掉，这样用户在删除文件时就不需要担心文件是否被使用。</p>
<p>通过优化以上的设计，减少需要用户处理的异常，这也是一个「去粗留精」的过程, 减少用户需要感知的内容。</p>
<h2 id="注释"><span class="section-num">4</span> 注释</h2>
<p>本书用了好几个章节来介绍文档与注释的重要性，命名的重要性，如何写好注释和起好名字。</p>
<p>好的文档可以大幅改善一个系统的设计，因为文档的作用就是把「对用户重要的，但是无法直接从代码中得知的关键信息告知用户」, 相当于帮用户把一个系统的关键信息给找出来。</p>
<p>不是有这么一句话： <strong><strong>程序员都讨厌写文档，但是更痛恨其他程序员不写文档。</strong></strong></p>
<p><strong><strong>而注释就是离源码最近的文档.</strong></strong></p>
<p>程序员不写注释的借口大概有这么几个（可惜它们都是不成立的）, 常见的借口与它们不成立的原因可见:</p>
<h3 id="好的代码是自解释的"><span class="section-num">4.1</span> 好的代码是自解释的</h3>
<p>如果用户必须阅读方法源码才能使用它，那就没有抽象，你相当于把实现的所有复杂度都直接暴露给用户。</p>
<p>若想通过抽象隐藏复杂性，注释必不可少</p>
<h3 id="我没有时间写注释"><span class="section-num">4.2</span> 我没有时间写注释</h3>
<p>如果你一直把写代码的优先级置于写注释之上，那么你会一直没有时间写注释，
因为一个项目结束之后总会有新的项目到来，如果你一直把写注释的优先级放在代码之后，那么你永远都不会去写注释。</p>
<p>写注释实际并不需要那么多的时间</p>
<h3 id="注释都会过期的啦"><span class="section-num">4.3</span> 注释都会过期的啦</h3>
<p>注释虽然难免会过期，但是保持与代码一致也并不会花费太多时间。</p>
<p>只有大幅需要修改代码时才需要更新注释，更何况，只有每次都不更新注释，注释才会难免过期</p>
<h3 id="我见过的注释都很烂-我为啥还要写"><span class="section-num">4.4</span> 我见过的注释都很烂，我为啥还要写</h3>
<p>别人的注释写得不好，那不正说明你可以写出好的注释嘛。</p>
<p>不能用别人的低标准来要求自己嘛。</p>
<h3 id="注释的原则"><span class="section-num">4.5</span> 注释的原则</h3>
<p>说起接口注释和文档，我一直觉得我描述下接口功能和使用场景，已经比绝大多数的同行做得好了。</p>
<p>在和现在的 L7 大佬一起工作之后，着实被他的文档所震撼。</p>
<p>不知道是因为其对代码质量和文档都有非常高的要求，还是读博士时训练出来的写作能力，
其对接口的功能，使用场景以及异常的描述都非常详尽，甚至包括代码使用示例，质量与 JDK 源码的注释不相上下, 原来真的有程序员花这么多精力写代码注释的。</p>
<h4 id="注释应当描述代码中不明显的内容"><span class="section-num">4.5.1</span> 注释应当描述代码中不明显的内容</h4>
<p><strong><strong>注释应当描述代码中不明显的内容</strong></strong>,</p>
<p>简单来说，就是要描述代码为什么要这么做，而不是描述代码是怎么做的，这相当于是把代码换成注释再写一次。</p>
<h4 id="注释先行"><span class="section-num">4.5.2</span> 注释先行</h4>
<p>很多程序员都习惯在写完代码之后才写注释，作者反其道而行， 作者推荐在定义完函数或者模块接口之后，不要马上动手写实现，
而是在这个时候在接口上把接口注释写下来，这相当于是在脑海把模块的设计再过一次。</p>
<p>写完代码再写注释，设计思路已经记不大清了，脑中更多的是实现细节，既容易把实现写成注释，又容易陷入「写完代码就不写注释」的陷阱。</p>
<h2 id="一致性"><span class="section-num">5</span> 一致性</h2>
<p>前文提到，系统的复杂度来自于两个方面「依赖」与「不明确」，
而「一致性」就是让系统的行为更加清晰明确。</p>
<p><strong><strong>它意味着相似的事情以相似的方式处理，不同的事情以不同的方式处理。</strong></strong></p>
<p>即所谓的「规圆矩方」，通过规范约束降低随意性，以及「一法通，万法通」，统一模式提升可维护性，让行为可预期。</p>
<p>一个系统的一致性一般体现在以下方面：</p>
<ol>
<li>命名(驼峰还是下划线)</li>
<li>代码风格(缩进，空格还是tab)</li>
<li>设计模式(使用特定的设计模式解决特定的问题)</li>
</ol>
<p>当然，还有通过「一致性」降低系统复杂度，走得比较极端的:</p>
<p>之前还在微信支付的时候，除上述的要求外，还要求后端只能使用一种语言(C++, Golang/JavaScript就别想了), 存储组件只能使用微信内部研发的KV(使用MySql需要向总经理申请)等等的要求.</p>
<h2 id="设计原则"><span class="section-num">6</span> 设计原则</h2>
<h3 id="通用设计"><span class="section-num">6.1</span> 通用设计</h3>
<p>好的设计应该是通用的，优先采用通用设计而非特殊场景的定制化方案，这个是减少复杂度和改善软件系统的根本原则。</p>
<p>过度定制通常是成为软件复杂度增加的首要诱因。</p>
<p>通用设计可以降低系统的整体复杂度(更少处理特殊分支的逻辑), 更深的模块(接口简单，功能丰富), 隐藏非关键信息.</p>
<p>文中提到的例子就是文本编辑器的文字插入与删除操作:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 反例：过度定制（绑定特殊场景）, 实现删除键功能</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">class</span> <span class="nc">TextEditor</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">void</span><span class="w"> </span><span class="nf">handleBackspaceKey</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="c1">// 耦合UI事件</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">cursorPosition</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">text</span><span class="p">.</span><span class="na">deleteCharAt</span><span class="p">(</span><span class="n">cursorPosition</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">cursorPosition</span><span class="o">--</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// 正例：通用设计（解耦核心逻辑）</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">class</span> <span class="nc">Text</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">void</span><span class="w"> </span><span class="nf">delete</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">start</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">end</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="c1">// 纯文本操作</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">content</span><span class="p">.</span><span class="na">delete</span><span class="p">(</span><span class="n">start</span><span class="p">,</span><span class="w"> </span><span class="n">end</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">class</span> <span class="nc">UI</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">void</span><span class="w"> </span><span class="nf">onBackspacePressed</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">text</span><span class="p">.</span><span class="na">delete</span><span class="p">(</span><span class="n">cursor</span><span class="p">.</span><span class="na">position</span><span class="p">(),</span><span class="w"> </span><span class="n">cursor</span><span class="p">.</span><span class="na">position</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">1</span><span class="p">);</span><span class="w"> </span><span class="c1">// 调用通用API</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">cursor</span><span class="p">.</span><span class="na">moveLeft</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>通过 <code>delete(int start, int end)</code> 既可以实现删除键功能，也可以实现选中并删除的功能。</p>
<h3 id="性能"><span class="section-num">6.2</span> 性能</h3>
<p>在设计系统的时候，一般不需要太多地考虑性能的问题，因为简单，通用的系统要做性能优化通常都是比较容易；
相反而言，深度定制的系统因为耦合了定义逻辑，要优化性能并没有那么容易。</p>
<h3 id="设计两次"><span class="section-num">6.3</span> 设计两次</h3>
<p>Design it twice</p>
<p>因为很难一次就把事情做到极致, 那就再来一次, 设计时把能想到的选项都列下来.</p>
<p>反直觉的是，第一直觉通常不是最优的, 所以不要只考虑一种设计方案，无论它看起来多么合理，多对比下其他方案总没有害处的。</p>
<p>只用第一直觉的方案，其实你是在低估自己的潜力，你错失了找到更好方案的机会。</p>
<p>这也是我在写设计方案时候的做法，把自己能想到的，和同事讨论出来的所有方案都写上，然后分析各种方案的优劣, 最好的方案可能并不在原有方案列表里面，而是其中几个方案的合体。</p>
<h3 id="大局观"><span class="section-num">6.4</span> 大局观</h3>
<p>做任何事都要有大局观, 编程也不例外，战略编程优于战术编程(Strategic Programming over Tactical Programming);</p>
<p>虽然我们一直说「又不是不能跑」，但是我们对代码的要求，不能是「能跑就行啦」.</p>
<p>再者就是要和扁鹊他大哥治病一样，把功夫都做在前期，防范于未然，修补错误成本往往也越往后越高，病入膏肓之后，扁鹊来了也要提桶跑路:</p>
<blockquote>
<p>治不了，等死吧，告辞</p></blockquote>
<h2 id="代码整洁之道vs软件设计哲学"><span class="section-num">7</span> 代码整洁之道vs软件设计哲学</h2>
<p>本书的作者对<a href="https://book.douban.com/subject/34986245/">《代码整洁之道》</a>(Clean Code)<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> 的作者(Robert C. Martin, 即 Uncle Bob)的诸多观点作了反驳</p>
<h3 id="函数拆分"><span class="section-num">7.1</span> 函数拆分</h3>
<p>比如关于什么时候应该拆分一个函数，Uncle Bob 的观点是，基于函数的代码行数，一个函数需要相当短，甚至10行都有太长了。</p>
<p>Uncle Bob 原话:</p>
<blockquote>
<p>In the book Clean Code1, Robert Martin argues that functions should be broken up on length alone. He says that functions should be extremely short, and that even 10 lines is too long.</p></blockquote>
<p>而本书作者 John 的观点是: <strong><strong>每个函数应只做一件事，并完整地做好</strong></strong></p>
<p>函数的接口应当简洁，这样调用者无需记住大量信息就能正确使用它。</p>
<p>函数应当具备深度：其接口应远比实现更简单。如果一个函数满足以上所有特性，那么它的长度通常并不重要。</p>
<p><strong><strong>除非能让整个系统更简单，否则不应拆分函数</strong></strong></p>
<h3 id="文档注释"><span class="section-num">7.2</span> 文档注释</h3>
<p>Uncle Bob 认为需要给函数「注释始终是一种失败(<strong><strong>Comments are always failures</strong></strong>)」</p>
<p>如果我们的编程语言足够富有表现力，或者如果我们有能力用好这些语言来传达意图，那么我们就不太需要注释——甚至可能完全不需要.</p>
<p><strong><strong>注释的正确用途，是弥补我们无法用代码清晰表达的缺陷……注释始终是一种失败</strong></strong></p>
<blockquote>
<p>If our programming languages were expressive enough, or if we had the talent to subtly wield those languages to express our intent, we would not need comments very much — perhaps not at all.</p>
<p>he proper use of comments is to compensate for our failure to express ourselves in code&hellip;. Comments are always failures.</p></blockquote>
<p>而 John 的观点是</p>
<p>但注释并非失败的表现。</p>
<p><strong><strong>它们提供的信息与代码截然不同，而这些信息目前无法通过代码本身来表达。</strong></strong></p>
<p><strong><strong>注释的作用之一，正是让人无需阅读代码即可理解其含义</strong></strong></p>
<p>甚至直接反驳其观点:</p>
<blockquote>
<p>I worry that Martin’s philosophy encourages a bad attitude in programmers, where they avoid comments so as not to seem like failures.</p></blockquote>
<h3 id="网上对线"><span class="section-num">7.3</span> 网上对线</h3>
<p>所以也难怪 Uncle Bob 和 John Ousterhout 几个月前直接在网上论坛来了一次 <del>对线</del> (<a href="https://news.ycombinator.com/item?id=43166362">辩论)</a> <sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup></p>
<p>然后有看热闹不嫌事大的播主，把两人邀请到直播上，让他们直接面对面再来了一次对线</p>
<p>对应的Youtube视频: <a href="https://www.youtube.com/watch?v=3Vlk6hCWBw0">https://www.youtube.com/watch?v=3Vlk6hCWBw0</a></p>
<p>两位的书我都看过，我个人的感觉是《代码整洁之道》更适合入门的工程师，它可以教你如何写出好的「代码片段」；
而《软件设计的哲学》更适合需要做系统设计的工程师，它指导你如何设计好的「软件」。</p>
<p>考虑到两位作者的背景和作品，我可以说两位的差别可以说是 <strong><strong>以编程为生的人与以写编程相关的东西为生的人</strong></strong></p>
<h2 id="总结"><span class="section-num">8</span> 总结</h2>
<p>全书读完，我觉得《软件设计的哲学》绝对是配得上最好的技术书籍之一的赞誉。</p>
<p>但是不同的人读起来可能会有不同的感觉，其中的许多原则真的是做过设计，踩过坑才会有所共鸣, 否则会觉得其泛泛其谈。</p>
<p>当然，我也不是完全同意书中的所有观点的。</p>
<p>比如书中提到的会导致代码意图不「明显」的其中一种做法是声明的类型与初始化的类型不一致的情况:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">private</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">Message</span><span class="o">&gt;</span><span class="w"> </span><span class="n">incomingMessageList</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">incomingMessageList</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Message</span><span class="o">&gt;</span><span class="p">();</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>上面声明的是 <code>List&lt;Message&gt;</code>, 实际使用的 <code>ArrayList&lt;Message&gt;</code>, 这可能会误导用户，因为意图不清晰，阅读代码的人可能不确定是否需要使用 <code>List</code> 或者 <code>ArrayList</code>, 最好是声明和初始化都换成相同的类型。</p>
<p>但是 <code>List</code> 是接口, <code>ArrayList</code> 是接口的具体实现，这个就是非常标准的面向对象编程中的多态，这并不什么问题。</p>
<p>但瑕不掩瑜，全书读完，把书盖上后，我有种齿颊留香, 余音绕梁的感觉，书里有很多「熟悉的味道」，总是让我想起经手过的项目中种种的好代码和「坏」代码.</p>
<h2 id="推荐阅读">推荐阅读</h2>
<ul>
<li>旅加经历
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E8%BF%99%E4%BA%9B%E5%B9%B4%E8%B5%B0%E8%BF%87%E7%9A%84%E8%B7%AF_%E4%BB%8E%E5%B9%BF%E5%B7%9E%E5%88%B0%E6%B8%A9%E5%93%A5%E5%8D%8E/">这些年走过的路：从广州到温哥华</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E5%8A%A0%E6%8B%BF%E5%A4%A7%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C/">加拿大之初体验</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E7%99%BB%E9%99%86%E5%8A%A0%E6%8B%BF%E5%A4%A7%E4%B8%80%E5%B9%B4%E7%9A%84%E4%BD%93%E4%BC%9A/">登陆加拿大一年后的体会</a></li>
</ul>
</li>
<li>工具流分享
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E7%AE%80%E6%98%8E%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/">简明写作指南</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E5%86%99%E4%BD%9C%E6%B5%81/">我的写作流</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E7%94%BB%E5%9B%BE%E6%B5%81/">我的画图流：画图工具与技巧分享</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E6%90%9C%E7%B4%A2%E6%B5%81/">我的搜索流：高效搜索经验分享</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2022/feynman_technique/">最好的学习方式：费曼学习法(Feynman Technique)</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2021/%E7%B3%BB%E7%BB%9F%E6%80%9D%E8%80%83/">系统思考：既见树木，又见森林</a></li>
</ul>
</li>
<li>思考感悟
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E7%BC%96%E7%A8%8B%E5%8D%81%E5%B9%B4%E7%9A%84%E6%84%9F%E6%82%9F/">编程十年的感悟</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E4%BB%8E%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E7%A6%BB%E7%BA%BF_%E6%88%91%E5%B8%A6%E8%B5%B0%E4%BA%86%E4%BB%80%E4%B9%88/">那些年，我从微信支付学到的东西</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2025/%E6%9D%82%E8%B0%88ai%E5%8F%96%E4%BB%A3%E7%A8%8B%E5%BA%8F%E5%91%98/">杂谈ai取代程序员</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E7%BD%AE%E8%BA%AB%E4%BA%8B%E5%86%85/">为什么梦想买不起，故乡回不去</a></li>
</ul>
</li>
<li>软件工程
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2025/structure_and_interpretation_of_computer_programs/">一本读了八年还没读完的书</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%B8%80_%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E8%AE%A4%E7%9F%A5/">测试技能进阶(一): 软件质量认知</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%BA%8C_parameterized_tests/">测试技能进阶(二): Parameterized Tests</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%B8%89_property_based_testing/">测试技能进阶(三): Property Based Testing</a></li>
</ul>
</li>
</ul>
<div class="qr-container" center>
<img src="/ox-hugo/qrcode_gh_e06d750e626f_1.jpg" alt="qrcode_gh_e06d750e626f_1.jpg" class="qr-container" width="160px" height="160px" center="t" />
公号同步更新，欢迎关注👻
</div>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://news.ycombinator.com/item?id=31713756">https://news.ycombinator.com/item?id=31713756</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://book.douban.com/subject/30329536/">https://book.douban.com/subject/30329536/</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="https://book.douban.com/subject/30218046/">https://book.douban.com/subject/30218046/</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p><a href="https://book.douban.com/subject/34986245/">https://book.douban.com/subject/34986245/</a>&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p><a href="https://news.ycombinator.com/item?id=43166362">https://news.ycombinator.com/item?id=43166362</a>&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>The Non-designer&#39;s design book</title>
      <link>https://ramsayleung.github.io/zh/post/2021/the_nondesigners_design_book/</link>
      <pubDate>Sun, 17 Oct 2021 15:16:36 +0000</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2021/the_nondesigners_design_book/</guid>
      <description>&lt;h2 id=&#34;design-principle&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; Design principle&lt;/h2&gt;
&lt;p&gt;在谈论四个设计的基本准则前, 作者强调了关于命名的重要性.&lt;/p&gt;
&lt;p&gt;作者举了一个例子, 在圣诞节, 他收到一本书介绍树木的分类, 他注意到一种叫Joshua tree的树, 造型奇特. 他想, 如果我看过, 我肯定会记得, 毕竟形状特别. 当他走出家门时, 发现社区80%的院子都有这种树, 但他此前从未注意到. &lt;strong&gt;&lt;strong&gt;一旦你可以叫出它的名字, 你就发现它随处可见&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="design-principle"><span class="section-num">1</span> Design principle</h2>
<p>在谈论四个设计的基本准则前, 作者强调了关于命名的重要性.</p>
<p>作者举了一个例子, 在圣诞节, 他收到一本书介绍树木的分类, 他注意到一种叫Joshua tree的树, 造型奇特. 他想, 如果我看过, 我肯定会记得, 毕竟形状特别. 当他走出家门时, 发现社区80%的院子都有这种树, 但他此前从未注意到. <strong><strong>一旦你可以叫出它的名字, 你就发现它随处可见</strong></strong></p>
<blockquote>
<p>Once you can name something, you&rsquo;re conscious of it. You have power over it. You&rsquo;re in control. You own it.</p></blockquote>
<p>深有体会. 树尤如此, 设计准则亦如是.</p>
<p><strong><strong>Good design</strong></strong> is as easy as:</p>
<ul>
<li>Learn the basic principles: They&rsquo;re simpler than you might think</li>
<li>Recognize when you&rsquo;re not using them: Put it into words - name the problem</li>
<li>Apply the principles: Be amazed</li>
</ul>
<h3 id="proximity"><span class="section-num">1.1</span> Proximity</h3>
<p>The principle of Proximity states: <strong><strong>Group related item together</strong></strong>. 有关联的元素, 位置上让它们更接近, 以表示它们有关联的一个群组而不是若干个无关联散落的元素</p>
<p>当然, 有关联才放在一起, 没关联就不要硬挤过来. 留下视觉距离让读者可以判别出他们的关系. 这也和生活经验吻合, 可以从两人的物理距离判别出他们的关系</p>

<figure><a href="/ox-hugo/mon_and_son_1.png">
    
    
    <input type="checkbox" id="zoomCheck-ffc82" hidden>
    <label for="zoomCheck-ffc82">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/mon_and_son_1.png"/> 
    
    
    </label></a>
</figure>


<figure><a href="/ox-hugo/mon_and_son_2.png">
    
    
    <input type="checkbox" id="zoomCheck-66d20" hidden>
    <label for="zoomCheck-66d20">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/mon_and_son_2.png"/> 
    
    
    </label></a>
</figure>

<p>如下例子:</p>

<figure><a href="/ox-hugo/card_1.png">
    
    
    <input type="checkbox" id="zoomCheck-bcda1" hidden>
    <label for="zoomCheck-bcda1">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/card_1.png"/> 
    
    
    </label></a>
</figure>


<figure><a href="/ox-hugo/card_2.png">
    
    
    <input type="checkbox" id="zoomCheck-a9945" hidden>
    <label for="zoomCheck-a9945">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/card_2.png"/> 
    
    
    </label></a>
</figure>


<figure><a href="/ox-hugo/post_card_1.png">
    
    
    <input type="checkbox" id="zoomCheck-a7d75" hidden>
    <label for="zoomCheck-a7d75">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/post_card_1.png"/> 
    
    
    </label></a>
</figure>


<figure><a href="/ox-hugo/post_card_2.png">
    
    
    <input type="checkbox" id="zoomCheck-73eee" hidden>
    <label for="zoomCheck-73eee">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/post_card_2.png"/> 
    
    
    </label></a>
</figure>


<figure><a href="/ox-hugo/poster_1.png">
    
    
    <input type="checkbox" id="zoomCheck-d830e" hidden>
    <label for="zoomCheck-d830e">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/poster_1.png"/> 
    
    
    </label></a>
</figure>


<figure><a href="/ox-hugo/poster_2.png">
    
    
    <input type="checkbox" id="zoomCheck-a99e9" hidden>
    <label for="zoomCheck-a99e9">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/poster_2.png"/> 
    
    
    </label></a>
</figure>

<p>The idea of proximity doesn&rsquo;t mean that <em>everything</em> is closer together; it means elements that are <em>ntellectually connected</em>, those that have some sort of communication relationship, should also be <em>visually connected</em>.</p>
<p>It&rsquo;s all about space. The principle of Proximity helps you focus on space and what it can do for communication</p>
<h3 id="alignment"><span class="section-num">1.2</span> Alignment</h3>
<p>The Principle of Alighment states: <strong><strong>Nothing should be placed on the page arbitrarily. Every item should have a visual connection with something else on the page.</strong></strong> The principle of alignment forces you to be conscious &ndash; no longer can you just throw things on the page and see where they stick</p>
<p>通过对齐, 可以让元素之间产生联系, 使杂乱的设计变得有条理, 通过布局来展现关联. 如下图分析</p>

<figure><a href="/ox-hugo/card_1.png">
    
    
    <input type="checkbox" id="zoomCheck-bcda1" hidden>
    <label for="zoomCheck-bcda1">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/card_1.png"/> 
    
    
    </label></a>
</figure>


<figure><a href="/ox-hugo/card_2.png">
    
    
    <input type="checkbox" id="zoomCheck-a9945" hidden>
    <label for="zoomCheck-a9945">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/card_2.png"/> 
    
    
    </label></a>
</figure>


<figure><a href="/ox-hugo/card_3.png">
    
    
    <input type="checkbox" id="zoomCheck-6f7c8" hidden>
    <label for="zoomCheck-6f7c8">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/card_3.png"/> 
    
    
    </label></a>
</figure>

<p>又或者是:</p>

<figure><a href="/ox-hugo/report_cover_1.png">
    
    
    <input type="checkbox" id="zoomCheck-a755d" hidden>
    <label for="zoomCheck-a755d">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/report_cover_1.png"/> 
    
    
    </label></a>
</figure>


<figure><a href="/ox-hugo/report_cover2.png">
    
    
    <input type="checkbox" id="zoomCheck-d12c2" hidden>
    <label for="zoomCheck-d12c2">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/report_cover2.png"/> 
    
    
    </label></a>
</figure>

<p>通常来说, 左对齐或者右对齐会比居中对齐有更强烈的视觉效果, 因为居中对齐两边不对齐, 就会让我有种未对齐的感觉</p>

<figure><a href="/ox-hugo/center_align.png">
    
    
    <input type="checkbox" id="zoomCheck-25559" hidden>
    <label for="zoomCheck-25559">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/center_align.png"/> 
    
    
    </label></a>
</figure>

<p>对于页面, 可分析其页面元素的对齐, 然后修正成统一的对齐方式. 而下图的书页, 左右都对齐了, 还增加了缩进和行分隔, 看起来就清晰多了.</p>

<figure><a href="/ox-hugo/book_page_1.png">
    
    
    <input type="checkbox" id="zoomCheck-50800" hidden>
    <label for="zoomCheck-50800">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/book_page_1.png"/> 
    
    
    </label></a>
</figure>


<figure><a href="/ox-hugo/book_page_2.png">
    
    
    <input type="checkbox" id="zoomCheck-7bdb3" hidden>
    <label for="zoomCheck-7bdb3">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/book_page_2.png"/> 
    
    
    </label></a>
</figure>

<p>I am giving you a number of rules here, and it&rsquo;s true that rules are made to be broken. But remember the <strong><strong>Rule about Breaking Rules: You must know what the rule is before you can break it</strong></strong></p>
<h3 id="repetition"><span class="section-num">1.3</span> Repetition</h3>
<p>The Principle of Pepetition States: <strong><strong>Repeat some aspect of the design throught the entire piece</strong></strong>. The repetitive element may be a bold font, a thick rule(line), a certain bullet, design element, color, format, spatial relationships, etc. It can be anything that a reader will visually recognize</p>
<p>重复是一致性的一种实现, 但重复并不止于一致性, 它还是一种统一设计中各个元素的有力手段. 还是熟悉的名片:</p>

<figure><a href="/ox-hugo/card_1.png">
    
    
    <input type="checkbox" id="zoomCheck-bcda1" hidden>
    <label for="zoomCheck-bcda1">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/card_1.png"/> 
    
    
    </label></a>
</figure>


<figure><a href="/ox-hugo/card_2.png">
    
    
    <input type="checkbox" id="zoomCheck-a9945" hidden>
    <label for="zoomCheck-a9945">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/card_2.png"/> 
    
    
    </label></a>
</figure>

<h3 id="contrast"><span class="section-num">1.4</span> Contrast</h3>
<p>The Principle of Contrast states: <strong><strong>Contrast Various elements of the piece to draw a reader&rsquo;s eye itno the page</strong></strong>. If two items are not exactly the same, then make them different. Really different</p>
<p>对比有很多手法, 诸如大与小, 复古与新潮, 强与弱, 明与暗, 粗糙与细滑, 水平与垂直等等.</p>
<p>需要注意的是, 如果两个元素有区分, 但本质无差别, 那就不是 <em>contrast</em>, 而是 <em>conflict</em>.</p>

<figure><a href="/ox-hugo/conflict.png">
    
    
    <input type="checkbox" id="zoomCheck-dd672" hidden>
    <label for="zoomCheck-dd672">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/conflict.png"/> 
    
    
    </label></a>
</figure>


<figure><a href="/ox-hugo/contrast.png">
    
    
    <input type="checkbox" id="zoomCheck-be993" hidden>
    <label for="zoomCheck-be993">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/contrast.png"/> 
    
    
    </label></a>
</figure>


<figure><a href="/ox-hugo/newsletter1.png">
    
    
    <input type="checkbox" id="zoomCheck-8517b" hidden>
    <label for="zoomCheck-8517b">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/newsletter1.png"/> 
    
    
    </label></a>
</figure>


<figure><a href="/ox-hugo/newsletter2.png">
    
    
    <input type="checkbox" id="zoomCheck-b2445" hidden>
    <label for="zoomCheck-b2445">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/newsletter2.png"/> 
    
    
    </label></a>
</figure>

<p>There is one more general guiding principle of Design(and of Life):
<strong><strong>Don&rsquo;t be wimp</strong></strong></p>
<p>突然意识到, 本书的PDF 版本的排版和字段, 图片也是相当舒服的</p>
<h2 id="design-with-type"><span class="section-num">2</span> Design with Type</h2>
<p>接下来大部分内容都关于Type, 关于印刷, 关于字体种类, 不是很感兴趣, 所以就草草涉猎过.</p>
<div center class="qr-container">
<img src="/ox-hugo/qrcode_gh_e06d750e626f_1.jpg" alt="qrcode_gh_e06d750e626f_1.jpg" width="160px" height="160px" center="t" class="qr-container" />
公号同步更新，欢迎关注👻
</div>
]]></content:encoded>
    </item>
    <item>
      <title>关于分布式系统唯一ID的探究</title>
      <link>https://ramsayleung.github.io/zh/post/2017/distributed_system_unique_id/</link>
      <pubDate>Tue, 23 May 2017 00:00:00 -0700</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2017/distributed_system_unique_id/</guid>
      <description>An discussion about unique id in distributed system</description>
      <content:encoded><![CDATA[<p>最近我需要为运行的分布式系统某部分模块构造系统唯一的ID, 而 ID 需要是数字的形式，并应该尽量的短。不得不说，这是一个有趣的问题</p>
<h2 id="若干实现策略"><span class="section-num">1</span> 若干实现策略</h2>
<p>查阅完相关的资料，发现为分布式系统生成唯一 ID 方法挺多的，例如：</p>
<ul>
<li>UUID</li>
<li>使用一个 ticket server, 即中央的服务器，各个节点都从中央服务器取 ID</li>
<li>Twitter 的 Snowflake 算法</li>
<li>Boundary 的 flake 算法</li>
</ul>
<p>其中 UUID 生成的 ID 是字符串＋数字，不适用； ticket server 的做法略麻烦，我
并不想为了个 ID 还要去访问中央服务器；剩下就是 Snowflake 和 flake 算法，
flake 算法生成的是 128 位的 ID, 略长；所以最后我选择了 Snowflake 算法。</p>
<h2 id="snowflake-算法实现"><span class="section-num">2</span> Snowflake 算法实现</h2>
<p>本来 Twitter 的算法是有相应实现的，不过后来删除了；我就只好自己卷起袖子自己 实现了:(</p>
<p>虽说 Twitter 没有了相应的实现，但是 Snowflake 算法原理很简单，实现起来并不难.</p>
<h3 id="snowflake-算法"><span class="section-num">2.1</span> Snowflake 算法</h3>
<p>Snowflake 算法生成 64 位的 ID, ID 的格式是 41 位的时间戳 + 10 位的截断的 mac 地址 + 12 位递增序列：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;id format =&gt;
</span></span></span><span class="line"><span class="cl"><span class="s2">timestamp | machineId|sequence
</span></span></span><span class="line"><span class="cl"><span class="s2">41        | 10       |12
</span></span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="snowflake-实现"><span class="section-num">2.2</span> Snowflake 实现</h3>
<h4 id="生成时间戳"><span class="section-num">2.2.1</span> 生成时间戳</h4>
<p>Java 内置了生成精确到毫秒的时间戳的方法，非常便利：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">long</span><span class="w"> </span><span class="n">timestamp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">System</span><span class="p">.</span><span class="na">currentTimeMillis</span><span class="p">();</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="生成递增序列"><span class="section-num">2.2.2</span> 生成递增序列</h4>
<p>12 bits 的最大值是 2**12=4096, 所以生成递增序列也非常简单：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">private</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="kt">long</span><span class="w"> </span><span class="n">sequenceMax</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">4096</span><span class="p">;</span><span class="w"> </span><span class="c1">//2**12</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kd">volatile</span><span class="w"> </span><span class="kt">long</span><span class="w"> </span><span class="n">sequence</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0L</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">generateId</span><span class="p">(){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">//do something</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">sequence</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">sequence</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">1</span><span class="p">)</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="n">sequenceMax</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">//do something</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="获取-mac-地址"><span class="section-num">2.2.3</span> 获取 Mac 地址</h4>
<p>我们通过获取当前机器的 IP 地址以获取对应的物理地址：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span><span class="w"> </span><span class="kt">long</span><span class="w"> </span><span class="nf">getMachineId</span><span class="p">()</span><span class="w"> </span><span class="kd">throws</span><span class="w"> </span><span class="n">GetHardwareIdFailedException</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">try</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">InetAddress</span><span class="w"> </span><span class="n">ip</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">InetAddress</span><span class="p">.</span><span class="na">getLocalHost</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">NetworkInterface</span><span class="w"> </span><span class="n">network</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">NetworkInterface</span><span class="p">.</span><span class="na">getByInetAddress</span><span class="p">(</span><span class="n">ip</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">long</span><span class="w"> </span><span class="n">id</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">network</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kt">byte</span><span class="o">[]</span><span class="w"> </span><span class="n">mac</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">network</span><span class="p">.</span><span class="na">getHardwareAddress</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">((</span><span class="n">0x000000FF</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="w"> </span><span class="n">mac</span><span class="o">[</span><span class="n">mac</span><span class="p">.</span><span class="na">length</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">1</span><span class="o">]</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                 </span><span class="p">(</span><span class="n">0x0000FF00</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="p">(((</span><span class="kt">long</span><span class="p">)</span><span class="w"> </span><span class="n">mac</span><span class="o">[</span><span class="n">mac</span><span class="p">.</span><span class="na">length</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">2</span><span class="o">]</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="n">8</span><span class="p">)))</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="n">6</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">id</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">SocketException</span><span class="w"> </span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">throw</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">GetHardwareIdFailedException</span><span class="p">(</span><span class="n">e</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">UnknownHostException</span><span class="w"> </span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">throw</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">GetHardwareIdFailedException</span><span class="p">(</span><span class="n">e</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>又因为 Mac 地址是6 个字节 (48 bits)，而需要的只是 10 bit, 所以需要取最低位的 2个字节 (16 bits)，然后右移 6 bits 以获取 10 个 bits 的 Mac地址</p>
<h3 id="snowflake-完整代码"><span class="section-num">2.3</span> Snowflake 完整代码</h3>
<p>下面是 Snowflake 的 Java 实现：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span><span class="lnt">91
</span><span class="lnt">92
</span><span class="lnt">93
</span><span class="lnt">94
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">IdGenerator</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">//   id format  =&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">//   timestamp |datacenter | sequence</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">//   41        |10         |  12</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="kt">long</span><span class="w"> </span><span class="n">sequenceBits</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">12</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="kt">long</span><span class="w"> </span><span class="n">machineIdBits</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">10L</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="kt">long</span><span class="w"> </span><span class="n">MaxMachineId</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">-</span><span class="n">1L</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="p">(</span><span class="o">-</span><span class="n">1L</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="n">machineIdBits</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="kt">long</span><span class="w"> </span><span class="n">machineIdShift</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sequenceBits</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="kt">long</span><span class="w"> </span><span class="n">timestampLeftShift</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sequenceBits</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">machineIdBits</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="n">Object</span><span class="w"> </span><span class="n">lock</span><span class="o">=</span><span class="k">new</span><span class="w"> </span><span class="n">Object</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="kt">long</span><span class="w"> </span><span class="n">twepoch</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">1288834974657L</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="kt">long</span><span class="w"> </span><span class="n">machineId</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="kt">long</span><span class="w"> </span><span class="n">sequenceMax</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">4096</span><span class="p">;</span><span class="w"> </span><span class="c1">//2**12</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">volatile</span><span class="w"> </span><span class="kt">long</span><span class="w"> </span><span class="n">lastTimestamp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">-</span><span class="n">1L</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">volatile</span><span class="w"> </span><span class="kt">long</span><span class="w"> </span><span class="n">sequence</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0L</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kd">volatile</span><span class="w"> </span><span class="n">IdGenerator</span><span class="w">  </span><span class="n">instance</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="n">IdGenerator</span><span class="w"> </span><span class="nf">getInstance</span><span class="p">()</span><span class="w"> </span><span class="kd">throws</span><span class="w"> </span><span class="n">Exception</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">IdGenerator</span><span class="w"> </span><span class="n">generator</span><span class="o">=</span><span class="n">instance</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">instance</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kd">synchronized</span><span class="p">(</span><span class="n">lock</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">generator</span><span class="o">=</span><span class="n">instance</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">if</span><span class="p">(</span><span class="n">generator</span><span class="o">==</span><span class="kc">null</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">generator</span><span class="o">=</span><span class="k">new</span><span class="w"> </span><span class="n">IdGenerator</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">instance</span><span class="o">=</span><span class="n">generator</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">generator</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="nf">IdGenerator</span><span class="p">()</span><span class="w"> </span><span class="kd">throws</span><span class="w"> </span><span class="n">Exception</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">machineId</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">getMachineId</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">machineId</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">MaxMachineId</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">machineId</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">throw</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">Exception</span><span class="p">(</span><span class="s">&#34;machineId &gt; MaxMachineId&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">synchronized</span><span class="w"> </span><span class="n">Long</span><span class="w"> </span><span class="nf">generateLongId</span><span class="p">()</span><span class="w"> </span><span class="kd">throws</span><span class="w"> </span><span class="n">Exception</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">long</span><span class="w"> </span><span class="n">timestamp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">System</span><span class="p">.</span><span class="na">currentTimeMillis</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">timestamp</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">lastTimestamp</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">throw</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">Exception</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                                </span><span class="s">&#34;Clock moved backwards.  Refusing to generate id for &#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                                                                                          </span><span class="n">lastTimestamp</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">timestamp</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s">&#34; milliseconds.&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">lastTimestamp</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">timestamp</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">sequence</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">sequence</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">1</span><span class="p">)</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="n">sequenceMax</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">sequence</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">timestamp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">tillNextMillis</span><span class="p">(</span><span class="n">lastTimestamp</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">sequence</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">lastTimestamp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">timestamp</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">Long</span><span class="w"> </span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">((</span><span class="n">timestamp</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">twepoch</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="n">timestampLeftShift</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">(</span><span class="n">machineId</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="n">machineIdShift</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">sequence</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">id</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">protected</span><span class="w"> </span><span class="kt">long</span><span class="w"> </span><span class="nf">tillNextMillis</span><span class="p">(</span><span class="kt">long</span><span class="w"> </span><span class="n">lastTimestamp</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">long</span><span class="w"> </span><span class="n">timestamp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">System</span><span class="p">.</span><span class="na">currentTimeMillis</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">timestamp</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="n">lastTimestamp</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">timestamp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">System</span><span class="p">.</span><span class="na">currentTimeMillis</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">timestamp</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">protected</span><span class="w"> </span><span class="kt">long</span><span class="w"> </span><span class="nf">getMachineId</span><span class="p">()</span><span class="w"> </span><span class="kd">throws</span><span class="w"> </span><span class="n">GetHardwareIdFailedException</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">try</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">InetAddress</span><span class="w"> </span><span class="n">ip</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">InetAddress</span><span class="p">.</span><span class="na">getLocalHost</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">NetworkInterface</span><span class="w"> </span><span class="n">network</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">NetworkInterface</span><span class="p">.</span><span class="na">getByInetAddress</span><span class="p">(</span><span class="n">ip</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kt">long</span><span class="w"> </span><span class="n">id</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">network</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="kt">byte</span><span class="o">[]</span><span class="w"> </span><span class="n">mac</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">network</span><span class="p">.</span><span class="na">getHardwareAddress</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="p">((</span><span class="n">0x000000FF</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="w"> </span><span class="n">mac</span><span class="o">[</span><span class="n">mac</span><span class="p">.</span><span class="na">length</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">1</span><span class="o">]</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                     </span><span class="p">(</span><span class="n">0x0000FF00</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="p">(((</span><span class="kt">long</span><span class="p">)</span><span class="w"> </span><span class="n">mac</span><span class="o">[</span><span class="n">mac</span><span class="p">.</span><span class="na">length</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">2</span><span class="o">]</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="n">8</span><span class="p">)))</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="n">6</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="n">id</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">SocketException</span><span class="w"> </span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">throw</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">GetHardwareIdFailedException</span><span class="p">(</span><span class="n">e</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">UnknownHostException</span><span class="w"> </span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">throw</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">GetHardwareIdFailedException</span><span class="p">(</span><span class="n">e</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>正如我所言，算法并不难，就是分别获取时间戳， mac 地址，和递增序列号，然后移位得到 ID. 但是在具体的实现中还是有一些需要注意的细节的。</p>
<h4 id="线程同步"><span class="section-num">2.3.1</span> 线程同步</h4>
<p>因为算法中使用到递增的序列号来生成 ID,而在实际的开发或者生产环境中很可能不止一个线程在使用 IdGenerator 这个类，如果这样就很容易出现不同线程的竞争问题，所以我使用了单例模式来生成 ID, 一方面更符合生成器的设计，另一方面因为对生成 ID的方法进行了同步，就保证了不会出现竞争问题。</p>
<h4 id="同一毫秒生成多个-id"><span class="section-num">2.3.2</span> 同一毫秒生成多个 ID</h4>
<p>因为序列号长度是 12个 bit, 那么序列号最大值就是2**12=4096了，此外时间戳是精确到毫秒的，这就是意味着，当一毫秒内，产生超过 4096 个 ID 的时候就会出现重复的ID.</p>
<p>这样的情况并不是不可能发生，所以要对此进行处理；所以在 <em>generateId()</em> 函数中：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">lastTimestamp</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">timestamp</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">sequence</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">sequence</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">1</span><span class="p">)</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="n">sequenceMax</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">sequence</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">timestamp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">tillNextMillis</span><span class="p">(</span><span class="n">lastTimestamp</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>有以上的一段代码。当现在的时间戳与之前的时间戳一致，那么就意味着还是同一毫秒，如果序列号为 0, 就说明已经产生了 4096 个 ID了，继续产生 ID,就会出现重复 ID, 所以要等待一毫秒，这个就是 <em>tillNextMills()</em> 函数的作用了。</p>
<h2 id="小结"><span class="section-num">3</span> 小结</h2>
<p>算法虽然简单，但是在找到 Snowflake 算法之前，我尝试了挺多的算法，但是都是因为不符合要求而被一一否决， 而 Snowflake 算法虽然简单，但是胜在实用。</p>
<p>最后附上我写的 snowflake 算法的 Python 实现： <a href="https://github.com/ramsayleung/snowflake">Snowfloke</a></p>
<div center class="qr-container">
<img src="/ox-hugo/qrcode_gh_e06d750e626f_1.jpg" alt="qrcode_gh_e06d750e626f_1.jpg" width="160px" height="160px" center="t" class="qr-container" />
公号同步更新，欢迎关注👻
</div>
]]></content:encoded>
    </item>
  </channel>
</rss>

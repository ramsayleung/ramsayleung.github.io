<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>productivity on 花生地</title>
    <link>https://ramsayleung.github.io/zh/tags/productivity/</link>
    <description>Recent content in productivity on 花生地</description>
    <image>
      <title>花生地</title>
      <url>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.120.4</generator>
    <language>zh</language>
    <copyright>See this site&amp;rsquo;s source code here, licensed under GPLv3 ·</copyright>
    <lastBuildDate>Thu, 09 Jan 2025 20:06:06 -0800</lastBuildDate>
    <atom:link href="https://ramsayleung.github.io/zh/tags/productivity/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>我的搜索流：高效搜索经验分享</title>
      <link>https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E6%90%9C%E7%B4%A2%E6%B5%81/</link>
      <pubDate>Sun, 25 Jun 2023 13:55:00 -0700</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E6%90%9C%E7%B4%A2%E6%B5%81/</guid>
      <description>1 前言 人并非全知全能，工作和生活难免会有各种的疑问，有问题自然可以询问有经验的同事或朋友。 但为了避免一有问题就去问人，给别人造成困扰，更推荐</description>
      <content:encoded><![CDATA[<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>人并非全知全能，工作和生活难免会有各种的疑问，有问题自然可以询问有经验的同事或朋友。 <br/></p>
<p>但为了避免一有问题就去问人，给别人造成困扰，更推荐的就是: 自己先搜索，然后再去问人(Do a search before you ask a question) <br/></p>
<p>当然，如果你不想打扰他人，直接问ChatGPT也未尝不可，只是答案的准确性不一定有保证。 <br/></p>
<p>如何高效地搜索，缩小搜索的范围，如何快速地检索到答案呢？ <br/></p>
<p>那么我来分享一下自己的个人经验： <br/></p>
<h2 id="google-search"><span class="section-num">2</span> Google Search</h2>
<p>虽然我认为「搜索并不仅限于使用搜索引擎」，但是「搜索引擎」却是搜索并不可少的一部分。 <br/></p>
<p>虽然搜索引擎有很多，但是我基本只用 Google；如果没法使用 Google, 那么推荐使用Bing, 反正百度不在我的推荐之列. <br/></p>
<p>Google 搜索的界面很简单，只有一个搜索框，用户只需要把想要搜索的内容输入进去并回车即可。 <br/></p>
<p>比如搜索：「cpp modules」，返回了 7,320,000条结果。 <br/></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/google_search_result.png"/> 
</figure>
 <br/></p>
<p>搜索结果太多，我想对搜索内容进行筛选，google 就提供了相当多的搜索指令(search operator) <br/></p>
<h3 id="时间"><span class="section-num">2.1</span> 时间</h3>
<p>cpp modules是c++20 才新增的特性，如果我想按时间搜索下相关的内容，可以使用 <code>:before</code>, <code>:after</code> 指令，后面跟着一个日期: <br/></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cpp modules :before 2020
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure>
    <img loading="lazy" src="/ox-hugo/google_search_before.png"/> 
</figure>
 <br/></p>
<p>可以看到搜索结果变成了185,000条，并且返回的搜索结果都是在 2020 年以前的纪录，这个在查看历史新闻时特别有用，比如看历史合订本。 <br/></p>
<h3 id="站点"><span class="section-num">2.2</span> 站点</h3>
<p>如果你只想搜索某个站点，但是这个站点没有提供搜索功能（比如学校或者公司官网），或者搜索质量不够好，那么就可以加上 <code>site:</code> 的关键词, 要求 Google 只返回某个网站的检索结果: <br/></p>
<p>比如我想看下 jetbrains家的IDE 对 c++ 20 Modules的支持程度: <br/></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cpp modules site:jetbrains.com
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure>
    <img loading="lazy" src="/ox-hugo/google_search_site.png"/> 
</figure>
 <br/></p>
<p>又或者，我搜索网站的时候，想把某个网站排除掉, 比如使用中文搜索编程相关关键词的时候，经常会被CSDN 的垃圾内容污染，那么就可以使用 <code>-</code>, 来排除掉某些内容. <br/></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cpp modules -microsoft
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure>
    <img loading="lazy" src="/ox-hugo/google_search_exclude.png"/> 
</figure>
 <br/></p>
<p>原来排名第二的 Miscrosft 就被过滤掉了. <br/></p>
<h3 id="社交媒体"><span class="section-num">2.3</span> 社交媒体</h3>
<p>如果你想在社交媒体上搜索某个关键词，那么可以使用 <code>@</code> 后跟社交媒体的名字来进行搜索，例如 &ldquo;cpp modules @twitter&rdquo; 或者 &ldquo;cpp modules @reddit&rdquo;, 可以把 <code>@</code> 理解成是 <code>:site</code> 指令的简化版本. <br/></p>
<p>只是社交媒体(social media)的定义比较含糊, Google没有给出具体的说明，但是比较有名的社交媒体都是支持的. <br/></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cpp modules @reddit
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure>
    <img loading="lazy" src="/ox-hugo/google_search_reddit.png"/> 
</figure>
 <br/></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cpp modules @zhihu
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure>
    <img loading="lazy" src="/ox-hugo/google_search_zhihu.png"/> 
</figure>
 <br/></p>
<h3 id="文件类型"><span class="section-num">2.4</span> 文件类型</h3>
<p>可以通过 <code>filetype</code> 来指定想要搜索的文件类型，比如想搜索 pdf 相关的内容: <br/></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cpp modules filetype:pdf
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure>
    <img loading="lazy" src="/ox-hugo/google_search_pdf.png"/> 
</figure>
 <br/></p>
<p>这个在知道书名，想要搜索电子书的时候特别有用. <br/></p>
<h3 id="关键字匹配"><span class="section-num">2.5</span> 关键字匹配</h3>
<p>Google 支持若干个关键字匹配的指令: <br/></p>
<p>双引号: &ldquo;cpp modules&rdquo;, 精确匹配，只匹配包含&quot;cpp modules&quot;的内容 <br/></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">&#34;cpp modules&#34;
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure>
    <img loading="lazy" src="/ox-hugo/google_search_precise_match.png"/> 
</figure>
 <br/></p>
<p>搜索结果变成 3530 条纪录了. <br/></p>
<ul>
<li>星号: &ldquo;* modules&rdquo;, 通配符，所有包含 &ldquo;modules&quot;的内容都会被检索出来。个人觉得用处不大，只会让搜索结果膨胀. <br/></li>
<li>OR: &ldquo;cpp or module&rdquo;, 匹配包含 &ldquo;cpp&rdquo; 或者&quot;module&rdquo; 的内容, <code>or</code> 可以使用竖线代替 <code>|</code> 个人觉得用处不大，也只会让搜索结果膨胀 <br/></li>
<li>AND: &ldquo;cpp and module&rdquo;, 匹配包含 &ldquo;cpp&rdquo; 与&quot;module&quot; 的内容, <code>and</code> 可以使用与符号代替 <code>&amp;</code> <br/></li>
</ul>
<p><figure>
    <img loading="lazy" src="/ox-hugo/google_search_and.png"/> 
</figure>
 <br/></p>
<h2 id="custome-search"><span class="section-num">3</span> Custome Search</h2>
<p>前面提到「搜索并不仅限于使用搜索引擎」，是因为有很多内容，搜索引擎检索不到。 <br/></p>
<p>比如在公司内网的信息，Google 再强大，也不可能会检索得到的，因为不公开。 <br/></p>
<p>这个时候就可以借助浏览器的 Custom Search能力（Chrome 叫 Site Search, Firefox叫 Keyword Search）。 <br/></p>
<p>举个例子，我的老东家用的是代码搜索工具是 <a href="https://oracle.github.io/opengrok/">OpenGrok</a>, 可以搜索整个事业群的代码，支持多种语言，可以搜索代码的定义，引用，历史记录等。 <br/></p>
<p>（下文以同样使用 OpenGrok 部署的开源项目 <code>LibreOffice</code> 的代码为例子） <br/></p>
<p>因为在日常开发的时候，遇到陌生的函数名或者枚举定义，就需要看下他们的定义与实现，看下有没有问题： <br/></p>
<p>比如想看下 <code>contains</code> 这个函数的实现： <br/></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/libre_office_definition.png"/> 
</figure>
 <br/></p>
<p>或者想看下 <code>Intersection</code> 这个函数的引用，看下其他人是怎么用这个函数的，我也顺便抄下。 <br/></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/libre_office_symbol.png"/> 
</figure>
  <br/></p>
<p>一般的步骤是: <br/></p>
<ol>
<li>打开或切换到浏览器(Chrome/Firefox) <br/></li>
<li>打开内网网站链接, 在例子中就是 <a href="https://opengrok.libreoffice.org">https://opengrok.libreoffice.org</a> <br/></li>
<li>点击 <code>Definition</code> 或者 <code>Symbol</code> <br/></li>
<li>输入或者粘贴想要查询的内容，比如 <code>contains</code> <br/></li>
</ol>
<p>一套流程下来，大概需要30-40秒，不能说很慢吧，但是起码算不上快。 <br/></p>
<p>但是如果使用 Custom Search, 大概可以缩短至 7-8秒, 并且适用于绝对大部分的网站. <br/></p>
<p>首先把查询函数引用的url 复制下来, 观察： <br/></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">https://opengrok.libreoffice.org/search?full=&amp;defs=&amp;refs=Intersection&amp;path=&amp;hist=&amp;type=cxx&amp;xrd=&amp;nn=19&amp;si=refs&amp;searchall=true&amp;si=refs
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>refs</code> 后面跟着的就是需要查询的内容, 即 <code>Intersection</code>, 将 <code>Intersection</code> 替换成 <code>%s</code> : <br/></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">https://opengrok.libreoffice.org/search?full=&amp;defs=&amp;refs=%s&amp;path=&amp;hist=&amp;type=cxx&amp;xrd=&amp;nn=19&amp;si=refs&amp;searchall=true&amp;si=refs
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="chrome-chromium-site-search"><span class="section-num">3.1</span> Chrome/Chromium Site Search</h3>
<p>打开Chrome/Chromium -&gt; 点击设置(Setting) -&gt; 点击搜索引擎（Search Engine） -&gt; Manage search engines and site search -&gt; Site search [Add] <br/></p>
<ul>
<li>Search Engine: OpenGrok Code Search Find Reference(取个有意义的名字) <br/></li>
<li>Keyword: csr <br/></li>
<li>URL: <code>https://opengrok.libreoffice.org/search?full=&amp;defs=&amp;refs=%s&amp;path=&amp;hist=&amp;type=cxx&amp;xrd=&amp;nn=19&amp;si=refs&amp;searchall=true&amp;si=refs</code> <br/></li>
</ul>
<p><figure>
    <img loading="lazy" src="/ox-hugo/google_site_search_ref.png"/> 
</figure>
 <br/></p>
<p>然后，在Chrome 的浏览器地址，输入 <code>csr</code>, 空格, 再搜索 <code>Intersection</code>, 回车。就可以直接在Chrome 地址栏里面搜索指定网页的代码. <br/></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/google_site_search_csr.gif"/> 
</figure>
 <br/></p>
<p>而搜索代码定义，URL 如下: <br/></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">https://opengrok.libreoffice.org/search?full=&amp;defs=Intersection&amp;refs=&amp;path=&amp;hist=&amp;type=cxx&amp;xrd=&amp;nn=19&amp;si=defs&amp;searchall=true&amp;si=defs
</span></span></code></pre></td></tr></table>
</div>
</div><p>只需要将 <code>defs</code> 后面的内容修改成 <code>%s</code>, 再建一个新的site search, 名为 <code>Opengrok Code Search Find Definition</code>, keyword 为 <code>csd</code>, 就可以快速搜索代码定义. <br/></p>
<p>如果想要搜索其他网站，比如公司内网: <a href="https://search.xxoa.com/query=Foobar">https://search.xxoa.com/query=Foobar</a>, <br/>
只需要把查询内容修改为 %s, 再新建个Site Search 即可。 <br/></p>
<p>在老东家，搜索错误码，或者是搜索内网上的文章，我都是这么干的；所以到新东家之后，我也是这么搞的。 <br/></p>
<h3 id="firefox"><span class="section-num">3.2</span> Firefox</h3>
<p>Firefox 也提供类似的功能，叫 Keyword Search, 添加起来甚至更方便: <br/></p>
<ol>
<li>打开想要搜索的网站 <br/></li>
<li>在搜索框点击鼠标右键，然后会看到一个「Add a Keyword for this Search&hellip;」 <br/></li>
<li>修改名字与 keyword <br/></li>
</ol>
<p><figure>
    <img loading="lazy" src="/ox-hugo/firefox_add_key_word_search.png"/> 
</figure>
 <br/></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/firefox_add_key_word_search_bookmark.png"/> 
</figure>
 <br/></p>
<p>然后，在 Firefox 的浏览器地址，输入 <code>csd</code>, 空格, 再搜索 <code>Intersection</code>, 回车。就可以直接在 Firefox 地址栏里面搜索指定网页的代码. <br/></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/firefox_keyword_search.gif"/> 
</figure>
 <br/></p>
<p>如果没有右键时没有找到 「Add a Keyword for this Search&hellip;」的选项，也可以使用添加书签的方式，手动添加一个 keyword search: <br/></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/firefox_add_bookmark.png"/> 
</figure>
 <br/></p>
<h2 id="alfred-web-search"><span class="section-num">4</span> Alfred Web Search</h2>
<p>如果使用的是 Mac OS, 那么通过Alfred 插件的 Web Search功能，甚至可以不用手动切换到浏览器，直接就可以进行搜索，可以把搜索流的耗时进一步缩短到1-3秒。 <br/></p>
<p>Alfred -&gt; Preference -&gt; Web Search -&gt; Add custome Search <br/></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/alfred_web_seasch.jpg"/> 
</figure>
  <br/></p>
<p>除了要将 <code>%s</code> 换成 <code>{query}</code> 之外, 其他添加的步骤与 Site Search 一致： <br/></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/alfred_code_search.gif"/> 
</figure>
 <br/></p>
<p>录制 Gif 只花了1.5 秒. <br/></p>
<h2 id="总结"><span class="section-num">5</span> 总结</h2>
<p>Perl语言之父Larry Wall 有句广为人知的名言：「程序员要有三大美德：急躁，懒惰，自大」。 <br/></p>
<ul>
<li>急躁意味着不愿意花时间等待缓慢的程序，会想办法优化程序； <br/></li>
<li>自大意味着不愿让人指谪，对自身要求强，要写出高质量的代码； <br/></li>
<li>懒惰意味着不想花精心做重复无用的事情，会想办法自动化，让电脑帮忙处理。 <br/></li>
</ul>
<blockquote>
<p>&ldquo;We will encourage you to develop the three great virtues of a programmer: laziness, impatience, and hubris.&rdquo; &ndash; LarryWall <br/></p>
</blockquote>
<p>而我对搜索流的优化，就是在培养「急躁」与「懒惰」的美德。 <br/></p>
<h2 id="延伸阅读"><span class="section-num">6</span> 延伸阅读</h2>
<p>我的各种「流」： <br/></p>
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E5%86%99%E4%BD%9C%E6%B5%81/">我的写作流：写作工具与平台分享</a> <br/></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E7%94%BB%E5%9B%BE%E6%B5%81/">我的画图流：画图工具与技巧分享</a> <br/></li>
</ul>
<h2 id="参考"><span class="section-num">7</span> 参考</h2>
<ul>
<li><a href="https://support.mozilla.org/en-US/kb/how-search-from-address-bar">Mozilla Support: How to search IMDB, Wikipedia and more from the address bar</a> <br/></li>
<li><a href="https://support.google.com/websearch/answer/2466433">Google Document: Refine web searches</a> <br/></li>
<li><a href="https://support.google.com/websearch/answer/35890">Google Document: Do an Advanced Search on Google</a> <br/></li>
</ul>
<div center class="qr-container">
<img src="/ox-hugo/qrcode_gh_e06d750e626f_1.jpg" alt="qrcode_gh_e06d750e626f_1.jpg" width="160px" height="160px" center="t" class="qr-container" />
公号同步更新，欢迎关注👻
</div>
]]></content:encoded>
    </item>
    <item>
      <title>两个鲜为人知的Gmail地址技巧</title>
      <link>https://ramsayleung.github.io/zh/post/2023/gmail%E5%9C%B0%E5%9D%80%E7%9A%84%E9%9A%90%E8%97%8F%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Sat, 24 Jun 2023 20:15:00 -0700</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2023/gmail%E5%9C%B0%E5%9D%80%E7%9A%84%E9%9A%90%E8%97%8F%E6%8A%80%E5%B7%A7/</guid>
      <description>1 前言 分享两个鲜为人知，但是却相当有用的 Gmail 地址技巧。「鲜为人知」并非是标题党，而是引用Gmail 博客原话： I recently discovered some little-known ways to use your Gmail address that can give you greater control</description>
      <content:encoded><![CDATA[<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>分享两个鲜为人知，但是却相当有用的 Gmail 地址技巧。「鲜为人知」并非是标题党，而是引用Gmail 博客原话： <br/></p>
<blockquote>
<p>I recently discovered some <strong><strong>little-known</strong></strong> ways to use your Gmail address that can give you greater control over your inbox and save you some time and headache. <br/></p>
</blockquote>
<h2 id="技巧"><span class="section-num">2</span> 技巧</h2>
<p>假设你的Gmail 地址是 <code>xiaoming@gmail.com</code>: <br/></p>
<h3 id="加号"><span class="section-num">2.1</span> 加号</h3>
<p>你可以将在用户名后面增加一个加号 <code>+</code>, 并在加号后面增加任意数量的字符，比如 <code>xiaoming+happy@gmail.com</code>, <code>xiaoming+upset@gmail.com</code>, Gmail 都会把这些地址当作成 <code>xiaoming@gmail.com</code>, 发送到你的地址邮箱中。 <br/></p>
<h3 id="点号"><span class="section-num">2.2</span> 点号</h3>
<p>你也可以在地址的任意地方插入任意数量的点号: <code>.</code>, 比如 <code>x.i.a..o.ming@gmail.com</code>, <code>xiao...mi..ng@gmail.com</code>, Gmail 都会把点号忽略掉，解析成 <code>xiaoming@gmail.com</code> <br/></p>
<h2 id="用途"><span class="section-num">3</span> 用途</h2>
<p>技巧比较简单，寥寥数语就说完了，好像也没有什么大不了，有什么用处么？ <br/></p>
<p>这个就要发挥想象力了。 <br/></p>
<h3 id="用途一-重复注册用户"><span class="section-num">3.1</span> 用途一：重复注册用户</h3>
<p>这个主要是针对能使用邮箱注册的网站，可能大多数是国外网站。 <br/></p>
<p>如果网站的邮箱地址校验正则写得不好，允许加号和点号，不知道Gmail的这两个规则，那么 <code>xiaoming+user1@gmail.com</code>, <code>xiaoming+user2@gmail.com</code>, <code>xi..aoming@gmail.com</code> 就会被认为是三个不同的邮箱地址，就可以重复注册。 <br/></p>
<p>在薅羊毛等需要重复注册用户的场景就比较有用了。 <br/></p>
<h3 id="用途二-溯源"><span class="section-num">3.2</span> 用途二：溯源</h3>
<p>个人邮箱难免会收到一些奇怪的邮件，例如：猎头的招聘邮件，钓鱼邮件等等。 <br/></p>
<p>收到这些邮件的第一反应肯定是把邮件删掉，之后就会思考，究竟是哪里泄漏了个人邮箱。 <br/></p>
<p>而通过 Gmail 加号的技巧，我就可以做到垃圾邮件溯源. <br/></p>
<p>首先，在注册每个网站的时候，都给他们加上一个tag, 例如注册Twitter, 那就用 <code>xiaoming+twitter@gmail.com</code>, 如果注册Github, 那就用 <code>xiaoming+github@gmail.com</code>, 依此类推。 <br/></p>
<p>只要有垃圾邮件，我就能通过加号的后缀，知道是哪个浓眉大眼的网站把我的信息给泄漏出去了。 <br/></p>
<p>比如下面这个垃圾邮件，我就知道它是通过爬虫爬取我Github 公开邮件群发的. <br/></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/gmail_plus_sign_example.png"/> 
</figure>
 <br/></p>
<p>我就可以选择不公开 Github 邮箱，来避免后续收到类似的邮件。 <br/></p>
<h2 id="参考"><span class="section-num">4</span> 参考</h2>
<ul>
<li><a href="https://gmail.googleblog.com/2008/03/2-hidden-ways-to-get-more-from-your.html">Google Gmail Blog: 2 hidden ways to get more from your Gmail address</a> <br/></li>
</ul>
<div center class="qr-container">
<img src="/ox-hugo/qrcode_gh_e06d750e626f_1.jpg" alt="qrcode_gh_e06d750e626f_1.jpg" width="160px" height="160px" center="t" class="qr-container" />
公号同步更新，欢迎关注👻
</div>
]]></content:encoded>
    </item>
  </channel>
</rss>

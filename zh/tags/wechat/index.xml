<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Wechat on 菠萝油与天光墟</title>
    <link>https://ramsayleung.github.io/zh/tags/wechat/</link>
    <description>Recent content in Wechat on 菠萝油与天光墟</description>
    <image>
      <title>菠萝油与天光墟</title>
      <url>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.146.7</generator>
    <language>zh</language>
    <copyright>See this site&amp;rsquo;s source code here, licensed under GPLv3 ·</copyright>
    <lastBuildDate>Sat, 31 May 2025 21:47:29 -0700</lastBuildDate>
    <atom:link href="https://ramsayleung.github.io/zh/tags/wechat/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>那些年，我从微信支付学到的东西</title>
      <link>https://ramsayleung.github.io/zh/post/2023/%E4%BB%8E%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E7%A6%BB%E7%BA%BF_%E6%88%91%E5%B8%A6%E8%B5%B0%E4%BA%86%E4%BB%80%E4%B9%88/</link>
      <pubDate>Thu, 06 Apr 2023 18:31:00 -0700</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2023/%E4%BB%8E%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E7%A6%BB%E7%BA%BF_%E6%88%91%E5%B8%A6%E8%B5%B0%E4%BA%86%E4%BB%80%E4%B9%88/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; 前言&lt;/h2&gt;
&lt;p&gt;从微信支付离职，我能带走什么？文档，代码，设计方案还是微信支付的漏洞？&lt;/p&gt;
&lt;p&gt;如果我带走这些资产，那我现在就在深圳的看守所里面吃着公家饭了。&lt;/p&gt;
&lt;p&gt;既然这些资产不能带走，那么我能带走什么？&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>从微信支付离职，我能带走什么？文档，代码，设计方案还是微信支付的漏洞？</p>
<p>如果我带走这些资产，那我现在就在深圳的看守所里面吃着公家饭了。</p>
<p>既然这些资产不能带走，那么我能带走什么？</p>
<p>如果沉下心思考，就会发现，这些资产价值并不大，对于工程师而言，也没有领导想象中的那么重要，除非我们试图将代码放在黑市售卖。</p>
<p>对于业务开发而言，也可能是同样的道理。
业务开发每天对着业务需求做CRUD，可能会羡慕开发底层组件的工程师，可以学习并提升技术水平，而自己技术水平还是在原地打转，能学习到的东西随着时间的推移，越来越少。</p>
<p>王安石的《游褒禅山记》有这样的感叹：</p>
<blockquote>
<p>夫夷以近，则遊者众；险以远，则至者少；而世之奇伟瑰怪非常之观，常在于险远，而人之所罕至焉；故非有志者，不能至也。</p></blockquote>
<p>所谓的「险以远」，并不特指深奥难懂的底层组件技术，也指思考的深度；</p>
<p>如果多去思考技术和业务，挖掘背后的本质，我们也可以看到许多「世之奇伟瑰怪非常之观」</p>
<h3 id="鱼与渔"><span class="section-num">1.1</span> 鱼与渔</h3>
<p>文档，代码，设计都是针对特定问题的解决方案，
如果离职到新公司之后，我们遇到的问题肯定不会完全一样，或者手头可用的工具不一样，那么这些资产的价值就会打折扣。</p>
<p>更何况这些资产都是「一次性的」，用完即止；
是属于「授人以鱼不如授人以渔」中的「鱼」；是「生产线」上的「成品」，而我对能生产「成品」的「生产线」更感兴趣。</p>
<p>二战结束以后，美国把1600多名德国科学家、工程师、技术人员带到美国，包括沃纳.冯.布劳恩和他的V-2火箭研究团队；</p>
<p>而苏联凭借地理位置靠近德国占领了一些重要的工厂，
比如著名的德国光学巨头卡尔蔡司公司，苏联几乎搬空了该公司的设备，把1万多台设备中的9000多台都搬到了苏联。</p>
<p>有人对现成的「鱼」感兴趣，也有人对未来的「渔」感兴趣，我属于后者。</p>
<h2 id="思路"><span class="section-num">2</span> 思路</h2>
<p>既然选择「渔」，那么，要怎么挑选适合的「渔」来丰富自己的「渔库」呢？</p>
<p>两千多年前的老师孔子就已经给出自己的答案：</p>
<blockquote>
<p>见贤思齐焉，见不贤而内自省也</p></blockquote>
<p>见到那些优秀的实践和思路，就学下来；
对于有弊端的实践，就要分析弊端形成的原因，再想办法避免和改进，别人掉进去的坑，我们就不要进去凑热闹了。</p>
<h2 id="贤"><span class="section-num">3</span> 贤</h2>
<h3 id="模式化"><span class="section-num">3.1</span> 模式化</h3>
<p>1994年，4个博士合著了一本书，书中对常见的设计问题进行了分类，归纳与总结，并且针对每一类问题，给出可重用的解决方案。
他们将这些可以复用的解决方案，称之为设计模式(design pattern)。</p>
<p>这本书也成为软件工程和面向对象设计经久不衰的经典。</p>
<p>这本书即是《设计模式：可复用面向对象软件的基础》(Design Patterns:
Elements of Reusable Object-Oriented Software)，这四位博士也被称为Gang of Four (GoF)</p>
<blockquote>
<p>A design pattern is the re-usable form of a solution to a design problem.</p></blockquote>
<p>那么什么是模式呢？</p>
<p>按照另外一本经典名著《面向模式的软件架构卷一》的定义：</p>
<blockquote>
<p>当专家求解一个问题时，他们一般不会发明一种和已有解决方案完全不同的方案来处理这个问题。他们往往想起已解决过的相似的问题，并重用其解法的精华来解决新问题。</p></blockquote>
<p>在微信支付研发理念中，程序设计和开发，很多问题都是类似，或者是重复出现的。</p>
<p>针对此类重复问题，直接复制代码来解决，是下下策。</p>
<p>对代码进行抽象，复用代码来解决重复问题，也是下策。
因为使用公共库会导致代码之间无法隔离，并且把逻辑隐藏在公共库，会导致无法分析代码的调用关系。</p>
<p>微信支付研发理念推崇的上策是对问题进行抽象，归纳出这类问题的通用解法，即模式；
更进一步的是，为模式定义对应的代码模板，直接生成代码。</p>
<p>即使不生成代码，也可以将模式实现成对应的组件或库，方便直接调用。</p>
<p>具体例子如：</p>
<p>微信支付就总结常见的分布式事务场景，设计和开发了分布式事务编排中间件。
通过在画板编排事务资源，即可生成对应的代码模板，开发者只需要在指定的地方编写个性化代码即可。</p>
<p>针对常见的领域服务，抽象了基于状态机和事件驱动的模型，设计了领域服务的代码生成组件。
可通过绘制状态机UML图，直接生成接口代码，由开发者填充实现。</p>
<p>以上算是技术组件的模式化，对业务开发而言，还有对业务的模式化。</p>
<p>比如对扣款模式进行抽象，扣款时开启事务，进行风控校验，创建（或不创建）业务单，查询支付方式，轮询支付方式进行扣款，异常关单等。</p>
<p>当时组里的大神龙哥，就是对已有的扣款模式进行了抽象，基于面向对象，设计成同步扣款框架，定义了以上的接口，由业务进行继承和扩展。
再使用同步扣款框架对已有的3个类似但不完全一致的代扣扣款业务进行了重构，把扣款模式都统一了。</p>
<h3 id="复盘"><span class="section-num">3.2</span> 复盘</h3>
<p>没有人能保证自己写的代码绝对不会出错，当错误与问题不期而至的时候，我们能做的就是将「错误」的效益最大化，
即从「错误」中吸引教训，做到「不二过」。</p>
<p>复盘，就是在「错误」中吸引教训，做到「不二过」的手段。Amazon 也有类似的概念与机制，称为 Correctness Of Error(COE)</p>
<p>我们一直说「失败是成功之母」，
但根据生物学常识，只有「成功才是成功之母」，或者说「小步的成功才是大步成功之母」，别人踩过的坑，我们就不要进去了。</p>
<p>复盘的一般步骤：</p>
<ol>
<li>回顾目标</li>
<li>故障影响</li>
<li>时间精确到分钟（甚至秒级别）的过程回顾。比如是新需求写出一级故障的bug, 就从拿到需求，设计方案，开发，部署上线，流量灰度，问题告警，处理手段，到故障排除，每个时间点操作都写下来。</li>
<li>分析问题原因，挖掘导致故障的表面原因与根本原因</li>
<li>总结针对问题的改进措施。</li>
<li>落实改进措施</li>
</ol>
<p>通过这样的复盘过程，确保同样的问题不会再次出现。</p>
<p>这样的工作方式和理念，无论是对个人还是组织，才同样适用。</p>
<h3 id="持续学习"><span class="section-num">3.3</span> 持续学习</h3>
<p>微信支付一直在推广全栈工程师，认为只从自己做的事情来思考问题，容易导致盲维和短板，看待问题的眼光容易受限。</p>
<p>此外，根据《人月神话》的理念，工程师之间的沟通成本，会随着人数的增加，呈指数水平上涨。
而成为全栈工程师，可以一个人处理完需求，沟通成本就下降到0，极大地提交工作效率。</p>
<p>微信支付的全栈工程师定义是前端工程师 + 服务端工程师 + 数据开发工程师。</p>
<p>当然，某一端的开发工程师，不会某天突然自己变成全栈工程师，这些都是需要持续学习的，人总是需要不断提升自己的。</p>
<p>不能人为能给自己设限，把自己定义成「前端工程师」，「后端工程师」，或者「数据工程师」，应该是「工程师」。</p>
<h3 id="需求分析"><span class="section-num">3.4</span> 需求分析</h3>
<p>每个工程师都需要做需求，与正确地做需求相比，做正确的需求显然更重要。</p>
<p>如何确保做正确的需求呢？</p>
<p>微信支付选择的方法论是：​需求分析与业务建模，脱胎自UML专家潘家宇的著作《软件方法》。大概的流程是：</p>
<ol>
<li>寻找老大（需要满足谁的诉求）</li>
<li>寻找业务用例（业务执行者做什么事情，比如QQ音乐用户购买QQ音乐会员，就是一个业务用例）</li>
<li>根据业务用例，寻找系统用例。（例如商户发起扣款是一个系统用例；扣款成功回调通知商户也是一个系统用例）</li>
<li>将需求的业务规则，总结归纳成系统用例的规则。</li>
</ol>
<p>当然，业务用例和系统用例这套东西，可能只有微信支付用。但找准客户，帮客户解决真正的痛点，创造真正的价值，这个是有普适性的。</p>
<p>做需求时，可以多问这两个问题：</p>
<ol>
<li>谁是我们的客户。</li>
<li>我们在帮他们解决什么问题。</li>
</ol>
<h3 id="云雨伞"><span class="section-num">3.5</span> “云雨伞”</h3>
<p>“云雨伞”这个概念来自内部的一份PPT，讲述的是如何更好地向别人提出建议，内容大概是：</p>
<blockquote>
<p>屋外乌云密布，儿子要出门，妈妈对儿子说，马上要下雨，淋雨容易生病，把伞带上吧。</p></blockquote>
<p>“云雨伞”的步骤就是：</p>
<ol>
<li>指出现状：乌云密布，马上要下雨</li>
<li>导致的问题与影响：淋雨容易生病</li>
<li>提出措施和建议：把伞带上。</li>
</ol>
<p>通过这样的表述方式，会比「把伞带上」这样直接命令的话，更容易让人接受。</p>
<p>当然，如果阅读过《非暴力沟通》，会发现“云雨伞”的表述，其实是《非暴力沟通》总结的有效沟通方式的简化版本：</p>
<ol>
<li>清楚地表达观察结果</li>
<li>表达感受</li>
<li>说出是什么需求和原因导致了这样的感受</li>
<li>具体的请求</li>
</ol>
<p>当然，总是强调「云雨伞」的做法，把问题归咎到提问者身上，我是不赞同的。</p>
<p>领导经常说，提问题的时候，要把自己的解决方案也提出来，没有人喜欢听吐槽。</p>
<p>话虽如此，但是我想起之间还在蚂蚁时，一位P10工程师的文章，《没有答案，也可以提问题》。</p>
<p>提问题是为了帮助组织发现问题，如果不能吐槽的话，很多问题也不会被发现，自然也得不到解决，毕竟也没有人喜欢帮别人的问题提解决方案。</p>
<hr>
<p><span class="timestamp-wrapper"><span class="timestamp">&lt;2023-05-20 Sat&gt;</span></span></p>
<p>针对如何高效交流，我写了一篇自己的心得文章：<a href="https://ramsayleung.github.io/zh/post/2023/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%BD%AF%E6%8A%80%E8%83%BD%E6%8C%87%E5%8C%97_%E9%AB%98%E6%95%88%E4%BA%A4%E6%B5%81%E7%AF%873/">软件工程师的软技能指北（三）：高效交流篇</a></p>
<h3 id="一致性"><span class="section-num">3.6</span> 一致性</h3>
<p>领导总说，软件工程的本质就是管理和控制复杂度，而一致性就是减少复杂度的有力工具。所谓的一致性，可以理解成统一的流程，统一的组件等等</p>
<p>在这种理念的驱动下，微信支付内部使用统一的编程语言，统一的工具库，
统一的存储组件（使用别的存储需要特殊审批和说明），统一的数据访问组件，使用统一的研发流程。</p>
<p>保证每个研发工程师，即使调到微信支付的其他团队，也是使用同样的工具，即插即用，和车床生产的螺丝一样。</p>
<p>开始我对这样的理念是持支持态度的，但到AWS以后，我的想法发生了动摇。</p>
<p>因为我发现AWS的工具真的是琳琅满目，应有尽有，而Amazon也并未对使用什么样的组件作要求。</p>
<p>反正AWS对各种组件的支持都很好，所以业务团队可以自行选择适合自身业务的任意组件，能完成需求就好。</p>
<p>所以我现在不确定，通过追求一致性来降低复杂度这样的做法是否合理。</p>
<h3 id="设计优于实现"><span class="section-num">3.7</span> 设计优于实现</h3>
<p>从2020年初起，微信支付内部的需求都需要先写设计文档，Leader 评审通过才能开发。</p>
<p>设计时有个非常关键的点，就是列出所有能想到的可行方法，而后比较各个方案的优劣，再作出取舍，选择最终方案。</p>
<p>软件工程没有银弹，系统/软件设计就是不断地在做取舍，当然，人生也是。</p>
<p>设计才是最重要的，而编码和实现都是简单的，因为这只是水到渠成的事（我也不是说可以不用重视代码质量，毕竟这是吃饭的手艺）</p>
<p>我个人觉得，对于业务开发（或者对于软件工程师）而言，不要过多花时间关注在编码上，而应该是花时间思考需求和问题，找到好的设计上。</p>
<p>良好设计带来的红利，是要多于良好编码带来的红利的。</p>
<p>如果把编码比作战术，设计就是战略，不要让战术的勤奋，掩盖了战略上的懒惰。</p>
<p>编码算是建筑的外墙和玻璃，而设计就是承重墙和地基，毕竟换皮容易换根难。</p>
<p>微信支付对于业务代码的态度是，能生成就尽量生成，就不要人写了，要多花些时间在设计上。</p>
<h2 id="总结"><span class="section-num">4</span> 总结</h2>
<p>拿走「代码，文档」终究是术，学走「思想和理念」才是道。</p>
<div class="qr-container" center>
<img src="/ox-hugo/qrcode_gh_e06d750e626f_1.jpg" alt="qrcode_gh_e06d750e626f_1.jpg" class="qr-container" width="160px" height="160px" center="t" />
公号同步更新，欢迎关注👻
</div>
]]></content:encoded>
    </item>
    <item>
      <title>思考：公众号背后的产品逻辑</title>
      <link>https://ramsayleung.github.io/zh/post/2023/%E6%80%9D%E8%80%83_%E5%85%AC%E4%BC%97%E5%8F%B7%E8%83%8C%E5%90%8E%E7%9A%84%E4%BA%A7%E5%93%81%E9%80%BB%E8%BE%91/</link>
      <pubDate>Thu, 02 Feb 2023 20:45:00 -0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2023/%E6%80%9D%E8%80%83_%E5%85%AC%E4%BC%97%E5%8F%B7%E8%83%8C%E5%90%8E%E7%9A%84%E4%BA%A7%E5%93%81%E9%80%BB%E8%BE%91/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; 前言&lt;/h2&gt;
&lt;p&gt;在公众号开通10天之际，我已经在公众号写了10来篇文章了，也基本熟悉了公众号的写作，发文以及与用户的互动流程。&lt;/p&gt;
&lt;p&gt;对比个人博客，公众号多了很多额外的限制和规则。
所谓人在屋檐下，不得不低头，选择在公众号这个平台创作，自然只能接受各种合理和不合理的规则。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>在公众号开通10天之际，我已经在公众号写了10来篇文章了，也基本熟悉了公众号的写作，发文以及与用户的互动流程。</p>
<p>对比个人博客，公众号多了很多额外的限制和规则。
所谓人在屋檐下，不得不低头，选择在公众号这个平台创作，自然只能接受各种合理和不合理的规则。</p>
<p>在了解清楚规则是「什么」之后，我开始思考「为什么」会有这些规则？许多问题的本质，就藏在诸多的「为什么」后面。</p>
<p>所以就来分享下我个人对公众号产品规则的思考与见解，仅为一家之言。</p>
<h2 id="审核"><span class="section-num">2</span> 审核</h2>
<p>我的文章<a href="https://mp.weixin.qq.com/s/qOuJjW5HVCiuA9bqNuzLdw">《为什么梦想买不想，故乡回不去》</a>大概有7到8次发布失败，原因都是「审核不通过」。
虽说「自由」是创作的基础，但是既然选择公众号，只能接受就被审核的命运。</p>
<p>但这里让我抓狂的是，公众号不会像个编辑一样告诉我哪里审核不通过，什么地方需要修改，
只有一句含糊的「此内容因违规无法查看，请前往草稿箱修改后重试」：</p>

<figure><a href="/ox-hugo/%e5%ae%a1%e6%a0%b8.png">
    
    
    <input type="checkbox" id="zoomCheck-fbea1" hidden>
    <label for="zoomCheck-fbea1">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/%e5%ae%a1%e6%a0%b8.png"/> 
    
    
    </label></a>
</figure>

<p>我只能重读文章，把那些我认为「不利于团结」的话逐条删除，然后重新发布，审核不通过，如此循环。</p>
<p>思考下来，公众号平台不告诉作者哪里审核不通过的原因可能是：</p>
<p>让作者自我审查，所谓「刑不可知 则威不可测」：
如果告知作者哪里有问题，也就是让作者知道高压线在哪里，作者就会肆无忌惮地在高压线下起舞。
哪天「上面」觉得作者舞姿过于妖娆，那么公众号平台就会一起受罚。</p>
<p>所以就只告诉作者有高压线，但是这条高压线却是移动且隐形的，只有被电到才知道线在何方，让作者心中时刻紧绷着一根弦。</p>
<p>指明修改点还可能会让「不利于团结」的内容扩散。
假如一个电影解说公众号，写了一篇解读诺兰蝙蝠侠的文章审核不通过，作者原来以为只是血腥场面审核不通过，没想到公众号却标明审核不通过的是「小丑」。</p>
<p>作者只会好奇，为什么「小丑」一词会被敏感，就会了解原因。
根据传播学原理，只会导致原来需要被和谐的和「小丑」相关的内容以另类的形式传播起来。</p>
<h2 id="图片素材"><span class="section-num">3</span> 图片素材</h2>
<p>把在外部写好的文章复制到公众号编辑器的时候，所有的图片都要上传到公众号的图片素材库上，无法直接使用图片的链接。</p>

<figure><a href="/ox-hugo/%e5%9b%be%e7%89%87%e6%8b%89%e5%8f%96.png">
    
    
    <input type="checkbox" id="zoomCheck-92f3d" hidden>
    <label for="zoomCheck-92f3d">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/%e5%9b%be%e7%89%87%e6%8b%89%e5%8f%96.png"/> 
    
    
    </label></a>
</figure>

<p>很多程序员（比如我）喜欢把博客搭建在Github Pages上，然后把图片都上传到Github 仓库，然后把博客内容复制到公众号时，就会出现图片获取失败的问题。</p>

<figure><a href="/ox-hugo/%e8%bd%bd%e5%85%a5%e5%a4%b1%e8%b4%a5.png">
    
    
    <input type="checkbox" id="zoomCheck-3381f" hidden>
    <label for="zoomCheck-3381f">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/%e8%bd%bd%e5%85%a5%e5%a4%b1%e8%b4%a5.png"/> 
    
    
    </label></a>
</figure>

<p>原因无非是伟大的防火墙把Github给墙了，导致微信的服务器无法拉取到Github 的图片。</p>

<figure><a href="/ox-hugo/GFW.png">
    
    
    <input type="checkbox" id="zoomCheck-70439" hidden>
    <label for="zoomCheck-70439">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/GFW.png"/> 
    
    
    </label></a>
</figure>

<p>问题就来了，为什么公众号要大费周章把图片拉取并保存起来，直接使用图片链接来访问不好么？</p>
<p>个人理解，主要是出于「用户体验」与「安全」两方面考虑：</p>
<p>如果让用户通过图片链接直接访问外部的图片服务器，图片链接可能失效，也就是图片无法再访问，就出现「图裂」了的情况，极大地影响用户体验。</p>

<figure><a href="/ox-hugo/%e5%9b%be%e8%a3%82%e4%ba%86.jpg">
    
    
    <input type="checkbox" id="zoomCheck-9e38e" hidden>
    <label for="zoomCheck-9e38e">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/%e5%9b%be%e8%a3%82%e4%ba%86.jpg"/> 
    
    
    </label></a>
</figure>

<p>也有可能是，图片服务器能访问，但是访问速度非常慢，用户加载图片速度非常慢，用户只会抱怨微信的公众号怎么这么卡，图片都加载不出来。
用户可不管是外部服务器，还是公众号服务器，反正都是微信卡，骂人只会挑最显眼的来骂。</p>
<p>另外一种可能是图片链接原来是一张正常的图片，待文章阅读量到10W+之后，就换成一张敏感图片，那么就会防不胜防。</p>

<figure><a href="/ox-hugo/%e5%9b%be%e7%89%87%e5%ae%89%e5%85%a8.png">
    
    
    <input type="checkbox" id="zoomCheck-ec002" hidden>
    <label for="zoomCheck-ec002">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/%e5%9b%be%e7%89%87%e5%ae%89%e5%85%a8.png"/> 
    
    
    </label></a>
</figure>

<p>从系统安全的角度来说，到外部服务器拉取文件，保存并展现给用户，是一个危险的操作，这样的操作应该越少越好，微信这样的APP注定会是各种攻击者的目标。</p>
<p>所以一次性，把图片拉取到公众号内部的服务器，就是最稳妥的方法</p>
<h2 id="限制外链"><span class="section-num">4</span> 限制外链</h2>
<p>在公众号文章里面，是无法插入外部网站链接的，只能引用公众号文章，或者公众号文章链接。</p>
<p>让我这种习惯在文章末尾写上一大堆引用和参考链接的人无所适从，毕竟不注明引用，就有剽窃之嫌。</p>

<figure><a href="/ox-hugo/%e8%b6%85%e9%93%be%e6%8e%a5.png">
    
    
    <input type="checkbox" id="zoomCheck-c37ba" hidden>
    <label for="zoomCheck-c37ba">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/%e8%b6%85%e9%93%be%e6%8e%a5.png"/> 
    
    
    </label></a>
</figure>

<p>这样的做法，背后的暖心原因大概是：</p>
<ol>
<li>避免为外部网站和App引流，避免把用户从公众号的生态，引流到抖音号，小红书号上，避免从平台沦为引流工具，「肉要都烂在锅里」，内容只能在微信生态内流传</li>
<li>安全因素：避免公众号作者把各种诈骗，钓鱼链接放到公众号里面，让用户在公众号上受害，避免成为黑产的温床，保证微信的口碑。
毕竟用户受骗骂人的时候，才不会骂公众号作者，只会骂最显眼的那个，就是公众号平台，乃至微信。</li>
</ol>
<p>话虽如此，但无法引用外部链接的做法，让我这种崇尚开放Web精神的人，相当难受。</p>
<h2 id="群发次数"><span class="section-num">5</span> 群发次数</h2>
<p>对文章，公众号有所谓的「群发」和「发布」之分。</p>
<p>「群发」是指把文章推送给所有的关注者，并且会出现在作者公众号的主页。而「发布」只是将文章发布出来，不会推送，也不会出现在主页，但是可以被链接到。</p>

<figure><a href="/ox-hugo/%e7%be%a4%e5%8f%91%e4%b8%8e%e5%8f%91%e5%b8%83.png">
    
    
    <input type="checkbox" id="zoomCheck-3ff77" hidden>
    <label for="zoomCheck-3ff77">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/%e7%be%a4%e5%8f%91%e4%b8%8e%e5%8f%91%e5%b8%83.png"/> 
    
    
    </label></a>
</figure>

<p>「群发」是限制次数的，一天只能「群发」一次，但是「发布」却是无限制的。</p>
<p>「群发」的次数限制成一次，我理解是保证用户体验避免过多的公众号消息推送，给用户造成困扰，让公众号成为商户引流推广的工具。毕竟根据墨菲定律，可能会被滥用的规则，就一定要被滥用。</p>
<p>另外一个是对作者的潜在约束，让作者好好珍惜「群发」的机会，尽量写出好文章。按照《<a href="https://mp.weixin.qq.com/s/PHDaAlT7LZGqt_Lm1o-oRQ">影响力</a>》里提到的「稀缺」原理，机会越少见, 价值似乎越高。</p>
<p>同样的原理，还运用到「账号详情」信息的修改，限制修改次数，就能让用户审慎修改，审慎着，审慎着，可能就不会修改了。</p>

<figure><a href="/ox-hugo/%e7%a8%80%e7%bc%ba.png">
    
    
    <input type="checkbox" id="zoomCheck-1e7d6" hidden>
    <label for="zoomCheck-1e7d6">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/%e7%a8%80%e7%bc%ba.png"/> 
    
    
    </label></a>
</figure>

<p>对于系统而言，修改1次与修改100次成本几乎无差别，只是通过产品规则，来作限定，人为制造「稀缺」。</p>
<h2 id="限制修改"><span class="section-num">6</span> 限制修改</h2>
<p>公众号文章一经「发布」或「群发」，就无法大幅修改内容，只能更正最多20个错别字，这个规则让许多作者大为诟病，认为限制了其修改文章的权利。</p>
<p>那么为什么会有这条规则呢？</p>
<p>我个人揣摩，认为是公众号产品认为文章因为是类似报纸书刊等出版物，落笔无悔，一旦写出去的文章，就无法修改（错别字除外）。</p>
<p>因为公众号是和微信这个聊天工具紧密结合在一起的，如果分享，转发的过程中，文章的内容发生多次变更，就会出现「罗生门」的情况，就是没有人知道文章内容最初的观点究竟是什么。</p>
<p>那些事后诸葛亮就会跑出来，说自己是事前诸葛亮。
比如那些鼓吹俄罗斯2小时攻陷基辅的军事爱好者们，虽然一年过去了，但是在他们看来，还没有到2小时。</p>
<p>另外一个就是对「作者」的约束，当你知道你写出去的东西无法修改，你应付审慎对待，文理顺畅，前后呼应的情况才能发布，迫使作者尽量产出高质量的文章。</p>
<h2 id="总结"><span class="section-num">7</span> 总结</h2>
<p>电视剧《雍正王朝》中，为描绘年羹尧身为大将军，生活奢华，介绍其有一道菜，名为小炒肉。</p>
<p>虽为小炒肉，但这道菜做法十分复杂，就是在取肉之前，要找数名壮汉对肥猪展开暴力围殴。</p>
<p>棍棒之下，猪吃痛嚎叫，血管也因此爆裂，猪血会聚集至脊梁附近，由此，厨师才会下刀，将猪杀死后去其尾骨附近的精肉。
据称，此法制作出来的猪肉，因为有鲜血的浸透，吃起来会极为鲜嫩可口，味道不逊色于各类山珍海味。</p>
<p>所谓的「产品规则」，背后都是「人性」，都是对作者与读者心理的揣摩和把玩。
公众号对作者施加诸多的限制与规则，无非是像壮汉殴猪，希望最终可以取出精肉，以飨读者。</p>
<p>难怪文章不好看，因为作者是头猪。难怪文章好看，因为作者是头挨过打的猪。</p>
<div center class="qr-container">
<img src="/ox-hugo/qrcode_gh_e06d750e626f_1.jpg" alt="qrcode_gh_e06d750e626f_1.jpg" width="160px" height="160px" center="t" class="qr-container" />
公号同步更新，欢迎关注👻
</div>
]]></content:encoded>
    </item>
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>sqlite on 自由庄园</title>
    <link>https://ramsayleung.github.io/zh/tags/sqlite/</link>
    <description>Recent content in sqlite on 自由庄园</description>
    <image>
      <title>自由庄园</title>
      <url>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>See this site&#39;s source code [here](https://github.com/ramsayleung/ramsayleung.github.io), licensed under GPLv3 ·</copyright>
    <lastBuildDate>Sun, 12 Nov 2017 07:05:00 +0800</lastBuildDate><atom:link href="https://ramsayleung.github.io/zh/tags/sqlite/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>用python 来操控 sqlite3</title>
      <link>https://ramsayleung.github.io/zh/post/2017/python_with_sqlite3/</link>
      <pubDate>Sun, 12 Nov 2017 07:05:00 +0800</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2017/python_with_sqlite3/</guid>
      <description>python 与嵌入式关系数据库 sqlite3的邂逅 SQLite 是一个非常优秀的嵌入式数据库，非常轻量，可以与 Mysql, PostgreSQL 这样的 大型数据库互补使用. 而 Python 标准库中的 sqlite3 模块实</description>
      <content:encoded><![CDATA[<p>python 与嵌入式关系数据库 sqlite3的邂逅</p>
<p><code>SQLite</code> 是一个非常优秀的嵌入式数据库，非常轻量，可以与 Mysql, PostgreSQL 这样的 大型数据库互补使用. 而 Python 标准库中的 <code>sqlite3</code> 模块实现了兼容 SQLite 的 <a href="https://www.python.org/dev/peps/pep-0249/">Python DB-API 2.0</a>接口, 因此我们可以很方 便地使用 <code>sqlite3</code> 模块来操作 <code>SQLite</code></p>
<h2 id="入门"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> 入门</h2>
<h3 id="创建数据库"><!-- raw HTML omitted -->1.1<!-- raw HTML omitted --> 创建数据库</h3>
<p><code>SQLite</code> 数据库是存储在文件系统的单个文件上的，所以如果数据库文件不存在，那么在第一次访问这个数据库，就会创建相应的数据库文件。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sqlite3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">db_filename</span> <span class="o">=</span> <span class="s1">&#39;sqlite3_demo.db&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">db_exist</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">db_filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">conn</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">db_filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">db_exist</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Database exists&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Database does not exist&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">conn</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span></code></pre></div><p>上面的例子会在连接数据库之前检查一下数据库文件是否存在，然后使用 <code>connect()</code> 函数连接数据库。</p>
<p>你在执行该代码之前查看一下当前目录的话，如果不存在 <code>sqlite3_demo.db</code> 的话，那么跑完这段代码，你应该会看到 <code>sqlite3_demo.db</code>
文件的.</p>
<p>这段代码本身是没有做多少事，我只是用它来阐述一下 <code>SQLite</code> 的原理</p>
<h3 id="创建表"><!-- raw HTML omitted -->1.2<!-- raw HTML omitted --> 创建表</h3>
<p>那么，现在，让我们用 <code>SQLite</code> 来做点数据库的本份工作。先创建一张表，接下来的操作都会围绕着这张表进行。</p>
<p><code>user.sql</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">create</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="k">role</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">name</span><span class="w">         </span><span class="nb">text</span><span class="w"> </span><span class="k">primary</span><span class="w"> </span><span class="k">key</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">description</span><span class="w">  </span><span class="nb">text</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">create</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="k">user</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">id</span><span class="w">           </span><span class="nb">integer</span><span class="w"> </span><span class="k">primary</span><span class="w"> </span><span class="k">key</span><span class="w"> </span><span class="n">autoincrement</span><span class="w"> </span><span class="k">not</span><span class="w"> </span><span class="k">null</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">name</span><span class="w">         </span><span class="nb">text</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">phone_number</span><span class="w"> </span><span class="nb">integer</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">birthday</span><span class="w">     </span><span class="nb">date</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">role</span><span class="w">      </span><span class="nb">text</span><span class="w"> </span><span class="k">not</span><span class="w"> </span><span class="k">null</span><span class="w"> </span><span class="k">references</span><span class="w"> </span><span class="k">role</span><span class="p">(</span><span class="n">name</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>然后使用 <code>Connection</code> 对象的 <code>executescript()</code> 函数来创建表以及插入对应的数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sqlite3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">db_filename</span> <span class="o">=</span> <span class="s1">&#39;sqlite3_demo.db&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">schema_filename</span> <span class="o">=</span> <span class="s1">&#39;user.sql&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">db_exists</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">db_filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">db_filename</span><span class="p">)</span> <span class="k">as</span> <span class="n">conn</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">db_exists</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Creating schema&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">schema_filename</span><span class="p">,</span> <span class="s1">&#39;rt&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	    <span class="n">schema</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="n">conn</span><span class="o">.</span><span class="n">executescript</span><span class="p">(</span><span class="n">schema</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Inserting initial data&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">conn</span><span class="o">.</span><span class="n">executescript</span><span class="p">(</span><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">	insert into role (name,description)
</span></span></span><span class="line"><span class="cl"><span class="s2">	values (&#39;student&#39;,&#39;This is a student&#39;);
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">	insert into role (name,description)
</span></span></span><span class="line"><span class="cl"><span class="s2">	values (&#39;teacher&#39;,&#39;This is a teacher&#39;);
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">	insert into user (id,name,phone_number,birthday,role)
</span></span></span><span class="line"><span class="cl"><span class="s2">	values (1,&#39;Samray&#39;,12345678,&#39;2017-11-10&#39;,&#39;student&#39;);
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">	insert into user (id,name,phone_number,birthday,role)
</span></span></span><span class="line"><span class="cl"><span class="s2">	values (2,&#39;Paul&#39;,3231546,&#39;2017-11-11&#39;,&#39;student&#39;);
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">	insert into user (id,name,phone_number,birthday,role)
</span></span></span><span class="line"><span class="cl"><span class="s2">	values (3,&#39;Trump&#39;,13254768,&#39;2017-11-12&#39;,&#39;teacher&#39;);
</span></span></span><span class="line"><span class="cl"><span class="s2">			   &#34;&#34;&#34;</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="检索数据"><!-- raw HTML omitted -->1.3<!-- raw HTML omitted --> 检索数据</h3>
<p>如果想要使用检索存储在 <code>user</code> 表中的数据，那么就需要从数据库连接对象 <code>Connection</code> 中创建一个 <code>Cursor</code>对象。</p>
<p>而<code>Cursor</code> 对象负责与数据库进行交互并获取 数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sqlite3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">db_filename</span> <span class="o">=</span> <span class="s1">&#39;sqlite3_demo.db&#39;</span>
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">db_filename</span><span class="p">)</span> <span class="k">as</span> <span class="n">conn</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    select id,name,phone_number,birthday from user
</span></span></span><span class="line"><span class="cl"><span class="s2">    where role=&#39;student&#39;
</span></span></span><span class="line"><span class="cl"><span class="s2">		   &#34;&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">cursor</span><span class="o">.</span><span class="n">fetchall</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">	<span class="nb">id</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">phone_number</span><span class="p">,</span> <span class="n">birthday</span> <span class="o">=</span> <span class="n">row</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">{:2d}</span><span class="s1"> </span><span class="si">{}</span><span class="s1"> </span><span class="si">{:&lt;10}</span><span class="s1"> [</span><span class="si">{:&lt;8}</span><span class="s1">]&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nb">id</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">phone_number</span><span class="p">,</span> <span class="n">birthday</span><span class="p">))</span>
</span></span></code></pre></div><p><code>SQLite3</code> 数据库的查询分成两步。首先，使用 <code>Cursor</code> 对象的 <code>execute()</code> 对象执行查询语句，告诉数据库引擎我们需要什么样的数据，然后，使用 <code>fetchall()</code> 函数把数据集从数据库的返回结果中取出来。</p>
<p>返回结果是包含着一系列 <code>tuple</code> 的列表，而<code>tuple</code> 中对应着的数据就是 <code>select</code> 语句指定返回的字段值。</p>
<p><code>fetchall()</code>函数是把所有符合 条件的结果一次性返回，如果需要的话，我们可以使用<code>fetchone()</code>函数返回单条记录， 或者使用<code>fetchmany()</code>返回固定数量的记录</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sqlite3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">db_filename</span> <span class="o">=</span> <span class="s1">&#39;sqlite3_demo.db&#39;</span>
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">db_filename</span><span class="p">)</span> <span class="k">as</span> <span class="n">conn</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    select name, description from role
</span></span></span><span class="line"><span class="cl"><span class="s2">    where name=&#39;teacher&#39;
</span></span></span><span class="line"><span class="cl"><span class="s2">		   &#34;&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span><span class="p">,</span> <span class="n">description</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">.</span><span class="n">fetchone</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Role details for </span><span class="si">{}</span><span class="s1"> (</span><span class="si">{}</span><span class="s1">) </span><span class="se">\n</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">description</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    select id,name,phone_number,birthday from user
</span></span></span><span class="line"><span class="cl"><span class="s2">    where role=&#39;student&#39;
</span></span></span><span class="line"><span class="cl"><span class="s2">		   &#34;&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;/nNext 10 tasks:&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">cursor</span><span class="o">.</span><span class="n">fetchmany</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">	<span class="nb">id</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">phone_number</span><span class="p">,</span> <span class="n">birthday</span> <span class="o">=</span> <span class="n">row</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">{:2d}</span><span class="s1"> </span><span class="si">{}</span><span class="s1"> </span><span class="si">{:&lt;10}</span><span class="s1"> [</span><span class="si">{:&lt;8}</span><span class="s1">]&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">	    <span class="nb">id</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">phone_number</span><span class="p">,</span> <span class="n">birthday</span><span class="p">))</span>
</span></span></code></pre></div><p>使用 <code>fetchmany()</code> 函数需要注意的是，当你指定的数量超过了符合条件的全部记录的数量的时候，<code>fetchmany()</code>只会返回全部记录的数量。</p>
<p>例如上面的代码里面，我想要 <code>fetchmany()</code> 返回10条记录，但是我的数据库只有2条符合条件的数据，而 <code>fetchmany()</code> 之后返回两条记录</p>
<h3 id="row-对象"><!-- raw HTML omitted -->1.4<!-- raw HTML omitted --> Row 对象</h3>
<p>在先前的内容内，我已经提到，数据库返回的数据行都是以 <code>tuple</code>的形式返回的，所以 程序调用者必须知道查询语句字段的顺序，然后在<code>tuple</code>取出记录的时候把字段名和变量名一一对应上，例如
<code>name, description = cursor.fetchone()</code>.</p>
<p>查询语句中字段不多的时候或许还能记住，但是如果字段值多了起来，就很容易出现问题.</p>
<p>如果可以像<code>value=dict['key']</code> 那样使用键值对的形式获取数据，那样就方便很多.</p>
<p>而<code>sqlite3</code>也有为你提供这样便利的操作，诀窍就在使用 <code>Row</code> 对象。<code>sqlite3</code> 可以把查询结果映 射到 Row 对象，然后我们就可以通过<code>Row[字段名']</code> 这种方式来获取指定字段对应的值。</p>
<pre tabindex="0"><code class="language-nil" data-lang="nil">import sqlite3

db_filename = &#39;sqlite3_demo.db&#39;
with sqlite3.connect(db_filename) as conn:
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    cursor.execute(&#34;&#34;&#34;
    select name, description from role
    where name=&#39;teacher&#39;
		   &#34;&#34;&#34;)
    name, description = cursor.fetchone()
    print(&#39;Role details for {} ({}) \n&#39;.format(name, description))

    cursor.execute(&#34;&#34;&#34;
    select id,name,phone_number,birthday from user
    where role=&#39;student&#39;
		   &#34;&#34;&#34;)
    print(&#39;/nNext 10 tasks:&#39;)
    for row in cursor.fetchmany(10):
	print(&#39;{:2d} {} {:&lt;10} [{:&lt;8}]&#39;.format(
	    row[&#39;id&#39;], row[&#39;name&#39;], row[&#39;phone_number&#39;], row[&#39;birthday&#39;]))
</code></pre><p>通过指定 <code>Connection</code> 对象的 <code>row_factory</code> 属性就可以控制查询结果集返回的对象。</p>
<p>在上面的代码，我们使用了 <code>Row</code> 对象而不是 <code>tuple</code> 来获取数据，而程序的执行结果都是相同，但是程序的健壮性就得到了提高。</p>
<h3 id="在查询中使用变量"><!-- raw HTML omitted -->1.5<!-- raw HTML omitted --> 在查询中使用变量</h3>
<p>我们上面的代码里面的查询语句都是硬编码的，不利于扩展。如果你希望可以使用更灵活的查询语句，你可能会去用字符串拼接查询语句。</p>
<p>但是这样的做法是不被提倡的，因为很容易出现安全问题，比如说 SQL 注入. 比较提倡的方式是在执行 <code>execute()</code> 函数的时候进行 变量替换，使用变量替换可以避免SQL注入攻击，因为那些不被信任的代码没办法被解析。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sqlite3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">db_filename</span> <span class="o">=</span> <span class="s1">&#39;sqlite3_demo.db&#39;</span>
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">db_filename</span><span class="p">)</span> <span class="k">as</span> <span class="n">conn</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">conn</span><span class="o">.</span><span class="n">row_factory</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">Row</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">sql</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    select id,name,phone_number,birthday from user
</span></span></span><span class="line"><span class="cl"><span class="s2">    where role=:role_name
</span></span></span><span class="line"><span class="cl"><span class="s2">		   &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">sql</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;role_name&#39;</span><span class="p">:</span> <span class="s1">&#39;student&#39;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;/nNext 10 tasks:&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">cursor</span><span class="o">.</span><span class="n">fetchmany</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">{:2d}</span><span class="s1"> </span><span class="si">{}</span><span class="s1"> </span><span class="si">{:&lt;10}</span><span class="s1"> [</span><span class="si">{:&lt;8}</span><span class="s1">]&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">	    <span class="n">row</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">],</span> <span class="n">row</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">],</span> <span class="n">row</span><span class="p">[</span><span class="s1">&#39;phone_number&#39;</span><span class="p">],</span> <span class="n">row</span><span class="p">[</span><span class="s1">&#39;birthday&#39;</span><span class="p">]))</span>
</span></span></code></pre></div><p>如上面的代码所示，使用 <code>:role_name</code> 占位符来表示 <code>role_name</code>变量, 然后在执行 SQL 语句的时候把 <code>role_name</code>的值传到 SQL 语句里面去。</p>
<h3 id="批量插入"><!-- raw HTML omitted -->1.6<!-- raw HTML omitted --> 批量插入</h3>
<p>我们之前提到的插入都是使用 <code>execute()</code> 函数逐条插入的，但是 <code>sqlite3</code> 也是支持批 量插入的, 使用 <code>executemany()</code>函数就可以实现一次插入批量的数据，而函数的底层也 是对插入多条数据的循环进行了优化的，这些就无需调用者操心了。</p>
<p>user.csv</p>
<pre tabindex="0"><code class="language-csv" data-lang="csv">birthday,name,id,phone_number
2018-11-30,Torres,22,98564311
2010-08-10,Messi,12,81582236
2018-11-21,Saul,9,23564548
</code></pre><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">csv</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sqlite3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">db_filename</span> <span class="o">=</span> <span class="s1">&#39;sqlite3_demo.db&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">data_filename</span> <span class="o">=</span> <span class="s1">&#39;users.csv&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">SQL</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">insert into user (id,name,phone_number,birthday,role)
</span></span></span><span class="line"><span class="cl"><span class="s2">values (:id,:name,:phone_number,:birthday,&#39;student&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">data_filename</span><span class="p">,</span> <span class="s1">&#39;rt&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">csv_file</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">csv_reader</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">DictReader</span><span class="p">(</span><span class="n">csv_file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">db_filename</span><span class="p">)</span> <span class="k">as</span> <span class="n">conn</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="n">cursor</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="n">cursor</span><span class="o">.</span><span class="n">executemany</span><span class="p">(</span><span class="n">SQL</span><span class="p">,</span> <span class="n">csv_reader</span><span class="p">)</span>
</span></span></code></pre></div><p>我们从 csv 文件中批量导入数据，而Python 的标准库也内置了 CSV 的解析器，使用 <code>DictReader</code> 就是将 csv 文件解析成
<code>{'id':22,'birthday':'2018-11-30','name':'Torres','phone_number':98564311}</code>的形式
然后配合上面提到的命名变量，把所有数据插入到数据库。</p>
<h2 id="进阶"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> 进阶</h2>
<p>自定义数据库列类型 <code>SQLite</code> 的数据列原生支持整型(integer), 浮点数(floating point), 文本类型 (text), 并且由 <code>sqlite3</code> 转换成 Python内置的数据类型。</p>
<p>例如：数据库的整型可以转 换成Python 的 <code>int</code> 或者是 <code>long</code>, 具体取决于值的大小；文本类型默认会转换成 <code>str</code>
类型，除非我们修改了 <code>Connection</code> 对象的 <code>text_factory</code> 属性。</p>
<p>虽然 <code>SQLite</code> 内部支持的数据类型不多，但是得益于 <code>sqlite3</code> 的内置机制的支持，我们可以 定义程序自己的数据列。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sqlite3</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">db_filename</span> <span class="o">=</span> <span class="s1">&#39;sqlite3_demo.db&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">sql</span> <span class="o">=</span> <span class="s1">&#39;select id,name,birthday from user&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show_birthday</span><span class="p">(</span><span class="n">conn</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">conn</span><span class="o">.</span><span class="n">row_factory</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">Row</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">sql</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">row</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">.</span><span class="n">fetchone</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;birthday&#39;</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">{:&lt;8}</span><span class="s1"> </span><span class="si">{:&lt;10}</span><span class="s1"> </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">col</span><span class="p">,</span> <span class="n">row</span><span class="p">[</span><span class="n">col</span><span class="p">],</span> <span class="nb">type</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="n">col</span><span class="p">])))</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Without type detection:&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">db_filename</span><span class="p">)</span> <span class="k">as</span> <span class="n">conn</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">show_birthday</span><span class="p">(</span><span class="n">conn</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">With type detection:&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">db_filename</span><span class="p">,</span> <span class="n">detect_types</span><span class="o">=</span><span class="n">sqlite3</span><span class="o">.</span><span class="n">PARSE_DECLTYPES</span><span class="p">,)</span> <span class="k">as</span> <span class="n">conn</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">show_birthday</span><span class="p">(</span><span class="n">conn</span><span class="p">)</span>
</span></span></code></pre></div><p>如上面的代码所示，如果你想在Python 数据类型和 <code>SQLite</code> 数据列转换的时候使用 <code>SQLite</code> 原本不支持的类型，你可以在调用 <code>connect()</code> 函数的时候，传一个 <code>detect_types</code> 参数进去，而 <code>PARSE_DECLTYPES</code> 的意思是指转换成字段声明时候的类型， 比如 <code>birthday</code> 声明成 <code>datetime</code>类型，但是没有指定成 <code>PAESE_DECLTYPES</code> 的时候， 转换成 <code>str</code>, 指定后，转换成 <code>datetime</code>.</p>
<p>现在我们就来说说怎么定义自己的数据列类型:</p>
<p>我们需要注册两个函数，一个函数把 Python 对象转换成 <code>byte string</code> 存储到数据 库里面去，这个函数被称为 <code>adapter(适配器)</code>; 既然有从Python 对象转换到数据库存储 对象的函数，那么自然就有从数据库存储转换成 Python 对象的函数，这个函数被称为 <code>converter(转换器)</code>.</p>
<p>然后就需要使用 <code>register_adapter()</code> 函数将一个函数注册成 <code>adapter</code> 函数，至于<code>register_converter()</code>函数，也是同理可得了。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pickle</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sqlite3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">db_filename</span> <span class="o">=</span> <span class="s1">&#39;sqlite3_demo.db&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">adapter_func</span><span class="p">(</span><span class="n">obj</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Covert from python to sqlite3 representation
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;adapter_func(</span><span class="si">{}</span><span class="s1">)</span><span class="se">\n</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">obj</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">pickle</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">converter_func</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Convert from sqlite3 to python representation
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;converter_func(</span><span class="si">{}</span><span class="s1">)&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">pickle</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># custom type</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">MyObj</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">arg</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">	<span class="bp">self</span><span class="o">.</span><span class="n">arg</span> <span class="o">=</span> <span class="n">arg</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="s1">&#39;MyObj(</span><span class="si">{!r}</span><span class="s1">)&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">arg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Register functions</span>
</span></span><span class="line"><span class="cl"><span class="n">sqlite3</span><span class="o">.</span><span class="n">register_adapter</span><span class="p">(</span><span class="n">MyObj</span><span class="p">,</span> <span class="n">adapter_func</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">sqlite3</span><span class="o">.</span><span class="n">register_converter</span><span class="p">(</span><span class="s2">&#34;MyObj&#34;</span><span class="p">,</span> <span class="n">converter_func</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Create some objects to save</span>
</span></span><span class="line"><span class="cl"><span class="n">to_save</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">MyObj</span><span class="p">(</span><span class="s1">&#39;this is a value to save&#39;</span><span class="p">),),</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">MyObj</span><span class="p">(</span><span class="mi">42</span><span class="p">),)</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">db_filename</span><span class="p">,</span> <span class="n">detect_types</span><span class="o">=</span><span class="n">sqlite3</span><span class="o">.</span><span class="n">PARSE_DECLTYPES</span><span class="p">)</span> <span class="k">as</span> <span class="n">conn</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">conn</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">     create table if not exists obj (
</span></span></span><span class="line"><span class="cl"><span class="s2">	id    integer primary key autoincrement not null,
</span></span></span><span class="line"><span class="cl"><span class="s2">	data  MyObj
</span></span></span><span class="line"><span class="cl"><span class="s2">    )
</span></span></span><span class="line"><span class="cl"><span class="s2">		 &#34;&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span><span class="o">.</span><span class="n">executemany</span><span class="p">(</span><span class="s2">&#34;insert into obj (data) values (?)&#34;</span><span class="p">,</span> <span class="n">to_save</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Query the database for the objects just saved</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&#34;select id, data from obj&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">obj_id</span><span class="p">,</span> <span class="n">obj</span> <span class="ow">in</span> <span class="n">cursor</span><span class="o">.</span><span class="n">fetchall</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Retrieved&#39;</span><span class="p">,</span> <span class="n">obj_id</span><span class="p">,</span> <span class="n">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;  with type&#39;</span><span class="p">,</span> <span class="nb">type</span><span class="p">(</span><span class="n">obj</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">()</span>
</span></span></code></pre></div><p>上面的例子使用了Python 标准库的 <code>pickle</code> 模块，将一个 Python 对象转换成可以保存 到数据库的字符串，然后使用 <code>pickle</code>
把字符串转换成Python 对象。</p>
<p>这就基本实现了自定义的数据类型。不过我们自己实现的这种自定义数据类型是有局限的，我们只能把整个 Python 对象当作字符串来查询，而没办法针对 Python 对象的属性进行查询，如果你感兴趣的话，你可以看看 Python ORM
框架是怎么实现这些功能的。</p>
<h3 id="事务"><!-- raw HTML omitted -->2.1<!-- raw HTML omitted --> 事务</h3>
<p>谈及关系型数据库，必不可少的一定是事务。对于事务的见解，网上的资料都已经浩如烟海 了，那么，就要我们直接来说一下 <code>SQLite</code> 事务的使用</p>
<h4 id="commit"><!-- raw HTML omitted -->2.1.1<!-- raw HTML omitted --> commit</h4>
<p>对数据库的修改操作，无论是新增(insert) 还是更新 (update), 都需要调用 <code>commit()</code> 来保存。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sqlite3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">db_filename</span> <span class="o">=</span> <span class="s1">&#39;sqlite3_demo.db&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show_role</span><span class="p">(</span><span class="n">conn</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;select name, description from role&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">description</span> <span class="ow">in</span> <span class="n">cursor</span><span class="o">.</span><span class="n">fetchall</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;  &#39;</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">db_filename</span><span class="p">)</span> <span class="k">as</span> <span class="n">conn1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Before changes:&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">show_role</span><span class="p">(</span><span class="n">conn1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Insert in one cursor</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor1</span> <span class="o">=</span> <span class="n">conn1</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor1</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    insert into role (name, description)
</span></span></span><span class="line"><span class="cl"><span class="s2">    values (&#39;president&#39;,&#39;well, this is a president&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">		    &#34;&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">After changes in conn1:&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">show_role</span><span class="p">(</span><span class="n">conn1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 在没有提交事务之前，使用其它的数据库连接进行查询</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">Before commit:&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">db_filename</span><span class="p">)</span> <span class="k">as</span> <span class="n">conn2</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="n">show_role</span><span class="p">(</span><span class="n">conn2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 提交事务，然后使用另外的数据库连接进行查询</span>
</span></span><span class="line"><span class="cl">    <span class="n">conn1</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">After commit:&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">db_filename</span><span class="p">)</span> <span class="k">as</span> <span class="n">conn3</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="n">show_role</span><span class="p">(</span><span class="n">conn3</span><span class="p">)</span>
</span></span></code></pre></div><p><code>commit()</code> 函数的调用结果可以被使用若干个数据库连接的程序查询到，在第一个数据库连接插入了一行新的数据，另外两个数据库连接尝试读取到新插入的数据。</p>
<p>当 <code>show_role()</code> 函数在 <code>conn1</code> 提交事务之前被调用，返回结果就取决于调用 <code>show_role()</code> 是哪个数据连接了。</p>
<p>因为是通过 <code>conn1</code>来修改数据库，所以它可以看到修改后的数据，但是 <code>conn2</code>看不到。在提交事务之后(<code>commit()</code>) ,通过其他的数据库连接 (conn3)也可以看到修改结果了</p>
<h4 id="rollback"><!-- raw HTML omitted -->2.1.2<!-- raw HTML omitted --> rollback</h4>
<p>未提交的修改可以通过调用<code>rollback()</code> 函数全部丢弃。通常 <code>commit()</code> 和 <code>rollback()</code> 函数都是在 <code>try-except</code> 语句块的不同地方被调用的，例如错误异常触发, 事务回滚(rollback)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sqlite3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">db_filename</span> <span class="o">=</span> <span class="s1">&#39;sqlite3_demo.db&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show_role</span><span class="p">(</span><span class="n">conn</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;select name, description from role&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">description</span> <span class="ow">in</span> <span class="n">cursor</span><span class="o">.</span><span class="n">fetchall</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;  &#39;</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">db_filename</span><span class="p">)</span> <span class="k">as</span> <span class="n">conn1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Before changes:&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">show_role</span><span class="p">(</span><span class="n">conn1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># Delete</span>
</span></span><span class="line"><span class="cl">	<span class="n">cursor1</span> <span class="o">=</span> <span class="n">conn1</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="n">cursor1</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">	delete from role where name=&#39;president&#39;
</span></span></span><span class="line"><span class="cl"><span class="s2">			&#34;&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">After delete&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">show_role</span><span class="p">(</span><span class="n">conn1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1"># 模拟接下来的操作出现了错误</span>
</span></span><span class="line"><span class="cl">	<span class="k">raise</span> <span class="ne">RuntimeError</span><span class="p">(</span><span class="s1">&#39;This is an error&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">error</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># 丢弃之前的修改</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Error:&#39;</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">conn1</span><span class="o">.</span><span class="n">rollback</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># 保存修改，提交事务</span>
</span></span><span class="line"><span class="cl">	<span class="n">conn1</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">After rollback:&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">show_role</span><span class="p">(</span><span class="n">conn1</span><span class="p">)</span>
</span></span></code></pre></div><p>在调用 <code>rollback()</code> 函数回滚事务之后，对数据库的修改都丢弃了。</p>
<h3 id="内存型数据库"><!-- raw HTML omitted -->2.2<!-- raw HTML omitted --> 内存型数据库</h3>
<p>正如我们先前提到的，<code>SQLite</code> 是文件型数据库，它通过文件系统来管理数据库。但是 <code>SQLite</code> 也可以把整个数据库放到内存中去。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sqlite3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">schema_filename</span> <span class="o">=</span> <span class="s1">&#39;user.sql&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s1">&#39;:memory:&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">conn</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">conn</span><span class="o">.</span><span class="n">row_factory</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">Row</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Creating schema&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">schema_filename</span><span class="p">,</span> <span class="s1">&#39;rt&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="n">schema</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">conn</span><span class="o">.</span><span class="n">executescript</span><span class="p">(</span><span class="n">schema</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Inserting initial data&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">conn</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    insert into role (name,description)
</span></span></span><span class="line"><span class="cl"><span class="s2">    values (&#39;Admin&#39;, &#39;wow, administrator&#39;
</span></span></span><span class="line"><span class="cl"><span class="s2">	    )
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">	<span class="p">(</span><span class="s1">&#39;Xi&#39;</span><span class="p">,</span> <span class="mi">119</span><span class="p">,</span> <span class="s1">&#39;1910-10-03&#39;</span><span class="p">,</span><span class="s1">&#39;president&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">(</span><span class="s1">&#39;Jiang&#39;</span><span class="p">,</span> <span class="mi">110</span><span class="p">,</span> <span class="s1">&#39;2020-10-10&#39;</span><span class="p">,</span><span class="s1">&#39;president&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">(</span><span class="s1">&#39;Mao&#39;</span><span class="p">,</span> <span class="mi">10086</span><span class="p">,</span> <span class="s1">&#39;2010-10-17&#39;</span><span class="p">,</span><span class="s1">&#39;president&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">conn</span><span class="o">.</span><span class="n">executemany</span><span class="p">(</span><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    insert into user (name, phone_number, birthday,role)
</span></span></span><span class="line"><span class="cl"><span class="s2">    values (?, ?, ?,?)
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Dumping:&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">text</span> <span class="ow">in</span> <span class="n">conn</span><span class="o">.</span><span class="n">iterdump</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span></span></code></pre></div><p>想要把 <code>SQLite</code> 当作内存型数据库，只需在调用 <code>connect()</code> 函数的时候，使用 <code>:memory:</code> 参数而不是数据库文件的文件名。</p>
<p>需要注意的是，每一个 <code>connect()</code> 函数都会打开新建一个数据库实例，所以在一个数据库连接上的修改是不会影响其它的连接的。</p>
<p>而 <code>iterdump()</code> 函数会返回一个迭代器，输出一系列对数据库修改的 SQL.</p>
<p>最后需要注意的是，使用内存型的数据库是有风险的，要切记这一点。</p>
<h3 id="在sql-使用-python-函数"><!-- raw HTML omitted -->2.3<!-- raw HTML omitted --> 在SQL 使用 Python 函数</h3>
<p><code>SQLite</code> 支持在查询的时候使用注册了的 Python函数的，这个特性就使我们在可以获取到 查询结果之前先对数据进行加工，或者调用Python 函数实现那些 纯SQL 力所不能及的功能</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">codecs</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sqlite3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">db_filename</span> <span class="o">=</span> <span class="s1">&#39;sqlite3_demo.db&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">encrypt</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Encrypting </span><span class="si">{!r}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">s</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">codecs</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s1">&#39;rot-13&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">decrypt</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Decrypting </span><span class="si">{!r}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">s</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">codecs</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s1">&#39;rot-13&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">db_filename</span><span class="p">)</span> <span class="k">as</span> <span class="n">conn</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">conn</span><span class="o">.</span><span class="n">create_function</span><span class="p">(</span><span class="s1">&#39;encrypt&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">encrypt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">conn</span><span class="o">.</span><span class="n">create_function</span><span class="p">(</span><span class="s1">&#39;decrypt&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">decrypt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Raw values</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Original values:&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">query</span> <span class="o">=</span> <span class="s2">&#34;select id, name from user&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">cursor</span><span class="o">.</span><span class="n">fetchall</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">Encrypting...&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">query</span> <span class="o">=</span> <span class="s2">&#34;update user set name = encrypt(name)&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">Raw encrypted values:&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">query</span> <span class="o">=</span> <span class="s2">&#34;select id, name from user&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">cursor</span><span class="o">.</span><span class="n">fetchall</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">Decrypting in query...&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">query</span> <span class="o">=</span> <span class="s2">&#34;select id, decrypt(name) from user&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">cursor</span><span class="o">.</span><span class="n">fetchall</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">Decrypting...&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">query</span> <span class="o">=</span> <span class="s2">&#34;update user set name = decrypt(name)&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</span></span></code></pre></div><p>通过 <code>create_function()</code> 注册了两个可供 SQL 使用的函数，而 <code>create_function()</code>
的参数分别是定义函数的名字，函数传递的参数的个数，以及源函数</p>
<h2 id="总结"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> 总结</h2>
<p>虽说 <code>SQLite</code> 只是一个嵌入式的轻量数据库，但是麻雀虽小，五脏俱全嘛。</p>
<p>内置的 <code>sqlite3</code> 库为Python 和 <code>SQLite</code> 的沟通构建了一个便捷的桥梁，但是这个桥梁只是个木桥，如果你希望使用斜拉索跨海大桥的话，你就需要去了解 <a href="http://www.sqlalchemy.org/">sqlalchemy</a>, 那是一个功能完善的 ORM 框架 :)</p>
<h2 id="参考"><!-- raw HTML omitted -->4<!-- raw HTML omitted --> 参考</h2>
<ul>
<li><a href="http://www.sqlalchemy.org/">sqlalchemy</a></li>
<li><a href="http://www.sqlite.org/">sqlite</a></li>
<li><a href="https://docs.python.org/3.5/library/sqlite3.html">sqlite3</a></li>
<li><a href="https://pymotw.com/3/index.html">python3 module of week</a></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>

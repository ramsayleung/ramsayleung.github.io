<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Network on 菠萝油与天光墟</title>
    <link>https://ramsayleung.github.io/zh/tags/network/</link>
    <description>Recent content in Network on 菠萝油与天光墟</description>
    <image>
      <title>菠萝油与天光墟</title>
      <url>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.146.7</generator>
    <language>zh</language>
    <copyright>See this site&amp;rsquo;s source code here, licensed under GPLv3 ·</copyright>
    <lastBuildDate>Sat, 11 Oct 2025 19:37:29 +0800</lastBuildDate>
    <atom:link href="https://ramsayleung.github.io/zh/tags/network/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>关于破解加拿大航空飞机网络限制的一件小事</title>
      <link>https://ramsayleung.github.io/zh/post/2025/%E5%85%B3%E4%BA%8E%E7%A0%B4%E8%A7%A3%E5%8A%A0%E6%8B%BF%E5%A4%A7%E8%88%AA%E7%A9%BA%E9%A3%9E%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%99%90%E5%88%B6%E7%9A%84%E4%B8%80%E4%BB%B6%E5%B0%8F%E4%BA%8B/</link>
      <pubDate>Fri, 10 Oct 2025 06:53:00 +0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2025/%E5%85%B3%E4%BA%8E%E7%A0%B4%E8%A7%A3%E5%8A%A0%E6%8B%BF%E5%A4%A7%E8%88%AA%E7%A9%BA%E9%A3%9E%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%99%90%E5%88%B6%E7%9A%84%E4%B8%80%E4%BB%B6%E5%B0%8F%E4%BA%8B/</guid>
      <description>&lt;h2 id=&#34;序章&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; 序章&lt;/h2&gt;
&lt;p&gt;前段时间，坐飞机从加拿大飞回香港，全程大概12个小时，坐的是加拿大航空(Air Canada)的飞机。&lt;/p&gt;
&lt;p&gt;有趣的是，飞机上竟然有 Wifi:&lt;/p&gt;

&lt;figure&gt;
    
    
    &lt;input type=&#34;checkbox&#34; id=&#34;zoomCheck-a931d&#34; hidden&gt;
    &lt;label for=&#34;zoomCheck-a931d&#34;&gt;
    
    
    &lt;img class=&#34;zoomCheck&#34; loading=&#34;lazy&#34; src=&#34;https://ramsayleung.github.io/ox-hugo/acwifi-connect-2.png&#34;/&gt; 
    
    
    &lt;/label&gt;
&lt;/figure&gt;

&lt;p&gt;但是 Wifi 做了限制，对于Aeroplan的会员，如果未付费，就只提供 &lt;a href=&#34;https://www.aircanada.com/ca/en/aco/home/fly/onboard/in-flight-entertainment-and-connectivity.html#/&#34;&gt;Free Texting&lt;/a&gt; 的功能，即只能使用即时通信软件，比如 Whatsapp, Snapchat，微信发送文本信息，但无法访问其他网站。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="序章"><span class="section-num">1</span> 序章</h2>
<p>前段时间，坐飞机从加拿大飞回香港，全程大概12个小时，坐的是加拿大航空(Air Canada)的飞机。</p>
<p>有趣的是，飞机上竟然有 Wifi:</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-a931d" hidden>
    <label for="zoomCheck-a931d">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/acwifi-connect-2.png"/> 
    
    
    </label>
</figure>

<p>但是 Wifi 做了限制，对于Aeroplan的会员，如果未付费，就只提供 <a href="https://www.aircanada.com/ca/en/aco/home/fly/onboard/in-flight-entertainment-and-connectivity.html#/">Free Texting</a> 的功能，即只能使用即时通信软件，比如 Whatsapp, Snapchat，微信发送文本信息，但无法访问其他网站。</p>
<p>如果想要无限制地访问其他网站，那么就是付 30.75 加元；</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-1118f" hidden>
    <label for="zoomCheck-1118f">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/acwifi.jpg"/> 
    
    
    </label>
</figure>

<p>如果想要在飞机上看视频，那么就是付 39 加元；</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-47db4" hidden>
    <label for="zoomCheck-47db4">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/acwifi_plan.jpg"/> 
    
    
    </label>
</figure>

<p>我就在想，对于 Free Texting 服务，我是否可以绕过只能使用即时软件的限制，无限制地访问其他网站呢？</p>
<p>即相当于还是免费会员，但是可以享受30.75加元付费用户的服务，反正长途漫漫，总要找点有趣的事情消磨一下12个小时的时间。</p>
<p>又因为可以使用微信的文字聊天服务，那么我还可以在天上呼叫外援来帮忙一起处理，而我的室友恰好是个安全+网络专家，
当时在家休假，我一提这个想法，他觉得好玩就一拍即合，我们就直接地空连线开搞。</p>
<h2 id="流程"><span class="section-num">2</span> 流程</h2>
<p>在飞机上选择完 acwifi.com 这个唯一的 wifi 后，就像其他需要登录的Wifi一样，会弹出一个 acwifi.com 的网页，要求验证我的 Aeroplan 会员的身份，验证通过之后即可上网。</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-4b541" hidden>
    <label for="zoomCheck-4b541">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/onboard_success.jpg"/> 
    
    
    </label>
</figure>

<p>有个非常经典的软件开发面试题：在浏览器输入一个网址之后，按下回车键之后，会发生什么事情。</p>
<p>比如输入的是 <a href="https://acwifi.com">https://acwifi.com</a>, 如果只关注的网络请求部分，整个过程大概是：DNS查询 -&gt; TCP连接 -&gt; TLS握手 -&gt; HTTP请求与响应</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-c73ee" hidden>
    <label for="zoomCheck-c73ee">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/network_request_sequence.png"/> 
    
    
    </label>
</figure>

<p>我们把需要访问的目标网站当作是 github.com, 现在就来看下要怎么才能突破网络的限制，成功访问 github.com</p>
<h2 id="思路1-伪装域名"><span class="section-num">3</span> 思路1: 伪装域名</h2>
<p>既然 acwifi.com 可以访问，而 github.com 不可以访问，那么是否有可能是网络在DNS服务器做了限制，只解析白名单内的域名（即时通信的域名）</p>
<p>如果是这种情况的话，那么我是否可以修改 =/etc/host=，把我的服务器伪装成 acwifi.com, 所有的请求流量都经过我的服务器，再去请求目标网站(github.com) 如：</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-88a46" hidden>
    <label for="zoomCheck-88a46">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/self-sign-certificate.png"/> 
    
    
    </label>
</figure>

<p>想法大概是我修改DNS记录，把我们的代理服务器的IP <code>137.184.231.87</code> 绑定到 <code>acwifi.com</code> 上，因为本地的 <code>/etc/host</code> 的优先级是高于DNS服务器的，然后再用证书进行自签名，告诉浏览器，这个IP 和这个域名是绑定的，你要相信它。</p>
<p>我先验证下一个想法:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">&gt; ping 137.184.231.87
</span></span><span class="line"><span class="cl">PING 137.184.231.87 <span class="o">(</span>137.184.231.87<span class="o">)</span>: <span class="m">56</span> data bytes
</span></span><span class="line"><span class="cl">Request timeout <span class="k">for</span> icmp_seq <span class="m">0</span>
</span></span><span class="line"><span class="cl">Request timeout <span class="k">for</span> icmp_seq <span class="m">1</span>
</span></span><span class="line"><span class="cl">Request timeout <span class="k">for</span> icmp_seq <span class="m">2</span>
</span></span><span class="line"><span class="cl">Request timeout <span class="k">for</span> icmp_seq <span class="m">3</span>
</span></span><span class="line"><span class="cl">Request timeout <span class="k">for</span> icmp_seq <span class="m">4</span>
</span></span><span class="line"><span class="cl">^C
</span></span><span class="line"><span class="cl">--- 137.184.231.87 ping statistics ---
</span></span><span class="line"><span class="cl"><span class="m">6</span> packets transmitted, <span class="m">0</span> packets received, 100.0% packet loss
</span></span></code></pre></td></tr></table>
</div>
</div><p>只是没想到，IP直接 <code>ping</code> 不通，相当于是IP大概率直接就连不上了。</p>
<p>试了下其他的著名IP，比如 Cloudflare 的CDN IP, 也是连不通:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">&gt; ping 172.67.133.121
</span></span><span class="line"><span class="cl">PING 172.67.133.121 <span class="o">(</span>172.67.133.121<span class="o">)</span>: <span class="m">56</span> data bytes
</span></span><span class="line"><span class="cl">Request timeout <span class="k">for</span> icmp_seq <span class="m">0</span>
</span></span><span class="line"><span class="cl">Request timeout <span class="k">for</span> icmp_seq <span class="m">1</span>
</span></span><span class="line"><span class="cl">Request timeout <span class="k">for</span> icmp_seq <span class="m">2</span>
</span></span><span class="line"><span class="cl">Request timeout <span class="k">for</span> icmp_seq <span class="m">3</span>
</span></span><span class="line"><span class="cl">Request timeout <span class="k">for</span> icmp_seq <span class="m">4</span>
</span></span><span class="line"><span class="cl">^C
</span></span><span class="line"><span class="cl">--- 172.67.133.121 ping statistics ---
</span></span><span class="line"><span class="cl"><span class="m">6</span> packets transmitted, <span class="m">0</span> packets received, 100.0% packet loss
</span></span></code></pre></td></tr></table>
</div>
</div><p>看来这条路子是走不通的，这个思路只有满足两个条件才能走得通：</p>
<ol>
<li>texting only 的限制是在DNS 解析时做的，只有特定的域名（比如WhatsApp, 微信的域名）才会被解析 (这样的维护成本比较低)</li>
<li>网关允许任意的IP发起网络请求</li>
</ol>
<p>但实际是IP都直接拦截了，怎么伪装都没有用了，这个网络大概率维护了某个IP白名单（比如WhatsApp，微信的出口IP），
只有在白名单的IP才可以访问。</p>
<p>此外，舍友还建议我做了个额外的测试：</p>
<blockquote>
<p>舍友：我想看看TLS有没有被拦截。万一只拦截了ICMP没拦截TLS, 那就是虚惊一场。
我：想得有点美好😂
舍友：做安全的就是要每个都试试</p></blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt; curl -Lkv https://172.67.133.121
</span></span><span class="line"><span class="cl">*   Trying 172.67.133.121:443...
</span></span><span class="line"><span class="cl">* Connected to 172.67.133.121 <span class="o">(</span>172.67.133.121<span class="o">)</span> port <span class="m">443</span>
</span></span><span class="line"><span class="cl">* ALPN: curl offers h2,http/1.1
</span></span><span class="line"><span class="cl">* <span class="o">(</span>304<span class="o">)</span> <span class="o">(</span>OUT<span class="o">)</span>, TLS handshake, Client hello <span class="o">(</span>1<span class="o">)</span>:
</span></span><span class="line"><span class="cl">* LibreSSL SSL_connect: SSL_ERROR_SYSCALL in connection to 172.67.133.121:443
</span></span><span class="line"><span class="cl">* Closing connection
</span></span><span class="line"><span class="cl">curl: <span class="o">(</span>35<span class="o">)</span> LibreSSL SSL_connect: SSL_ERROR_SYSCALL in connection to 172.67.133.121:443
</span></span></code></pre></td></tr></table>
</div>
</div><p>不出意外，IP都被封了，TLS也没法建立连接。</p>
<h2 id="思路2-53端口伪装dns"><span class="section-num">4</span> 思路2: 53端口伪装DNS</h2>
<p>在第一条路子走不通的时候，室友提供了第二条路子：尝试利用DNS服务作为突破口:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">&gt; dig http418.org
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">;</span> &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; http418.org
</span></span><span class="line"><span class="cl"><span class="p">;;</span> global options: +cmd
</span></span><span class="line"><span class="cl"><span class="p">;;</span> Got answer:
</span></span><span class="line"><span class="cl"><span class="p">;;</span> -&gt;&gt;HEADER<span class="s">&lt;&lt;- opco</span>de: QUERY, status: NOERROR, id: <span class="m">64160</span>
</span></span><span class="line"><span class="cl"><span class="p">;;</span> flags: qr rd ra<span class="p">;</span> QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: <span class="m">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">;;</span> OPT PSEUDOSECTION:
</span></span><span class="line"><span class="cl"><span class="p">;</span> EDNS: version: 0, flags:<span class="p">;</span> udp: <span class="m">4096</span>
</span></span><span class="line"><span class="cl"><span class="p">;;</span> QUESTION SECTION:
</span></span><span class="line"><span class="cl"><span class="p">;</span>http418.org.			IN	A
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">;;</span> ANSWER SECTION:
</span></span><span class="line"><span class="cl">http418.org.		300	IN	A	172.67.133.121
</span></span><span class="line"><span class="cl">http418.org.		300	IN	A	104.21.5.131
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">;;</span> Query time: <span class="m">3288</span> msec
</span></span><span class="line"><span class="cl"><span class="p">;;</span> SERVER: 172.19.207.1#53<span class="o">(</span>172.19.207.1<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">;;</span> WHEN: Sat Oct <span class="m">04</span> 14:18:24 PDT <span class="m">2025</span>
</span></span><span class="line"><span class="cl"><span class="p">;;</span> MSG SIZE  rcvd: <span class="m">94</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这是个好消息，说明还是有路子可以请求到外部网络的，DNS就是其中一个路子。</p>
<p>看上面的记录，说明我们查询 <code>http418.org</code> 这个网站的DNS 纪录成功，也就意味着DNS请求是成功的。</p>
<h3 id="任意dns服务器"><span class="section-num">4.1</span> 任意DNS服务器</h3>
<p>室友再随意找了个 DNS 服务器，看下这个网络是否对DNS服务器有白名单:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">&gt; dig @40.115.144.198 http418.org
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">;</span> &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; @40.115.144.198 http418.org
</span></span><span class="line"><span class="cl"><span class="p">;</span> <span class="o">(</span><span class="m">1</span> server found<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">;;</span> global options: +cmd
</span></span><span class="line"><span class="cl"><span class="p">;;</span> Got answer:
</span></span><span class="line"><span class="cl"><span class="p">;;</span> -&gt;&gt;HEADER<span class="s">&lt;&lt;- opco</span>de: QUERY, status: NOERROR, id: <span class="m">58958</span>
</span></span><span class="line"><span class="cl"><span class="p">;;</span> flags: qr rd ra<span class="p">;</span> QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: <span class="m">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">;;</span> OPT PSEUDOSECTION:
</span></span><span class="line"><span class="cl"><span class="p">;</span> EDNS: version: 0, flags:<span class="p">;</span> udp: <span class="m">1224</span>
</span></span><span class="line"><span class="cl"><span class="p">;;</span> QUESTION SECTION:
</span></span><span class="line"><span class="cl"><span class="p">;</span>http418.org.			IN	A
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">;;</span> ANSWER SECTION:
</span></span><span class="line"><span class="cl">http418.org.		275	IN	A	104.21.5.131
</span></span><span class="line"><span class="cl">http418.org.		275	IN	A	172.67.133.121
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">;;</span> Query time: <span class="m">1169</span> msec
</span></span><span class="line"><span class="cl"><span class="p">;;</span> SERVER: 40.115.144.198#53<span class="o">(</span>40.115.144.198<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">;;</span> WHEN: Sat Oct <span class="m">04</span> 14:24:25 PDT <span class="m">2025</span>
</span></span><span class="line"><span class="cl"><span class="p">;;</span> MSG SIZE  rcvd: <span class="m">72</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>竟然可以使用任意的DNS服务器，机会又大了不少</p>
<h3 id="tcp查询"><span class="section-num">4.2</span> TCP查询</h3>
<p>任意的DNS服务器都能请求成功, 这就是个非常好的消息, DNS 默认是走的UDP 协议，那么走TCP 协议的DNS请求是否会被拦截呢?</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">&gt; dig @40.115.144.198 http418.org +tcp
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">;</span> &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; @40.115.144.198 http418.org +tcp
</span></span><span class="line"><span class="cl"><span class="p">;</span> <span class="o">(</span><span class="m">1</span> server found<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">;;</span> global options: +cmd
</span></span><span class="line"><span class="cl"><span class="p">;;</span> Got answer:
</span></span><span class="line"><span class="cl"><span class="p">;;</span> -&gt;&gt;HEADER<span class="s">&lt;&lt;- opco</span>de: QUERY, status: NOERROR, id: <span class="m">30355</span>
</span></span><span class="line"><span class="cl"><span class="p">;;</span> flags: qr rd ra<span class="p">;</span> QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: <span class="m">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">;;</span> OPT PSEUDOSECTION:
</span></span><span class="line"><span class="cl"><span class="p">;</span> EDNS: version: 0, flags:<span class="p">;</span> udp: <span class="m">1224</span>
</span></span><span class="line"><span class="cl"><span class="p">;;</span> QUESTION SECTION:
</span></span><span class="line"><span class="cl"><span class="p">;</span>http418.org.			IN	A
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">;;</span> ANSWER SECTION:
</span></span><span class="line"><span class="cl">http418.org.		36	IN	A	172.67.133.121
</span></span><span class="line"><span class="cl">http418.org.		36	IN	A	104.21.5.131
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">;;</span> Query time: <span class="m">4679</span> msec
</span></span><span class="line"><span class="cl"><span class="p">;;</span> SERVER: 40.115.144.198#53<span class="o">(</span>40.115.144.198<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">;;</span> WHEN: Sat Oct <span class="m">04</span> 14:28:24 PDT <span class="m">2025</span>
</span></span><span class="line"><span class="cl"><span class="p">;;</span> MSG SIZE  rcvd: <span class="m">72</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>DNS TCP查询也能通过！这说明飞机网络的过滤策略相对宽松，为我们后续的DNS隧道方案提供了可能性。</p>
<h3 id="53端口的代理服务"><span class="section-num">4.3</span> 53端口的代理服务</h3>
<p>说明飞机网络限制也不是完全密不透风的，我们发现这堵墙上有个「狗洞」。</p>
<p>那么我们就有了个巧妙的想法：既然飞机网关对DNS请求没有拦截，那么理论上我们可以把代理服务器伪装成DNS服务器，
暴露DNS服务的53端口，所有的请求都经过代理服务器，伪装成 DNS 请求，那么就可以绕过拦截了。</p>
<p>舍友就用 <a href="https://github.com/XTLS/Xray-core">xray</a> <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>服务花费了一个小时，架设了一个暴露 53 端口的代理服务器，把配置信息通过微信发给我:</p>
<p>室友用Xray搭建的代理服务器配置包含了如下的示意配置：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;outbounds&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;tag&#34;</span><span class="p">:</span> <span class="s2">&#34;proxy&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;protocol&#34;</span><span class="p">:</span> <span class="s2">&#34;vless&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;settings&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;vnext&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">          <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;address&#34;</span><span class="p">:</span> <span class="s2">&#34;our-proxy-server-domain&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;port&#34;</span><span class="p">:</span> <span class="mi">53</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;users&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">              <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;some-uuid&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;flow&#34;</span><span class="p">:</span> <span class="s2">&#34;xtls-rprx-vision&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;encryption&#34;</span><span class="p">:</span> <span class="s2">&#34;none&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;level&#34;</span><span class="p">:</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">              <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">]</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;streamSettings&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;network&#34;</span><span class="p">:</span> <span class="s2">&#34;tcp&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;security&#34;</span><span class="p">:</span> <span class="s2">&#34;tls&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;tlsSettings&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&#34;allowInsecure&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&#34;allowInsecureCiphers&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&#34;alpn&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;h2&#34;</span>
</span></span><span class="line"><span class="cl">          <span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;tag&#34;</span><span class="p">:</span> <span class="s2">&#34;direct&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;protocol&#34;</span><span class="p">:</span> <span class="s2">&#34;freedom&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;tag&#34;</span><span class="p">:</span> <span class="s2">&#34;block&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;protocol&#34;</span><span class="p">:</span> <span class="s2">&#34;blackhole&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>而我电脑上就有个 xray 的客户端，不需要额外的软件就能建立连接。</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-8537d" hidden>
    <label for="zoomCheck-8537d">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/dns-server-proxy.png"/> 
    
    
    </label>
</figure>

<p>万事具备，激动人力的时刻到了，按下回车，访问 <code>github.com</code> ：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">/Users/ramsayleung <span class="o">[</span>ramsayleung@ramsayleungs-Laptop<span class="o">]</span> <span class="o">[</span>18:28<span class="o">]</span>
</span></span><span class="line"><span class="cl">&gt; curl -v github.com -x socks5://127.0.0.1:10810
</span></span><span class="line"><span class="cl">*   Trying 127.0.0.1:10810...
</span></span><span class="line"><span class="cl">* Connected to 127.0.0.1 <span class="o">(</span>127.0.0.1<span class="o">)</span> port <span class="m">10810</span>
</span></span><span class="line"><span class="cl">* SOCKS5 connect to 172.19.1.1:80 <span class="o">(</span>locally resolved<span class="o">)</span>
</span></span><span class="line"><span class="cl">* SOCKS5 request granted.
</span></span><span class="line"><span class="cl">* Connected to 127.0.0.1 <span class="o">(</span>127.0.0.1<span class="o">)</span> port <span class="m">10810</span>
</span></span><span class="line"><span class="cl">&gt; GET / HTTP/1.1
</span></span><span class="line"><span class="cl">&gt; Host: github.com
</span></span><span class="line"><span class="cl">&gt; User-Agent: curl/8.4.0
</span></span><span class="line"><span class="cl">&gt; Accept: */*
</span></span><span class="line"><span class="cl">&gt;
</span></span><span class="line"><span class="cl">&lt; HTTP/1.1 <span class="m">301</span> Moved Permanently
</span></span><span class="line"><span class="cl">&lt; Content-Length: <span class="m">0</span>
</span></span><span class="line"><span class="cl">&lt; Location: https://github.com/
</span></span><span class="line"><span class="cl">&lt;
</span></span><span class="line"><span class="cl">* Connection <span class="c1">#0 to host 127.0.0.1 left intact</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/Users/ramsayleung <span class="o">[</span>ramsayleung@ramsayleungs-Laptop<span class="o">]</span> <span class="o">[</span>18:28<span class="o">]</span>
</span></span><span class="line"><span class="cl">&gt; curl -v github.com -x socks5://127.0.0.1:10810
</span></span><span class="line"><span class="cl">*   Trying 127.0.0.1:10810...
</span></span><span class="line"><span class="cl">* Connected to 127.0.0.1 <span class="o">(</span>127.0.0.1<span class="o">)</span> port <span class="m">10810</span>
</span></span><span class="line"><span class="cl">* SOCKS5 connect to 172.19.1.1:80 <span class="o">(</span>locally resolved<span class="o">)</span>
</span></span><span class="line"><span class="cl">* SOCKS5 request granted.
</span></span><span class="line"><span class="cl">* Connected to 127.0.0.1 <span class="o">(</span>127.0.0.1<span class="o">)</span> port <span class="m">10810</span>
</span></span><span class="line"><span class="cl">&gt; GET / HTTP/1.1
</span></span><span class="line"><span class="cl">&gt; Host: github.com
</span></span><span class="line"><span class="cl">&gt; User-Agent: curl/8.4.0
</span></span><span class="line"><span class="cl">&gt; Accept: */*
</span></span><span class="line"><span class="cl">&gt;
</span></span><span class="line"><span class="cl">&lt; HTTP/1.1 <span class="m">301</span> Moved Permanently
</span></span><span class="line"><span class="cl">&lt; Content-Length: <span class="m">0</span>
</span></span><span class="line"><span class="cl">&lt; Location: https://github.com/
</span></span><span class="line"><span class="cl">&lt;
</span></span><span class="line"><span class="cl">* Connection <span class="c1">#0 to host 127.0.0.1 left intact</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>竟然请求成功了，github.com返回成功结果啦!</p>
<p>这意味着我们真的破解网络的限制，可以访问任意的网站啦！</p>
<p>此次，我们之前并没有意识到 xray 还有此种妙用 :)</p>
<p>这里我们就利用了一个简单的思维惯性：不是所有使用53端口的服务都是DNS查询请求。</p>
<h2 id="终极思路-dns-tunnel"><span class="section-num">5</span> 终极思路: DNS Tunnel</h2>
<p>如果思路2还是无法成功，我们还有一个终极大招可以用。</p>
<p>现在网关是只通过端口是否是53来判断是否是DNS请求，
但是如果网关更严格一些，比如检查DNS请求包的内容，就会发现我们的请求是「伪装」成DNS查询请求，而非真正的DNS查询请求：</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-48842" hidden>
    <label for="zoomCheck-48842">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/intercept-dns-request.png"/> 
    
    
    </label>
</figure>

<p>既然伪装的DNS请求会被拦截掉，那么我们就把所有请求都塞成DNS请求包里面，做成DNS TXT query，我真的是要查 DNS 了，只是还在里面加了些料：</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-43099" hidden>
    <label for="zoomCheck-43099">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/dns-tunnel.png"/> 
    
    
    </label>
</figure>

<p>但是这个终极方案需要有一个DNS Tunnel 的客户端来把所有的请求都封装起来，我电脑里面没有这样的软件，所以这个就变成理论上的终极方案，实际也无法验证。</p>
<h2 id="结语"><span class="section-num">6</span> 结语</h2>
<p>长途漫漫，我和室友花费了大概4个小时的时间远程把网络限制给破解了，玩得不亦乐乎，证明我们解决问题的思路着实是可行的。</p>
<p>方案能最后实施成功，主要是归功于我室友这个网络专家，远程连线提供技术和思路支持。</p>
<p>美中不足的是，虽然我们破解了网络限制，可以访问任意网站，但是飞机上的带宽实在是太小的，
打开网页实在是费劲，所以我也没有花太多时间上网冲浪。</p>
<p>剩下的几个小时时间，我是重温了一下八十年代的经典穿越科幻电影：《<a href="https://movie.douban.com/subject/1300555/">回到未来(Back to Future)</a>》<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>三部曲，相当好看.</p>
<p>最后，我在此严正声明：</p>
<p>这种技术探索仅限于学习和研究目的，我们严格遵守相关规定和服务条款。</p>
<h3 id="推荐阅读">推荐阅读</h3>
<ul>
<li>旅加经历
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E8%BF%99%E4%BA%9B%E5%B9%B4%E8%B5%B0%E8%BF%87%E7%9A%84%E8%B7%AF_%E4%BB%8E%E5%B9%BF%E5%B7%9E%E5%88%B0%E6%B8%A9%E5%93%A5%E5%8D%8E/">这些年走过的路：从广州到温哥华</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E5%8A%A0%E6%8B%BF%E5%A4%A7%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C/">加拿大之初体验</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E7%99%BB%E9%99%86%E5%8A%A0%E6%8B%BF%E5%A4%A7%E4%B8%80%E5%B9%B4%E7%9A%84%E4%BD%93%E4%BC%9A/">登陆加拿大一年后的体会</a></li>
</ul>
</li>
<li>工具流分享
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E7%AE%80%E6%98%8E%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/">简明写作指南</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E5%86%99%E4%BD%9C%E6%B5%81/">我的写作流</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E7%94%BB%E5%9B%BE%E6%B5%81/">我的画图流：画图工具与技巧分享</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E6%90%9C%E7%B4%A2%E6%B5%81/">我的搜索流：高效搜索经验分享</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2022/feynman_technique/">最好的学习方式：费曼学习法(Feynman Technique)</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2021/%E7%B3%BB%E7%BB%9F%E6%80%9D%E8%80%83/">系统思考：既见树木，又见森林</a></li>
</ul>
</li>
<li>思考感悟
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E7%BC%96%E7%A8%8B%E5%8D%81%E5%B9%B4%E7%9A%84%E6%84%9F%E6%82%9F/">编程十年的感悟</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E4%BB%8E%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E7%A6%BB%E7%BA%BF_%E6%88%91%E5%B8%A6%E8%B5%B0%E4%BA%86%E4%BB%80%E4%B9%88/">那些年，我从微信支付学到的东西</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2025/%E6%9D%82%E8%B0%88ai%E5%8F%96%E4%BB%A3%E7%A8%8B%E5%BA%8F%E5%91%98/">杂谈ai取代程序员</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E7%BD%AE%E8%BA%AB%E4%BA%8B%E5%86%85/">为什么梦想买不起，故乡回不去</a></li>
</ul>
</li>
<li>软件工程
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2025/a_philosophy_of_software_design/">软件设计的哲学</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2025/structure_and_interpretation_of_computer_programs/">一本读了八年还没读完的书</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%B8%80_%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E8%AE%A4%E7%9F%A5/">测试技能进阶(一): 软件质量认知</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%BA%8C_parameterized_tests/">测试技能进阶(二): Parameterized Tests</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%B8%89_property_based_testing/">测试技能进阶(三): Property Based Testing</a></li>
</ul>
</li>
</ul>
<div class="qr-container" center>
<img src="/ox-hugo/qrcode_gh_e06d750e626f_1.jpg" alt="qrcode_gh_e06d750e626f_1.jpg" class="qr-container" width="160px" height="160px" center="t" />
公号同步更新，欢迎关注👻
</div>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://github.com/XTLS/Xray-core">https://github.com/XTLS/Xray-core</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://movie.douban.com/subject/1300555/">https://movie.douban.com/subject/1300555/</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Python多线程端口扫描器</title>
      <link>https://ramsayleung.github.io/zh/post/2017/port_scanner/</link>
      <pubDate>Sun, 19 Mar 2017 00:00:00 -0700</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2017/port_scanner/</guid>
      <description>An introduction about port scan</description>
      <content:encoded><![CDATA[<p>近两日，闲来无事，就写了些端口扫描器，重温TCP/IP协议栈的部分原理。</p>
<h2 id="端口扫描器"><span class="section-num">1</span> 端口扫描器</h2>
<p>所谓的端口扫描器，其实是用来检测目标服务器有哪些端口开放所使用的工具，一般是管理员用来进行安全加固，检测是否有无意开放的端口；或者是恶意攻击的人员在进行攻击前的准备工作。</p>
<p>所以综述上下，端口扫描器是用来确定目标机器 (本地机器或者远程机器)的特定服务的可用性</p>
<h2 id="端口扫描原理"><span class="section-num">2</span> 端口扫描原理</h2>
<p>上面提到过，端口扫描器是用来确定目标机器的服务的可用性的；那么具体是怎么确定的呢？如果还没有答案的话，可以换个角度来思考这个问题。</p>
<p>假如你想确定邻居家的妹子是否在家，你会怎么办？这不简单么，问一下不就清楚了么？对阿，对于服务器的端口也可以适用这样的方法嘛。端口扫描的原理都是“问一下”，只是问的方法不一样而已，就好像你是决定直接过去敲邻居门，还是打电话过去一样，殊途同归，方法是没有对错的之分，差异只是方法的优劣。</p>
<h3 id="tcp连接扫描"><span class="section-num">2.1</span> TCP连接扫描</h3>
<p>这是最简单的一种方法，一般被称为连接扫描，即利用 <code>socket</code> 对目标机器进行连接尝试，如果能够成功建立三次握手连接，那就说明你用 <code>socket</code> 连接的端口是开放的；然后你就可以断开连接，扫描下一个目标端口了 (如果不断开连接，这就是一种 DDOS攻击了).</p>
<p>只不过TCP连接扫描不是很常用，不仅是因为容易被发现，而且你的IP地址也可能会被目标地址记录下来的(对于攻击者来说，隐藏身份是很重要的)</p>
<h4 id="代码解析"><span class="section-num">2.1.1</span> 代码解析：</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">scan</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">args</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">host</span><span class="p">,</span> <span class="n">port</span> <span class="o">=</span> <span class="n">args</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># Create a TCP socket and try to connect</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># AF_INET for ipv4,AF_INET6 for ipv6</span>
</span></span><span class="line"><span class="cl">        <span class="n">sock</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">sock</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">sock</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">timeout</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">error</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="kc">False</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>因为原理很简单，所以核心代码也是很简洁的，只是建立 <code>socket</code> 然后进行连接，如果连接不上，就很大几率说明端口是关闭的 (并不是绝对的，例如socket超时的异常可能就是因为网络异常，不一定是目标机器的缘故)</p>
<h3 id="syn扫描"><span class="section-num">2.2</span> SYN扫描</h3>
<p>再回顾一下TCP的三次握手：</p>
<h4 id="tcp三次握手"><span class="section-num">2.2.1</span> TCP三次握手</h4>
<ol>
<li>TCP建立连接时，首先客户端和服务器处于close状态。</li>
<li>然后客户端发送SYN同步位，此时客户端处于SYN-SEND状态，服务器处于lISTEN状态，当服务器收到SYN以后，向客户端发送同步位SYN和确认码ACK，然后服务器变为SYN-RCVD，客户端收到服务器发来的SYN和ACK 后，客户端的状态变成ESTABLISHED(已建立连接)，</li>
<li>客户端再向服务器发送ACK确认码，服务器接收到以后也变成ESTABLISHED。然后服务器客户端开始数据传输</li>
</ol>
<p>如图：</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-61b3c" hidden>
    <label for="zoomCheck-61b3c">
    
    
    <img class="zoomCheck" loading="lazy" src="https://sites.google.com/a/javainterview.net/question/_/rsrc/1425457816649/misc/tcp-ip/3-way-handshake-Intro-to-transport-layer-The-internetworking-Part2.gif"
         alt="Figure 1: 图来源于Google"/> 
    
    
    </label><figcaption>
            <p><span class="figure-number">Figure 1: </span>图来源于Google</p>
        </figcaption>
</figure>

<h4 id="syn扫描原理"><span class="section-num">2.2.2</span> SYN扫描原理</h4>
<!--list-separator-->
<ol>
<li>
<p>SYN+ACK</p>
<p>那么现在再回到SYN扫描上来.如果在发送第一次握手的 <code>SYN</code> flag 时，目标机器回复了=SYN+ACK=,这不就说明笔者发送的TCP包中的目标端口是开放的么！如果不开放，服务器就不会期待第三次握手了，也不会给笔者发送 <code>SYN+ACK</code> 了；如图：</p>

    <figure>
        
        
        <input type="checkbox" id="zoomCheck-69283" hidden>
        <label for="zoomCheck-69283">
        
        
        <img class="zoomCheck" loading="lazy" src="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/uploads/101613_1123_PortScannin3.jpg"/> 
        
        
        </label>
    </figure>

<p>图来自 <a href="http://resources.infosecinstitute.com/port-scanning-using-scapy/">http://resources.infosecinstitute.com/port-scanning-using-scapy/</a></p>
</li>
</ol>
<!--list-separator-->
<ol start="2">
<li>
<p>RST</p>
<p>如果第二次握手的时候，目标机器回复的不是 <code>SYN+ACK</code>, 而是 <code>RST</code>, 就说明TCP包中的目标端口在目标机器上是关闭的；如图</p>

    <figure>
        
        
        <input type="checkbox" id="zoomCheck-6b7be" hidden>
        <label for="zoomCheck-6b7be">
        
        
        <img class="zoomCheck" loading="lazy" src="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/uploads/101613_1123_PortScannin4.jpg"/> 
        
        
        </label>
    </figure>

<p>图来自 <a href="http://resources.infosecinstitute.com/port-scanning-using-scapy/">http://resources.infosecinstitute.com/port-scanning-using-scapy/</a></p>
</li>
</ol>
<!--list-separator-->
<ol start="3">
<li>
<p>Filtered</p>
<p>上面提及了目标端口的开放和关闭两种状态，那么，还有没有其他状态呢？什么，还有其他状态？</p>
<p>如果就SYN扫描而言，就还有 filtered被过滤之一说，如果还有加上其他扫描技术， 就还有其他状态了。</p>
<p>回到SYN扫描，当返回的不是服务器想建立第二次握手的包，而是ICMP的包就有可能被过滤，例如响应信息是ICMP错误信息类型3代码3(无法到达目标：端口不可达)这里出现的端口不可达，可能就是被防火墙过滤了，如果是类型3代码13(无法到达目标：通信被管理员禁止),那也是被过滤了。</p>
<p>更多信息就要查询<a href="https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml">ICMP的官方文档</a> 了</p>
</li>
</ol>
<h4 id="代码解释"><span class="section-num">2.2.3</span> 代码解释</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">scan</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">args</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">dst_ip</span><span class="p">,</span> <span class="n">dst_port</span> <span class="o">=</span> <span class="n">args</span>
</span></span><span class="line"><span class="cl">    <span class="n">src_port</span> <span class="o">=</span> <span class="n">RandShort</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">answered</span><span class="p">,</span> <span class="n">unanswered</span> <span class="o">=</span> <span class="n">sr</span><span class="p">(</span><span class="n">IP</span><span class="p">(</span><span class="n">dst</span><span class="o">=</span><span class="n">dst_ip</span><span class="p">)</span> <span class="o">/</span> <span class="n">TCP</span><span class="p">(</span><span class="n">sport</span><span class="o">=</span><span class="n">src_port</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                   <span class="n">dport</span><span class="o">=</span><span class="n">dst_port</span><span class="p">,</span> <span class="n">flags</span><span class="o">=</span><span class="s2">&#34;S&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                          <span class="n">timeout</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">timeout</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">packet</span> <span class="ow">in</span> <span class="n">unanswered</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">packet</span><span class="o">.</span><span class="n">dst</span><span class="p">,</span> <span class="n">packet</span><span class="o">.</span><span class="n">dport</span><span class="p">,</span> <span class="s2">&#34;Filtered&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">send</span><span class="p">,</span> <span class="n">recv</span><span class="p">)</span> <span class="ow">in</span> <span class="n">answered</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">recv</span><span class="o">.</span><span class="n">haslayer</span><span class="p">(</span><span class="n">TCP</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">            <span class="n">flags</span> <span class="o">=</span> <span class="n">recv</span><span class="o">.</span><span class="n">getlayer</span><span class="p">(</span><span class="n">TCP</span><span class="p">)</span><span class="o">.</span><span class="n">sprintf</span><span class="p">(</span><span class="s2">&#34;</span><span class="si">%f</span><span class="s2">lags%&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span><span class="p">(</span><span class="n">flags</span> <span class="o">==</span> <span class="s2">&#34;SA&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># set RST to server in case of ddos attack</span>
</span></span><span class="line"><span class="cl">                <span class="n">send_rst</span> <span class="o">=</span> <span class="n">sr</span><span class="p">(</span><span class="n">IP</span><span class="p">(</span><span class="n">dst</span><span class="o">=</span><span class="n">dst_ip</span><span class="p">)</span> <span class="o">/</span> <span class="n">TCP</span><span class="p">(</span><span class="n">sport</span><span class="o">=</span><span class="n">src_port</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                   <span class="n">dport</span><span class="o">=</span><span class="n">dst_port</span><span class="p">,</span> <span class="n">flags</span><span class="o">=</span><span class="s2">&#34;R&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                          <span class="n">timeout</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">timeout</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">dst_ip</span><span class="p">,</span> <span class="n">dst_port</span><span class="p">,</span> <span class="s2">&#34;Open&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="k">elif</span> <span class="p">(</span><span class="n">flags</span> <span class="o">==</span> <span class="s2">&#34;RA&#34;</span> <span class="ow">or</span> <span class="n">flags</span> <span class="o">==</span> <span class="s2">&#34;R&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">dst_ip</span><span class="p">,</span> <span class="n">dst_port</span><span class="p">,</span> <span class="s2">&#34;Closed&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span><span class="p">(</span><span class="n">recv</span><span class="o">.</span><span class="n">haslayer</span><span class="p">(</span><span class="n">ICMP</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">            <span class="n">icmp_type</span> <span class="o">=</span> <span class="n">recv</span><span class="o">.</span><span class="n">getlayer</span><span class="p">(</span><span class="n">ICMP</span><span class="p">)</span><span class="o">.</span><span class="n">type</span>
</span></span><span class="line"><span class="cl">            <span class="n">icmp_code</span> <span class="o">=</span> <span class="n">recv</span><span class="o">.</span><span class="n">getlayer</span><span class="p">(</span><span class="n">ICMP</span><span class="p">)</span><span class="o">.</span><span class="n">code</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span><span class="p">(</span><span class="n">icmp_type</span> <span class="o">==</span> <span class="n">ICMP_TYPE_DESTINATION_UNREACHABLE</span> <span class="ow">and</span> <span class="n">icmp_code</span> <span class="ow">in</span> <span class="n">ICMP_CODE</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">dst_ip</span><span class="p">,</span> <span class="n">dst_port</span><span class="p">,</span> <span class="s2">&#34;Filtered&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">dst_ip</span><span class="p">,</span> <span class="n">dst_port</span><span class="p">,</span> <span class="s2">&#34;CHECK&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>核心代码很简单，就是发送建立连接的握手请求，然后根据不同的返回结果判断不同的状态。</p>
<p>如果端口确定是开放，那就发送 <code>R</code> flag给目标机器结束握手 (如果不结束握手的话，那就是DDOS,这也是DDOS最常用的手段); 因为这次不是使用操作系统原生的 <code>socket</code>, 而是自行构造发送 IP数据包，所以需要使用一个很强大的构造 操作各种数据包的工具 &ndash; <a href="https://github.com/phaethon/scapy">scapy</a></p>
<p>(顺便说一下，如果在Windows下安装 scapy,需要非常多的步骤，如果是Unix/Linux,只需几行命令:) )</p>
<h2 id="后话"><span class="section-num">3</span> 后话</h2>
<p>简单的扫描器就已经完成了，加上多线程的功能提高性能。</p>
<p>很想吐嘈一下，真的对Python 的多线程恨铁不成钢，只好换成多进程；也给 Python2 Python3 API的改变折腾得够呛，不禁让笔者怀念起Java:(</p>
<p>其实正如笔者开头所言的，你确定隔壁家妹子是否在家的方法有很多，你扫描端口的方法也有很多：例如 XMAS scan(TCP圣诞树扫描), FIN scan,Null scan, ACK scan, Window scan, UDP scan等。</p>
<p>当然你如果不想针对各种扫描都写一个扫描器，你可以使用 <a href="https://nmap.org/">nmap</a> 这个地球最强大的扫描器 (没有之一). 在Python也已经有与nmap整合的强大的包 <a href="http://xael.org/pages/python-nmap-en.html">python-nmap</a></p>
<p>扫描器完整代码地址 <a href="https://github.com/ramsayleung/PortScanner">https://github.com/ramsayleung/PortScanner</a></p>
<hr>
<p>参考</p>
<ul>
<li><a href="http://resources.infosecinstitute.com/port-scanning-using-scapy/">http://resources.infosecinstitute.com/port-scanning-using-scapy/</a></li>
</ul>
<div center class="qr-container">
<img src="/ox-hugo/qrcode_gh_e06d750e626f_1.jpg" alt="qrcode_gh_e06d750e626f_1.jpg" width="160px" height="160px" center="t" class="qr-container" />
公号同步更新，欢迎关注👻
</div>
]]></content:encoded>
    </item>
  </channel>
</rss>

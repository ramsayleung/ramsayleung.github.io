<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>python on 自由庄园</title>
    <link>https://ramsayleung.github.io/zh/tags/python/</link>
    <description>Recent content in python on 自由庄园</description>
    <image>
      <title>自由庄园</title>
      <url>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>See this site&#39;s source code [here](https://github.com/ramsayleung/ramsayleung.github.io), licensed under GPLv3 ·</copyright>
    <lastBuildDate>Sat, 12 Oct 2024 00:35:00 -0700</lastBuildDate><atom:link href="https://ramsayleung.github.io/zh/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>测试技能进阶(二): Parameterized Tests</title>
      <link>https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%BA%8C_parameterized_tests/</link>
      <pubDate>Sat, 12 Oct 2024 00:35:00 -0700</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%BA%8C_parameterized_tests/</guid>
      <description>1 前言 测试技巧具有普适性，大多是与语言无关的，只是不同语言的生态可能对测试技术的支持各不一样， 比如Python和Java，基本什么库都有，而</description>
      <content:encoded><![CDATA[<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>测试技巧具有普适性，大多是与语言无关的，只是不同语言的生态可能对测试技术的支持各不一样， <br/>
比如Python和Java，基本什么库都有，而像C++，有顺手的单元测试和Mock库能用就很不错了。 <br/></p>
<p>因为Python比较适合写POC(proof of concept), 而我日常工作的语言是Java+Rust，所以我会穿插着引用这三种语言。 <br/></p>
<h2 id="parameterized-test"><span class="section-num">2</span> Parameterized Test</h2>
<p>在介绍 Parameterized Test 之前，让我们先来看个简单的计算价格与折扣的函数（实际的生产代码肯定会更复杂，但是背后的思路是相通的）： <br/></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">calculate_discount</span><span class="p">(</span><span class="n">price</span><span class="p">,</span> <span class="n">discount_percentage</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">price</span> <span class="o">-</span> <span class="p">(</span><span class="n">price</span> <span class="o">*</span> <span class="n">discount_percentage</span> <span class="o">/</span> <span class="mi">100</span><span class="p">)</span>
</span></span></code></pre></div><p>针对这个函数，我们可能会编写多个 test case, 比如价格是 100, 给10%的折扣; 价格是200, 给20%的折扣; 价格是50, 给0的折扣；还有异常case，比如价格为负数的时候，或者折扣为负数的时候. <br/></p>
<h3 id="单个-test-case"><span class="section-num">2.1</span> 单个 test case</h3>
<p>对于这么多的 case, 一个简单粗暴的方式就是把所有的 case 都写在一个 test case 里： <br/></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pytest</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">test_calculate_discount</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># happy path</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">calculate_discount</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span> <span class="o">==</span> <span class="mi">90</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">calculate_discount</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span> <span class="o">==</span> <span class="mi">160</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">calculate_discount</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="mi">50</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># unhappy path</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># assert calculate_discount(-2, 10)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># assert calculate_discount(10, -2)</span>
</span></span></code></pre></div><p>但是这样的做法一般是不推荐的，Best Practice是一个 test case 只测一种情况，因为如果一个 test case 包含多个测试条件，如果 test case fail 了，那么不看源码或者堆栈，一般还看不出是什么 case 失败了，不好排查。 <br/></p>
<h3 id="多个-test-case"><span class="section-num">2.2</span> 多个 test case</h3>
<p>推荐做法就是每个测试条件定个单独的 test case。 <br/></p>
<p>另外我们通过test case发现上面的代码没有处理异常情况，我们现在要优化下我们的代码，增加异常处理逻辑(这个就是TDD所推崇的开发哲学, test case 先行，通过test case发现问题，让test case fail掉，然后修正业务逻辑，test case再运行通过). <br/></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pytest</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">calculate_discount</span><span class="p">(</span><span class="n">price</span><span class="p">,</span> <span class="n">discount_percentage</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">price</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Price must be greater than zero: </span><span class="si">{</span><span class="n">price</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">discount_percentage</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Discount_percentage must be greater than zero: </span><span class="si">{</span><span class="n">discount_percentage</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">price</span> <span class="o">-</span> <span class="p">(</span><span class="n">price</span> <span class="o">*</span> <span class="n">discount_percentage</span> <span class="o">/</span> <span class="mi">100</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">TestClassCalculateDiscount</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># happy path</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">test_calculate_discount_with_10_discount_percentage</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">assert</span> <span class="n">calculate_discount</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span> <span class="o">==</span> <span class="mi">90</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">test_calculate_discount_with_20_discount_percentage</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">assert</span> <span class="n">calculate_discount</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span> <span class="o">==</span> <span class="mi">160</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">test_calculate_discount_with_0_discount_percentage</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">assert</span> <span class="n">calculate_discount</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="mi">50</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># unhappy path</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">test_calculate_discount_with_negative_price</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="n">pytest</span><span class="o">.</span><span class="n">raises</span><span class="p">(</span><span class="ne">ValueError</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="k">assert</span> <span class="n">calculate_discount</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">test_calculate_discount_with_negative_discount</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="n">pytest</span><span class="o">.</span><span class="n">raises</span><span class="p">(</span><span class="ne">ValueError</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="k">assert</span> <span class="n">calculate_discount</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">)</span>
</span></span></code></pre></div><p>代码的确是整洁易读了，但话虽如此，我们要多写了很多的 test case. <br/></p>
<p>如果 <code>calculate_discount</code> 变得更复杂，我们要写的 test case 肯定是更多更复杂，总不能都 copy-paste test case吧。 <br/></p>
<h3 id="parameterized-test"><span class="section-num">2.3</span> Parameterized Test</h3>
<p>话题就回到 Parameterized Test 了, 它就是用来解决这个问题的，它可以让你用不同的测试数据集会运行相同的测试逻辑. <br/>
还是以上面的代码为例子，你会发现 <code>test_calculate_discount_with_10_discount_percentage</code> 和 <code>test_calculate_discount_with_20_discount_percentage</code> 的测试逻辑是完全一样的，但只是数据集不同，所以我们就可以使用 Parameterized Test 来优化： <br/></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pytest</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">TestClassCalculateDiscount</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Parameterized test for valid cases (happy path)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@pytest.mark.parametrize</span><span class="p">(</span><span class="s2">&#34;price, discount, expected&#34;</span><span class="p">,</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">90</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">160</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">50</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">test_calculate_discount</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">discount</span><span class="p">,</span> <span class="n">expected</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">assert</span> <span class="n">calculate_discount</span><span class="p">(</span><span class="n">price</span><span class="p">,</span> <span class="n">discount</span><span class="p">)</span> <span class="o">==</span> <span class="n">expected</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Parameterized test for invalid cases (unhappy path)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@pytest.mark.parametrize</span><span class="p">(</span><span class="s2">&#34;price, discount&#34;</span><span class="p">,</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span>   <span class="c1"># Invalid price</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">)</span>    <span class="c1"># Invalid discount percentage</span>
</span></span><span class="line"><span class="cl">    <span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">test_calculate_discount_invalid_cases</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">discount</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="n">pytest</span><span class="o">.</span><span class="n">raises</span><span class="p">(</span><span class="ne">ValueError</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">calculate_discount</span><span class="p">(</span><span class="n">price</span><span class="p">,</span> <span class="n">discount</span><span class="p">)</span>
</span></span></code></pre></div><p>其实就是把测试逻辑和数据进行了分离，后面需要测试新的数据集，只需要向数据集里面添加数据即可。 <br/></p>
<p>由此可见，使用 Parameterized Test 有几个显而易见的好处： <br/></p>
<p>首先是减少代码冗余，不需要类似的代码 copy-paste 很多次；其次是方便提到测试覆盖率，这个在上面的例子可能不明显，我们可以再修改一下 <code>calculate_discount</code> 函数，增加两个分支： <br/></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">calculate_discount</span><span class="p">(</span><span class="n">price</span><span class="p">,</span> <span class="n">discount_percentage</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">price</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Price must be greater than zero: </span><span class="si">{</span><span class="n">price</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">discount_percentage</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Discount_percentage must be greater than zero: </span><span class="si">{</span><span class="n">discount_percentage</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">price</span> <span class="o">&gt;</span> <span class="mi">50000</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">price</span> <span class="o">-</span> <span class="p">(</span><span class="n">price</span> <span class="o">*</span> <span class="p">(</span><span class="n">discount_percentage</span> <span class="o">*</span> <span class="mf">1.15</span><span class="p">)</span> <span class="o">/</span> <span class="mi">100</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">    <span class="k">elif</span> <span class="n">price</span> <span class="o">&gt;</span> <span class="mi">100000</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">price</span> <span class="o">-</span> <span class="p">(</span><span class="n">price</span> <span class="o">*</span> <span class="p">(</span><span class="n">discount_percentage</span> <span class="o">*</span> <span class="mf">1.18</span><span class="p">)</span> <span class="o">/</span> <span class="mi">100</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">price</span> <span class="o">-</span> <span class="p">(</span><span class="n">price</span> <span class="o">*</span> <span class="n">discount_percentage</span> <span class="o">/</span> <span class="mi">100</span><span class="p">)</span>
</span></span></code></pre></div><p>价格超过50000, 在已有折扣基础上，再额外给折扣的15%作为折扣；价格超过100000，在已有折扣的基础上，再额外给折扣的18%作为折扣. 如果要覆盖这两个新的分支，只需要在数据集上添加大于50000 和大于100000的数据集，就可以直接覆盖到了. <br/></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nd">@pytest.mark.parametrize</span><span class="p">(</span><span class="s2">&#34;price, discount, expected&#34;</span><span class="p">,</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">90</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">160</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">50</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="mi">50001</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mf">44250.885</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="mi">100001</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mf">88500.885</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">test_calculate_discount</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">discount</span><span class="p">,</span> <span class="n">expected</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">calculate_discount</span><span class="p">(</span><span class="n">price</span><span class="p">,</span> <span class="n">discount</span><span class="p">)</span> <span class="o">==</span> <span class="n">expected</span>
</span></span></code></pre></div><p>然后测试这段代码的时候，我又发现一个新的问题，这里的价格变成浮点数后，没有作小数点后几位的取整。 <br/></p>
<p>（对于这样简单的函数，也能不断地通过写 test case 发现新问题，这无疑就是 test case 最大的价值所在了） <br/></p>
<p>使用 Parameterized Test 还可以提高测试代码的可读性和可维护性，这部分内容还是显而易见的，就不展开了。 <br/></p>
<h3 id="junit"><span class="section-num">2.4</span> Junit</h3>
<p>在Java的测试生态中，Junit是毫无疑问的龙头大哥，而在Junit5 ，Junit也引入了对 Parameterized Test 的支持，通过 <code>@ParameterizedTest</code> 这个枚举就可以将某个 test case 标注成 Parameterized Test, 通过 <code>@ValueSource</code> 传入待测试数据集： <br/></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Numbers</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isOdd</span><span class="o">(</span><span class="kt">int</span> <span class="n">number</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">number</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@ParameterizedTest</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ValueSource</span><span class="o">(</span><span class="n">ints</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="o">-</span><span class="mi">3</span><span class="o">,</span> <span class="mi">15</span><span class="o">,</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">})</span> <span class="c1">// six numbers
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="nf">isOdd_ShouldReturnTrueForOddNumbers</span><span class="o">(</span><span class="kt">int</span> <span class="n">number</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">assertTrue</span><span class="o">(</span><span class="n">Numbers</span><span class="o">.</span><span class="na">isOdd</span><span class="o">(</span><span class="n">number</span><span class="o">));</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这只是最基本的用法，Junit还支持通过函数，枚举，CSV格式甚至文件来传入待测试数据集，可谓是包罗万有，具体的用法可以参考这篇文章：<a href="https://www.baeldung.com/parameterized-tests-junit-5">Guide to JUnit 5 Parameterized Tests</a> 和 <a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests">Junit官方文档</a> <br/></p>
<h3 id="rstest-and-test-case"><span class="section-num">2.5</span> rstest &amp; test_case</h3>
<p>Rust 也有对Parameterized Test支持的库，一个就是 <a href="https://github.com/la10736/rstest"><code>rstest</code></a>, 另外一个就是 <a href="https://github.com/frondeus/test-case"><code>test_case</code></a>，两者都对 Parameterized Test 有较好的支持，在公司的代码库中，两者我都见过有项目在使用，而我在工作中使用的是 <code>rstest</code>, 因为它的功能更加强大，维护者也更加活跃. <br/></p>
<h2 id="总结"><span class="section-num">3</span> 总结</h2>
<p>在了解 Parameterized Test 之前，我的每个CR基本都有 test case 覆盖，但是坐我旁边 Principle Engineer 巨佬 review 我代码的时候，总会说我的 test case 太 verbose 和 heavy, 我在想test case多还不好嘛，我的 code coverage 都超过80%了. <br/></p>
<p>然而他的意思是，不是说我的 test case 没有覆盖到代码，我100行的变更，附上200行的 test case 也没有问题，只不过我的test case大多只是数据不一样，测试逻辑基本相同，能否抽象下，减少下code redundancy, 然后就强烈建议我去看下 <code>Parameterized Test</code> 以及 <code>Property Based Test</code>. <br/></p>
<p>大佬的确一针见血，我的 test case 大多是复制已有的 test case, 修改下函数名，再加加减减改下数据集。 <br/></p>
<p>经他指点，在了解 <code>Parameterized Test</code> 之后，我的确再也没有复制 test case，每次CR的test case也更精简了，CR也更容易通过了. <br/></p>
<p>而他提到的 <code>Property Based Test</code> 则是一项更强大的测试技术，下回再分解了。 <br/></p>
<h2 id="参考"><span class="section-num">4</span> 参考</h2>
<ul>
<li><a href="https://www.baeldung.com/parameterized-tests-junit-5">Guide to JUnit 5 Parameterized Tests</a> <br/></li>
<li><a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests">Junit: Parameterized Tests</a> <br/></li>
<li><a href="https://docs.pytest.org/en/stable/example/parametrize.html">Parametrizing tests</a> <br/></li>
<li><a href="https://github.com/la10736/rstest">rstest</a> <br/></li>
<li><a href="https://github.com/frondeus/test-case">test_case</a> <br/></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>用python 来操控 sqlite3</title>
      <link>https://ramsayleung.github.io/zh/post/2017/python_with_sqlite3/</link>
      <pubDate>Sun, 12 Nov 2017 07:05:00 +0800</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2017/python_with_sqlite3/</guid>
      <description>python 与嵌入式关系数据库 sqlite3的邂逅 SQLite 是一个非常优秀的嵌入式数据库，非常轻量，可以与 Mysql, PostgreSQL 这样的 大型数据库互补使用. 而 Python 标准库中的 sqlite3 模块实</description>
      <content:encoded><![CDATA[<p>python 与嵌入式关系数据库 sqlite3的邂逅</p>
<p><code>SQLite</code> 是一个非常优秀的嵌入式数据库，非常轻量，可以与 Mysql, PostgreSQL 这样的 大型数据库互补使用. 而 Python 标准库中的 <code>sqlite3</code> 模块实现了兼容 SQLite 的 <a href="https://www.python.org/dev/peps/pep-0249/">Python DB-API 2.0</a>接口, 因此我们可以很方 便地使用 <code>sqlite3</code> 模块来操作 <code>SQLite</code></p>
<h2 id="入门"><span class="section-num">1</span> 入门</h2>
<h3 id="创建数据库"><span class="section-num">1.1</span> 创建数据库</h3>
<p><code>SQLite</code> 数据库是存储在文件系统的单个文件上的，所以如果数据库文件不存在，那么在第一次访问这个数据库，就会创建相应的数据库文件。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sqlite3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">db_filename</span> <span class="o">=</span> <span class="s1">&#39;sqlite3_demo.db&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">db_exist</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">db_filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">conn</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">db_filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">db_exist</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Database exists&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Database does not exist&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">conn</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span></code></pre></div><p>上面的例子会在连接数据库之前检查一下数据库文件是否存在，然后使用 <code>connect()</code> 函数连接数据库。</p>
<p>你在执行该代码之前查看一下当前目录的话，如果不存在 <code>sqlite3_demo.db</code> 的话，那么跑完这段代码，你应该会看到 <code>sqlite3_demo.db</code>
文件的.</p>
<p>这段代码本身是没有做多少事，我只是用它来阐述一下 <code>SQLite</code> 的原理</p>
<h3 id="创建表"><span class="section-num">1.2</span> 创建表</h3>
<p>那么，现在，让我们用 <code>SQLite</code> 来做点数据库的本份工作。先创建一张表，接下来的操作都会围绕着这张表进行。</p>
<p><code>user.sql</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">create</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="k">role</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">name</span><span class="w">         </span><span class="nb">text</span><span class="w"> </span><span class="k">primary</span><span class="w"> </span><span class="k">key</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">description</span><span class="w">  </span><span class="nb">text</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">create</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="k">user</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">id</span><span class="w">           </span><span class="nb">integer</span><span class="w"> </span><span class="k">primary</span><span class="w"> </span><span class="k">key</span><span class="w"> </span><span class="n">autoincrement</span><span class="w"> </span><span class="k">not</span><span class="w"> </span><span class="k">null</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">name</span><span class="w">         </span><span class="nb">text</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">phone_number</span><span class="w"> </span><span class="nb">integer</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">birthday</span><span class="w">     </span><span class="nb">date</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">role</span><span class="w">      </span><span class="nb">text</span><span class="w"> </span><span class="k">not</span><span class="w"> </span><span class="k">null</span><span class="w"> </span><span class="k">references</span><span class="w"> </span><span class="k">role</span><span class="p">(</span><span class="n">name</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>然后使用 <code>Connection</code> 对象的 <code>executescript()</code> 函数来创建表以及插入对应的数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sqlite3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">db_filename</span> <span class="o">=</span> <span class="s1">&#39;sqlite3_demo.db&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">schema_filename</span> <span class="o">=</span> <span class="s1">&#39;user.sql&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">db_exists</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">db_filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">db_filename</span><span class="p">)</span> <span class="k">as</span> <span class="n">conn</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">db_exists</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Creating schema&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">schema_filename</span><span class="p">,</span> <span class="s1">&#39;rt&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	    <span class="n">schema</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="n">conn</span><span class="o">.</span><span class="n">executescript</span><span class="p">(</span><span class="n">schema</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Inserting initial data&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">conn</span><span class="o">.</span><span class="n">executescript</span><span class="p">(</span><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">	insert into role (name,description)
</span></span></span><span class="line"><span class="cl"><span class="s2">	values (&#39;student&#39;,&#39;This is a student&#39;);
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">	insert into role (name,description)
</span></span></span><span class="line"><span class="cl"><span class="s2">	values (&#39;teacher&#39;,&#39;This is a teacher&#39;);
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">	insert into user (id,name,phone_number,birthday,role)
</span></span></span><span class="line"><span class="cl"><span class="s2">	values (1,&#39;Samray&#39;,12345678,&#39;2017-11-10&#39;,&#39;student&#39;);
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">	insert into user (id,name,phone_number,birthday,role)
</span></span></span><span class="line"><span class="cl"><span class="s2">	values (2,&#39;Paul&#39;,3231546,&#39;2017-11-11&#39;,&#39;student&#39;);
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">	insert into user (id,name,phone_number,birthday,role)
</span></span></span><span class="line"><span class="cl"><span class="s2">	values (3,&#39;Trump&#39;,13254768,&#39;2017-11-12&#39;,&#39;teacher&#39;);
</span></span></span><span class="line"><span class="cl"><span class="s2">			   &#34;&#34;&#34;</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="检索数据"><span class="section-num">1.3</span> 检索数据</h3>
<p>如果想要使用检索存储在 <code>user</code> 表中的数据，那么就需要从数据库连接对象 <code>Connection</code> 中创建一个 <code>Cursor</code>对象。</p>
<p>而<code>Cursor</code> 对象负责与数据库进行交互并获取 数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sqlite3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">db_filename</span> <span class="o">=</span> <span class="s1">&#39;sqlite3_demo.db&#39;</span>
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">db_filename</span><span class="p">)</span> <span class="k">as</span> <span class="n">conn</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    select id,name,phone_number,birthday from user
</span></span></span><span class="line"><span class="cl"><span class="s2">    where role=&#39;student&#39;
</span></span></span><span class="line"><span class="cl"><span class="s2">		   &#34;&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">cursor</span><span class="o">.</span><span class="n">fetchall</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">	<span class="nb">id</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">phone_number</span><span class="p">,</span> <span class="n">birthday</span> <span class="o">=</span> <span class="n">row</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">{:2d}</span><span class="s1"> </span><span class="si">{}</span><span class="s1"> </span><span class="si">{:&lt;10}</span><span class="s1"> [</span><span class="si">{:&lt;8}</span><span class="s1">]&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nb">id</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">phone_number</span><span class="p">,</span> <span class="n">birthday</span><span class="p">))</span>
</span></span></code></pre></div><p><code>SQLite3</code> 数据库的查询分成两步。首先，使用 <code>Cursor</code> 对象的 <code>execute()</code> 对象执行查询语句，告诉数据库引擎我们需要什么样的数据，然后，使用 <code>fetchall()</code> 函数把数据集从数据库的返回结果中取出来。</p>
<p>返回结果是包含着一系列 <code>tuple</code> 的列表，而<code>tuple</code> 中对应着的数据就是 <code>select</code> 语句指定返回的字段值。</p>
<p><code>fetchall()</code>函数是把所有符合 条件的结果一次性返回，如果需要的话，我们可以使用<code>fetchone()</code>函数返回单条记录， 或者使用<code>fetchmany()</code>返回固定数量的记录</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sqlite3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">db_filename</span> <span class="o">=</span> <span class="s1">&#39;sqlite3_demo.db&#39;</span>
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">db_filename</span><span class="p">)</span> <span class="k">as</span> <span class="n">conn</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    select name, description from role
</span></span></span><span class="line"><span class="cl"><span class="s2">    where name=&#39;teacher&#39;
</span></span></span><span class="line"><span class="cl"><span class="s2">		   &#34;&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span><span class="p">,</span> <span class="n">description</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">.</span><span class="n">fetchone</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Role details for </span><span class="si">{}</span><span class="s1"> (</span><span class="si">{}</span><span class="s1">) </span><span class="se">\n</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">description</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    select id,name,phone_number,birthday from user
</span></span></span><span class="line"><span class="cl"><span class="s2">    where role=&#39;student&#39;
</span></span></span><span class="line"><span class="cl"><span class="s2">		   &#34;&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;/nNext 10 tasks:&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">cursor</span><span class="o">.</span><span class="n">fetchmany</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">	<span class="nb">id</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">phone_number</span><span class="p">,</span> <span class="n">birthday</span> <span class="o">=</span> <span class="n">row</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">{:2d}</span><span class="s1"> </span><span class="si">{}</span><span class="s1"> </span><span class="si">{:&lt;10}</span><span class="s1"> [</span><span class="si">{:&lt;8}</span><span class="s1">]&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">	    <span class="nb">id</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">phone_number</span><span class="p">,</span> <span class="n">birthday</span><span class="p">))</span>
</span></span></code></pre></div><p>使用 <code>fetchmany()</code> 函数需要注意的是，当你指定的数量超过了符合条件的全部记录的数量的时候，<code>fetchmany()</code>只会返回全部记录的数量。</p>
<p>例如上面的代码里面，我想要 <code>fetchmany()</code> 返回10条记录，但是我的数据库只有2条符合条件的数据，而 <code>fetchmany()</code> 之后返回两条记录</p>
<h3 id="row-对象"><span class="section-num">1.4</span> Row 对象</h3>
<p>在先前的内容内，我已经提到，数据库返回的数据行都是以 <code>tuple</code>的形式返回的，所以 程序调用者必须知道查询语句字段的顺序，然后在<code>tuple</code>取出记录的时候把字段名和变量名一一对应上，例如
<code>name, description = cursor.fetchone()</code>.</p>
<p>查询语句中字段不多的时候或许还能记住，但是如果字段值多了起来，就很容易出现问题.</p>
<p>如果可以像<code>value=dict['key']</code> 那样使用键值对的形式获取数据，那样就方便很多.</p>
<p>而<code>sqlite3</code>也有为你提供这样便利的操作，诀窍就在使用 <code>Row</code> 对象。<code>sqlite3</code> 可以把查询结果映 射到 Row 对象，然后我们就可以通过<code>Row[字段名']</code> 这种方式来获取指定字段对应的值。</p>
<pre tabindex="0"><code class="language-nil" data-lang="nil">import sqlite3

db_filename = &#39;sqlite3_demo.db&#39;
with sqlite3.connect(db_filename) as conn:
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    cursor.execute(&#34;&#34;&#34;
    select name, description from role
    where name=&#39;teacher&#39;
		   &#34;&#34;&#34;)
    name, description = cursor.fetchone()
    print(&#39;Role details for {} ({}) \n&#39;.format(name, description))

    cursor.execute(&#34;&#34;&#34;
    select id,name,phone_number,birthday from user
    where role=&#39;student&#39;
		   &#34;&#34;&#34;)
    print(&#39;/nNext 10 tasks:&#39;)
    for row in cursor.fetchmany(10):
	print(&#39;{:2d} {} {:&lt;10} [{:&lt;8}]&#39;.format(
	    row[&#39;id&#39;], row[&#39;name&#39;], row[&#39;phone_number&#39;], row[&#39;birthday&#39;]))
</code></pre><p>通过指定 <code>Connection</code> 对象的 <code>row_factory</code> 属性就可以控制查询结果集返回的对象。</p>
<p>在上面的代码，我们使用了 <code>Row</code> 对象而不是 <code>tuple</code> 来获取数据，而程序的执行结果都是相同，但是程序的健壮性就得到了提高。</p>
<h3 id="在查询中使用变量"><span class="section-num">1.5</span> 在查询中使用变量</h3>
<p>我们上面的代码里面的查询语句都是硬编码的，不利于扩展。如果你希望可以使用更灵活的查询语句，你可能会去用字符串拼接查询语句。</p>
<p>但是这样的做法是不被提倡的，因为很容易出现安全问题，比如说 SQL 注入. 比较提倡的方式是在执行 <code>execute()</code> 函数的时候进行 变量替换，使用变量替换可以避免SQL注入攻击，因为那些不被信任的代码没办法被解析。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sqlite3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">db_filename</span> <span class="o">=</span> <span class="s1">&#39;sqlite3_demo.db&#39;</span>
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">db_filename</span><span class="p">)</span> <span class="k">as</span> <span class="n">conn</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">conn</span><span class="o">.</span><span class="n">row_factory</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">Row</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">sql</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    select id,name,phone_number,birthday from user
</span></span></span><span class="line"><span class="cl"><span class="s2">    where role=:role_name
</span></span></span><span class="line"><span class="cl"><span class="s2">		   &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">sql</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;role_name&#39;</span><span class="p">:</span> <span class="s1">&#39;student&#39;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;/nNext 10 tasks:&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">cursor</span><span class="o">.</span><span class="n">fetchmany</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">{:2d}</span><span class="s1"> </span><span class="si">{}</span><span class="s1"> </span><span class="si">{:&lt;10}</span><span class="s1"> [</span><span class="si">{:&lt;8}</span><span class="s1">]&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">	    <span class="n">row</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">],</span> <span class="n">row</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">],</span> <span class="n">row</span><span class="p">[</span><span class="s1">&#39;phone_number&#39;</span><span class="p">],</span> <span class="n">row</span><span class="p">[</span><span class="s1">&#39;birthday&#39;</span><span class="p">]))</span>
</span></span></code></pre></div><p>如上面的代码所示，使用 <code>:role_name</code> 占位符来表示 <code>role_name</code>变量, 然后在执行 SQL 语句的时候把 <code>role_name</code>的值传到 SQL 语句里面去。</p>
<h3 id="批量插入"><span class="section-num">1.6</span> 批量插入</h3>
<p>我们之前提到的插入都是使用 <code>execute()</code> 函数逐条插入的，但是 <code>sqlite3</code> 也是支持批 量插入的, 使用 <code>executemany()</code>函数就可以实现一次插入批量的数据，而函数的底层也 是对插入多条数据的循环进行了优化的，这些就无需调用者操心了。</p>
<p>user.csv</p>
<pre tabindex="0"><code class="language-csv" data-lang="csv">birthday,name,id,phone_number
2018-11-30,Torres,22,98564311
2010-08-10,Messi,12,81582236
2018-11-21,Saul,9,23564548
</code></pre><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">csv</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sqlite3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">db_filename</span> <span class="o">=</span> <span class="s1">&#39;sqlite3_demo.db&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">data_filename</span> <span class="o">=</span> <span class="s1">&#39;users.csv&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">SQL</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">insert into user (id,name,phone_number,birthday,role)
</span></span></span><span class="line"><span class="cl"><span class="s2">values (:id,:name,:phone_number,:birthday,&#39;student&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">data_filename</span><span class="p">,</span> <span class="s1">&#39;rt&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">csv_file</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">csv_reader</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">DictReader</span><span class="p">(</span><span class="n">csv_file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">db_filename</span><span class="p">)</span> <span class="k">as</span> <span class="n">conn</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="n">cursor</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="n">cursor</span><span class="o">.</span><span class="n">executemany</span><span class="p">(</span><span class="n">SQL</span><span class="p">,</span> <span class="n">csv_reader</span><span class="p">)</span>
</span></span></code></pre></div><p>我们从 csv 文件中批量导入数据，而Python 的标准库也内置了 CSV 的解析器，使用 <code>DictReader</code> 就是将 csv 文件解析成
<code>{'id':22,'birthday':'2018-11-30','name':'Torres','phone_number':98564311}</code>的形式
然后配合上面提到的命名变量，把所有数据插入到数据库。</p>
<h2 id="进阶"><span class="section-num">2</span> 进阶</h2>
<p>自定义数据库列类型 <code>SQLite</code> 的数据列原生支持整型(integer), 浮点数(floating point), 文本类型 (text), 并且由 <code>sqlite3</code> 转换成 Python内置的数据类型。</p>
<p>例如：数据库的整型可以转 换成Python 的 <code>int</code> 或者是 <code>long</code>, 具体取决于值的大小；文本类型默认会转换成 <code>str</code>
类型，除非我们修改了 <code>Connection</code> 对象的 <code>text_factory</code> 属性。</p>
<p>虽然 <code>SQLite</code> 内部支持的数据类型不多，但是得益于 <code>sqlite3</code> 的内置机制的支持，我们可以 定义程序自己的数据列。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sqlite3</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">db_filename</span> <span class="o">=</span> <span class="s1">&#39;sqlite3_demo.db&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">sql</span> <span class="o">=</span> <span class="s1">&#39;select id,name,birthday from user&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show_birthday</span><span class="p">(</span><span class="n">conn</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">conn</span><span class="o">.</span><span class="n">row_factory</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">Row</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">sql</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">row</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">.</span><span class="n">fetchone</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;birthday&#39;</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">{:&lt;8}</span><span class="s1"> </span><span class="si">{:&lt;10}</span><span class="s1"> </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">col</span><span class="p">,</span> <span class="n">row</span><span class="p">[</span><span class="n">col</span><span class="p">],</span> <span class="nb">type</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="n">col</span><span class="p">])))</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Without type detection:&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">db_filename</span><span class="p">)</span> <span class="k">as</span> <span class="n">conn</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">show_birthday</span><span class="p">(</span><span class="n">conn</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">With type detection:&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">db_filename</span><span class="p">,</span> <span class="n">detect_types</span><span class="o">=</span><span class="n">sqlite3</span><span class="o">.</span><span class="n">PARSE_DECLTYPES</span><span class="p">,)</span> <span class="k">as</span> <span class="n">conn</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">show_birthday</span><span class="p">(</span><span class="n">conn</span><span class="p">)</span>
</span></span></code></pre></div><p>如上面的代码所示，如果你想在Python 数据类型和 <code>SQLite</code> 数据列转换的时候使用 <code>SQLite</code> 原本不支持的类型，你可以在调用 <code>connect()</code> 函数的时候，传一个 <code>detect_types</code> 参数进去，而 <code>PARSE_DECLTYPES</code> 的意思是指转换成字段声明时候的类型， 比如 <code>birthday</code> 声明成 <code>datetime</code>类型，但是没有指定成 <code>PAESE_DECLTYPES</code> 的时候， 转换成 <code>str</code>, 指定后，转换成 <code>datetime</code>.</p>
<p>现在我们就来说说怎么定义自己的数据列类型:</p>
<p>我们需要注册两个函数，一个函数把 Python 对象转换成 <code>byte string</code> 存储到数据 库里面去，这个函数被称为 <code>adapter(适配器)</code>; 既然有从Python 对象转换到数据库存储 对象的函数，那么自然就有从数据库存储转换成 Python 对象的函数，这个函数被称为 <code>converter(转换器)</code>.</p>
<p>然后就需要使用 <code>register_adapter()</code> 函数将一个函数注册成 <code>adapter</code> 函数，至于<code>register_converter()</code>函数，也是同理可得了。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pickle</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sqlite3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">db_filename</span> <span class="o">=</span> <span class="s1">&#39;sqlite3_demo.db&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">adapter_func</span><span class="p">(</span><span class="n">obj</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Covert from python to sqlite3 representation
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;adapter_func(</span><span class="si">{}</span><span class="s1">)</span><span class="se">\n</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">obj</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">pickle</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">converter_func</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Convert from sqlite3 to python representation
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;converter_func(</span><span class="si">{}</span><span class="s1">)&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">pickle</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># custom type</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">MyObj</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">arg</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">	<span class="bp">self</span><span class="o">.</span><span class="n">arg</span> <span class="o">=</span> <span class="n">arg</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="s1">&#39;MyObj(</span><span class="si">{!r}</span><span class="s1">)&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">arg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Register functions</span>
</span></span><span class="line"><span class="cl"><span class="n">sqlite3</span><span class="o">.</span><span class="n">register_adapter</span><span class="p">(</span><span class="n">MyObj</span><span class="p">,</span> <span class="n">adapter_func</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">sqlite3</span><span class="o">.</span><span class="n">register_converter</span><span class="p">(</span><span class="s2">&#34;MyObj&#34;</span><span class="p">,</span> <span class="n">converter_func</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Create some objects to save</span>
</span></span><span class="line"><span class="cl"><span class="n">to_save</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">MyObj</span><span class="p">(</span><span class="s1">&#39;this is a value to save&#39;</span><span class="p">),),</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">MyObj</span><span class="p">(</span><span class="mi">42</span><span class="p">),)</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">db_filename</span><span class="p">,</span> <span class="n">detect_types</span><span class="o">=</span><span class="n">sqlite3</span><span class="o">.</span><span class="n">PARSE_DECLTYPES</span><span class="p">)</span> <span class="k">as</span> <span class="n">conn</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">conn</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">     create table if not exists obj (
</span></span></span><span class="line"><span class="cl"><span class="s2">	id    integer primary key autoincrement not null,
</span></span></span><span class="line"><span class="cl"><span class="s2">	data  MyObj
</span></span></span><span class="line"><span class="cl"><span class="s2">    )
</span></span></span><span class="line"><span class="cl"><span class="s2">		 &#34;&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span><span class="o">.</span><span class="n">executemany</span><span class="p">(</span><span class="s2">&#34;insert into obj (data) values (?)&#34;</span><span class="p">,</span> <span class="n">to_save</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Query the database for the objects just saved</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&#34;select id, data from obj&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">obj_id</span><span class="p">,</span> <span class="n">obj</span> <span class="ow">in</span> <span class="n">cursor</span><span class="o">.</span><span class="n">fetchall</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Retrieved&#39;</span><span class="p">,</span> <span class="n">obj_id</span><span class="p">,</span> <span class="n">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;  with type&#39;</span><span class="p">,</span> <span class="nb">type</span><span class="p">(</span><span class="n">obj</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">()</span>
</span></span></code></pre></div><p>上面的例子使用了Python 标准库的 <code>pickle</code> 模块，将一个 Python 对象转换成可以保存 到数据库的字符串，然后使用 <code>pickle</code>
把字符串转换成Python 对象。</p>
<p>这就基本实现了自定义的数据类型。不过我们自己实现的这种自定义数据类型是有局限的，我们只能把整个 Python 对象当作字符串来查询，而没办法针对 Python 对象的属性进行查询，如果你感兴趣的话，你可以看看 Python ORM
框架是怎么实现这些功能的。</p>
<h3 id="事务"><span class="section-num">2.1</span> 事务</h3>
<p>谈及关系型数据库，必不可少的一定是事务。对于事务的见解，网上的资料都已经浩如烟海 了，那么，就要我们直接来说一下 <code>SQLite</code> 事务的使用</p>
<h4 id="commit"><span class="section-num">2.1.1</span> commit</h4>
<p>对数据库的修改操作，无论是新增(insert) 还是更新 (update), 都需要调用 <code>commit()</code> 来保存。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sqlite3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">db_filename</span> <span class="o">=</span> <span class="s1">&#39;sqlite3_demo.db&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show_role</span><span class="p">(</span><span class="n">conn</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;select name, description from role&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">description</span> <span class="ow">in</span> <span class="n">cursor</span><span class="o">.</span><span class="n">fetchall</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;  &#39;</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">db_filename</span><span class="p">)</span> <span class="k">as</span> <span class="n">conn1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Before changes:&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">show_role</span><span class="p">(</span><span class="n">conn1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Insert in one cursor</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor1</span> <span class="o">=</span> <span class="n">conn1</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor1</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    insert into role (name, description)
</span></span></span><span class="line"><span class="cl"><span class="s2">    values (&#39;president&#39;,&#39;well, this is a president&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">		    &#34;&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">After changes in conn1:&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">show_role</span><span class="p">(</span><span class="n">conn1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 在没有提交事务之前，使用其它的数据库连接进行查询</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">Before commit:&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">db_filename</span><span class="p">)</span> <span class="k">as</span> <span class="n">conn2</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="n">show_role</span><span class="p">(</span><span class="n">conn2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 提交事务，然后使用另外的数据库连接进行查询</span>
</span></span><span class="line"><span class="cl">    <span class="n">conn1</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">After commit:&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">db_filename</span><span class="p">)</span> <span class="k">as</span> <span class="n">conn3</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="n">show_role</span><span class="p">(</span><span class="n">conn3</span><span class="p">)</span>
</span></span></code></pre></div><p><code>commit()</code> 函数的调用结果可以被使用若干个数据库连接的程序查询到，在第一个数据库连接插入了一行新的数据，另外两个数据库连接尝试读取到新插入的数据。</p>
<p>当 <code>show_role()</code> 函数在 <code>conn1</code> 提交事务之前被调用，返回结果就取决于调用 <code>show_role()</code> 是哪个数据连接了。</p>
<p>因为是通过 <code>conn1</code>来修改数据库，所以它可以看到修改后的数据，但是 <code>conn2</code>看不到。在提交事务之后(<code>commit()</code>) ,通过其他的数据库连接 (conn3)也可以看到修改结果了</p>
<h4 id="rollback"><span class="section-num">2.1.2</span> rollback</h4>
<p>未提交的修改可以通过调用<code>rollback()</code> 函数全部丢弃。通常 <code>commit()</code> 和 <code>rollback()</code> 函数都是在 <code>try-except</code> 语句块的不同地方被调用的，例如错误异常触发, 事务回滚(rollback)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sqlite3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">db_filename</span> <span class="o">=</span> <span class="s1">&#39;sqlite3_demo.db&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show_role</span><span class="p">(</span><span class="n">conn</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;select name, description from role&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">description</span> <span class="ow">in</span> <span class="n">cursor</span><span class="o">.</span><span class="n">fetchall</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;  &#39;</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">db_filename</span><span class="p">)</span> <span class="k">as</span> <span class="n">conn1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Before changes:&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">show_role</span><span class="p">(</span><span class="n">conn1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># Delete</span>
</span></span><span class="line"><span class="cl">	<span class="n">cursor1</span> <span class="o">=</span> <span class="n">conn1</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="n">cursor1</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">	delete from role where name=&#39;president&#39;
</span></span></span><span class="line"><span class="cl"><span class="s2">			&#34;&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">After delete&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">show_role</span><span class="p">(</span><span class="n">conn1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1"># 模拟接下来的操作出现了错误</span>
</span></span><span class="line"><span class="cl">	<span class="k">raise</span> <span class="ne">RuntimeError</span><span class="p">(</span><span class="s1">&#39;This is an error&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">error</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># 丢弃之前的修改</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Error:&#39;</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">conn1</span><span class="o">.</span><span class="n">rollback</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># 保存修改，提交事务</span>
</span></span><span class="line"><span class="cl">	<span class="n">conn1</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">After rollback:&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">show_role</span><span class="p">(</span><span class="n">conn1</span><span class="p">)</span>
</span></span></code></pre></div><p>在调用 <code>rollback()</code> 函数回滚事务之后，对数据库的修改都丢弃了。</p>
<h3 id="内存型数据库"><span class="section-num">2.2</span> 内存型数据库</h3>
<p>正如我们先前提到的，<code>SQLite</code> 是文件型数据库，它通过文件系统来管理数据库。但是 <code>SQLite</code> 也可以把整个数据库放到内存中去。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sqlite3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">schema_filename</span> <span class="o">=</span> <span class="s1">&#39;user.sql&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s1">&#39;:memory:&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">conn</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">conn</span><span class="o">.</span><span class="n">row_factory</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">Row</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Creating schema&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">schema_filename</span><span class="p">,</span> <span class="s1">&#39;rt&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="n">schema</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">conn</span><span class="o">.</span><span class="n">executescript</span><span class="p">(</span><span class="n">schema</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Inserting initial data&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">conn</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    insert into role (name,description)
</span></span></span><span class="line"><span class="cl"><span class="s2">    values (&#39;Admin&#39;, &#39;wow, administrator&#39;
</span></span></span><span class="line"><span class="cl"><span class="s2">	    )
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">	<span class="p">(</span><span class="s1">&#39;Xi&#39;</span><span class="p">,</span> <span class="mi">119</span><span class="p">,</span> <span class="s1">&#39;1910-10-03&#39;</span><span class="p">,</span><span class="s1">&#39;president&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">(</span><span class="s1">&#39;Jiang&#39;</span><span class="p">,</span> <span class="mi">110</span><span class="p">,</span> <span class="s1">&#39;2020-10-10&#39;</span><span class="p">,</span><span class="s1">&#39;president&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">(</span><span class="s1">&#39;Mao&#39;</span><span class="p">,</span> <span class="mi">10086</span><span class="p">,</span> <span class="s1">&#39;2010-10-17&#39;</span><span class="p">,</span><span class="s1">&#39;president&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">conn</span><span class="o">.</span><span class="n">executemany</span><span class="p">(</span><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    insert into user (name, phone_number, birthday,role)
</span></span></span><span class="line"><span class="cl"><span class="s2">    values (?, ?, ?,?)
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Dumping:&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">text</span> <span class="ow">in</span> <span class="n">conn</span><span class="o">.</span><span class="n">iterdump</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span></span></code></pre></div><p>想要把 <code>SQLite</code> 当作内存型数据库，只需在调用 <code>connect()</code> 函数的时候，使用 <code>:memory:</code> 参数而不是数据库文件的文件名。</p>
<p>需要注意的是，每一个 <code>connect()</code> 函数都会打开新建一个数据库实例，所以在一个数据库连接上的修改是不会影响其它的连接的。</p>
<p>而 <code>iterdump()</code> 函数会返回一个迭代器，输出一系列对数据库修改的 SQL.</p>
<p>最后需要注意的是，使用内存型的数据库是有风险的，要切记这一点。</p>
<h3 id="在sql-使用-python-函数"><span class="section-num">2.3</span> 在SQL 使用 Python 函数</h3>
<p><code>SQLite</code> 支持在查询的时候使用注册了的 Python函数的，这个特性就使我们在可以获取到 查询结果之前先对数据进行加工，或者调用Python 函数实现那些 纯SQL 力所不能及的功能</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">codecs</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sqlite3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">db_filename</span> <span class="o">=</span> <span class="s1">&#39;sqlite3_demo.db&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">encrypt</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Encrypting </span><span class="si">{!r}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">s</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">codecs</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s1">&#39;rot-13&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">decrypt</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Decrypting </span><span class="si">{!r}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">s</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">codecs</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s1">&#39;rot-13&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">db_filename</span><span class="p">)</span> <span class="k">as</span> <span class="n">conn</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">conn</span><span class="o">.</span><span class="n">create_function</span><span class="p">(</span><span class="s1">&#39;encrypt&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">encrypt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">conn</span><span class="o">.</span><span class="n">create_function</span><span class="p">(</span><span class="s1">&#39;decrypt&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">decrypt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Raw values</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Original values:&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">query</span> <span class="o">=</span> <span class="s2">&#34;select id, name from user&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">cursor</span><span class="o">.</span><span class="n">fetchall</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">Encrypting...&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">query</span> <span class="o">=</span> <span class="s2">&#34;update user set name = encrypt(name)&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">Raw encrypted values:&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">query</span> <span class="o">=</span> <span class="s2">&#34;select id, name from user&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">cursor</span><span class="o">.</span><span class="n">fetchall</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">Decrypting in query...&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">query</span> <span class="o">=</span> <span class="s2">&#34;select id, decrypt(name) from user&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">cursor</span><span class="o">.</span><span class="n">fetchall</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">Decrypting...&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">query</span> <span class="o">=</span> <span class="s2">&#34;update user set name = decrypt(name)&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</span></span></code></pre></div><p>通过 <code>create_function()</code> 注册了两个可供 SQL 使用的函数，而 <code>create_function()</code>
的参数分别是定义函数的名字，函数传递的参数的个数，以及源函数</p>
<h2 id="总结"><span class="section-num">3</span> 总结</h2>
<p>虽说 <code>SQLite</code> 只是一个嵌入式的轻量数据库，但是麻雀虽小，五脏俱全嘛。</p>
<p>内置的 <code>sqlite3</code> 库为Python 和 <code>SQLite</code> 的沟通构建了一个便捷的桥梁，但是这个桥梁只是个木桥，如果你希望使用斜拉索跨海大桥的话，你就需要去了解 <a href="http://www.sqlalchemy.org/">sqlalchemy</a>, 那是一个功能完善的 ORM 框架 :)</p>
<h2 id="参考"><span class="section-num">4</span> 参考</h2>
<ul>
<li><a href="http://www.sqlalchemy.org/">sqlalchemy</a></li>
<li><a href="http://www.sqlite.org/">sqlite</a></li>
<li><a href="https://docs.python.org/3.5/library/sqlite3.html">sqlite3</a></li>
<li><a href="https://pymotw.com/3/index.html">python3 module of week</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>从京东&#34;窃取&#34;150&#43;万条数据</title>
      <link>https://ramsayleung.github.io/zh/post/2017/jd_spider/</link>
      <pubDate>Wed, 21 Jun 2017 00:00:00 +0800</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2017/jd_spider/</guid>
      <description>An spider to crawl jindong item and comments</description>
      <content:encoded><![CDATA[<p>我最近编写了两只京东商品和评论的分布式爬虫来进行数据分析，现在就来分享一下。</p>
<h2 id="爬取策略"><span class="section-num">1</span> 爬取策略</h2>
<p>众所周知，爬虫比较难爬取的就是动态生成的网页，因为需要解析 JS, 其中比较典型的例子就是淘宝，天猫，京东，QQ 空间等。</p>
<p>所以在我爬取京东网站的时候，首先需要确定的就是爬取策略。因为我想要爬取的是商品的信息以及相应的评论，并没有爬取特定的商品的需求。所以在分析京东的网页的 url 的时候, 决定使用类似全站爬取的策略。 分析如图：</p>
<figure><a href="/ox-hugo/jd_analyze.png">
    <img loading="lazy" src="/ox-hugo/jd_analyze.png"/> </a>
</figure>

<p>可以看出，京东不同的商品类别是对应不同的子域名的，例如 <code>book</code> 对应的是图书， <code>mvd</code> 对应的是音像， <code>shouji</code> 对应的是手机等。</p>
<p>因为我使用的是获取 <code>&lt;a href&gt;</code> 标签里面的 url 值，然后迭代爬取的策略。所以要把爬取的 url 限定在域名为<code>jd.com</code> 范围内，不然就有可能会出现无限广度。</p>
<p>此外，有相当多的页面是不会包含商品信息的；例如： <code>help.jd.com</code>, <code>doc.jd.com</code> 等，因此使用 <code>jd.com</code> 这个域名范围实在太大了，所以把所需的子域名都添加到一个 list :</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">jd_subdomain</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;jiadian&#34;</span><span class="p">,</span> <span class="s2">&#34;shouji&#34;</span><span class="p">,</span> <span class="s2">&#34;wt&#34;</span><span class="p">,</span> <span class="s2">&#34;shuma&#34;</span><span class="p">,</span> <span class="s2">&#34;diannao&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;bg&#34;</span><span class="p">,</span> <span class="s2">&#34;channel&#34;</span><span class="p">,</span> <span class="s2">&#34;jipiao&#34;</span><span class="p">,</span> <span class="s2">&#34;hotel&#34;</span><span class="p">,</span> <span class="s2">&#34;trip&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;ish&#34;</span><span class="p">,</span> <span class="s2">&#34;book&#34;</span><span class="p">,</span> <span class="s2">&#34;e&#34;</span><span class="p">,</span> <span class="s2">&#34;health&#34;</span><span class="p">,</span> <span class="s2">&#34;baby&#34;</span><span class="p">,</span> <span class="s2">&#34;toy&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;nong&#34;</span><span class="p">,</span> <span class="s2">&#34;jiu&#34;</span><span class="p">,</span> <span class="s2">&#34;fresh&#34;</span><span class="p">,</span> <span class="s2">&#34;china&#34;</span><span class="p">,</span> <span class="s2">&#34;che&#34;</span><span class="p">,</span> <span class="s2">&#34;list&#34;</span><span class="p">]</span>
</span></span></code></pre></div><h2 id="提取数据"><span class="section-num">2</span> 提取数据</h2>
<p>在确定了爬取策略之后，爬虫就可以不断地进行工作了。那么爬虫怎么知道什么时候才是商品信息的页面呢？再来分析一下京东的商品页面：</p>
<figure><a href="/ox-hugo/jd_item_analyze.png">
    <img loading="lazy" src="/ox-hugo/jd_item_analyze.png"/> </a>
</figure>

<p>从上面的信息可以看出，每个商品的页面都是以 <code>item.jd.com/xxxxxxx.html</code> 的形式存 在的；而 xxxxxxx 就是该商品的 sku-id. 所以只需对 url 进行解析，子域名为 <code>item</code> 即商品页面，就可以进行爬取。</p>
<p>页面提取使用 Xpath 即可，也无需赘言。不过，需要注 意的是对商品而言，非常重要的价格就不是可以通过爬取 HTML 页面得到的。</p>
<p>因为价格是经常变动的，所以是异步向后台请求的。对于这些异步请求的数据，打开控制台，然后刷新，就可以看到一堆的 JS 文件，然后寻找相应的请求带有 &ldquo;money 或者price&rdquo; 之类关 键字的 JS 文件，应该就能找到。</p>
<p>如果还没办法找出来的话，Firefox 上有一个 <a href="https://addons.mozilla.org/en-US/firefox/addon/user-agent-switcher/">user-agent-switcher</a> 的扩展，然后通过这个扩展把自己的浏览器伪装成 IE6, 相信所有
花俏的 JS 都会没了, 只剩下那些不可或缺的 JS, 这样结果应该一目了然了，这么看来 IE6 还是有用滴。最终找到的URL 如下
<code>https://p.3.cn/prices/mgets?callback=jQuery6646724&amp;type=1&amp;area=19_1601_3633_0.137875165&amp;pdtk=9D4RIAHY317A3bZnQNapD7ip5Dg%252F6NXiIXt90Ahk0if2Yyh39PZQCuDBlhN%252FxOch3MpwWpHICu4P%250AVcgcOm11GQ%253D%253D&amp;pduid=14966417675252009727775&amp;pdpin=%25E5%2585%2591%25E9%2587%2591%25E8%25BE%25B0%25E6%2589%258B&amp;pdbp=0&amp;skuIds=J_3356012&amp;ext=10000000&amp;source=item-pc</code></p>
<p>不得不说，URL 实在是太长了。</p>
<p>根据经验，大部分的参数应该都是没什么用的，应该可以去掉的，所以在浏览器就一个个参数去掉，然后试试请求是否成功，如果成功，说明此参数无关重要，最后简化成： <code>http://p.3.cn/prices/mgets?pduid={}&amp;skuIds=J_{}</code> sku_id 即商品页面的 URL中包含的数字，而 pduid 则是一随机整数而已，用
<code>random.randint(1, 100000000)</code> 函数解决。</p>
<h2 id="商品评论"><span class="section-num">3</span> 商品评论</h2>
<p>商品的评论也是以 sku-id 为参数通过异步的方式进行请求的，构造请求的方法跟价格类 似，也不需过多赘述。</p>
<p>只是想要吐嘈一下的是，京东的评论是只能一页页向后翻的，不能跳转。还有一点就是，即使某样商品有 10+w 条评论，最多也只是返回 100页的数据。
略坑</p>
<h2 id="反爬虫策略"><span class="section-num">4</span> 反爬虫策略</h2>
<p>商品的爬取策略以及提取策略都确定了，一只爬虫就基本成型了。但是一般比较大型的网站都有反爬虫措施的。所以道高一尺，魔高一丈，爬虫也要有对应的反反爬虫策略</p>
<h3 id="禁用-cookie"><span class="section-num">4.1</span> 禁用 cookie</h3>
<p>通过禁用 cookie, 服务器就无法根据 cookie 判断出爬虫是否访问过网站</p>
<h3 id="轮转-user-agent"><span class="section-num">4.2</span> 轮转 user-agent</h3>
<p>一般的爬虫都会使用浏览器的 user-agent 来模拟浏览器以欺骗服务器 (当然，如果你是一只什么 user-agent都不用耿直的小爬虫，我也无话可说).</p>
<p>为了提高突破反爬虫策略的成功率，可以定义多个 user-agent, 然后每次请求都随机选择 user-agent。</p>
<h3 id="伪装成搜索引擎"><span class="section-num">4.3</span> 伪装成搜索引擎</h3>
<p>要说最著名的爬虫是谁？肯定是搜索引擎，它本质上也是爬虫，而且是非常强大的爬虫。</p>
<p>而且这些爬虫可以光明正大地去爬取各式网站，相信各式网站也很乐意被它爬。</p>
<p>那么， 现在可以通过修改 user-agent 伪装成搜索引擎，然后再结合上面的轮转 user-agent,</p>
<p>伪装成各式搜索引擎：</p>
<pre tabindex="0"><code class="language-nil" data-lang="nil">&#39;Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)&#39;,
&#39;Mozilla/5.0 (compatible; Bingbot/2.0; +http://www.bing.com/bingbot.htm)&#39;,
&#39;Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)&#39;,
&#39;DuckDuckBot/1.0; (+http://duckduckgo.com/duckduckbot.html)&#39;,
&#39;Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)&#39;,
&#39;Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)&#39;,
&#39;ia_archiver (+http://www.alexa.com/site/help/webmasters; crawler@alexa.com)&#39;,
</code></pre><h3 id="代理-ip"><span class="section-num">4.4</span> 代理 IP</h3>
<p>虽说可以伪装成搜索引擎，但是因为 http 请求是建立在三次握手之上的，爬虫的 IP 还是会被记录下来的，如果同一个 IP 访问得太频繁，那基本就可以确定是一只爬虫了，然后就把它的 IP 封掉，温和一点的就会叫你输入验证码，不然就返回 403.</p>
<p>对待这种情况，就需要使用代理 IP 了。</p>
<p>只是代理 IP 都有不同程度的延迟，并且免费的 IP 大多不能用，所以这是不得而为之了</p>
<h2 id="扩展成分布式爬虫"><span class="section-num">5</span> 扩展成分布式爬虫</h2>
<p>一台机器的爬虫可能爬取一个网站可能需要 100 天，而且带宽也到达瓶颈了，那么是否可以提高爬取效率呢？</p>
<p>那就用 100台机器，1天应该就能爬取完 (当然，现实并非如此美好).</p>
<p>这个就涉及到分布式的爬虫的问题。而不同的分布式爬虫有不同的实现方法，而我选择了 scrapy 和 redis 整合的 <a href="https://github.com/rolando/scrapy-redis">scrapy-redis</a> 来实现分布式，URL 的去重以及调度都有了相应的实现了，也无需额外的操心</p>
<h2 id="爬虫监控"><span class="section-num">6</span> 爬虫监控</h2>
<p>既然爬虫从单机变成了分布式，新的问题随之而来：如何监控分布式爬虫呢？在单机的时候，最简单的监控 &ndash; 直接将爬虫的日志信息输出到终端即可。</p>
<p>但是对于分布式爬虫，这样的做法显然不现实。我最终选择使用 <a href="https://graphiteapp.org">graphite</a> 这个监控工具。</p>
<h3 id="scrapy-graphite"><span class="section-num">6.1</span> scrapy-graphite</h3>
<p>参考 Github上 <a href="https://github.com/gnemoug/distribute_crawler">distributed_crawler</a> 的代码，将单机版本的 <a href="https://github.com/noplay/scrapy-graphite">scrapy-graphite</a> 扩展成基于分布式的 graphite 监控程序，并且实现对 python3 的支持。</p>
<h3 id="docker"><span class="section-num">6.2</span> docker</h3>
<p>但是 graphite 只是支持 python2, 并且安装过程很麻烦，我在折腾大半天后都无法安装成功，实在有点沮丧。最后想起了伟大的 docker, 并且直接找到已经打包好的image. 数行命令即解决所有的安装问题，不得不说：docker, 你值得拥有。运行截图：</p>
<figure><a href="/ox-hugo/jd_comment_graphite1.png">
    <img loading="lazy" src="/ox-hugo/jd_comment_graphite1.png"/> </a>
</figure>

<figure><a href="/ox-hugo/jd_comment_graphite2.png">
    <img loading="lazy" src="/ox-hugo/jd_comment_graphite2.png"/> </a>
</figure>

<h2 id="爬虫拆分"><span class="section-num">7</span> 爬虫拆分</h2>
<p>本来爬取商品信息的爬虫和爬取评论的爬虫都是同一只爬虫，但是后来发现，再不使用代理 IP 的情况下，爬取到 150000 条商品信息的时候，需要输入验证码。</p>
<p>但是爬取商品评论的爬虫并不存在被反爬策略限制的情况。所以我将爬虫拆分成两只爬虫，即使无法爬取商品信息的时候，还可以爬取商品的评论信息。</p>
<h2 id="小结"><span class="section-num">8</span> 小结</h2>
<p>在爬取一天之后，爬虫成果：</p>
<h3 id="评论"><span class="section-num">8.1</span> 评论</h3>
<figure><a href="/ox-hugo/jd_comment.png">
    <img loading="lazy" src="/ox-hugo/jd_comment.png"/> </a>
</figure>

<h3 id="评论总结"><span class="section-num">8.2</span> 评论总结</h3>
<figure><a href="/ox-hugo/jd_comment_summary.png">
    <img loading="lazy" src="/ox-hugo/jd_comment_summary.png"/> </a>
</figure>

<h3 id="商品信息"><span class="section-num">8.3</span> 商品信息</h3>
<figure><a href="/ox-hugo/jd_parameters.png">
    <img loading="lazy" src="/ox-hugo/jd_parameters.png"/> </a>
</figure>

<p>商品信息加上评论数约 150+w.</p>
<h2 id="参考及致谢"><span class="section-num">9</span> 参考及致谢</h2>
<ul>
<li><a href="https://github.com/noplay/scrapy-graphite">https://github.com/noplay/scrapy-graphite</a></li>
<li><a href="https://github.com/gnemoug/distribute_crawler">https://github.com/gnemoug/distribute_crawler</a></li>
<li><a href="https://github.com/hopsoft/docker-graphite-statsd">https://github.com/hopsoft/docker-graphite-statsd</a></li>
</ul>
<h2 id="项目源码"><span class="section-num">10</span> 项目源码</h2>
<p><a href="https://github.com/samrayleung/jd_spider">https://github.com/samrayleung/jd_spider</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>你所不可或缺的 – logging</title>
      <link>https://ramsayleung.github.io/zh/post/2017/logging/</link>
      <pubDate>Sun, 09 Apr 2017 00:00:00 +0800</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2017/logging/</guid>
      <description>an introduction about logging</description>
      <content:encoded><![CDATA[<h2 id="重要性"><span class="section-num">1</span> 重要性</h2>
<p>笔者最近都在负责项目中关于日志的部分，因为跟日志打交道比较多，所以有一些关于日 志感受和技巧想要分享一下。</p>
<p>笔者认为对于各种程序和应用，日志都是非常重要的，因为程序在部属到服务器之后，开发者是没办法像在本地开发那样可以充分了解程序发生的状况，而使用日志可以让开发者了解运行中的程序的状态，即使出现了错误，或者是系统挂了，也可以从日志中分析原因。</p>
<p>所以换句话说，日志的重要程度甚至可以称得上是不可或缺。接下来，笔者将会以 Python 中的 <em>logging</em> 模块为例阐述日志。</p>
<h2 id="关于日志"><span class="section-num">2</span> 关于日志</h2>
<h3 id="使用-print-函数输出"><span class="section-num">2.1</span> 使用 print 函数输出？</h3>
<p>日志是为了输出程序的运行状态，那么可否使用 <code>print</code> 函数进行 logging 的工作呢？</p>
<p>我并不建议把 <code>print()</code> 函数当作日志使用 (当然，如果你一定要这么用，我也拦不住)；不建议使用 <strong>print</strong> 进行logging 原因有：</p>
<ol>
<li>无法在不修改源代码的情况下，控制日志的输出</li>
<li>日志信息可能跟程序输出的有用数据混杂，导致输出的数据不可读或者非常难读</li>
<li>print 无法将日志信息输出到除标准输出以外的目标 (例如文件，socket,SMTP 服务器等)</li>
<li>无法根据错误信息的等级进行动态输出，因为 <strong>print</strong> 函数的作用只是输出信息</li>
</ol>
<p>可能对于非常简单的小程序，开发者可以使用 print 进行日志输出，但是对于比较大型的程序，系统内置的 logging 类库或许是更好的选择</p>
<h3 id="日志需要记录的是什么"><span class="section-num">2.2</span> 日志需要记录的是什么</h3>
<p>Python 的日志类库 <code>logging</code> 可以让开发者根据不同场景使用不同的日志等级以输出 不同的日志信息。</p>
<p>而日志需要记录的最基本的信息又是什么呢？要想回答这个问题，先和我一起回顾一下日志的功能：记录程序的状态，为程序的开发和调试提供便利！</p>
<p>所谓方便调试，需要记录的必然包括可以帮助更快定位到错误的有用信息：</p>
<ol>
<li>Logger 的名字 (比较常用的做法都是 <strong>__name__</strong>,即当前文件的信息)</li>
<li>具体日期 (这个可以帮助确定出错的具体场景)</li>
<li>方法名</li>
<li>源代码行数</li>
<li>异常的 traceback 信息</li>
</ol>
<p>这只是最基本的信息，具体还要根据场景添加其它有用信息；比如对于分布式的程序，肯定还要记录其它节点的名字，IP 等有用信息。</p>
<h2 id="logging-的正确姿势"><span class="section-num">3</span> Logging 的正确姿势</h2>
<h3 id="使用-python-的-logging-模块"><span class="section-num">3.1</span> 使用 Python 的 logging 模块</h3>
<p>我认为，使用 Python 的标准日志库是比较好的实践，因为标准库已经提供了开箱即用的特性，无需重复造轮子。Python 的 logging 模块也很容易上手，举个小例子：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">logging</span>
</span></span><span class="line"><span class="cl"><span class="n">logging</span><span class="o">.</span><span class="n">basicConfig</span><span class="p">(</span><span class="n">level</span><span class="o">=</span><span class="n">logging</span><span class="o">.</span><span class="n">DEBUG</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># define a logger</span>
</span></span><span class="line"><span class="cl"><span class="n">logger</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">getLogger</span><span class="p">(</span><span class="vm">__name__</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#Info level msg</span>
</span></span><span class="line"><span class="cl"><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s1">&#39;Info level message&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#Debug level msg</span>
</span></span><span class="line"><span class="cl"><span class="n">logger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s1">&#39;Debug level message&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#Warning level msg</span>
</span></span><span class="line"><span class="cl"><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s1">&#39;Warning level message&#39;</span><span class="p">)</span>
</span></span></code></pre></div><p>日志输出如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">INFO:__main__: Info level message
</span></span><span class="line"><span class="cl">DEBUG:__main__: Debug level message
</span></span><span class="line"><span class="cl">WARN:__main__: Warning level message
</span></span></code></pre></div><h3 id="记录异常信息"><span class="section-num">3.2</span> 记录异常信息</h3>
<p>日志一个非常重要的作用就是调试，所以记录出现异常的地方是有必要，并且需要记录栈的调用信息。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;file_not_exist.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;wt&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">logger</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="s1">&#39;Failed to write a file&#39;</span><span class="p">,</span><span class="n">exc_info</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span></code></pre></div><p>通过将 <code>exc_info</code> 设置成 True, 栈的调用信息就会记录到日志里面。而也可以使用 <code>logger.exception(message,*args)</code> 方法，它等同于 <code>logger.error(msg,exc_info=True,*args)</code> 方法。</p>
<h3 id="使用日志文件轮转控制器--rotating-file-handler"><span class="section-num">3.3</span> 使用日志文件轮转控制器 (rotating file handler)</h3>
<p>如果使用日志文件控制器 (FileHandler), 不断地运行程序，就会产生越来越多的日志 信息或者是日志文件。</p>
<p>为了控制日志文件的数量，可以使用 <code>RotatingFileHandler</code> 自 动新建新的日志文件，并且保留旧的日志文件，当产生一定数量的日志文件之后，就会 自动删除掉最旧的日志文件。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">handler</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">handlers</span><span class="o">.</span><span class="n">RotatingFileHandler</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">LOG_FILENAME</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">maxBytes</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">backupCount</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">my_logger</span><span class="o">.</span><span class="n">addHandler</span><span class="p">(</span><span class="n">handler</span><span class="p">)</span>
</span></span></code></pre></div><p>就是日志文件大小超过20个字节 (当然，真实情况不会那么小的阀值)，就创建一个新的日志文件，把原来的日志文件，例如叫 <em>example.log</em> 重命名为 <em>example.log.1</em>,然后新建的日志文件就会被命名为_example.log_, 一直到产生了6个日志文件，即 <em>example.log.5</em>, 继续记录日志，最开始的第一个日志就会被删除。</p>
<h3 id="使用日志服务器"><span class="section-num">3.4</span> 使用日志服务器</h3>
<p>对于那些分布式的应用，或者部署多台服务器上有不同日志的程序而言，逐个服务器或者节点查看日志实在太可怕了. 这个时候，就可以设置一个日志服务器，把重要的日志信息发送到日志服务器，你就在日志服务器上监控各个节点的日志状态了。</p>
<p><a href="https://docs.python.org/3/howto/logging-cookbook.html">logging-cookbook</a> 的例子：</p>
<p>客户端或者节点：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">logging</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">logging.handlers</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">rootLogger</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">getLogger</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">rootLogger</span><span class="o">.</span><span class="n">setLevel</span><span class="p">(</span><span class="n">logging</span><span class="o">.</span><span class="n">DEBUG</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">socketHandler</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">handlers</span><span class="o">.</span><span class="n">SocketHandler</span><span class="p">(</span><span class="s1">&#39;localhost&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">						    <span class="n">logging</span><span class="o">.</span><span class="n">handlers</span><span class="o">.</span><span class="n">DEFAULT_TCP_LOGGING_PORT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># don&#39;t bother with a formatter, since a socket handler sends the event as</span>
</span></span><span class="line"><span class="cl"><span class="c1"># an unformatted pickle</span>
</span></span><span class="line"><span class="cl"><span class="n">rootLogger</span><span class="o">.</span><span class="n">addHandler</span><span class="p">(</span><span class="n">socketHandler</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Now, we can log to the root logger, or any other logger. First the root...</span>
</span></span><span class="line"><span class="cl"><span class="n">logging</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s1">&#39;Jackdaws love my big sphinx of quartz.&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Now, define a couple of other loggers which might represent areas in your</span>
</span></span><span class="line"><span class="cl"><span class="c1"># application:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">logger1</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">getLogger</span><span class="p">(</span><span class="s1">&#39;myapp.area1&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">logger2</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">getLogger</span><span class="p">(</span><span class="s1">&#39;myapp.area2&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">logger1</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s1">&#39;Quick zephyrs blow, vexing daft Jim.&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">logger1</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s1">&#39;How quickly daft jumping zebras vex.&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">logger2</span><span class="o">.</span><span class="n">warning</span><span class="p">(</span><span class="s1">&#39;Jail zesty vixen who grabbed pay from quack.&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">logger2</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="s1">&#39;The five boxing wizards jump quickly.&#39;</span><span class="p">)</span>
</span></span></code></pre></div><p>日志服务器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">logging</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">logging.handlers</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pickle</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">socketserver</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">struct</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">LogRecordStreamHandler</span><span class="p">(</span><span class="n">socketserver</span><span class="o">.</span><span class="n">StreamRequestHandler</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Handler for a streaming logging request.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    This basically logs the record using whatever logging policy is
</span></span></span><span class="line"><span class="cl"><span class="s2">    configured locally.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">handle</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">	<span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">	Handle multiple requests - each expected to be a 4-byte length,
</span></span></span><span class="line"><span class="cl"><span class="s2">	followed by the LogRecord in pickle format. Logs the record
</span></span></span><span class="line"><span class="cl"><span class="s2">	according to whatever policy is configured locally.
</span></span></span><span class="line"><span class="cl"><span class="s2">	&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	    <span class="n">chunk</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">chunk</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="k">break</span>
</span></span><span class="line"><span class="cl">	    <span class="n">slen</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s1">&#39;&gt;L&#39;</span><span class="p">,</span> <span class="n">chunk</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	    <span class="n">chunk</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="n">slen</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	    <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">chunk</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">slen</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="n">chunk</span> <span class="o">=</span> <span class="n">chunk</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="n">slen</span> <span class="o">-</span> <span class="nb">len</span><span class="p">(</span><span class="n">chunk</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="n">obj</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">unPickle</span><span class="p">(</span><span class="n">chunk</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="n">record</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">makeLogRecord</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="bp">self</span><span class="o">.</span><span class="n">handleLogRecord</span><span class="p">(</span><span class="n">record</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">unPickle</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">pickle</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">handleLogRecord</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">record</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># if a name is specified, we use the named logger rather than the one</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># implied by the record.</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">server</span><span class="o">.</span><span class="n">logname</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	    <span class="n">name</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">server</span><span class="o">.</span><span class="n">logname</span>
</span></span><span class="line"><span class="cl">	<span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	    <span class="n">name</span> <span class="o">=</span> <span class="n">record</span><span class="o">.</span><span class="n">name</span>
</span></span><span class="line"><span class="cl">	    <span class="n">logger</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">getLogger</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	    <span class="c1"># N.B. EVERY record gets logged. This is because Logger.handle</span>
</span></span><span class="line"><span class="cl">	    <span class="c1"># is normally called AFTER logger-level filtering. If you want</span>
</span></span><span class="line"><span class="cl">	    <span class="c1"># to do filtering, do it at the client end to save wasting</span>
</span></span><span class="line"><span class="cl">	    <span class="c1"># cycles and network bandwidth!</span>
</span></span><span class="line"><span class="cl">	<span class="n">logger</span><span class="o">.</span><span class="n">handle</span><span class="p">(</span><span class="n">record</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">LogRecordSocketReceiver</span><span class="p">(</span><span class="n">socketserver</span><span class="o">.</span><span class="n">ThreadingTCPServer</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Simple TCP socket-based logging receiver suitable for testing.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">allow_reuse_address</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">host</span><span class="o">=</span><span class="s1">&#39;localhost&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		 <span class="n">port</span><span class="o">=</span><span class="n">logging</span><span class="o">.</span><span class="n">handlers</span><span class="o">.</span><span class="n">DEFAULT_TCP_LOGGING_PORT</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		 <span class="n">handler</span><span class="o">=</span><span class="n">LogRecordStreamHandler</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">	<span class="n">socketserver</span><span class="o">.</span><span class="n">ThreadingTCPServer</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">),</span> <span class="n">handler</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="bp">self</span><span class="o">.</span><span class="n">abort</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">	<span class="bp">self</span><span class="o">.</span><span class="n">timeout</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">	<span class="bp">self</span><span class="o">.</span><span class="n">logname</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">serve_until_stopped</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">	<span class="kn">import</span> <span class="nn">select</span>
</span></span><span class="line"><span class="cl">	<span class="n">abort</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">	<span class="k">while</span> <span class="ow">not</span> <span class="n">abort</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	    <span class="n">rd</span><span class="p">,</span> <span class="n">wr</span><span class="p">,</span> <span class="n">ex</span> <span class="o">=</span> <span class="n">select</span><span class="o">.</span><span class="n">select</span><span class="p">([</span><span class="bp">self</span><span class="o">.</span><span class="n">socket</span><span class="o">.</span><span class="n">fileno</span><span class="p">()],</span>
</span></span><span class="line"><span class="cl">					    <span class="p">[],</span> <span class="p">[],</span>
</span></span><span class="line"><span class="cl">					    <span class="bp">self</span><span class="o">.</span><span class="n">timeout</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	    <span class="k">if</span> <span class="n">rd</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="bp">self</span><span class="o">.</span><span class="n">handle_request</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="n">abort</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">abort</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">logging</span><span class="o">.</span><span class="n">basicConfig</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nb">format</span><span class="o">=</span><span class="s1">&#39;</span><span class="si">%(relativeCreated)5d</span><span class="s1"> </span><span class="si">%(name)-15s</span><span class="s1"> </span><span class="si">%(levelname)-8s</span><span class="s1"> </span><span class="si">%(message)s</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">tcpserver</span> <span class="o">=</span> <span class="n">LogRecordSocketReceiver</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;About to start TCP server...&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">tcpserver</span><span class="o">.</span><span class="n">serve_until_stopped</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">main</span><span class="p">()</span>
</span></span></code></pre></div><p>通过给 logger 添加一个SocketHandler 就可以把日志事件发送到服务器端</p>
<h3 id="使用配置文件"><span class="section-num">3.5</span> 使用配置文件</h3>
<p>虽然开发者可以使用 Python 代码来配置日志系统，但是这样是很不灵活的，每次修改日志等级还需要去改动代码。</p>
<p>而使用配置文件无疑是一个更好的选择，例如 json 或者是 yaml 文件，这样就可以在 json/yaml 文件中加载日志配置了。以 <a href="https://docs.djangoproject.com/en/1.9/topics/logging/#configuring-logging">Django</a> 项目的配置文件为例，我改成了 json 格式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;version&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;disable_existing_loggers&#34;</span><span class="p">:</span> <span class="err">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;formatters&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;verbose&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	    <span class="nt">&#34;format&#34;</span><span class="p">:</span> <span class="s2">&#34;%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;simple&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	    <span class="nt">&#34;format&#34;</span><span class="p">:</span> <span class="s2">&#34;%(levelname)s %(message)s&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;filters&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;special&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	    <span class="nt">&#34;()&#34;</span><span class="p">:</span> <span class="s2">&#34;project.logging.SpecialFilter&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	    <span class="nt">&#34;foo&#34;</span><span class="p">:</span> <span class="s2">&#34;bar&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;handlers&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;null&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	    <span class="nt">&#34;level&#34;</span><span class="p">:</span> <span class="s2">&#34;DEBUG&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	    <span class="nt">&#34;class&#34;</span><span class="p">:</span> <span class="s2">&#34;django.utils.log.NullHandler&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;console&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	    <span class="nt">&#34;level&#34;</span><span class="p">:</span> <span class="s2">&#34;DEBUG&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	    <span class="nt">&#34;class&#34;</span><span class="p">:</span> <span class="s2">&#34;logging.StreamHandler&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	    <span class="nt">&#34;formatter&#34;</span><span class="p">:</span> <span class="s2">&#34;simple&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;mail_admins&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	    <span class="nt">&#34;level&#34;</span><span class="p">:</span> <span class="s2">&#34;ERROR&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	    <span class="nt">&#34;class&#34;</span><span class="p">:</span> <span class="s2">&#34;django.utils.log.AdminEmailHandler&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	    <span class="nt">&#34;filters&#34;</span><span class="p">:</span> <span class="s2">&#34;special&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;loggers&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;django&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	    <span class="nt">&#34;handlers&#34;</span><span class="p">:</span> <span class="s2">&#34;null&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	    <span class="nt">&#34;propagate&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	    <span class="nt">&#34;level&#34;</span><span class="p">:</span> <span class="s2">&#34;INFO&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;django.request&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	    <span class="nt">&#34;handlers&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;mail_admins&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">	    <span class="nt">&#34;level&#34;</span><span class="p">:</span> <span class="s2">&#34;ERROR&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	    <span class="nt">&#34;propagate&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;myproject.custom&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	    <span class="nt">&#34;handlers&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;console&#34;</span><span class="p">,</span> <span class="s2">&#34;mail_admins&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">	    <span class="nt">&#34;level&#34;</span><span class="p">:</span> <span class="s2">&#34;INFO&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	    <span class="nt">&#34;filters&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;special&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>以及加载 json 文件到日志配置中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">logging.config</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">setup_logging</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Setup logging configuration
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;logging_configuration.json&#39;</span><span class="p">,</span> <span class="s1">&#39;rt&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="n">config</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">logging</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">dictConfig</span><span class="p">(</span><span class="n">config</span><span class="p">)</span>
</span></span></code></pre></div><p>使用 json 还有一个好处是标准库已经内置了 json 模块，无需像 yaml 那样需要安装额外的模块，不过我更推崇 yaml, 因为清晰之余，还可以少打很多字 :)</p>
<h3 id="对于不同的代码-使用不同的日志等级"><span class="section-num">3.6</span> 对于不同的代码，使用不同的日志等级</h3>
<p>因为一个项目不同代码要求不一样，也无需把每一个实现细节都记录在日志，只需要根 据不同的实现，使用不同的日志等级，例如使用 <code>Debug</code> 记录系统启动，处理业务逻辑 请求的信息，使用 <code>Error</code>, 记录系统的出错信息，可以结合堆栈分析原因，等等。</p>
<p>此外，Logger 实例可以被配置成基于名字的树状结构。 每一个部件都定义了一个基础的名字，对应的模块被设置成子节点。而 root logger 没有名字。如图：</p>
<figure><a href="/ox-hugo/example_logger_tree.png">
    <img loading="lazy" src="/ox-hugo/example_logger_tree.png"/> </a>
</figure>

<p>就配置 <code>logging</code> 而言，我认为树状结构是非常有用的，因为无需为每一个 logger 都设置handler. 如果一个 logger 没有 handler 的话，它就会让父节点来处理。所以 对于对于大部份的应用而言，只需配置 root logger, 而所有的信息都会发送到同一个 地方</p>
<figure><a href="/ox-hugo/one_logger_handler.png">
    <img loading="lazy" src="/ox-hugo/one_logger_handler.png"/> </a>
</figure>

<p>而树状结构可以对应用的不同部分使用不同的日志等级，不同的 handler, 不同的formatter, 以更好地控制日志信息</p>
<h3 id="使用结构化日志"><span class="section-num">3.7</span> 使用结构化日志</h3>
<p>虽然大部份的日志信息对于人类都是可读的，但是对于程序而言，就很难进行解析了。</p>
<p>这个时候，为了方便程序进行解析，我建议使用结构化格式的日志，这样就不再需要各种复杂的正则表达式来解析日志了。得益于内置的 json 模块，使用 json 就可以很简单地生成的利于程序解析结构化日志，以 <a href="https://docs.python.org/3/howto/logging-cookbook.html">logging cookbook</a> 中的例子说明：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">logging</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">StructuredMessage</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">	<span class="bp">self</span><span class="o">.</span><span class="n">message</span> <span class="o">=</span> <span class="n">message</span>
</span></span><span class="line"><span class="cl">	<span class="bp">self</span><span class="o">.</span><span class="n">kwargs</span> <span class="o">=</span> <span class="n">kwargs</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="s1">&#39;</span><span class="si">%s</span><span class="s1"> &gt;&gt;&gt; </span><span class="si">%s</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">message</span><span class="p">,</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">kwargs</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">_</span> <span class="o">=</span> <span class="n">StructuredMessage</span>   <span class="c1"># optional, to improve readability</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">logging</span><span class="o">.</span><span class="n">basicConfig</span><span class="p">(</span><span class="n">level</span><span class="o">=</span><span class="n">logging</span><span class="o">.</span><span class="n">INFO</span><span class="p">,</span> <span class="nb">format</span><span class="o">=</span><span class="s1">&#39;</span><span class="si">%(message)s</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">logging</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="n">_</span><span class="p">(</span><span class="s1">&#39;message 1&#39;</span><span class="p">,</span> <span class="n">foo</span><span class="o">=</span><span class="s1">&#39;bar&#39;</span><span class="p">,</span> <span class="n">bar</span><span class="o">=</span><span class="s1">&#39;baz&#39;</span><span class="p">,</span> <span class="n">num</span><span class="o">=</span><span class="mi">123</span><span class="p">,</span> <span class="n">fnum</span><span class="o">=</span><span class="mf">123.456</span><span class="p">))</span>
</span></span></code></pre></div><p>日志输出结果如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="err">message</span> <span class="mi">1</span> <span class="err">&gt;&gt;&gt;</span> <span class="p">{</span><span class="nt">&#34;fnum&#34;</span><span class="p">:</span> <span class="mf">123.456</span><span class="p">,</span> <span class="nt">&#34;num&#34;</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span> <span class="nt">&#34;bar&#34;</span><span class="p">:</span> <span class="s2">&#34;baz&#34;</span><span class="p">,</span> <span class="nt">&#34;foo&#34;</span><span class="p">:</span> <span class="s2">&#34;bar&#34;</span><span class="p">}</span>
</span></span></code></pre></div><h3 id="参考"><span class="section-num">3.8</span> 参考</h3>
<ul>
<li><a href="https://logmatic.io/blog/python-logging-with-json-steroids/">https://logmatic.io/blog/python-logging-with-json-steroids/</a></li>
<li><a href="https://fangpenlin.com/posts/2012/08/26/good-logging-practice-in-python/">https://fangpenlin.com/posts/2012/08/26/good-logging-practice-in-python/</a></li>
<li><a href="https://docs.python.org/3/howto/logging-cookbook.html">https://docs.python.org/3/howto/logging-cookbook.html</a></li>
<li><a href="https://pymotw.com/3/logging/index.html">https://pymotw.com/3/logging/index.html</a></li>
</ul>
<h3 id="小结"><span class="section-num">3.9</span> 小结</h3>
<p>虽然这次的日志阐述是以 Python 的日志模块举例，但是绝大部分的语言都内置或者是有第三方的日志支持，所以我分享的技巧还是可以应用到其他的语言的。</p>
<p>这些都是我在日常项目中的一点体会，与诸君共赏罢。Enjoy :)</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>爬虫高效去重之布隆过滤器</title>
      <link>https://ramsayleung.github.io/zh/post/2017/bloom_filter/</link>
      <pubDate>Sun, 09 Apr 2017 00:00:00 +0800</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2017/bloom_filter/</guid>
      <description>an dscription about bloom filter</description>
      <content:encoded><![CDATA[<p>笔者最近思考如何编写高效的爬虫; 而在编写高效爬虫的时候，有一个必需解决的问题就是：
url 的去重，即如何判别 url 是否已经被爬取，如果被爬取，那就不要重复爬取。</p>
<p>一般如果需要爬取的网站不是非常庞大的话，使用Python 内置的 set 就可以实现去重了，但是使用 set 内存利用率不高，此外对于那些不像Python 那样用 hash 实现的 set 而言，时间复杂度是 log(N),实在难说高效。</p>
<h2 id="bloom-filter"><span class="section-num">1</span> Bloom Filter</h2>
<p>那么如何实现高效的去重呢？ 笔者查阅资料之后得知：使用布隆过滤器 (Bloom Filter).</p>
<p>布隆过滤器可以用于快速检索一个元素是否在一个集合中。布隆过滤器实际上是一个很长的二进制向量和一系列随机映射函数（Hash函数）。</p>
<p>而一般的判断一个元素是否在一个集合里面的做法是：用需要判断的元素和集合中的元素进行比较，一般的数据结构，例如链表，树，都是这么实现的。</p>
<p>缺点是：随着集合元素的增多，需要比较的元素也增多，检索速度就越来越慢。</p>
<p>而使用布隆过滤器判重可以实现常数级的时间复杂度(检索时间不随元素增长而增加).那么布隆过滤器又是怎样实现的呢</p>
<h3 id="布隆过滤器实现原理"><span class="section-num">1.1</span> 布隆过滤器实现原理</h3>
<p>一个Bloom Filter是基于一个m位的位向量（Bit Vector），这些位向量的初始值为0, 并且有一系列的 hash 函数，hash 函数值域为1-m.在下面例子中，是15位的位向量，初始值为0以空白表示，为1以颜色填充</p>
<figure><a href="/ox-hugo/bit_vector.png">
    <img loading="lazy" src="/ox-hugo/bit_vector.png"/> </a>
</figure>

<p>现在有两个简单的 hash 函数：fnv,murmur.现在我输入一个字符串 &ldquo;whatever&rdquo; ,然后分别使用两个 hash 函数对 &ldquo;whatever&rdquo; 进行散列计算并且映射到上面的位向量。</p>
<figure><a href="/ox-hugo/whatever.png">
    <img loading="lazy" src="/ox-hugo/whatever.png"/> </a>
</figure>

<p>可知，使用 fnv 函数计算出的 hash 值是11,使用 murmur 函数计算出的 hash 值是4. 然后映射到位向量上：</p>
<figure><a href="/ox-hugo/bit_vector1.png">
    <img loading="lazy" src="/ox-hugo/bit_vector1.png"/> </a>
</figure>

<p>如果下一次，笔者要判断 <strong>whatever</strong> 是否在字符串中，只需使用 fnv 和 murmur 两个 hash 函数对 <strong>whatever</strong> 进行散列值计算，然后与位向量做 &ldquo;与运算&rdquo;，如果结果为0, 那么说明 <strong>whatever</strong> 是不在集合中的，因为同样的元素使用同一个 hash 函数产生的值每次都是相同的，不相同就说明不是同一个元素。</p>
<p>但是如果 &ldquo;与运算&rdquo; 的结果为1,是否可以说明 <strong>whatever</strong> 就在集合中呢？其实上是不能100% 确定的，因为 hash 函数存在散列冲突现象 (即两个散列值相同，但两个输入值是不同的), 所以布隆过滤器只能说&quot;我可以说这个元素我在集合中是看见过滴，只是我有一定的不确定性&quot;.</p>
<p>当你在分配的内存足够大之后，不确定性会变得很小很小。</p>
<p>你可以看到布隆过滤器可以有效利用内存实现常数级的判重任务，但是鱼和熊掌不可得兼，付出的代价就是一定的误判 (机率很小),所以本质上，布隆过滤器是 &ldquo;概率数据结构 (probabilistic data structure)&rdquo;.</p>
<p>这个就是布隆过滤器的基本原理。当然，位向量不会只是15位，hash函数也不会仅是两个简单的函数. 这只是简化枝节，为了清晰解述原理而已。</p>
<h2 id="python-bloomfilter"><span class="section-num">2</span> Python BloomFilter</h2>
<p>算法都是为了实际问题服务的，又回到爬虫这个话题上。在了解布隆过滤器原理之后，可以很容易地实现自己的布隆过滤器，但是想要实现一个高效健壮的布隆过滤器就需要比较多的功夫了，因为需要考虑的问题略多。</p>
<p>幸好，得益Python 强大的社区，已经有<a href="https://axiak.github.io/pybloomfiltermmap/">Python BloomFilter</a> 的库。一个文档中的简单例子：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pybloomfilter</span> <span class="kn">import</span> <span class="n">BloomFilter</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">bf</span> <span class="o">=</span> <span class="n">BloomFilter</span><span class="p">(</span><span class="mi">10000000</span><span class="p">,</span> <span class="mf">0.01</span><span class="p">,</span> <span class="s1">&#39;filter.bloom&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;/usr/share/dict/words&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="n">bf</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">word</span><span class="o">.</span><span class="n">rstrip</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span> <span class="s1">&#39;apple&#39;</span> <span class="ow">in</span> <span class="n">bf</span>
</span></span></code></pre></div><p>结果为 <strong>True</strong></p>
<h2 id="总结"><span class="section-num">3</span> 总结</h2>
<p>原理就说得差不多了，要想对布隆过滤器有更深的认识，还需要更多的实战。多写，多思考。 Enjoy Python,Enjoy Crawler :)</p>
<h2 id="参考"><span class="section-num">4</span> 参考</h2>
<ul>
<li><a href="https://llimllib.github.io/bloomfilter-tutorial/">https://llimllib.github.io/bloomfilter-tutorial/</a></li>
<li><a href="https://en.wikipedia.org/wiki/Bloom_filter">https://en.wikipedia.org/wiki/Bloom_filter</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python多线程端口扫描器</title>
      <link>https://ramsayleung.github.io/zh/post/2017/port_scanner/</link>
      <pubDate>Sun, 19 Mar 2017 00:00:00 +0800</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2017/port_scanner/</guid>
      <description>An introduction about port scan</description>
      <content:encoded><![CDATA[<p>近两日，闲来无事，就写了些端口扫描器，重温TCP/IP协议栈的部分原理。</p>
<h2 id="端口扫描器"><span class="section-num">1</span> 端口扫描器</h2>
<p>所谓的端口扫描器，其实是用来检测目标服务器有哪些端口开放所使用的工具，一般是管理员用来进行安全加固，检测是否有无意开放的端口；或者是恶意攻击的人员在进行攻击前的准备工作。</p>
<p>所以综述上下，端口扫描器是用来确定目标机器 (本地机器或者远程机器)的特定服务的可用性</p>
<h2 id="端口扫描原理"><span class="section-num">2</span> 端口扫描原理</h2>
<p>上面提到过，端口扫描器是用来确定目标机器的服务的可用性的；那么具体是怎么确定的呢？如果还没有答案的话，可以换个角度来思考这个问题。</p>
<p>假如你想确定邻居家的妹子是否在家，你会怎么办？这不简单么，问一下不就清楚了么？对阿，对于服务器的端口也可以适用这样的方法嘛。端口扫描的原理都是“问一下”，只是问的方法不一样而已，就好像你是决定直接过去敲邻居门，还是打电话过去一样，殊途同归，方法是没有对错的之分，差异只是方法的优劣。</p>
<h3 id="tcp连接扫描"><span class="section-num">2.1</span> TCP连接扫描</h3>
<p>这是最简单的一种方法，一般被称为连接扫描，即利用 <code>socket</code> 对目标机器进行连接尝试，如果能够成功建立三次握手连接，那就说明你用 <code>socket</code> 连接的端口是开放的；然后你就可以断开连接，扫描下一个目标端口了 (如果不断开连接，这就是一种 DDOS攻击了).</p>
<p>只不过TCP连接扫描不是很常用，不仅是因为容易被发现，而且你的IP地址也可能会被目标地址记录下来的(对于攻击者来说，隐藏身份是很重要的)</p>
<h4 id="代码解析"><span class="section-num">2.1.1</span> 代码解析：</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">scan</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">args</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">host</span><span class="p">,</span> <span class="n">port</span> <span class="o">=</span> <span class="n">args</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># Create a TCP socket and try to connect</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># AF_INET for ipv4,AF_INET6 for ipv6</span>
</span></span><span class="line"><span class="cl">	<span class="n">sock</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">sock</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="n">sock</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">timeout</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">error</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="kc">False</span>
</span></span></code></pre></div><p>因为原理很简单，所以核心代码也是很简洁的，只是建立 <code>socket</code> 然后进行连接，如果连接不上，就很大几率说明端口是关闭的 (并不是绝对的，例如socket超时的异常可能就是因为网络异常，不一定是目标机器的缘故)</p>
<h3 id="syn扫描"><span class="section-num">2.2</span> SYN扫描</h3>
<p>再回顾一下TCP的三次握手：</p>
<h4 id="tcp三次握手"><span class="section-num">2.2.1</span> TCP三次握手</h4>
<ol>
<li>TCP建立连接时，首先客户端和服务器处于close状态。</li>
<li>然后客户端发送SYN同步位，此时客户端处于SYN-SEND状态，服务器处于lISTEN状态，当服务器收到SYN以后，向客户端发送同步位SYN和确认码ACK，然后服务器变为SYN-RCVD，客户端收到服务器发来的SYN和ACK 后，客户端的状态变成ESTABLISHED(已建立连接)，</li>
<li>客户端再向服务器发送ACK确认码，服务器接收到以后也变成ESTABLISHED。然后服务器客户端开始数据传输</li>
</ol>
<p>如图：</p>
<figure>
    <img loading="lazy" src="https://sites.google.com/a/javainterview.net/question/_/rsrc/1425457816649/misc/tcp-ip/3-way-handshake-Intro-to-transport-layer-The-internetworking-Part2.gif"
         alt="Figure 1: 图来源于Google"/> <figcaption>
            <p><span class="figure-number">Figure 1: </span>图来源于Google</p>
        </figcaption>
</figure>

<h4 id="syn扫描原理"><span class="section-num">2.2.2</span> SYN扫描原理</h4>
<!--list-separator-->
<ol>
<li>
<p>SYN+ACK</p>
<p>那么现在再回到SYN扫描上来.如果在发送第一次握手的 <code>SYN</code> flag 时，目标机器回复了<code>SYN+ACK</code>,这不就说明笔者发送的TCP包中的目标端口是开放的么！如果不开放，服务器就不会期待第三次握手了，也不会给笔者发送 <code>SYN+ACK</code> 了；如图：</p>
<figure>
        <img loading="lazy" src="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/uploads/101613_1123_PortScannin3.jpg"/> 
    </figure>

<p>图来自 <a href="http://resources.infosecinstitute.com/port-scanning-using-scapy/">http://resources.infosecinstitute.com/port-scanning-using-scapy/</a></p>
</li>
</ol>
<!--list-separator-->
<ol start="2">
<li>
<p>RST</p>
<p>如果第二次握手的时候，目标机器回复的不是 <code>SYN+ACK</code>, 而是 <code>RST</code>, 就说明TCP包中的目标端口在目标机器上是关闭的；如图</p>
<figure>
        <img loading="lazy" src="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/uploads/101613_1123_PortScannin4.jpg"/> 
    </figure>

<p>图来自 <a href="http://resources.infosecinstitute.com/port-scanning-using-scapy/">http://resources.infosecinstitute.com/port-scanning-using-scapy/</a></p>
</li>
</ol>
<!--list-separator-->
<ol start="3">
<li>
<p>Filtered</p>
<p>上面提及了目标端口的开放和关闭两种状态，那么，还有没有其他状态呢？什么，还有其他状态？</p>
<p>如果就SYN扫描而言，就还有 filtered被过滤之一说，如果还有加上其他扫描技术， 就还有其他状态了。</p>
<p>回到SYN扫描，当返回的不是服务器想建立第二次握手的包，而是ICMP的包就有可能被过滤，例如响应信息是ICMP错误信息类型3代码3(无法到达目标：端口不可达)这里出现的端口不可达，可能就是被防火墙过滤了，如果是类型3代码13(无法到达目标：通信被管理员禁止),那也是被过滤了。</p>
<p>更多信息就要查询<a href="https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml">ICMP的官方文档</a> 了</p>
</li>
</ol>
<h4 id="代码解释"><span class="section-num">2.2.3</span> 代码解释</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">scan</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">args</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">dst_ip</span><span class="p">,</span> <span class="n">dst_port</span> <span class="o">=</span> <span class="n">args</span>
</span></span><span class="line"><span class="cl">    <span class="n">src_port</span> <span class="o">=</span> <span class="n">RandShort</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">answered</span><span class="p">,</span> <span class="n">unanswered</span> <span class="o">=</span> <span class="n">sr</span><span class="p">(</span><span class="n">IP</span><span class="p">(</span><span class="n">dst</span><span class="o">=</span><span class="n">dst_ip</span><span class="p">)</span> <span class="o">/</span> <span class="n">TCP</span><span class="p">(</span><span class="n">sport</span><span class="o">=</span><span class="n">src_port</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">						   <span class="n">dport</span><span class="o">=</span><span class="n">dst_port</span><span class="p">,</span> <span class="n">flags</span><span class="o">=</span><span class="s2">&#34;S&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">			  <span class="n">timeout</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">timeout</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">packet</span> <span class="ow">in</span> <span class="n">unanswered</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">packet</span><span class="o">.</span><span class="n">dst</span><span class="p">,</span> <span class="n">packet</span><span class="o">.</span><span class="n">dport</span><span class="p">,</span> <span class="s2">&#34;Filtered&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">send</span><span class="p">,</span> <span class="n">recv</span><span class="p">)</span> <span class="ow">in</span> <span class="n">answered</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span><span class="p">(</span><span class="n">recv</span><span class="o">.</span><span class="n">haslayer</span><span class="p">(</span><span class="n">TCP</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">	    <span class="n">flags</span> <span class="o">=</span> <span class="n">recv</span><span class="o">.</span><span class="n">getlayer</span><span class="p">(</span><span class="n">TCP</span><span class="p">)</span><span class="o">.</span><span class="n">sprintf</span><span class="p">(</span><span class="s2">&#34;%&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	    <span class="k">if</span><span class="p">(</span><span class="n">flags</span> <span class="o">==</span> <span class="s2">&#34;SA&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">		<span class="c1"># set RST to server in case of ddos attack</span>
</span></span><span class="line"><span class="cl">		<span class="n">send_rst</span> <span class="o">=</span> <span class="n">sr</span><span class="p">(</span><span class="n">IP</span><span class="p">(</span><span class="n">dst</span><span class="o">=</span><span class="n">dst_ip</span><span class="p">)</span> <span class="o">/</span> <span class="n">TCP</span><span class="p">(</span><span class="n">sport</span><span class="o">=</span><span class="n">src_port</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">						   <span class="n">dport</span><span class="o">=</span><span class="n">dst_port</span><span class="p">,</span> <span class="n">flags</span><span class="o">=</span><span class="s2">&#34;R&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">			  <span class="n">timeout</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">timeout</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">dst_ip</span><span class="p">,</span> <span class="n">dst_port</span><span class="p">,</span> <span class="s2">&#34;Open&#34;</span>
</span></span><span class="line"><span class="cl">	    <span class="k">elif</span> <span class="p">(</span><span class="n">flags</span> <span class="o">==</span> <span class="s2">&#34;RA&#34;</span> <span class="ow">or</span> <span class="n">flags</span> <span class="o">==</span> <span class="s2">&#34;R&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">dst_ip</span><span class="p">,</span> <span class="n">dst_port</span><span class="p">,</span> <span class="s2">&#34;Closed&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="k">elif</span><span class="p">(</span><span class="n">recv</span><span class="o">.</span><span class="n">haslayer</span><span class="p">(</span><span class="n">ICMP</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">	    <span class="n">icmp_type</span> <span class="o">=</span> <span class="n">recv</span><span class="o">.</span><span class="n">getlayer</span><span class="p">(</span><span class="n">ICMP</span><span class="p">)</span><span class="o">.</span><span class="n">type</span>
</span></span><span class="line"><span class="cl">	    <span class="n">icmp_code</span> <span class="o">=</span> <span class="n">recv</span><span class="o">.</span><span class="n">getlayer</span><span class="p">(</span><span class="n">ICMP</span><span class="p">)</span><span class="o">.</span><span class="n">code</span>
</span></span><span class="line"><span class="cl">	    <span class="k">if</span><span class="p">(</span><span class="n">icmp_type</span> <span class="o">==</span> <span class="n">ICMP_TYPE_DESTINATION_UNREACHABLE</span> <span class="ow">and</span> <span class="n">icmp_code</span> <span class="ow">in</span> <span class="n">ICMP_CODE</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">dst_ip</span><span class="p">,</span> <span class="n">dst_port</span><span class="p">,</span> <span class="s2">&#34;Filtered&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	    <span class="k">return</span> <span class="n">dst_ip</span><span class="p">,</span> <span class="n">dst_port</span><span class="p">,</span> <span class="s2">&#34;CHECK&#34;</span>
</span></span></code></pre></div><p>核心代码很简单，就是发送建立连接的握手请求，然后根据不同的返回结果判断不同的状态。</p>
<p>如果端口确定是开放，那就发送 <code>R</code> flag给目标机器结束握手 (如果不结束握手的话，那就是DDOS,这也是DDOS最常用的手段); 因为这次不是使用操作系统原生的 <code>socket</code>, 而是自行构造发送 IP数据包，所以需要使用一个很强大的构造 操作各种数据包的工具 &ndash; <a href="https://github.com/phaethon/scapy">scapy</a></p>
<p>(顺便说一下，如果在Windows下安装 scapy,需要非常多的步骤，如果是Unix/Linux,只需几行命令:) )</p>
<h2 id="后话"><span class="section-num">3</span> 后话</h2>
<p>简单的扫描器就已经完成了，加上多线程的功能提高性能。</p>
<p>很想吐嘈一下，真的对Python 的多线程恨铁不成钢，只好换成多进程；也给 Python2 Python3 API的改变折腾得够呛，不禁让笔者怀念起Java:(</p>
<p>其实正如笔者开头所言的，你确定隔壁家妹子是否在家的方法有很多，你扫描端口的方法也有很多：例如 XMAS scan(TCP圣诞树扫描), FIN scan,Null scan, ACK scan, Window scan, UDP scan等。</p>
<p>当然你如果不想针对各种扫描都写一个扫描器，你可以使用 <a href="https://nmap.org/">nmap</a> 这个地球最强大的扫描器 (没有之一). 在Python也已经有与nmap整合的强大的包 <a href="http://xael.org/pages/python-nmap-en.html">python-nmap</a></p>
<p>扫描器完整代码地址 <a href="https://github.com/samrayleung/PortScanner">https://github.com/samrayleung/PortScanner</a></p>
<hr>
<p>参考</p>
<ul>
<li><a href="http://resources.infosecinstitute.com/port-scanning-using-scapy/">http://resources.infosecinstitute.com/port-scanning-using-scapy/</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>flask牛刀小试之微信公众号开发</title>
      <link>https://ramsayleung.github.io/zh/post/2017/weixin_flask/</link>
      <pubDate>Thu, 23 Feb 2017 00:00:00 +0800</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2017/weixin_flask/</guid>
      <description>An flask project</description>
      <content:encoded><![CDATA[<p><a href="http://flask.pocoo.org/">flask</a> 是一个轻量级的python 框架(官网称为微型框架),很容易上手，之前因为笔者跟朋友开发小程序的时候使用过 flask,过后就遗忘了。</p>
<p>为了重拾flask, 笔者决定写点小东西，之前开发小程序，不如现在再玩玩公众号开发</p>
<h2 id="验证服务器"><span class="section-num">1</span> 验证服务器</h2>
<p>开发公众号之前，要先验证服务器的有效性，官网有详细的说明：<a href="https://mp.weixin.qq.com/wiki/8/f9a0b8382e0b77d87b3bcc1ce6fbc104.html">公众开发平台文档</a></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>signature</td>
<td>微信加密签名，signature结合了开发者填写的token参数和请求中的timestamp参数、nonce参数。</td>
</tr>
<tr>
<td>timestamp</td>
<td>时间戳</td>
</tr>
<tr>
<td>nonce</td>
<td>随机数</td>
</tr>
<tr>
<td>echostr</td>
<td>随机字符串</td>
</tr>
</tbody>
</table>
<p>校验流程：加密/校验流程如下：</p>
<ol>
<li>将token、timestamp、nonce三个参数进行字典序排序</li>
<li>将三个参数字符串拼接成一个字符串进行sha1加密</li>
<li>开发者获得加密后的字符串可与signature对比，标识该请求来源于微信</li>
</ol>
<p>流程并不复杂，官网给出了代码示例，只不过是PHP的，换成python 也是很容易滴：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nd">@app.route</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span><span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span><span class="s1">&#39;POST&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">	<span class="k">def</span> <span class="nf">wechat</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span><span class="o">==</span><span class="s1">&#39;GET&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	    <span class="n">token</span><span class="o">=</span><span class="s1">&#39;your token&#39;</span>
</span></span><span class="line"><span class="cl">	    <span class="n">data</span><span class="o">=</span><span class="n">request</span><span class="o">.</span><span class="n">args</span>
</span></span><span class="line"><span class="cl">	    <span class="n">signature</span><span class="o">=</span><span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;signature&#39;</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	    <span class="n">timestamp</span><span class="o">=</span><span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;timestamp&#39;</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	    <span class="n">nonce</span> <span class="o">=</span><span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;nonce&#39;</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	    <span class="n">echostr</span><span class="o">=</span><span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;echostr&#39;</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	    <span class="n">s</span><span class="o">=</span><span class="p">[</span><span class="n">timestamp</span><span class="p">,</span><span class="n">nonce</span><span class="p">,</span><span class="n">token</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	    <span class="n">s</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	    <span class="n">s</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span><span class="p">(</span><span class="n">hashlib</span><span class="o">.</span><span class="n">sha1</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">()</span><span class="o">==</span><span class="n">signature</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">make_response</span><span class="p">(</span><span class="n">echostr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	    <span class="n">rec</span><span class="o">=</span><span class="n">request</span><span class="o">.</span><span class="n">stream</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	    <span class="n">xml_rec</span><span class="o">=</span><span class="n">ET</span><span class="o">.</span><span class="n">fromstring</span><span class="p">(</span><span class="n">rec</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	    <span class="n">tou</span> <span class="o">=</span> <span class="n">xml_rec</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;ToUserName&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span>
</span></span><span class="line"><span class="cl">	    <span class="n">fromu</span> <span class="o">=</span> <span class="n">xml_rec</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;FromUserName&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span>
</span></span><span class="line"><span class="cl">	    <span class="n">content</span> <span class="o">=</span> <span class="n">xml_rec</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;Content&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span>
</span></span><span class="line"><span class="cl">	    <span class="n">xml_rep</span> <span class="o">=</span> <span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span><span class="n">xml</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span><span class="n">ToUserName</span><span class="o">&gt;&lt;</span><span class="err">!</span><span class="p">[</span><span class="n">CDATA</span><span class="p">[</span><span class="o">%</span><span class="n">s</span><span class="p">]]</span><span class="o">&gt;&lt;/</span><span class="n">ToUserName</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span><span class="n">FromUserName</span><span class="o">&gt;&lt;</span><span class="err">!</span><span class="p">[</span><span class="n">CDATA</span><span class="p">[</span><span class="o">%</span><span class="n">s</span><span class="p">]]</span><span class="o">&gt;&lt;/</span><span class="n">FromUserName</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span><span class="n">CreateTime</span><span class="o">&gt;%</span><span class="n">s</span><span class="o">&lt;/</span><span class="n">CreateTime</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span><span class="n">MsgType</span><span class="o">&gt;&lt;</span><span class="err">!</span><span class="p">[</span><span class="n">CDATA</span><span class="p">[</span><span class="n">text</span><span class="p">]]</span><span class="o">&gt;&lt;/</span><span class="n">MsgType</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span><span class="n">Content</span><span class="o">&gt;&lt;</span><span class="err">!</span><span class="p">[</span><span class="n">CDATA</span><span class="p">[</span><span class="o">%</span><span class="n">s</span><span class="p">]]</span><span class="o">&gt;&lt;/</span><span class="n">Content</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span><span class="n">FuncFlag</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&lt;/</span><span class="n">FuncFlag</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;/</span><span class="n">xml</span><span class="o">&gt;</span><span class="s2">&#34;</span>
</span></span></code></pre></div><p>这样服务器就校验成功了，就可以编写相关的业务逻辑了</p>
<h2 id="歌词查询"><span class="section-num">2</span> 歌词查询</h2>
<p>笔者自己平时是打开音乐播放器，戴上耳机，就开始播放音乐；所以经常出现笔者听到某首歌曲觉得旋律非常熟悉，但是就无法想起歌名的情况，这种感觉实在不好，所以笔者觉得可以编写一个通过歌词查询歌曲，并返回所有歌词的功能。</p>
<p>思路大概是编写爬虫，通过歌词进行查询，然后对返回的html 页面进行检索和信息提取。剩下的事就是爬虫和解析页面了，笔者是使用<a href="http://www.xiami.com/">虾米</a> 进行歌词查询的，使用 request 发送 http 请求，使用 lxml进行解析，其他就不一一细表了</p>
<h2 id="单词查询"><span class="section-num">3</span> 单词查询</h2>
<p>有时候，笔者在微信需要查询单词，但是又不想退出微信，所以就打算用公众号来查单词其实很简单，就是服务获取用户发给微信公众号的数据，再去请求有道之类词典的api,再把结果返回给服务器，服务器转发给用户</p>
<h2 id="电影查询"><span class="section-num">4</span> 电影查询</h2>
<p>有时无聊想去看电影，但是不知道看什么电影，因为选择太多，质量参差不齐的片太多了所以笔者会先去豆瓣看一下新上影的电影，看一下评分，然后再决定看什么电影。所以，笔者可以把这个功能搬到公众号来。如何实现呢？还是爬虫</p>
<h2 id="总结"><span class="section-num">5</span> 总结</h2>
<p>感觉这次开发公众号，笔者就是用 flask 编写 restful api, 然后做的其他事情就是编写爬虫。</p>
<p><a href="https://github.com/samrayleung/SamrayJustForFun">项目github地址</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>在Emacs中使用Ipython</title>
      <link>https://ramsayleung.github.io/zh/post/2017/emacs_ipython/</link>
      <pubDate>Wed, 22 Feb 2017 00:00:00 +0800</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2017/emacs_ipython/</guid>
      <description>Use Ipython in Emasc</description>
      <content:encoded><![CDATA[<h2 id="emacs-ipython-输出错误"><span class="section-num">1</span> Emacs Ipython 输出错误</h2>
<p>在Emacs 运行 <strong>run-python</strong> 的时候，报错了，如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span class="line"><span class="cl"><span class="p">[</span><span class="sc">?1</span><span class="nv">2l</span><span class="p">[</span><span class="sc">?2</span><span class="nv">5h2+2</span>
</span></span><span class="line"><span class="cl">      <span class="p">[</span><span class="nv">J</span><span class="p">[</span><span class="sc">?7</span><span class="nv">h</span><span class="p">[</span><span class="sc">?1</span><span class="nv">2l</span><span class="p">[</span><span class="sc">?2</span><span class="nv">5h</span><span class="p">[</span><span class="sc">?2</span><span class="nv">004l</span><span class="p">[</span><span class="sc">?7</span><span class="nv">hOut</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">:</span> <span class="mi">4</span>
</span></span></code></pre></div><p>因为我的版本时Ipython5,查阅文档<a href="http://ipython.readthedocs.io/en/stable/whatsnew/version5.html#id1">http://ipython.readthedocs.io/en/stable/whatsnew/version5.html#id1</a>
之后，发现Ipython5 有了新的terminal 接口，和Emacs 继承的shell 不兼容，所以
会出现上述的错误，只要给Ipython 加上运行参数就能解决了，所以只要在 <strong>.emacs</strong>
或者对应的初始化文件加上下面语句</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">setq</span> <span class="nv">python-shell-interpreter</span> <span class="s">&#34;ipython&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="nv">python-shell-interpreter-args</span> <span class="s">&#34;--simple-prompt -i&#34;</span><span class="p">)</span>
</span></span></code></pre></div><hr>
<h3 id="update-2017-3-15"><span class="section-num">1.1</span> Update 2017-3-15</h3>
<p>在添加了 <strong>&ndash;simple-promp -i</strong> 参数以后，虽说乱码的问题解决了，但是新的问题又出现了
在Ipython 里面是没法无法输入多行内容的，即使是一个简单的循环，详情查看这条issue
<a href="https://github.com/ipython/ipython/issues/9816">https://github.com/ipython/ipython/issues/9816</a>. 现在Ipython 开发社区还没有解决这个
问题，所以现在的权宜之计就是使用 Ipython4,等到社区解决了这个问题在升级为 Ipython5</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">pip install --force-reinstall <span class="nv">ipython</span><span class="o">==</span>4.2.1
</span></span></code></pre></div><h2 id="emacs-ipython-的使用优化"><span class="section-num">2</span> Emacs Ipython 的使用优化</h2>
<h3 id="python-pop"><span class="section-num">2.1</span> python-pop</h3>
<p>因为我之前使用Emacs的时候，是使用Spacemacs的配置的，但是后来觉得还是自己的
配置用的更舒服，所以又切换回自己的配置，但是我还是很想念Spacemacs的一些绑定
例如shell在底下弹出，或者是关闭，然后找到了<a href="https://github.com/kyagi/shell-pop-el">Shell-pop</a> 这package,就可以用回
Spacemacs的shell使用习惯。然后我觉得，Ipython shell也可以这样配置，只不过
我没有发现类似的package,又因为Emacs Lisp的强大，所以我自己写了一段小函数实现
shell-pop 的功能</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">defun</span> <span class="nv">samray/python-pop</span> <span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Run python and switch to the python buffer.
</span></span></span><span class="line"><span class="cl"><span class="s">similar to shell-pop&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">interactive</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">if</span> <span class="p">(</span><span class="nf">get-buffer</span> <span class="s">&#34;*Python*&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="nb">if</span> <span class="p">(</span><span class="nv">string=</span> <span class="p">(</span><span class="nf">buffer-name</span><span class="p">)</span> <span class="s">&#34;*Python*&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	  <span class="p">(</span><span class="nb">if</span> <span class="p">(</span><span class="nv">not</span> <span class="p">(</span><span class="nv">one-window-p</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	      <span class="p">(</span><span class="nb">progn</span> <span class="p">(</span><span class="nv">bury-buffer</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		     <span class="p">(</span><span class="nv">delete-window</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	    <span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">(</span><span class="nb">progn</span> <span class="p">(</span><span class="nv">switch-to-buffer-other-window</span> <span class="s">&#34;*Python*&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	       <span class="p">(</span><span class="nv">end-of-buffer</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	       <span class="p">(</span><span class="nv">evil-insert-state</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="nb">progn</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="nv">run-python</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="nv">switch-to-buffer-other-window</span> <span class="s">&#34;*Python*&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="nv">end-of-buffer</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="nv">evil-insert-state</span><span class="p">))))</span>
</span></span></code></pre></div><p>如果没有使用Evil,可以把 **(evil-insert-state)**去掉</p>
<h3 id="ipython-history"><span class="section-num">2.2</span> Ipython History</h3>
<p>我在普通的Shell使用Ipython的时候，很自然地使用上下方向键翻到上一条/下一条
执行的命令，因为shell的使用习惯就是这样滴，但是在Emacs里面使用Ipython,上下
方向键是去到上一行/下一行，就好像 vim 的 <strong>j</strong> <strong>k</strong>,如果要翻到上一条命令，快捷键
是 <strong>M-p</strong>,实在很不习惯，所以在查了一下Emacs manual 后，我改了一下按键绑定就实现了
我想要的效果</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nf">define-key</span> <span class="nv">comint-mode-map</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&#34;&lt;up&gt;&#34;</span><span class="p">)</span> <span class="ss">&#39;comint-previous-input</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nf">define-key</span> <span class="nv">comint-mode-map</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&#34;&lt;down&gt;&#34;</span><span class="p">)</span> <span class="ss">&#39;comint-next-input</span><span class="p">)</span>
</span></span></code></pre></div><p>Enjoy Emacs :)</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>菠萝油与天光墟</title>
    <link>https://ramsayleung.github.io/zh/</link>
    <description>Recent content on 菠萝油与天光墟</description>
    <image>
      <title>菠萝油与天光墟</title>
      <url>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.146.7</generator>
    <language>zh</language>
    <copyright>See this site&amp;rsquo;s source code here, licensed under GPLv3 ·</copyright>
    <lastBuildDate>Sat, 26 Apr 2025 17:12:10 -0700</lastBuildDate>
    <atom:link href="https://ramsayleung.github.io/zh/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>重新造轮子系列(六)：构建工具</title>
      <link>https://ramsayleung.github.io/zh/post/2025/reinvent_build_manager/</link>
      <pubDate>Sun, 20 Apr 2025 18:18:00 -0700</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2025/reinvent_build_manager/</guid>
      <description>&lt;p&gt;项目 GitHub 地址: &lt;a href=&#34;https://github.com/ramsayleung/reinvent/tree/master/build_manager&#34;&gt;Build Manager&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;前言&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; 前言&lt;/h2&gt;
&lt;p&gt;以 C 语言为例，一个程序通常由多个源文件 &lt;code&gt;.c&lt;/code&gt; 组成, 每个源文件需要先编译成目标文件 &lt;code&gt;.o&lt;/code&gt;, 再链接成最终的可执行文件。&lt;/p&gt;

&lt;figure&gt;
    
    
    &lt;input type=&#34;checkbox&#34; id=&#34;zoomCheck-63797&#34; hidden&gt;
    &lt;label for=&#34;zoomCheck-63797&#34;&gt;
    
    
    &lt;img class=&#34;zoomCheck&#34; loading=&#34;lazy&#34; src=&#34;https://ramsayleung.github.io/ox-hugo/c_program_build_phase.jpg&#34;/&gt; 
    
    
    &lt;/label&gt;
&lt;/figure&gt;

&lt;p&gt;如果只改动了其中一个源文件的内容，理想情况只需要重新编译并重新链接改动文件，而非从头构建整个项目(所谓的增量编译)。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>项目 GitHub 地址: <a href="https://github.com/ramsayleung/reinvent/tree/master/build_manager">Build Manager</a></p>
<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>以 C 语言为例，一个程序通常由多个源文件 <code>.c</code> 组成, 每个源文件需要先编译成目标文件 <code>.o</code>, 再链接成最终的可执行文件。</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-63797" hidden>
    <label for="zoomCheck-63797">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/c_program_build_phase.jpg"/> 
    
    
    </label>
</figure>

<p>如果只改动了其中一个源文件的内容，理想情况只需要重新编译并重新链接改动文件，而非从头构建整个项目(所谓的增量编译)。</p>
<p>但是如果手动管理这些依赖关系，随着源文件的增多，很容易就会变得无法维护。</p>
<p>类似的问题在软件开发中比比皆是，以我们此前实现的<a href="/zh/post/2025/reinvent_page_template/">「模板引擎」</a>为例，如果我们正使用静态网站生成器来构建个人博客(Hugo 或者 Jekyll),
当我们修改了某篇文章时，系统只需要重新生成该页面，而不必重新编译整个网站。</p>
<p>但如果我们调整了调整了网站的模板，那么所有依赖该模板的页面都需要重新渲染，而手动处理这些依赖关系既繁琐又容易出错。</p>
<p>因此我们需要一个构建工具(build tool或者叫 build maanger).</p>
<h2 id="需求"><span class="section-num">2</span> 需求</h2>
<p>构建工具的核心理念就是自动化上述的操作：</p>
<ol>
<li>定义依赖关系, 比如 <code>main.o</code> 依赖于 <code>main.c</code> 和 <code>header.h</code></li>
<li>检测变更，可以通过时间戳或者内容的哈希来判断文件是否「过时」</li>
<li>按需执行，只重新生成受影响的目标</li>
</ol>
<p>从经典的 <a href="https://www.gnu.org/software/make/">make</a>, 到现代构建系统如 <a href="https://bazel.build">Bazel</a>, 尽管它们的实现方式各异，但是基本都遵循着这一思路。</p>
<p>所以我们会参考 <code>make</code>, 从零实现一个类 <code>make</code> 的构建工具，核心功能包括：</p>
<ol>
<li>构建规则(rule)：描述目标(target), 依赖(dependency)和生成命令(recipe)</li>
<li>依赖图(DAG): 避免循环依赖并确定构建顺序</li>
<li>增量编译：仅重新生成「过期」的目标</li>
<li>变量与通配符（如 <code>@TARGET</code> 和 <code>%</code> ） 以提高灵活性.</li>
</ol>
<h2 id="设计"><span class="section-num">3</span> 设计</h2>
<h3 id="构建规则"><span class="section-num">3.1</span> 构建规则</h3>
<p>构建工具的输入是一系列的规则，每个规则必需包含三个关键要素，分别是：</p>
<ol>
<li>目标，即构建命令生成的最终结果</li>
<li>依赖，即目标依赖于哪些文件</li>
<li>生成命令：具体的命令，用于描述如何将依赖生成出目标。</li>
</ol>
<p>以 <code>make</code> 的规则文件 <code>Makefile</code> 举例:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-makefile" data-lang="makefile"><span class="line"><span class="cl"><span class="nf">target</span><span class="o">:</span> <span class="n">dependencies</span>
</span></span><span class="line"><span class="cl">    recipe
</span></span></code></pre></td></tr></table>
</div>
</div><p>以一个 C 语言程序的构建规则为例:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-makefile" data-lang="makefile"><span class="line"><span class="cl"><span class="nf">hello</span><span class="o">:</span> <span class="n">utils</span>.<span class="n">c</span> <span class="n">main</span>.<span class="n">c</span> <span class="n">utils</span>.<span class="n">h</span>
</span></span><span class="line"><span class="cl">        gcc main.c utils.c -o hello
</span></span></code></pre></td></tr></table>
</div>
</div><p>其中 <code>hello</code> 是构建目标， <code>utils.c main.c utils.h</code> 是多个依赖文件, <code>gcc main.c utils.c -o hello</code> 是生成命令.</p>
<p><code>Makefile</code> 是 <code>make</code> 专属的配置文件格式，我们可以使用 JSON 或者 YAML 作为配置文件，避免重复造轮子，只要要表达列表和嵌套关系。</p>
<p>那么为什么 <code>make</code> 不使用 JSON 或者 YAML 作为配置文件呢？因为 <code>make</code> 被造出来的时候(1976年)，JSON 和 YAML 离诞生还有几十年呢.</p>
<h3 id="依赖图"><span class="section-num">3.2</span> 依赖图</h3>
<p>以前学数据结构的时候，难免会觉得图(graph) 这个数据结构真的没有什么用，除了刷题和面试会被问到.</p>
<p>但是在开发这个构建工具的时候，会发现图是必不可少的数据结构，准确来说是有向无环图(directed acyclic graph, DAG).</p>
<p>在构建工具中，每个构建规则（target: dependencies）定义了文件之间的依赖关系，这些关系天然形成一个有向无环图（DAG）。</p>
<p>例如：</p>
<ul>
<li>A 依赖于 B 和 C（ <code>A → B, A → C</code> ）</li>
<li>B 依赖于 D（ <code>B → D</code> ）</li>
</ul>
<p>此时，*构建顺序必须满足依赖的先后关系*：D 必须在 B 之前构建，B 和 C 必须在 A 之前构建。</p>
<p>而拓扑排序的作用，正是将图中的节点排序，保证每个节点在其依赖之后被执行。</p>
<p>而如果依赖图中存在环（例如 A → B → A），拓扑排序会失败.</p>
<p>拓扑排序的经典算法有 <a href="https://www.youtube.com/watch?v=cIBFEhD77b4">Kahn</a> 算法(基于入度)与 DFS 算法, 以 Kahn 算法为例, 步骤如下:</p>
<ol>
<li>先初始化一个队列，存入所有入度(in degree)为0的节点（无依赖节点）</li>
<li>依次处理队列中的节点，并将其人图中「移除」，更新后续节点的入度</li>
<li>若最终未处理所有节点，则说明存在环</li>
</ol>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-9b93b" hidden>
    <label for="zoomCheck-9b93b">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/build_dependencies.png"/> 
    
    
    </label>
</figure>

<p>我曾经写过一篇关于拓扑排序的<a href="https://ramsayleung.github.io/en/post/2022/topological_sorting/">英文博客</a>，有兴趣可以移步阅读.</p>
<h3 id="过期检测"><span class="section-num">3.3</span> 过期检测</h3>
<p>增量编译的关键是仅重建「过期 」的目标，那么要怎么找到「过期」的目标呢？</p>
<p>最简单方式就是使用时间来作为判断标准，假如我们的源文件在上一次构建之后发生了修改，
那么我们就可以认为其对应的目标「过期」了，需要重新构建。</p>
<p>那么我们就需要记录上一次是什么时候构建的，然后再把文件最近的修改时间(last modification timestamp)作为比较, 用额外的文件来记录也太繁琐了，为此我们可以取一下巧：</p>
<p>把目标的生成时间作为上一次的构建时间，那么只要依赖的 <code>last modification timestamp</code> 大于目标的 <code>last modification timestamp</code>, 那么我们就可以认为其「过期」了。</p>
<p>这个就是 <code>make</code> 的实现方式，但是时间并不是总是可靠的，尤其是在网络环境下。</p>
<p>所以像 <code>bazel</code> 这样的现代构建系统，使用的就是源文件的哈希值来作为比较的标识：
即文件内容哈希值发生了变化，那么就认为发生内容变更，目标「过期」，需要重新生成。</p>
<h3 id="设计模式"><span class="section-num">3.4</span> 设计模式</h3>
<p>上文已经提到，我们构建工具的核心功能是解析构建规则, 构建依赖图，增量编译，变量与通配符匹配，那么我们可以很容易地写出对应的实现原型:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">loadConfig</span><span class="p">()</span><span class="o">:</span> <span class="nx">rules</span>
</span></span><span class="line"><span class="cl"><span class="nx">buildGraph</span><span class="p">(</span><span class="nx">rules</span><span class="p">)</span><span class="o">:</span> <span class="nx">graph</span>
</span></span><span class="line"><span class="cl"><span class="nx">variableExpand</span><span class="p">(</span><span class="nx">graph</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">incrementalBuild</span><span class="p">(</span><span class="nx">graph</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>那么要如何实现上面的原型呢？在面向对象的编程思路里，要不使用继承，或者是组合，而两者对应的设计模式分别对应<a href="https://refactoring.guru/design-patterns/template-method">模板方法(Template Method)</a> 与 <a href="https://refactoring.guru/design-patterns/strategy">策略模式 (Strategy Pattern)</a></p>
<p>模板方法的核心思想是继承与流程固化，在父类中定义算法的整体骨架（不可变的执行流程），将某些步骤的具体实现延迟到子类，通过 <strong><strong>继承</strong></strong> 扩展行为。</p>
<p>而策略模式核心思想是组合 + 运行时替换，将算法的每个可变部分抽象为独立策略（接口），通过 <strong><strong>组合</strong></strong> 的方式注入到主类中。</p>
<p><a href="https://third-bit.com/sdxjs/build-manager/">System Design By Example</a> 原书使用的是模板方法，其实现可谓是充分展示了继承的不足：紧耦合，新增功能需要创建新子类，导致类爆炸，各种类变量在继承链传递，真的是无法维护，最后甚至「丧心病狂」地实现了八层继承，真的是完美诠释了 <a href="https://en.wikipedia.org/wiki/Fragile_base_class">Fragile base class</a> 的 code smell.</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-8a381" hidden>
    <label for="zoomCheck-8a381">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/reinvent_template_method_inheritance_chain.png"/> 
    
    
    </label>
</figure>

<p>在体现到维护与扩展 <code>template method</code> 代码的痛苦之后，我最终选择了策略模式，因为其可以实现不同策略之间的松耦合，每个策略可以独立修改和扩展，不影响其他组件；易于测试，每个策略可被单独测试。</p>
<p>此外，构建工具需求可能会很多样，比如支持不同的增量编译算法（时间戳与内容哈希），支持不同的配置格式(Makefile/JSON/YAML), 策略模式不需要改写核心代码即可支持这些变体，并且支持不同策略的组合。</p>
<p>为了方便对比两者实现的差别，我把 <a href="https://github.com/ramsayleung/reinvent/tree/master/build_manager/template_method">template method</a> 和 <a href="https://github.com/ramsayleung/reinvent/tree/master/build_manager/strategy">strategy pattern</a> 的实现都保留了。</p>
<h3 id="自动变量"><span class="section-num">3.5</span> 自动变量</h3>
<p><code>make</code> 支持在 <code>Makefile</code> 中使用自动变量(Automatic Variables)来指代目标或者依赖，而无需显示将目标或者依赖名写出来，其变量含义如下:</p>
<p>假设目标是 <code>output: main.o utils.o</code></p>
<table>
  <thead>
      <tr>
          <th>变量</th>
          <th>含义</th>
          <th>示例</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><code>%</code></td>
          <td>通配符, 表示匹配任意非空字符串，通常用于模式规则（Pattern Rules）中</td>
          <td><code>%.o: %.c</code> 匹配任意 <code>.c</code> 文件生成 <code>.o</code></td>
      </tr>
      <tr>
          <td><code>$@</code></td>
          <td>目标文件名</td>
          <td><code>output</code></td>
      </tr>
      <tr>
          <td><code>$^</code></td>
          <td>所有依赖文件</td>
          <td><code>main.o utils.o</code></td>
      </tr>
      <tr>
          <td><code>$&lt;</code></td>
          <td>第一个依赖文件</td>
          <td><code>main.o</code></td>
      </tr>
  </tbody>
</table>
<p>这些自动变量可以极大简化 Makefile 的编写，避免重复输入文件名, 只不过 <code>$@</code> 这样的格式有点难以理解，我们可以定义自己的自动变量:</p>
<table>
  <thead>
      <tr>
          <th>我们的自动变量</th>
          <th><code>make</code> 变量</th>
          <th>含义</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><code>%</code></td>
          <td><code>%</code></td>
          <td>通配符, 表示匹配任意非空字符串</td>
      </tr>
      <tr>
          <td><code>@TARGET</code></td>
          <td><code>$@</code></td>
          <td>目标文件名</td>
      </tr>
      <tr>
          <td><code>@DEPENDENCIES</code></td>
          <td><code>$^</code></td>
          <td>所有依赖文件</td>
      </tr>
      <tr>
          <td><code>@DEP[0]</code></td>
          <td><code>$&lt;</code></td>
          <td>第一个依赖文件</td>
      </tr>
      <tr>
          <td><code>@DEP[n-1]</code></td>
          <td></td>
          <td>第 <code>n</code> 个依赖文件</td>
      </tr>
  </tbody>
</table>
<h2 id="实现"><span class="section-num">4</span> 实现</h2>
<p>在介绍完设计细节，实现就没有太多需要提及的内容，根据<a href="https://github.com/ramsayleung/reinvent/blob/master/build_manager/strategy/driver.ts">入口函数</a>以及<a href="https://github.com/ramsayleung/reinvent/tree/master/__tests__/build_manager/strategy">单元测试</a>就能理解个七七八八了。</p>
<h2 id="示例"><span class="section-num">5</span> 示例</h2>
<p>假设我们的 <a href="https://github.com/ramsayleung/reinvent/tree/master/build_manager/strategy/src">src</a> 目录有如下的文件:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">&gt; tree src
</span></span><span class="line"><span class="cl">src
</span></span><span class="line"><span class="cl">├── Makefile
</span></span><span class="line"><span class="cl">├── main.c
</span></span><span class="line"><span class="cl">├── utils.c
</span></span><span class="line"><span class="cl">└── utils.h
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>main.c</code> 内容如下:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;utils.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nf">print_message</span><span class="p">(</span><span class="s">&#34;Hello from Makefile!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>Makefile</code> 的内容如下:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-makefile" data-lang="makefile"><span class="line"><span class="cl"><span class="nf">hello</span><span class="o">:</span> <span class="n">utils</span>.<span class="n">c</span> <span class="n">main</span>.<span class="n">c</span> <span class="n">utils</span>.<span class="n">h</span>
</span></span><span class="line"><span class="cl">        gcc main.c utils.c -o hello
</span></span><span class="line"><span class="cl"><span class="nf">varexpand_hello</span><span class="o">:</span> <span class="n">utils</span>.<span class="n">c</span> <span class="n">main</span>.<span class="n">c</span>
</span></span><span class="line"><span class="cl">        gcc $^ -o <span class="nv">$@</span>
</span></span><span class="line"><span class="cl"><span class="nf">clean</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        rm -f hello
</span></span><span class="line"><span class="cl"><span class="nf">cleanvar</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        rm -rf varexpand_hello
</span></span></code></pre></td></tr></table>
</div>
</div><p>通过 <code>hello</code> 和 <code>varexpand_hello</code> 目标可分别生成 <code>hello</code> 与 <code>varexpand_hello</code> 的目标文件:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">&gt; make hello
</span></span><span class="line"><span class="cl">gcc main.c utils.c -o hello
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt; ./hello
</span></span><span class="line"><span class="cl">Message: Hello from Makefile!
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt; make varexpand_hello
</span></span><span class="line"><span class="cl">gcc utils.c main.c -o varexpand_hello
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt; ./varexpand_hello
</span></span><span class="line"><span class="cl">Message: Hello from Makefile!
</span></span></code></pre></td></tr></table>
</div>
</div><p>与 <code>Makefile</code> 相同含义的构建规则 <code>build_c_app.yml</code> 如下:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl">- <span class="nt">target</span><span class="p">:</span><span class="w"> </span><span class="l">hello</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">depends</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">src/utils.c</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">src/utils.h</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">src/main.c</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">recipes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="s2">&#34;gcc src/main.c src/utils.c -o hello&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">target</span><span class="p">:</span><span class="w"> </span><span class="l">varexpand_hello</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">depends</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">src/utils.c</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">src/main.c</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">recipes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="s2">&#34;gcc @DEPENDENCIES -o @TARGET&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">target</span><span class="p">:</span><span class="w"> </span><span class="l">clean</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">depends</span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">recipes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="s2">&#34;rm -rf hello&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">target</span><span class="p">:</span><span class="w"> </span><span class="l">cleanvar</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">depends</span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">recipes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="s2">&#34;rm -rf varexpand_hello&#34;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">&gt; npx tsx driver.ts build_c_app.yml <span class="c1"># 未指定目标，构建第一个目标，对齐 make</span>
</span></span><span class="line"><span class="cl">gcc src/main.c src/utils.c -o hello
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt; npx tsx driver.ts build_c_app.yml hello <span class="c1"># 生成 hello</span>
</span></span><span class="line"><span class="cl">target: hello is up to date, skipping execute the recipe
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt; ./hello
</span></span><span class="line"><span class="cl">Message: Hello from Makefile!
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt; npx tsx driver.ts build_c_app.yml varexpand_hello <span class="c1"># 生成 varexpand_hello</span>
</span></span><span class="line"><span class="cl">gcc src/utils.c src/main.c -o varexpand_hello
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt; ./varexpand_hello
</span></span><span class="line"><span class="cl">Message: Hello from Makefile!
</span></span></code></pre></td></tr></table>
</div>
</div><p>测试增量编译，重新构建 hello 目标</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">&gt; npx tsx driver.ts build_c_app.yml hello
</span></span><span class="line"><span class="cl">target: hello is up to date, skipping execute the recipe
</span></span></code></pre></td></tr></table>
</div>
</div><p>修改 <code>main.c</code> 源码:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;utils.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nf">print_message</span><span class="p">(</span><span class="s">&#34;Hello from build_c_app.yml!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>重新编译及运行 <code>hello</code> 目标:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">&gt; npx tsx driver.ts build_c_app.yml hello
</span></span><span class="line"><span class="cl">gcc src/main.c src/utils.c -o hello
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt; ./hello
</span></span><span class="line"><span class="cl">Message: Hello from build_c_app.yml!
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="总结"><span class="section-num">6</span> 总结</h2>
<p>终于又造了一个轮子，完成了这个类 <code>make</code> 的构建工具:</p>
<p>除了核心的依赖管理和增量编译，还实现了自动变量替换(如 <code>@TARGET</code>)、通配符规则和策略模式的灵活扩展。</p>
<p>写到这里总会忍不住地想起Unix的 KISS 原则, 即 <em>Keep it simple, stupid</em>, <strong>复杂的工具往往由简单的概念组合而成</strong></p>
<p><a href="/zh/post/2025/reinvent_project/">回到本系列的目录</a></p>
<h2 id="参考"><span class="section-num">7</span> 参考</h2>
<ul>
<li><a href="https://third-bit.com/sdxjs/build-manager/">https://third-bit.com/sdxjs/build-manager/</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>重新造轮子系列(五)：模板引擎</title>
      <link>https://ramsayleung.github.io/zh/post/2025/reinvent_page_template/</link>
      <pubDate>Mon, 14 Apr 2025 22:59:00 -0700</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2025/reinvent_page_template/</guid>
      <description>&lt;p&gt;项目 GitHub 地址: &lt;a href=&#34;https://github.com/ramsayleung/reinvent/tree/master/page_templates&#34;&gt;Page Template&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;前言&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; 前言&lt;/h2&gt;
&lt;p&gt;在现代网站开发里，内容与表现的分离已经成为基本准则(Separation of content and presentation),
比如 HTML 就是负责内容展现，而 CSS 就是负责页面的样式。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>项目 GitHub 地址: <a href="https://github.com/ramsayleung/reinvent/tree/master/page_templates">Page Template</a></p>
<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>在现代网站开发里，内容与表现的分离已经成为基本准则(Separation of content and presentation),
比如 HTML 就是负责内容展现，而 CSS 就是负责页面的样式。</p>
<p>而手动更新和编写 HTML 也是一件费时费力并且容易出错的工作，尤其是需要同时修改多个页面的时候，
因此有聪明的程序员就发明了名为静态网页生成器(static site generator)的技术，可以按需生成网页。</p>
<p>事实上，互联网上的大多数页面都是通过某种形式的静态网页生成器生成出来的。</p>
<p>而静态网页生成器的核心就是「模板引擎」，在过去三十年，诞生过无数的模板引擎，
甚至有位加拿大的程序员为了更方便记录谁访问了他的简历，他还发明了一门编程语言来做模板引擎的活，这就是「世界上最好的编程语言：PHP」。</p>
<p>PHP 可以算是 Web时代的王者之一，凭借着 <code>LAMP(Linux, Apache, MySql, PHP)</code> 架构不断开疆扩土，攻城掠地，而PHP本身也不断有新的框架被造出来，为谁是最好的「模板引擎」打得头破血流。</p>
<p>虽然关于「模板引擎」的战争至今仍未停歇，但细分下来，「模板引擎」可以分成三个主要的流派：</p>
<h3 id="嵌入式语法"><span class="section-num">1.1</span> 嵌入式语法</h3>
<p>在 Markdown/HTML 这样的标识语言里面嵌入编程语言，使用 <code>&lt;% %&gt;</code> 等符号来标记代码与文本内容，其中的代表包括 Javascript 的 <a href="https://ejs.co/">EJS</a>, Ruby 的 <a href="https://docs.ruby-lang.org/en/2.3.0/ERB.html">ERB</a>, 以及 Python 的 <a href="https://jinja.palletsprojects.com/en/stable/">Jinja</a>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c">&lt;!--</span> <span class="nx">用特殊标记混合JavaScript与HTML</span> <span class="o">--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;%</span> <span class="k">if</span> <span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span> <span class="o">%&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;&lt;%=</span> <span class="nx">user</span><span class="p">.</span><span class="nx">name</span> <span class="o">%&gt;&lt;</span><span class="err">/h1&gt;</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;%</span> <span class="p">}</span> <span class="o">%&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>其优点就是可以直接使用嵌入的编程语言，功能强大，学习成本低，缺点就是模板很容易变成混杂内容和逻辑的「屎山」代码</p>
<h3 id="自定义语法"><span class="section-num">1.2</span> 自定义语法</h3>
<p>不嵌入现成的编程语言，而是自己开发一套 mini 编程语言，或者叫 DSL(domain specifc language), 代表有 <a href="https://pages.github.com/">GitHub Page</a> 用到的 <a href="https://jekyllrb.com/">Jekyll</a>, 还有 Golang 开发的著名静态网页生成器 <a href="https://gohugo.io/">Hugo</a>, 都是使用自定义的语法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="p">{</span><span class="o">%</span> <span class="nx">comment</span> <span class="o">%</span><span class="p">}</span> <span class="nx">自创模板语法</span> <span class="p">{</span><span class="o">%</span> <span class="nx">endcomment</span> <span class="o">%</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span><span class="o">%</span> <span class="k">for</span> <span class="nx">post</span> <span class="nx">in</span> <span class="nx">posts</span> <span class="o">%</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">{{</span> <span class="nx">post</span><span class="p">.</span><span class="nx">title</span> <span class="p">|</span> <span class="nx">truncate</span><span class="p">:</span> <span class="mi">30</span> <span class="p">}}</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span><span class="o">%</span> <span class="nx">endfor</span> <span class="o">%</span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>优点就是语法简洁，缺点就是发展下去，可以又是自己造了一个新的编程语言，功能还不如通用的编程语言强大</p>
<h3 id="html指令"><span class="section-num">1.3</span> HTML指令</h3>
<p>不再在 HTML 中嵌入编程语言或DSL，取而代之的是直接给 HTML 定义特定的属性，不同的属性代表不同的含义，但是使用的还是标准 HTML.</p>
<p>最著名的就是 <a href="https://vuejs.org/">Vuejs</a>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="c">&lt;!-- 用特殊属性实现逻辑 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">v-if</span><span class="o">=</span><span class="s">&#34;user&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>{{ user.name }}<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>优点是保持HTML的合法性与简洁，不需要额外的 parser, 缺点就是指令功能受限，不如内嵌编程语言强大，生态工具较少, 灵活性差。</p>
<p>本文的模板引擎就会以这个流派为范式进行开发。</p>
<h3 id="特例之php"><span class="section-num">1.4</span> 特例之PHP</h3>
<p>分析完三种流派，就会奇怪 PHP 究竟是属于哪个流派呢？</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;&lt;?</span><span class="nx">php</span> <span class="k">echo</span> <span class="nv">$title</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="err">&lt;/h1&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">&lt;ul&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">  &lt;?php foreach ($items as $item) { ?&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">    &lt;li&gt;&lt;?php echo $item; ?&gt;&lt;/li&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">  &lt;?php } ?&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">&lt;/ul&gt;
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>其实 PHP 本质就是流派二，只是这门专门用于「模板引擎」的 mini 语言，最后演化成了一门专门的编程语言，只是这个编程语言最擅长的还是网页开发，即是做「模板引擎」。</p>
<p>所以 PHP 是从流派二演化成流派一。</p>
<h2 id="目标"><span class="section-num">2</span> 目标</h2>
<p>可能不是所有的朋友都了解 Vue，所以在设计我们的模板引擎之前，先来明确一下需求与目标(scope).</p>
<p>假设我们有如下的 JSON 数据:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">names</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;Johnson&#39;</span><span class="p">,</span> <span class="s1">&#39;Vaughan&#39;</span><span class="p">,</span> <span class="s1">&#39;Jackson&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果有如下的模板:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Expect three items<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">ul</span> <span class="na">z-loop</span><span class="o">=</span><span class="s">&#34;item:names&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;&lt;</span><span class="nt">span</span> <span class="na">z-var</span><span class="o">=</span><span class="s">&#34;item&#34;</span><span class="p">/&gt;&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>那么 <code>names</code> 就会被赋值给 <code>item</code>, 然后每一个变量都会被展开成 <code>&lt;span&gt;{item}&lt;/span&gt;</code>, 所以上面的模板就会被展开成:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Expect three items<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;&lt;</span><span class="nt">span</span><span class="p">&gt;</span>Johnson<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;&lt;</span><span class="nt">span</span><span class="p">&gt;</span>Vaughan<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;&lt;</span><span class="nt">span</span><span class="p">&gt;</span>Jackson<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>而不同的指令会有不同的效果，如上的 <code>z-loop</code> 就是遍历一个数组，而 <code>z-if</code> 就是判断一个变量是否为 <code>true</code>, 为 <code>true</code> 则输出，否则则不输出.</p>
<p>如有数据:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;showThis&#34;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;doNotShowThis&#34;</span><span class="o">:</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>和模板:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">p</span> <span class="na">z-if</span><span class="o">=</span><span class="s">&#34;showThis&#34;</span><span class="p">&gt;</span>This should be shown.<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">p</span> <span class="na">z-if</span><span class="o">=</span><span class="s">&#34;doNotShowThis&#34;</span><span class="p">&gt;</span>This should <span class="p">&lt;</span><span class="nt">em</span><span class="p">&gt;</span>not<span class="p">&lt;/</span><span class="nt">em</span><span class="p">&gt;</span> be shown.<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>就会被渲染成:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>This should be shown.<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们可以先支持以下的指令集:</p>
<table>
  <thead>
      <tr>
          <th>指令集</th>
          <th>含义</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><code>z-loop</code></td>
          <td>循环遍历数组生成元素内容</td>
      </tr>
      <tr>
          <td><code>z-if</code></td>
          <td>条件渲染，值为false时移除元素</td>
      </tr>
      <tr>
          <td><code>z-var</code></td>
          <td>将变量值输出到元素内容</td>
      </tr>
      <tr>
          <td><code>z-num</code></td>
          <td>直接输出数字值到元素内容</td>
      </tr>
  </tbody>
</table>
<h2 id="设计思路"><span class="section-num">3</span> 设计思路</h2>
<h3 id="stack-frame"><span class="section-num">3.1</span> stack frame</h3>
<p>模板引擎的核心是将「数据」+「模板」渲染成页面，那么数据要如何保存呢？以什么数据结构和变量形式来处理呢？</p>
<p>最简单的方式肯定就是使用全局变量的 HashMap 来保存所有的变量，但是如果存在两个同名的变量，那么 HashMap 这种数据结构就不适用。</p>
<p>更何况，可变的全局变量可谓是万恶之源，不知道有多少 bug 都是源自可变的全局变量。</p>
<p>在编译原理，保存变量的标准做法就是使用 stack frame, 每次进入一个函数就创建一个新的栈(<code>stack</code>), 每次函数调用都有自己的独立的栈，可以理解成每个栈就是一个 <code>HashMap</code>, 而每创建一个栈就是向 <code>List</code> 里面 <code>push</code> 一个新的 <code>HashMap</code>, 同一个函数里面不能有同名的变量，那能保证栈里面的值是唯一。</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-338dd" hidden>
    <label for="zoomCheck-338dd">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/reinvent_stack_frame.jpg"/> 
    
    
    </label>
</figure>

<p>谈及变量和 stack frame, 编程语言中有个 <code>作用域(scoping)</code> 的概念, 定义了变量会怎么被程序访问到。</p>
<p>主要有两种作用域，分别被称为：</p>
<p>词法作用域(<a href="https://en.wikipedia.org/wiki/Scope_%28computer_science%29">Lexical/Static Scoping</a>): 在编译时就将变量给解析确定了下来，大部分编程语言使用的都是语法作用域，比如 Javascript, C/C++, Rust, Golang, Swift, Java 这个名单还可以很长.</p>
<p>因为其性能更优，并且行为是相当明确的，不需要分析运行时代码再来确定，如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span> <span class="c1">// 全局变量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// 词法作用域，问题绑定全局变量 x
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">bar</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span> <span class="c1">// 局部变量，不会影响 foo 中的 x
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">foo</span><span class="p">();</span> <span class="c1">// 调用 foo(), 仍然需要访问全局变量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">foo</span><span class="p">();</span> <span class="c1">// 输出: 10 (全局变量)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">bar</span><span class="p">();</span> <span class="c1">// 输出: 10 (还是全局变量，而非局部变量)
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>另外一种作用域是动态作用域(Dynamic Scoping): 在运行时通过遍历调用栈来确定变量的值，现在已经很少有编程语言使用了，比如是 Perl4, Bash, 或者是 Emacs Lisp:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="nv">x</span><span class="o">=</span><span class="s2">&#34;global&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">foo<span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="nb">echo</span> <span class="s2">&#34;</span><span class="nv">$x</span><span class="s2">&#34;</span>  <span class="c1"># x 的值取决于谁来调用 `foo`, 运行时决定</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">bar<span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="nb">local</span> <span class="nv">x</span><span class="o">=</span><span class="s2">&#34;local&#34;</span>  <span class="c1"># 动态作用域: 会影响 foo 的值</span>
</span></span><span class="line"><span class="cl">  foo
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">foo  <span class="c1"># 输出: &#34;global&#34; (x 是全局变量)</span>
</span></span><span class="line"><span class="cl">bar  <span class="c1"># 输出: &#34;local&#34;  (x 是 bar 函数的局部变量)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>也就是 <code>foo</code> 中 <code>x</code> 的值还取决于调用方的栈，因为在 <code>bar</code> 里面调用 <code>foo</code> 时， bash 解释器会把 <code>bar</code> 的栈一并传给 <code>foo</code>, 所以 <code>foo</code> 就以最近栈中 <code>x</code> 的值为准。</p>
<p>这种作用域实现方式虽然简单，但是对于程序员 debug 来说简直是噩梦，所以在现代编程语言基本绝迹了。</p>
<p>话虽如此，但是对于模板引擎而言，动态作用域却是主流选择，主要是因为：</p>
<ol>
<li>模板的特性需求：循环/条件语句需要运行时创建临时变量</li>
<li>隔离性要求：避免不同模板间的变量污染</li>
<li>异常处理：未定义变量可返回 <code>undefined/null</code> 而非报错</li>
</ol>
<p>因此我们的模板引擎也会使用动态作用域来保存变量，即 <code>List&lt;HashMap&lt;String, String&gt;&gt;</code> 的数据结构.</p>
<h3 id="vistor-pattern"><span class="section-num">3.2</span> vistor pattern</h3>
<p>确定好如何保存变量之后，下一个问题就是如何遍历并且生成模板。</p>
<p>解析HTML之后生成的是 DOM(Document Object Model) 结构, 本质是多叉树遍历，按照指令处理栈的变量，然后再把 HTML 输出, 如下:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">traverse</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="s1">&#39;text&#39;</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`&lt;</span><span class="si">${</span><span class="nx">node</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span><span class="sb">&gt;`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">node</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">traverse</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`&lt;/</span><span class="si">${</span><span class="nx">node</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span><span class="sb">&gt;`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>实现是很简单，但是我们把「遍历逻辑」和「不同指令对应的逻辑」耦合在一起了，很难维护。</p>
<p>并且我们现在只支持4个指令，或者未来要增加其他指令，只要在 <code>traverse</code> 里面再增加 if-else 逻辑，基本没有扩展性。</p>
<p>所以我们需要优化的点就是，把「遍历逻辑」和「指令逻辑」分开，这样就易于我们扩展新指令。</p>
<p>要解耦，想想有啥设计模式合适，遍寻23种设计模式，<a href="https://refactoring.guru/design-patterns/visitor">访问者(Vistor)模式 </a>就很合适用来做解耦遍历逻辑和指令逻辑.</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-9802c" hidden>
    <label for="zoomCheck-9802c">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/reinvent_vistor_pattern.jpg"/> 
    
    
    </label>
</figure>

<p>不了解 Vistor 模式的同学可以先看下这篇<a href="https://refactoring.guru/design-patterns/visitor">文章</a>, 而Rust 非常著名的序列化框架 <a href="https://serde.rs">Serde</a> 就通过 <a href="https://serde.rs/impl-deserialize.html">Vistor</a> 模式可以让用户自定义如何序列化或反序列化某种类型的数据。</p>
<h3 id="接口设计"><span class="section-num">3.3</span> 接口设计</h3>
<p>既然选定了 <code>Vistor</code> 模式，那么就让我们来设计具体的接口。</p>
<p><code>Vistor</code> 接口类，接受某个 DOM 元素作为根节点，然后通过 <code>walk</code> 函数遍历给定的节点，或者节点为空则遍历根节点:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">Node</span><span class="p">,</span> <span class="nx">NodeWithChildren</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&#34;domhandler&#34;</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">abstract</span> <span class="kr">class</span> <span class="nx">Visitor</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">private</span> <span class="nx">root</span><span class="o">:</span> <span class="nx">Node</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">constructor</span><span class="p">(</span><span class="nx">root</span><span class="o">:</span> <span class="nx">Node</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">root</span> <span class="o">=</span> <span class="nx">root</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">walk</span><span class="p">(</span><span class="nx">node</span><span class="o">:</span> <span class="nx">Node</span> <span class="o">=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">node</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">node</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">root</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="nx">node</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">node</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">child</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">walk</span><span class="p">(</span><span class="nx">child</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">close</span><span class="p">(</span><span class="nx">node</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// handler to be called when first arrive at a node
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kr">abstract</span> <span class="nx">open</span><span class="p">(</span><span class="nx">node</span><span class="o">:</span> <span class="nx">Node</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// handler to be called when finished with a node
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kr">abstract</span> <span class="nx">close</span><span class="p">(</span><span class="nx">node</span><span class="o">:</span> <span class="nx">Node</span><span class="p">)</span><span class="o">:</span> <span class="k">void</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>其中的 <code>open</code> 函数用于在进入一个节点时被调用，相当于是在前序位置被调用，返回值来表现是否需要遍历其子节点；而 <code>close</code> 函数在离开一个节点前，即相当于后序位置被调用。</p>
<p>关于二叉树的前序位置和后序位置，可见这篇讲解二叉树算法的<a href="https://labuladong.online/algo/essential-technique/binary-tree-summary/#%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7">文章</a></p>
<p><code>Vistor</code> 算法里面的关键即是实现「遍历逻辑」与「每个节点处理逻辑」的解耦，遍历逻辑我们已经实现在 <code>Vistor</code> 基类了，现在就需要实现一个具体的子类来表示节点的处理逻辑:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">enum</span> <span class="nx">HandlerType</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">If</span> <span class="o">=</span> <span class="s1">&#39;z-if&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Loop</span> <span class="o">=</span> <span class="s1">&#39;z-loop&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Num</span> <span class="o">=</span> <span class="s1">&#39;z-num&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Var</span> <span class="o">=</span> <span class="s1">&#39;z-var&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">HANDLERS</span><span class="o">:</span> <span class="nx">Record</span><span class="o">&lt;</span><span class="nx">HandlerType</span><span class="p">,</span> <span class="nx">NodeHandler</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="nx">HandlerType</span><span class="p">.</span><span class="nx">If</span><span class="p">]</span><span class="o">:</span> <span class="k">new</span> <span class="nx">IfHandler</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="nx">HandlerType</span><span class="p">.</span><span class="nx">Loop</span><span class="p">]</span><span class="o">:</span> <span class="k">new</span> <span class="nx">LoopHandler</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="nx">HandlerType</span><span class="p">.</span><span class="nx">Num</span><span class="p">]</span><span class="o">:</span> <span class="k">new</span> <span class="nx">NumHandler</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="nx">HandlerType</span><span class="p">.</span><span class="nx">Var</span><span class="p">]</span><span class="o">:</span> <span class="k">new</span> <span class="nx">VarHandler</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">class</span> <span class="nx">Expander</span> <span class="kr">extends</span> <span class="nx">Visitor</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">public</span> <span class="nx">env</span><span class="o">:</span> <span class="nx">Env</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kr">private</span> <span class="nx">handlers</span><span class="o">:</span> <span class="nx">Record</span><span class="o">&lt;</span><span class="nx">HandlerType</span><span class="p">,</span> <span class="nx">NodeHandler</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="kr">private</span> <span class="nx">result</span><span class="o">:</span> <span class="nx">string</span><span class="p">[]</span>
</span></span><span class="line"><span class="cl">  <span class="nx">constructor</span><span class="p">(</span><span class="nx">root</span><span class="o">:</span> <span class="nx">Node</span><span class="p">,</span> <span class="nx">vars</span><span class="o">:</span> <span class="nb">Object</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">super</span><span class="p">(</span><span class="nx">root</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">env</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Env</span><span class="p">(</span><span class="nx">vars</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">handlers</span> <span class="o">=</span> <span class="nx">HANDLERS</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">result</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">open</span><span class="p">(</span><span class="nx">node</span><span class="o">:</span> <span class="nx">Node</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="s1">&#39;text&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="kr">const</span> <span class="nx">textNode</span> <span class="o">=</span> <span class="nx">node</span> <span class="nx">as</span> <span class="nx">Text</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">output</span><span class="p">(</span><span class="nx">textNode</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">hasHandler</span><span class="p">(</span><span class="nx">node</span> <span class="nx">as</span> <span class="nx">Element</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">getHandler</span><span class="p">(</span><span class="nx">node</span> <span class="nx">as</span> <span class="nx">Element</span><span class="p">).</span><span class="nx">open</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">node</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">showTag</span><span class="p">(</span><span class="nx">node</span> <span class="nx">as</span> <span class="nx">Element</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">close</span><span class="p">(</span><span class="nx">node</span><span class="o">:</span> <span class="nx">Node</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="s1">&#39;text&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="s1">&#39;tag&#39;</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">hasHandler</span><span class="p">(</span><span class="nx">node</span> <span class="nx">as</span> <span class="nx">Element</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">getHandler</span><span class="p">(</span><span class="nx">node</span> <span class="nx">as</span> <span class="nx">Element</span><span class="p">).</span><span class="nx">close</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">node</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">showTag</span><span class="p">(</span><span class="nx">node</span> <span class="nx">as</span> <span class="nx">Element</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 判断是否有 z-* 属性对应的指令处理器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">hasHandler</span><span class="p">(</span><span class="nx">node</span><span class="o">:</span> <span class="nx">Element</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="nx">name</span> <span class="k">in</span> <span class="nx">node</span><span class="p">.</span><span class="nx">attribs</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="nx">name</span> <span class="k">in</span> <span class="k">this</span><span class="p">.</span><span class="nx">handlers</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">getHandler</span><span class="p">(</span><span class="nx">node</span><span class="o">:</span> <span class="nx">Element</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">possible</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">attribs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">name</span> <span class="p">=&gt;</span> <span class="nx">name</span> <span class="k">in</span> <span class="k">this</span><span class="p">.</span><span class="nx">handlers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">assert</span><span class="p">(</span><span class="nx">possible</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;Should be exactly one handler&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">handlers</span><span class="p">[</span><span class="nx">possible</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 将 tag 标签及属性输出到 output 去，但排除 `z-` 开头的指令
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">showTag</span><span class="p">(</span><span class="nx">node</span><span class="o">:</span> <span class="nx">Element</span><span class="p">,</span> <span class="nx">closing</span><span class="o">:</span> <span class="kr">boolean</span><span class="p">)</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">output</span><span class="p">(</span><span class="nx">text</span><span class="o">:</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">((</span><span class="nx">text</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;UNDEF&#39;</span> <span class="o">:</span> <span class="nx">text</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>Expander</code> 的逻辑也并不复杂，每次遍历到一个 <code>DOM</code> 元素的时候，通过元素类似执行对应的操作，如果是 <code>z-</code> 开头的指令，就看下能否找到对应指令的处理器:</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-e5861" hidden>
    <label for="zoomCheck-e5861">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/reinvent_expander_design.png"/> 
    
    
    </label>
</figure>

<p>仔细观察代码会发现，不同的指令对应的处理器实现了 <code>NodeHandler</code> 接口，定义在前序位置和后序位置处理节点的逻辑，并按指令名保存在 <code>HANDLER</code> 中：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">interface</span> <span class="nx">NodeHandler</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">open</span><span class="p">(</span><span class="nx">expander</span><span class="o">:</span> <span class="nx">Expander</span><span class="p">,</span> <span class="nx">node</span><span class="o">:</span> <span class="nx">Element</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">close</span><span class="p">(</span><span class="nx">expander</span><span class="o">:</span> <span class="nx">Expander</span><span class="p">,</span> <span class="nx">node</span><span class="o">:</span> <span class="nx">Element</span><span class="p">)</span><span class="o">:</span> <span class="k">void</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这就意味着，如果需要增加一个新的指令，该指令处理器只需要实现 <code>NodeHandler</code> 接口，并添加到 <code>HANDLER</code> 即可，不需要改动其他的已有代码，我们就实现了「遍历逻辑」与「指令逻辑」的解耦。</p>
<h2 id="实现"><span class="section-num">4</span> 实现</h2>
<h3 id="支持的指令集"><span class="section-num">4.1</span> 支持的指令集</h3>
<p>不同的指令集的差别只是如何实现 <code>open</code> 和 <code>close</code> 逻辑，我就不一一赘述了，已支持的指令集及实现列表如下：</p>
<table>
  <thead>
      <tr>
          <th>指令</th>
          <th>作用</th>
          <th>实现</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><code>z-if</code></td>
          <td>条件渲染，值为false时移除元素</td>
          <td><a href="https://github.com/ramsayleung/reinvent/blob/master/page_templates/z-if.ts">z-if.ts</a></td>
      </tr>
      <tr>
          <td><code>z-include</code></td>
          <td>引入外部HTML文件内容</td>
          <td><a href="https://github.com/ramsayleung/reinvent/blob/master/page_templates/z-include.ts">z-include.ts</a></td>
      </tr>
      <tr>
          <td><code>z-iteration</code></td>
          <td>数字迭代，生成序列内容</td>
          <td><a href="https://github.com/ramsayleung/reinvent/blob/master/page_templates/z-iteration.ts">z-iteration.ts</a></td>
      </tr>
      <tr>
          <td><code>z-literal</code></td>
          <td>保留元素原始属性不解析</td>
          <td><a href="https://github.com/ramsayleung/reinvent/blob/master/page_templates/z-literal.ts">z-literal.ts</a></td>
      </tr>
      <tr>
          <td><code>z-loop</code></td>
          <td>循环遍历数组生成元素内容</td>
          <td><a href="https://github.com/ramsayleung/reinvent/blob/master/page_templates/z-loop.ts">z-loop.ts</a></td>
      </tr>
      <tr>
          <td><code>z-num</code></td>
          <td>直接输出数字值到元素内容</td>
          <td><a href="https://github.com/ramsayleung/reinvent/blob/master/page_templates/z-num.ts">z-num.ts</a></td>
      </tr>
      <tr>
          <td><code>z-snippet</code></td>
          <td>定义可复用的HTML片段</td>
          <td><a href="https://github.com/ramsayleung/reinvent/blob/master/page_templates/z-snippet.ts">z-snippet.ts</a></td>
      </tr>
      <tr>
          <td><code>z-trace</code></td>
          <td>打印变量值到控制台（调试用）</td>
          <td><a href="https://github.com/ramsayleung/reinvent/blob/master/page_templates/z-trace.ts">z-trace.ts</a></td>
      </tr>
      <tr>
          <td><code>z-var</code></td>
          <td>将变量值输出到元素内容</td>
          <td><a href="https://github.com/ramsayleung/reinvent/blob/master/page_templates/z-var.ts">z-var.ts</a></td>
      </tr>
  </tbody>
</table>
<h3 id="示例"><span class="section-num">4.2</span> 示例</h3>
<p>假设有数据如下:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">vars</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;firstVariable&#34;</span><span class="o">:</span> <span class="s2">&#34;firstValue&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;secondVariable&#34;</span><span class="o">:</span> <span class="s2">&#34;secondValue&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;variableName&#34;</span><span class="o">:</span> <span class="s2">&#34;variableValue&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;showThis&#34;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;doNotShowThis&#34;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;names&#34;</span><span class="o">:</span> <span class="p">[</span><span class="s2">&#34;Johnson&#34;</span><span class="p">,</span> <span class="s2">&#34;Vaughan&#34;</span><span class="p">,</span> <span class="s2">&#34;Jackson&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="z-num"><span class="section-num">4.2.1</span> z-num</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;&lt;</span><span class="nt">span</span> <span class="na">z-num</span><span class="o">=</span><span class="s">&#34;123&#34;</span><span class="p">/&gt;&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>模板展开如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;&lt;</span><span class="nt">span</span><span class="p">&gt;</span>123<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="z-var"><span class="section-num">4.2.2</span> z-var</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;&lt;</span><span class="nt">span</span> <span class="na">z-var</span><span class="o">=</span><span class="s">&#34;variableName&#34;</span><span class="p">/&gt;&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>模板展开如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;&lt;</span><span class="nt">span</span><span class="p">&gt;</span>variableValue<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="z-if"><span class="section-num">4.2.3</span> z-if</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">p</span> <span class="na">z-if</span><span class="o">=</span><span class="s">&#34;showThis&#34;</span><span class="p">&gt;</span>This should be shown.<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">p</span> <span class="na">z-if</span><span class="o">=</span><span class="s">&#34;doNotShowThis&#34;</span><span class="p">&gt;</span>This should <span class="p">&lt;</span><span class="nt">em</span><span class="p">&gt;</span>not<span class="p">&lt;/</span><span class="nt">em</span><span class="p">&gt;</span> be shown.<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>模板展开如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>This should be shown.<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="z-loop"><span class="section-num">4.2.4</span> z-loop</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Expect three items<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">ul</span> <span class="na">z-loop</span><span class="o">=</span><span class="s">&#34;item:names&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;&lt;</span><span class="nt">span</span> <span class="na">z-var</span><span class="o">=</span><span class="s">&#34;item&#34;</span><span class="p">/&gt;&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>模板展开如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Expect three items<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;&lt;</span><span class="nt">span</span><span class="p">&gt;</span>Johnson<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;&lt;</span><span class="nt">span</span><span class="p">&gt;</span>Vaughan<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;&lt;</span><span class="nt">span</span><span class="p">&gt;</span>Jackson<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="z-include"><span class="section-num">4.2.5</span> z-include</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;&lt;</span><span class="nt">span</span> <span class="na">z-var</span><span class="o">=</span><span class="s">&#34;variableName&#34;</span><span class="p">/&gt;&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">z-include</span><span class="o">=</span><span class="s">&#34;simple.html&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>simple.html</code> :</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>First<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Second<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>模板展开如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;&lt;</span><span class="nt">span</span><span class="p">&gt;</span>variableValue<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>First<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Second<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>更多的<a href="https://github.com/ramsayleung/reinvent/blob/master/__tests__/page_template/expander-test.ts">示例可见</a></p>
<h2 id="总结"><span class="section-num">5</span> 总结</h2>
<p>模板引擎的本质，是帮我们把重复的页面结构抽离出来，而内容与表现的分离(Separation of content and presentation)，可以让我们以数据来填充变化的内容。</p>
<p>这是程序员对「Don&rsquo;t Repeat Yourself」原则最直观的践行。</p>
<p>三十年来，开发者们创造了无数种实现方案，但核心思路始终围绕着前文提到的三种基本模式。</p>
<p>如今即便在最流行的 Vue 或 React 框架中，无论你写的是 <code>JSX</code> 或是 <code>v-*</code> 指令，背后的思路仍万变不离其宗，本质上仍在沿用模板引擎的思想。</p>
<p>而这种「结构复用，数据驱动」的理念，也早已成为Web开发的根基。</p>
<p><a href="/zh/post/2025/reinvent_project/">回到本系列的目录</a></p>
<h2 id="参考"><span class="section-num">6</span> 参考</h2>
<ul>
<li><a href="https://refactoring.guru/design-patterns/visitor">https://refactoring.guru/design-patterns/visitor</a></li>
<li><a href="https://serde.rs/impl-deserialize.html">https://serde.rs/impl-deserialize.html</a></li>
<li><a href="https://third-bit.com/sdxjs/page-templates/">https://third-bit.com/sdxjs/page-templates/</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>《过河卒》: 比特币雏形之父之父的故事</title>
      <link>https://ramsayleung.github.io/zh/post/2025/%E8%BF%87%E6%B2%B3%E5%8D%92/</link>
      <pubDate>Wed, 09 Apr 2025 23:08:00 -0700</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2025/%E8%BF%87%E6%B2%B3%E5%8D%92/</guid>
      <description>&lt;h2 id=&#34;缘起&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; 缘起&lt;/h2&gt;
&lt;p&gt;在《软件那些事儿》播客采访听众故事的系列里面，有一期名为《&lt;a href=&#34;https://podcasts.apple.com/us/podcast/no-502-%E8%B7%9F35%E5%B2%81%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98%E8%81%8A%E8%81%8A%E6%AF%94%E7%89%B9%E5%B8%81/id1147186605?i=1000697534091&#34;&gt;No.502 跟35岁的程序员聊聊比特币&lt;/a&gt;》&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; 长达三个多小时的播客，主人公分享自己与比特币的故事，还谈到其在2020年卖房买比特币的故事。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="缘起"><span class="section-num">1</span> 缘起</h2>
<p>在《软件那些事儿》播客采访听众故事的系列里面，有一期名为《<a href="https://podcasts.apple.com/us/podcast/no-502-%E8%B7%9F35%E5%B2%81%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98%E8%81%8A%E8%81%8A%E6%AF%94%E7%89%B9%E5%B8%81/id1147186605?i=1000697534091">No.502 跟35岁的程序员聊聊比特币</a>》<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> 长达三个多小时的播客，主人公分享自己与比特币的故事，还谈到其在2020年卖房买比特币的故事。</p>
<p>既钦佩这位仁兄知行合一的投资理念，也羡慕他卖房买比特币的财力，胆识与机遇。</p>
<p>这位同行在节目结束前分享了一本名为《过河卒》<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>的书籍，其作者戴习为是文革前就读于中国科技大学电子系的高材生。</p>
<p>为什么他会在聊比特币故事的播客节目中提及这位书呢？</p>
<p>因为比特币的作者中本聪的第一封<a href="https://www.bitcoin.com/satoshi-archive/emails/wei-dai/1/">已知公开的邮件</a><sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>，即讨论比特币白皮书草稿的邮件，就是发给戴习为之子，<a href="http://www.weidai.com/">戴维</a> <sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>的:</p>
<p>戴维的项目 <a href="http://www.weidai.com/bmoney.txt">b-money</a> <sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>与比特币有诸多的相似之处，甚至可以称为比特币的雏形, 所以中本聪在白本书中引用了 b-money , 原文:</p>
<blockquote>
<p>I was very interested to read your b-money page.  I&rsquo;m getting ready to release a paper that expands on your ideas into a complete working system.</p></blockquote>
<p>而戴维是著名的密码学专家，在大一的时候就写出了被诸多公司和开源项目使用的支持多种加密算法的C++加密库 <a href="https://cryptopp.com/">Cryptocpp</a> <sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup></p>
<p>虽然错过了买比特币的致富之路，但是多读点书，多学点知识终究是不会晚的，所以对《过河卒》这本书产生了浓厚的兴趣，不到一周就读完了。</p>
<h2 id="太平洋两岸"><span class="section-num">2</span> 太平洋两岸</h2>
<h3 id="年少时分"><span class="section-num">2.1</span> 年少时分</h3>
<p>戴习为（下文称老戴）生于1947年，比共和国还要年长2岁，其祖父为武汉名医，
父亲亦师承其父，学得一手好医术，又学过高能物理，还是少数能扣操流利英语和日语的人材，母亲为中学教师。</p>
<p>老戴说起来是湖北人，但实际并没有在湖北生活过，满月不久就随父母迁居湖南长沙, 到1956年，老戴独自一人离开了父母，到北京投奔了奶奶。</p>
<p>年少时的老戴对一切都充满好奇心，9岁的时候，他决定做一个属于自己的矿石收音机，
费尽九牛二虎之力终于成功，当他在自制的收音机里面听到《杨家将》的评书时，心中那份得意就别提了。</p>
<p>初中时候，老戴通过杂志，自制了一台有两个直流电子管的再生式便携式收音机，
不久后他凭借同龄人中明显的技术优势考进了北海公园内的中国少年科技馆，拥有了帝王才可免费享用的北海公园。</p>
<p>1964年，毛主席再次发出以阶级斗争为纲的路线指引，教育界在批判了1962年，1963年以「智育第一」的错误招生倾向后，
提出了1964年的高考招生要优先选拔工人，贫下中农的子弟，教育要为无产阶级政治服务。</p>
<p>而对那些非红五类家庭出身的考生而言，如果又不是党团员，
那么他们只有表现得格外优秀才可能赢得本属于你的权利。</p>
<p>而对于家境殷实的老戴家庭而言，虽然没有被打为「地主阶级」之类的黑五类，但也被毕业鉴定上写上了「学习目的不明确」的标语。</p>
<p>但偏偏不信邪的老戴除了刻苦学习，还把目标放在了中国科技大学，因为班主任每次和他谈话结束都要加句：
「像你这样的表现科技大学能收你吗？」，在当时，中科大专业设置和毕业后的去向对家庭出身的要求要比清华，北大更苛刻。</p>
<p>发榜之后，他如愿考上了中国科技大学的电子系，1964年的中科大，含金量可见一斑。</p>
<h3 id="大学时光"><span class="section-num">2.2</span> 大学时光</h3>
<p>在中科大读了两年大学之后，阅读了各种书籍之后，文革爆发。</p>
<p>在文革初期，红卫兵们流行「大串联」，即大中学生红卫兵组织或个人为主体，在全国范围内免费乘车，接待（食宿），
互相串联，交流和宣传造反的活动。</p>
<p>但老戴作为「逍遥派」，对政治活动并没有太多兴趣，他却利用了「大串联」的机会，游历起了祖国的大江南北：
从北京到广州，从广州到杭州，再从杭州到上海。</p>
<p>又尝试过「星火燎原」之行，从北京步行到上海。</p>
<h3 id="走进社会"><span class="section-num">2.3</span> 走进社会</h3>
<p>毕业之后，老戴和其同学兼女友被分配到商丘的军队参军两年，而后复业在商丘无线电厂参加了三年工作, 机缘巧合之下被调至中科院天文台，参加天文台的建设。</p>
<p>后来，为了解决北京户口问题，老戴与妻子借调到了新组建的科学院空间科学技术中心，
没想到困扰无数北漂的户口问题，在上世纪七十年代的时候，也同样困扰着像老戴之样的高材生。</p>
<p>老戴在任期间，陪同妻子，完成了新部门「地面部」的搭建，并出色地完成密云遥感卫星地面接收站的选址与建设，至今仍发光发热。</p>
<p>1977年，中国恢复了高考，1978年，中国恢复了研究生招考，1979年，第一批留学生选派出国。</p>
<p>1981年，时年34岁，担任快视课题组组长的老戴决定出国，申请了东北大学应用数学系公派自费的博士，并「幸运」被录取。</p>
<h3 id="留学美利坚"><span class="section-num">2.4</span> 留学美利坚</h3>
<p>仅身揣20美元的老戴，在美国举目无亲的老戴，登上飞往美国的飞机。</p>
<p>按照老戴的说法，像他这一拨在举国上下一穷二白的大旗下长大的一代，没钱的好处就是做任何决定时，钱的分量也不重。</p>
<p>他在波士顿的第一晚，是在美国「派出所」的沙发上度过了，虽然东北大学减免了学费，但并未提供任何的生活费的。</p>
<p>因此在「朋友的朋友的朋友」的介绍下，
老戴在名为「杭州楼」的餐馆后来做起了包食住，无工资的工作，过上了白天上课读书，晚上工作帮厨的生活, 老戴称之为「洋插队」.</p>
<p>34岁的老戴在东北大学攻读博士，先在应用数学系研究数学，后转向计算机系，研究并行计算，但历经4年都未有突破性进展，
也未有影响力的论文发表，老戴陷入进退两难的局面。</p>
<p>因此39岁的时候，老戴不想再等待了，于东北大学博士缀学, 重新步入社会，自个刨食。</p>
<h3 id="创业种种"><span class="section-num">2.5</span> 创业种种</h3>
<p>老戴先是与朋友合伙，为华人公司定制中文系统，却不料受朋友坑骗，公司破产，还牵涉到一桩官司；</p>
<p>后来老戴与一名博士合并开发并行电脑，但历时一年未果，最后净身离开；后又与朋友合作于加拿大，结果不欢而散。</p>
<p>鉴于种种与人合作的失败经历，老戴决定自己单干，开发模式识别系统，用于电脑识别手写的文字与语音，后被仅此于IBM的第二大电脑公司 DEC 赏识，重金招募至麾下。</p>
<p>90年代，PC电脑风起云涌，日新月异，以Window + Intel 的Wintel 联盟强势崛起，以小型机为主的 DEC 不得不裁员应对，老戴也恰逢时分，离开 DEC，创立自己的 DTech 公司单干，专注手写文字与语音识别。</p>
<p>而当时华尔街正吹起了「笔电脑」的风，使用「笔」作为输入设备的电脑，而识别输入文字自然成为「笔电脑」必不可少的功能，老戴的 DTech 凭借其技术优势，成为了「风口上的猪」，苹果，微软，IBM纷纷递来橄榄枝。</p>
<p>最后，在比尔盖茨的亲自决策下，以「x位数」的价格收购了 DTech, 老戴也就顺势入职微软，成为总经理，后来领导了打赢IBM与苹果的笔电脑战役。</p>
<p>虽然老戴未透露「x位数」的具体数额，但是相信肯定是超过千万美元级别，90年代的千万美元也足以一辈子生活富足无忧了。</p>
<p>在1994年，比尔盖茨首次访华，老戴作为唯一的随员相随，陪同比尔盖茨会见了中国相关的领导人。</p>
<h2 id="感悟"><span class="section-num">3</span> 感悟</h2>
<h3 id="将相本无种-书成自有神"><span class="section-num">3.1</span> 将相本无种，书成自有神</h3>
<p>读完老戴的同事，让我总是会想起之前读的一本书：<a href="https://ramsayleung.github.io/zh/post/2024/%E8%B5%B0%E5%87%BA%E6%88%88%E5%A3%81/">《走出戈壁》：从沙漠苦力到常青藤教授</a> <sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup>, 作者从小学未毕业戈壁的苦力，一直努力到成为常青藤的教授，老戴也是类似的经历。</p>
<p>虽然努力并不一定能成功，毕竟汗水，才华，运气都是成功不可或缺的因素，但是没有能力，机会即使飞到你面前，你也无法抓住。</p>
<p>读完全书，令我印象深刻的是两件关于读书的事:</p>
<p>1970年，在河南商丘无线电厂工作的老戴，工作之余，仍不忘学习，不断收集在那个时代与那个环境能够找到的新技术书籍，
不久，一门新的技术「数字电路与计算机」开始吸引并迷住了老戴。</p>
<p>作为一个学习过程，老戴争取机会，在一个与河南省的轻工技术研究所合作改造商丘市一个玻璃瓶厂的程序控制的工程中，
担当了数字电子技术这一部分的技术骨干，并出色完成了这一项目。</p>
<p>从此，老戴从一个学习模拟电子技术的工程师开始走进了数字时代。</p>
<p>在1988年，老戴在并行公司创业失败离开时，他充满了苦涩，他开始怀疑自己，对自己的命运是否期许过高，他不断地问自己，
或许他是那只在田地里不断掰玉米的狗熊? 是那只饶有兴致在水中捞着月亮的猴子?</p>
<p>他想起自己在美国学了4年的数学，学习了并行计算机的理论与算法，他还想起了自己在1976年唐山大地震的时候，
他还住在北京地震棚时，苦读过一番的《数字图像处理》，《傅里叶光学》与《模式识别理论》​。</p>
<p>他决定凭借曾经苦读的知识，使用模式识别来识别手写文字与语音, 最终成就了 DTech 公司.</p>
<p>「狐狸固然吃不到高架上的葡萄，但它可以在矮架上种上一棵」，来自「吃不了葡萄说葡萄酸」故事的启发。</p>
<h3 id="家庭的影响"><span class="section-num">3.2</span> 家庭的影响</h3>
<p>对于老戴的成功，其努力自然不容置喙, 但是我现在越发觉得个人的成就不仅和个人的努力及才华相关，还与其家庭息息相关，环境对个人成长太重要了。</p>
<p>古人也是类似的看法，不然孟母又何必三迁呢。</p>
<p>而作为被中本聪引用的论文作者戴维(下称小戴)，身为中国第一代程序员的父母对其影响不可谓不大。</p>
<p>小戴80年代就能接触并学习编程，以至于在小学时期，就能帮一个台湾来美的研究生做数据结构的作业；</p>
<p>初二时，小戴与大多数孩子一样，开始了暑假打工生涯，不同的是，在其他同龄人只能选择在社区送报纸，擦洗车之类的工作时。</p>
<p>小戴跑到了妈妈正在工作的，一个为全球几大石油公司提供油井数据分析的石油软件公司当程序员。</p>
<p>小戴用C语言写了一个子程序：</p>
<p>将公司软件产品中正在使用的，因不同类的客户机器而使用的不同格式的浮点数据转换成IEEE规定的标准格式浮点数据，
使本公司产品与其他公司产品的数据衔接更方便。</p>
<p>高一时，小戴即被学生推荐到哈佛大学计算机系选修课程，并计入学分，被由中学（实际是州政府）支付学费，
理论上，小戴可以在高中毕业的同时在哈佛大学毕业，类似国内的少年班。</p>
<p>在高中毕业后，小戴非常轻松地被华盛顿州立大学的计算机系录取，华大的计算系可以在全美排前十的。</p>
<p>小戴在大一的时候，用 C++ 实现了一个涵盖已公开发表过的主要加密与解密算法的软件库，
成为北美第一个被全民共享，而已至今仍被全世界（包括中国）广泛使用的加解密算法库。</p>
<p>读过计算机专业的同学应该听过一句名言：不要实现你自己的加解密算法库（和共识算法库），因为非常难实现正确，一旦出问题后果又非常严重。</p>
<p>所以小戴的水平可想而知。</p>
<h3 id="大厂感悟"><span class="section-num">3.3</span> 大厂感悟</h3>
<p>书中还有不少篇幅是描写在微软的工作体验，这让我这个从毕业起就在国内外大厂后辈非常有感悟，其实都是一样的。</p>
<p>微软有着非常好的员工福利，有着委托给星级酒店的食堂，弹性的上下班时间，
有非常优美的园区，非常自由和充满活力的文化氛围。</p>
<p>除不考勤上下班时间之外，公司还从早10点到下午2点，每一小时一趟的班车，在园区内与园区边设备豪华的健身俱乐部间穿梭。</p>
<p>公司支付健身的一切费用，员工可游泳，或网球……，活动筋骨，锻炼身体;一年四季，或小组，或大组，或整个公司，三日一小宴，五日一大宴。</p>
<p>美食美酒，Party不断; 新上影的电影、热门棒球赛、NBA篮球赛、橄榄球大赛、歌星演唱会，公司赠票给员工全家，请你务必赏光。</p>
<p>一年三百六十五天，公司开满了各式各样的进修课程，鼓励诸位踊跃参加。</p>
<p>如诸位能大体上不影响日常工作，而学校又肯收你，读博士、读硕士，公司均乐于为你支付学费。</p>
<p>听起来真是神仙过的日子。</p>
<p>甚至过年的时候包下了几百英亩的地方来搞年会，把加拿大马术队，奥林匹克跳伞队也请过来表演。</p>
<p>但是公司终究不是疗养院，公司更不可能养大爷，任务已经明确了，只是为了让工程师们能赶上 milestone (也就是 deadline)</p>
<p>好酒好饭无非是让你上阵时精力充沛、生龙活虎罢了。就如同那第一流的奶牛场，请你听音乐，给你做按摩，为的是请你多出牛奶。</p>
<p>更何况，羊毛出自羊身上，微软给的薪资只有同期硅谷同行的一半略多，直到现在也是如此，也难怪人送外号「花生厂」(薪水相对较低的戏称).</p>
<p>而弹性上下班，就可以加班不给加班费了。</p>
<p>更何况，现在不流行给奶牛弹音乐，做按摩来多产奶了，现在流行用鞭子抽奶牛，还威胁奶牛，不多产奶就以绩效差把你开了，让你自生自灭。</p>
<p>对于 milestone, 弹性加班之类的「资本主义把戏」，我是再熟悉不过了。</p>
<p>我在<a href="https://ramsayleung.github.io/zh/post/2023/%E4%BB%8E%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E7%A6%BB%E7%BA%BF_%E6%88%91%E5%B8%A6%E8%B5%B0%E4%BA%86%E4%BB%80%E4%B9%88/">微信支付</a> <sup id="fnref:8"><a href="#fn:8" class="footnote-ref" role="doc-noteref">8</a></sup>的时候，微信支付推行的是所谓的「精益迭代」研发模式，
大意每两周作为一个周期，把任务拆分到能两周内完成的颗粒度，
在第二周的周五进行「复盘」，由领导（或是经理，或是总监）开会对着需求单与工程师逐个核对进度。</p>
<p>也就意味着每两周就有一次 deadline, 完成这两周的任务并不能影响下一个两周的任务的轮转，迭代总是周而复始，直到你被滚动的车轮碾碎。</p>
<p>任务太大怎么办，总能拆小的，两周总要交付什么东西的。</p>
<p>没有完成怎么办？不用担心，你总可以想办法完成的, 不然要怎么向领导交待呢, 这些都是数据和指标。</p>
<p>这样洗礼了三年后，现在无论多少任务，都有种羽扇纶巾，谈笑间，需求灰飞烟灭的淡定从容了。</p>
<h3 id="better-than-before"><span class="section-num">3.4</span> Better than before</h3>
<p>老戴通过自己的经历告诉我们:</p>
<p>无论是白人，黑人，黄种人，无论在农村还是城市，也无论是出生在穷家还是富户，追求成功的人们，只要你努力，只要你执着，做得到的。</p>
<p>社会对成功的定义往往固化,「出将入相」「成名成家」「腰缠万贯」，但「将相本无种」，真正的成功，是超越昨天的自己。</p>
<p>过好每一个今天，就是通往成功的路。 立足当下，辨明方向，踮起脚尖，哪怕只比昨天前进一寸。</p>
<p>这或许像「鸡汤」，但真理往往朴素，从翻开一本书、迈出第一步开始，让身体或思想始终在路上。</p>
<p>秉持「Better than before」的信念，「卒子」一步步向前，直到跨过那条「河」，化身为「车」.</p>
<p>如卒过河，日拱一卒，终有一日，平凡亦可蜕变为非凡。</p>
<h2 id="推荐阅读">推荐阅读</h2>
<ul>
<li>旅加经历
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E8%BF%99%E4%BA%9B%E5%B9%B4%E8%B5%B0%E8%BF%87%E7%9A%84%E8%B7%AF_%E4%BB%8E%E5%B9%BF%E5%B7%9E%E5%88%B0%E6%B8%A9%E5%93%A5%E5%8D%8E/">这些年走过的路：从广州到温哥华</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E5%8A%A0%E6%8B%BF%E5%A4%A7%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C/">加拿大之初体验</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E7%99%BB%E9%99%86%E5%8A%A0%E6%8B%BF%E5%A4%A7%E4%B8%80%E5%B9%B4%E7%9A%84%E4%BD%93%E4%BC%9A/">登陆加拿大一年后的体会</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E5%A4%8F%E6%97%A5%E6%8D%95%E8%9F%B9%E8%AE%B0/">夏日捕蟹记</a></li>
</ul>
</li>
<li>历史思考
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E7%BD%AE%E8%BA%AB%E4%BA%8B%E5%86%85/">为什么梦想买不起，故乡回不去</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E9%97%B2%E8%81%8A%E5%86%99%E4%BD%9C/">闲聊写作的好处</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E9%87%91%E6%A6%9C%E9%A2%98%E5%90%8D%E4%B9%8B%E5%90%8E/">金榜题名之后</a></li>
</ul>
</li>
<li>工具流分享
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E7%AE%80%E6%98%8E%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/">简明写作指南</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E5%86%99%E4%BD%9C%E6%B5%81/">我的写作流</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E7%94%BB%E5%9B%BE%E6%B5%81/">我的画图流：画图工具与技巧分享</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E6%90%9C%E7%B4%A2%E6%B5%81/">我的搜索流：高效搜索经验分享</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2022/feynman_technique/">最好的学习方式：费曼学习法(Feynman Technique)</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2021/%E7%B3%BB%E7%BB%9F%E6%80%9D%E8%80%83/">系统思考：既见树木，又见森林</a></li>
</ul>
</li>
<li>职场思考
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E7%BC%96%E7%A8%8B%E5%8D%81%E5%B9%B4%E7%9A%84%E6%84%9F%E6%82%9F/">编程十年的感悟</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E4%BB%8E%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E7%A6%BB%E7%BA%BF_%E6%88%91%E5%B8%A6%E8%B5%B0%E4%BA%86%E4%BB%80%E4%B9%88/">那些年，我从微信支付学到的东西</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2025/%E6%9D%82%E8%B0%88ai%E5%8F%96%E4%BB%A3%E7%A8%8B%E5%BA%8F%E5%91%98/">杂谈AI取代程序员</a></li>
</ul>
</li>
</ul>
<div center class="qr-container">
<img src="/ox-hugo/qrcode_gh_e06d750e626f_1.jpg" alt="qrcode_gh_e06d750e626f_1.jpg" width="160px" height="160px" center="t" class="qr-container" />
公号同步更新，欢迎关注👻
</div>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://podcasts.apple.com/us/podcast/no-502-%E8%B7%9F35%E5%B2%81%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98%E8%81%8A%E8%81%8A%E6%AF%94%E7%89%B9%E5%B8%81/id1147186605?i=1000697534091">https://podcasts.apple.com/us/podcast/no-502-%E8%B7%9F35%E5%B2%81%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98%E8%81%8A%E8%81%8A%E6%AF%94%E7%89%B9%E5%B8%81/id1147186605?i=1000697534091</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://book.douban.com/subject/1106247/">https://book.douban.com/subject/1106247/</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="https://www.bitcoin.com/satoshi-archive/emails/wei-dai/1/">https://www.bitcoin.com/satoshi-archive/emails/wei-dai/1/</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p><a href="http://www.weidai.com/">http://www.weidai.com/</a>&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p><a href="http://www.weidai.com/bmoney.txt">http://www.weidai.com/bmoney.txt</a>&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p><a href="https://cryptopp.com/">https://cryptopp.com/</a>&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7">
<p><a href="https://ramsayleung.github.io/zh/post/2024/%E8%B5%B0%E5%87%BA%E6%88%88%E5%A3%81/">https://ramsayleung.github.io/zh/post/2024/%E8%B5%B0%E5%87%BA%E6%88%88%E5%A3%81/</a>&#160;<a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:8">
<p><a href="https://ramsayleung.github.io/zh/post/2023/%E4%BB%8E%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E7%A6%BB%E7%BA%BF_%E6%88%91%E5%B8%A6%E8%B5%B0%E4%BA%86%E4%BB%80%E4%B9%88/">https://ramsayleung.github.io/zh/post/2023/%E4%BB%8E%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E7%A6%BB%E7%BA%BF_%E6%88%91%E5%B8%A6%E8%B5%B0%E4%BA%86%E4%BB%80%E4%B9%88/</a>&#160;<a href="#fnref:8" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>重新造轮子系列(四)：正则表达式引擎</title>
      <link>https://ramsayleung.github.io/zh/post/2025/reinvent_regex/</link>
      <pubDate>Sat, 15 Mar 2025 11:01:00 -0700</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2025/reinvent_regex/</guid>
      <description>&lt;p&gt;项目 GitHub 地址: &lt;a href=&#34;https://github.com/ramsayleung/reinvent/tree/master/regular_expression&#34;&gt;Regex&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;前言&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; 前言&lt;/h2&gt;
&lt;p&gt;所谓的正则表达式，指的是由一系列字符和特殊字符组成的模式，用于描述要匹配的文本。&lt;/p&gt;
&lt;p&gt;最开始是一位叫 &lt;a href=&#34;https://en.wikipedia.org/wiki/Stephen_Cole_Kleene&#34;&gt;Stephen Cole Kleene&lt;/a&gt; 的数学家用被他称为 Regular Events 的数学表达式来描述这一模型，在 1968 年，由C语言之父 Ken Tompson 将这个表达式引入到行编辑器 &lt;a href=&#34;https://en.wikipedia.org/wiki/QED_%28text_editor%29&#34;&gt;QED&lt;/a&gt;, 随后是 Unix 上的编辑器 &lt;a href=&#34;https://en.wikipedia.org/wiki/Ed_%28software%29&#34;&gt;ed&lt;/a&gt; (vi 的前身) ，并最终引入到 &lt;a href=&#34;https://en.wikipedia.org/wiki/Grep&#34;&gt;grep&lt;/a&gt;.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>项目 GitHub 地址: <a href="https://github.com/ramsayleung/reinvent/tree/master/regular_expression">Regex</a></p>
<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>所谓的正则表达式，指的是由一系列字符和特殊字符组成的模式，用于描述要匹配的文本。</p>
<p>最开始是一位叫 <a href="https://en.wikipedia.org/wiki/Stephen_Cole_Kleene">Stephen Cole Kleene</a> 的数学家用被他称为 Regular Events 的数学表达式来描述这一模型，在 1968 年，由C语言之父 Ken Tompson 将这个表达式引入到行编辑器 <a href="https://en.wikipedia.org/wiki/QED_%28text_editor%29">QED</a>, 随后是 Unix 上的编辑器 <a href="https://en.wikipedia.org/wiki/Ed_%28software%29">ed</a> (vi 的前身) ，并最终引入到 <a href="https://en.wikipedia.org/wiki/Grep">grep</a>.</p>
<p>我一直很好奇正则表达式 (regular expression, 即 <code>Regex</code> ) 是怎么实现的，自正则表达式被引入编程语言之后 之后，可谓说有字符串的地方就基本有正则表达式。</p>
<p>想起个关于 <code>Regex</code> 的经典笑话:</p>
<blockquote>
<p>程序员A：我有个问题，想用正则表达式解决。</p>
<p>程序员B：现在你有两个问题了。</p></blockquote>
<h2 id="需求"><span class="section-num">2</span> 需求</h2>
<p>完整版本的正则表达式非常复杂，我们的实现不会覆盖所有的规则，所以先来看下我们要支持的正则表达式规则：</p>
<table>
  <thead>
      <tr>
          <th>含义</th>
          <th>字符</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>任意的字符 <code>c</code></td>
          <td><code>c</code></td>
      </tr>
      <tr>
          <td>任意的单个字符</td>
          <td><code>.</code></td>
      </tr>
      <tr>
          <td>匹配开头的字符</td>
          <td><code>^</code></td>
      </tr>
      <tr>
          <td>匹配结尾的字符</td>
          <td><code>$</code></td>
      </tr>
      <tr>
          <td>匹配零个或多个的字符</td>
          <td><code>*</code></td>
      </tr>
  </tbody>
</table>
<p>虽然这五条原则看起来不是很多，但是已经覆盖日常开发绝大多数的场景了。</p>
<p>比如 <code>^ab*c</code> 就意味着匹配以 <code>a</code> 开头，并且0到无数个的 <code>b</code>, 再接一个字符 <code>c</code>, 所以它能匹配:
<code>ac</code>, <code>abc</code> 以及 <code>abbbbbc</code></p>
<h2 id="初始版本"><span class="section-num">3</span> 初始版本</h2>
<p>根据上面的需求，可以使用40行不到的代码就实现一个简单的递归版本的正则表达式引擎：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">match</span> <span class="o">=</span> <span class="p">(</span><span class="nx">pattern</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">text</span><span class="o">:</span> <span class="nx">string</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// &#39;^&#39; at start of pattern matches start of next.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span><span class="nx">pattern</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;^&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">matchHere</span><span class="p">(</span><span class="nx">pattern</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">text</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Try all possible starting points for pattern.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kd">let</span> <span class="nx">iText</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">do</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">matchHere</span><span class="p">(</span><span class="nx">pattern</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">text</span><span class="p">,</span> <span class="nx">iText</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">iText</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="nx">iText</span> <span class="o">&lt;</span> <span class="nx">text</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Nothing worked.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">matchHere</span> <span class="o">=</span> <span class="p">(</span><span class="nx">pattern</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">patternIndex</span><span class="o">:</span> <span class="nx">number</span><span class="p">,</span> <span class="nx">text</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">textIndex</span><span class="o">:</span> <span class="nx">number</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// There is no more pattern to match.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span><span class="nx">patternIndex</span> <span class="o">===</span> <span class="nx">pattern</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// &#39;$&#39; at end of pattern matches end of text.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span> <span class="p">((</span><span class="nx">patternIndex</span> <span class="o">===</span> <span class="p">(</span><span class="nx">pattern</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">pattern</span><span class="p">[</span><span class="nx">patternIndex</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;$&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">textIndex</span> <span class="o">===</span> <span class="nx">text</span><span class="p">.</span><span class="nx">length</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// &#39;*&#39; following current character means zero or more.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span> <span class="p">(((</span><span class="nx">pattern</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">patternIndex</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">pattern</span><span class="p">[</span><span class="nx">patternIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;*&#39;</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Try matching zero occurences(skip the current char and the &#39;*&#39;)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="nx">matchHere</span><span class="p">(</span><span class="nx">pattern</span><span class="p">,</span> <span class="nx">patternIndex</span> <span class="o">+</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">text</span><span class="p">,</span> <span class="nx">textIndex</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Try matching one or more occurences
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="p">((</span><span class="nx">textIndex</span> <span class="o">&lt;</span> <span class="nx">text</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">pattern</span><span class="p">[</span><span class="nx">patternIndex</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;.&#39;</span> <span class="o">||</span> <span class="nx">text</span><span class="p">[</span><span class="nx">textIndex</span><span class="p">]</span> <span class="o">===</span> <span class="nx">pattern</span><span class="p">[</span><span class="nx">patternIndex</span><span class="p">]))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// Try to match the rest of pattern after consuming this
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">// character
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">if</span> <span class="p">(</span><span class="nx">matchHere</span><span class="p">(</span><span class="nx">pattern</span><span class="p">,</span> <span class="nx">patternIndex</span> <span class="o">+</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">text</span><span class="p">,</span> <span class="nx">textIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="nx">textIndex</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// if there is any match, it will return early in the while loop,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// so when reach this statement, it means nothing found.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Match a single chacater.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span><span class="nx">textIndex</span> <span class="o">&lt;</span> <span class="nx">text</span><span class="p">.</span><span class="nx">length</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">pattern</span><span class="p">[</span><span class="nx">patternIndex</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;.&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="nx">pattern</span><span class="p">[</span><span class="nx">patternIndex</span><span class="p">]</span> <span class="o">===</span> <span class="nx">text</span><span class="p">[</span><span class="nx">textIndex</span><span class="p">]))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">matchHere</span><span class="p">(</span><span class="nx">pattern</span><span class="p">,</span> <span class="nx">patternIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">text</span><span class="p">,</span> <span class="nx">textIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Nothing worked.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>实现思路如下图:</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-26048" hidden>
    <label for="zoomCheck-26048">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/reinvent_simple_regex_design.png"/> 
    
    
    </label>
</figure>

<p>好的，我们的正则表达式引擎完工了，正则表达式看起来也没有那么难嘛。</p>
<p>只是用是能用的，但是看起来不同含义的字符都耦合在 <code>matchHere</code> 函数了，想要支持新的字符匹配(例如 <code>+</code>, 或者 <code>|</code> )很难扩展。</p>
<h2 id="面向对象版本"><span class="section-num">4</span> 面向对象版本</h2>
<h3 id="接口"><span class="section-num">4.1</span> 接口</h3>
<p>再来思考一下版本1的问题:</p>
<p>我们把不同模式的符号都耦合在同一个函数中。</p>
<p>在讨论解耦方式之前，先来观察下每个模式的共同点，以便我们抽象接口。</p>
<p>以最简单的 <code>^c</code> 模式为例，我们需要将 <code>c</code> 与给定的文本 <code>abc</code> 和 <code>cde</code> 作比较，首先匹配第一个字符，如果匹配失败(如 <code>abc</code>)，则直接结束； 如果匹配第一个字符成功（=cde=）, 那么就匹配剩余的其他字符, 直到模式匹配结束.</p>
<p>那么对于精确匹配字符的模式 <code>Literal</code> 而言，入参就是字符 <code>c</code> 和文本 <code>text</code>, 返回结果就是true/false, 用来表示是否匹配成功.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">literal_match</span> <span class="o">=</span> <span class="p">(</span><span class="nx">pattern</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">text</span><span class="o">:</span> <span class="nx">string</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span> <span class="p">=&gt;</span> <span class="p">{}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果不同的模式匹配都使用这个函数签名的话，每次匹配之后，都需要把剩下需要匹配的文本给复制出来，频繁拷贝字符串可能会导致性能开销很大。</p>
<p>我们可以做个小优化, 通过下标 <code>start</code> 来指定需要匹配的文本, 就可以在不同的模式中都只使用同一份的字符串，避免了多次拷贝的开销。</p>
<p>而返回结果也不再是 boolean, 而是下一个模式需要匹配的下标。</p>
<p>比如 <code>^c</code> 来匹配 <code>cde</code> ，匹配成功之后就返回 <code>1</code>, 就意味着下个模式从 <code>1</code>, 也就是 <code>d</code> 开始匹配.</p>
<p>那匹配失败要怎么表示？这个也很简单，返回一个不合法的下标，比如 <code>-1</code> 即可，那么我们的模式的函数接口就变成:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">literal_match</span> <span class="o">=</span> <span class="p">(</span><span class="nx">pattern</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">text</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">index</span><span class="o">:</span> <span class="nx">number</span><span class="p">)</span><span class="o">:</span> <span class="nx">number</span> <span class="p">=&gt;</span> <span class="p">{}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="模板设计模式"><span class="section-num">4.2</span> 模板设计模式</h3>
<p>既然版本一提到了 <code>matchHere</code> 实现耦合在一起，那么有什么方式可以实现解耦呢？</p>
<p>其中的一个经典解决方式就是面向对象编程(Object Oriented Programming)，这也是面向对象编程的设计初衷。</p>
<p>既然前面实现的缺点是不同的模式耦合在一起，那么我们可以把每种模式实现成一个函数或者一个类，然后再通过某种模式给组合起来。</p>
<p>既然用到 OOP, 那么自然少不了设计模式了。如果使用一种模式表示成一个类，那么会是哪种设计模式呢？</p>
<p>要不就是<a href="https://refactoring.guru/design-patterns/strategy">策略模式(strategy)</a>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">ConcreteAlgorithm</span> <span class="o">:</span> <span class="n">IAlgorithm</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">DoAlgorithm</span><span class="p">(</span><span class="kt">int</span> <span class="n">datum</span><span class="p">)</span> <span class="p">{...}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Strategy</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Strategy</span><span class="p">(</span><span class="n">IAlgorithm</span> <span class="n">algo</span><span class="p">)</span> <span class="p">{...}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">run</span><span class="p">(</span><span class="kt">int</span> <span class="n">datum</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">algo</span><span class="p">.</span><span class="n">DoAlgorithm</span><span class="p">(</span><span class="n">datum</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>要么就是<a href="https://refactoring.guru/design-patterns/template-method">模板方法(template method)</a>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">ConcreteAlgorithm</span> <span class="o">:</span> <span class="n">AbstractTemplate</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">DoAlgorithm</span><span class="p">(</span><span class="kt">int</span> <span class="n">datum</span><span class="p">)</span> <span class="p">{...}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">AbstractTemplate</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">run</span><span class="p">(</span><span class="kt">int</span> <span class="n">datum</span><span class="p">)</span> <span class="p">{</span> <span class="n">DoAlgorithm</span><span class="p">(</span><span class="n">datum</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">virtual</span> <span class="kt">void</span> <span class="nf">DoAlgorithm</span><span class="p">()</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// abstract
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>看起来好像都可以，那不如就使用模板方式吧。</p>
<h3 id="单向链表"><span class="section-num">4.3</span> 单向链表</h3>
<p>那么就让我们来定义个基类 <code>RegexBase</code> :</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">INVALID_INDEX</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">abstract</span> <span class="kr">class</span> <span class="nx">RegexBase</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// index to continue matching at or -1 indicating that matching failed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kr">abstract</span> <span class="nx">_match</span><span class="p">(</span><span class="nx">text</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">start</span><span class="o">:</span> <span class="nx">number</span><span class="p">)</span><span class="o">:</span> <span class="nx">number</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kr">abstract</span> <span class="nx">rest</span><span class="o">:</span> <span class="nx">RegexBase</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">match</span><span class="p">(</span><span class="nx">text</span><span class="o">:</span> <span class="nx">string</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// check if the pattern matches at the start of the string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_match</span><span class="p">(</span><span class="nx">text</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">!==</span> <span class="nx">INVALID_INDEX</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">text</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_match</span><span class="p">(</span><span class="nx">text</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="o">!==</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>细看之下, 函数签名与我们上文讨论的有所不同，那是因为我们把模式 <code>pattern</code> 作为每个模式类的成员变量了，就不需要显式定义在 <code>_match</code> 函数中了。</p>
<p>再来看下我们精确匹配字符的 <code>Lit</code> 模式类的实现:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">RegexLit</span> <span class="kr">extends</span> <span class="nx">RegexBase</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">private</span> <span class="nx">chars</span><span class="o">:</span> <span class="nx">string</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">rest</span><span class="o">:</span> <span class="nx">RegexBase</span>
</span></span><span class="line"><span class="cl">  <span class="nx">constructor</span><span class="p">(</span><span class="nx">chars</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">rest</span><span class="o">:</span> <span class="nx">RegexBase</span> <span class="o">|</span> <span class="kc">null</span> <span class="o">=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">super</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">chars</span> <span class="o">=</span> <span class="nx">chars</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">rest</span> <span class="o">=</span> <span class="nx">rest</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">_match</span><span class="p">(</span><span class="nx">text</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">start</span><span class="o">:</span> <span class="nx">number</span><span class="p">)</span><span class="o">:</span> <span class="nx">number</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">nextIndex</span> <span class="o">=</span> <span class="nx">start</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">chars</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">nextIndex</span> <span class="o">&gt;</span> <span class="nx">text</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="nx">INVALID_INDEX</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">text</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">start</span><span class="p">,</span> <span class="nx">nextIndex</span><span class="p">)</span> <span class="o">!==</span> <span class="k">this</span><span class="p">.</span><span class="nx">chars</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="nx">INVALID_INDEX</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">rest</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="nx">nextIndex</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">rest</span><span class="p">.</span><span class="nx">_match</span><span class="p">(</span><span class="nx">text</span><span class="p">,</span> <span class="nx">nextIndex</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>实现很简单, 但 <code>rest</code> 又是什么呢?</p>
<p>还是以 <code>^c</code> 为例, 现在改复杂一点, 模式变成 <code>^cd</code> 来匹配 <code>cde</code> ，模式 <code>^c</code> 匹配完 <code>c</code> 之后, 就要使用剩下的模式(<code>rest</code>) <code>d</code> 来匹配剩下的文本 <code>de</code>, 剩下的模式可能也会再包含剩下的模式，用来匹配再被剩下的文本，依此类推.</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-2d2c9" hidden>
    <label for="zoomCheck-2d2c9">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/reinvent_regex_rest_pointer.jpg"/> 
    
    
    </label>
</figure>

<p>相当于 <code>rest</code> 就是指向下一个模式类的单向指针，用来表示下一个模式需要匹配剩余的文本，直到所有的模式匹配完成，即 <code>rest</code> 指针指向 <code>null</code></p>
<p>所以模式 <code>cde</code> 就可以表示成 <code>Lit('c', Lit('d', Lit('e')))</code></p>
<p>而所有的模式组合在一起，本质就是一条单向链条，而正则表达式就是判断是否存在依次匹配链表中所有模式的文本。</p>
<h3 id="any-模式"><span class="section-num">4.4</span> Any 模式</h3>
<p>Any 模式即 <code>*</code> 匹配 0到任意个前一个字符，与其类似的还有 Plus 模式，即 <code>+</code> 匹配1到任意个前一个字符字符；以及 <code>?</code> 表示匹配0到1个前一个字符，Any算是最有代表性和最难实现的模式。</p>
<p>即 <code>a*b</code> 表示可以匹配0到任意个 <code>a</code> ，再匹配一个 <code>b</code> , 所以 <code>b</code>, <code>ab</code>, <code>aaaaaab</code> 它都可以匹配上。</p>
<p>那么问题就来了，既然它可以匹配0到任意个字符，那么匹配的时候我要匹配几个字符呢？</p>
<p>理论上有 <code>N</code> 个的可能性, N = 待匹配文本 <code>text</code> 的长度。</p>
<p>既然不知道要匹配几个字符，那不如我们把所有可能性都穷举一次呗，而这种穷举算法，则被称为是<a href="https://labuladong.online/algo/essential-technique/backtrack-framework/#%E5%85%A8%E6%8E%92%E5%88%97%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90">回溯算法</a>(<a href="https://en.wikipedia.org/wiki/Backtracking">backtracking</a>)</p>
<p>我们知道穷举的上界是 N(<code>N=len(text)</code>), 下界是 0, 那么是从 0 穷举到 <code>N</code>, 还是从 <code>N</code> 穷举到 <code>0</code> 呢？</p>
<p>两种方法都可以解决问题，计算机科学家们还给这两种做法起了个洋气的名字， <code>N</code> -&gt; <code>0</code>, 因为是先开始匹配所有的字符，所以就被称为贪婪匹配 greedy(eager) matching.</p>
<p>而从 <code>0</code> -&gt; <code>N</code>, 因为是从0开始，所以又被称为是惰性匹配 lazy matching。</p>
<p>从性能的角度来说，是 <code>lazy matching</code> 更优，因为它尽可能地去掉了不必要的匹配了。</p>
<p>我们可以先来看下贪婪匹配的实现，再看下惰性匹配：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">RegexAny</span> <span class="kr">extends</span> <span class="nx">RegexBase</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">private</span> <span class="nx">child</span><span class="o">:</span> <span class="nx">RegexBase</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kr">private</span> <span class="nx">rest</span><span class="o">:</span> <span class="nx">RegexBase</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">constructor</span><span class="p">(</span><span class="nx">child</span><span class="o">:</span> <span class="nx">RegexBase</span><span class="p">,</span> <span class="nx">rest</span><span class="o">:</span> <span class="nx">RegexBase</span> <span class="o">|</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">super</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">child</span> <span class="o">=</span> <span class="nx">child</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">rest</span> <span class="o">=</span> <span class="nx">rest</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">_match</span><span class="p">(</span><span class="nx">text</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">start</span><span class="o">:</span> <span class="nx">number</span><span class="p">)</span><span class="o">:</span> <span class="nx">number</span> <span class="o">|</span> <span class="kc">null</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">maxPossible</span> <span class="o">=</span> <span class="nx">text</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">start</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">num</span> <span class="o">=</span> <span class="nx">maxPossible</span><span class="p">;</span> <span class="nx">num</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">num</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="kr">const</span> <span class="nx">afterMany</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_matchMany</span><span class="p">(</span><span class="nx">text</span><span class="p">,</span> <span class="nx">start</span><span class="p">,</span> <span class="nx">num</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="nx">afterMany</span> <span class="o">!==</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">afterMany</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">undefined</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">_matchMany</span><span class="p">(</span><span class="nx">text</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">start</span><span class="o">:</span> <span class="nx">number</span><span class="p">,</span> <span class="nx">num</span><span class="o">:</span> <span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">num</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">start</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">child</span><span class="p">.</span><span class="nx">_match</span><span class="p">(</span><span class="nx">text</span><span class="p">,</span> <span class="nx">start</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="nx">start</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">undefined</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">rest</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">rest</span><span class="p">.</span><span class="nx">_match</span><span class="p">(</span><span class="nx">text</span><span class="p">,</span> <span class="nx">start</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">start</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>a*b</code> 会被解析成, <code>Any(Lit('a'), Lit('b'))</code>, 因为 <code>*</code> 表示匹配0到任意个前一个字符，前一个字符还可能另外一种模式，所以我们可以把前一个字符也解析成模式，作为 <code>child</code> 传入到 <code>Any</code>.</p>
<p><code>_matchMany</code> 是从 <code>start</code> 匹配到 <code>start+num</code> 位置，看是否匹配，而 <code>maxPossible</code> 表示当前剩余文本中可能的最大匹配次数.</p>
<p>以 <code>text = &quot;aab&quot;</code>, <code>start = 0</code>, <code>pattern = a*b</code> 为例， <code>maxPossible = len(text) = 3</code>,</p>
<ol>
<li>
<p>第一轮尝试(<code>num=3</code>):</p>
<ul>
<li>尝试匹配 3 个 <code>a</code> -&gt; 失败(只有 2 个 <code>a</code>)</li>
</ul>
</li>
<li>
<p>第二轮尝试(<code>num=2</code>):</p>
<ul>
<li>匹配 2 个 =a=(位置 <code>0-&gt;1-&gt;2</code>)</li>
<li>然后匹配 rest(b 在位置 <code>2-&gt;3</code>): 成功！</li>
<li>返回 3</li>
</ul>

    <figure>
        
        
        <input type="checkbox" id="zoomCheck-c2c3c" hidden>
        <label for="zoomCheck-c2c3c">
        
        
        <img class="zoomCheck" loading="lazy" src="/ox-hugo/reinvent_regex_match_aab.png"/> 
        
        
        </label>
    </figure>

</li>
</ol>
<p>以及使用模式 <code>a*ab</code> 来匹配文本 <code>ab</code> 的过程:
<img loading="lazy" src="/ox-hugo/reinvent_regex_match_ab.jpg"></p>
<h3 id="支持的模式"><span class="section-num">4.5</span> 支持的模式</h3>
<p>每种模式对应一个单独的类之后，再通过 <code>rest</code> 指针进行关联，现在的实现就非常易于扩展了，我们可以很容易地支持其他的模式，具体列表如下：</p>
<table>
  <thead>
      <tr>
          <th>含义</th>
          <th>字符</th>
          <th>例子</th>
          <th>对应实现</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>任意的字符 <code>c</code></td>
          <td><code>c</code></td>
          <td><code>c</code> 匹配字符c</td>
          <td><a href="https://github.com/ramsayleung/reinvent/blob/master/regular_expression/regex-lit.ts">Lit</a></td>
      </tr>
      <tr>
          <td>任意的单个字符</td>
          <td><code>.</code></td>
          <td><code>.</code> 匹配任意字符</td>
          <td></td>
      </tr>
      <tr>
          <td>匹配开头的字符</td>
          <td><code>^</code></td>
          <td><code>^c</code> 匹配以 <code>c</code> 开头的字符串</td>
          <td><a href="https://github.com/ramsayleung/reinvent/blob/master/regular_expression/regex-start.ts">Start</a></td>
      </tr>
      <tr>
          <td>匹配结尾的字符</td>
          <td><code>$</code></td>
          <td><code>c$</code> 匹配以 <code>c</code> 结尾的字符串</td>
          <td><a href="https://github.com/ramsayleung/reinvent/blob/master/regular_expression/regex-end.ts">End</a></td>
      </tr>
      <tr>
          <td>匹配零个或多个的字符</td>
          <td><code>*</code></td>
          <td><code>a*</code> 匹配0-任意个a的字符串, 贪婪匹配</td>
          <td><a href="https://github.com/ramsayleung/reinvent/blob/master/regular_expression/regex-any.ts">GreedyAny</a></td>
      </tr>
      <tr>
          <td>匹配零个或多个的字符</td>
          <td><code>*</code></td>
          <td><code>a*</code> 匹配0-任意个a的字符串, 惰性匹配</td>
          <td><a href="https://github.com/ramsayleung/reinvent/blob/master/regular_expression/regex-lazy-any.ts">LazyAny</a></td>
      </tr>
      <tr>
          <td>匹配一个或多个的字符</td>
          <td><code>+</code></td>
          <td><code>a+</code> 匹配1-任意个a的字符串</td>
          <td><a href="https://github.com/ramsayleung/reinvent/blob/master/regular_expression/regex-plus.ts">Plus</a></td>
      </tr>
      <tr>
          <td>匹配零个或一个的字符</td>
          <td><code>?</code></td>
          <td><code>a?</code> 匹配0-1个a的字符串</td>
          <td><a href="https://github.com/ramsayleung/reinvent/blob/master/regular_expression/regex-opt.ts">Opt</a></td>
      </tr>
      <tr>
          <td>多选一匹配</td>
          <td><code>❘</code></td>
          <td><code>a❘b</code> 匹配a或b的字符串</td>
          <td><a href="https://github.com/ramsayleung/reinvent/blob/master/regular_expression/regex-alt.ts">Alt</a></td>
      </tr>
      <tr>
          <td>序列匹配</td>
          <td><code>()</code></td>
          <td><code>(ab)</code> 匹配 ab 的字符串</td>
          <td><a href="https://github.com/ramsayleung/reinvent/blob/master/regular_expression/regex-group.ts">Group</a></td>
      </tr>
      <tr>
          <td>匹配方括号内的任意单个字符</td>
          <td><code>[]</code></td>
          <td><code>[abcd]</code> 匹配a或b或c或d的字符串</td>
          <td><a href="https://github.com/ramsayleung/reinvent/blob/master/regular_expression/regex-charclass.ts">CharClass</a></td>
      </tr>
  </tbody>
</table>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;Regex testsuite&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">it</span><span class="p">.</span><span class="nx">each</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;ab&#39;</span><span class="p">,</span> <span class="s1">&#39;ba&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;ab&#39;</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;^a&#39;</span><span class="p">,</span> <span class="s1">&#39;ab&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Start</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">))],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;^b&#39;</span><span class="p">,</span> <span class="s1">&#39;ab&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">Start</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">))],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;a$&#39;</span><span class="p">,</span> <span class="s1">&#39;ab&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">End</span><span class="p">())],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;a$&#39;</span><span class="p">,</span> <span class="s1">&#39;ba&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">End</span><span class="p">())],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;a*&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Any</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">))],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;a*&#39;</span><span class="p">,</span> <span class="s1">&#39;baac&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Any</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">))],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;ab*c&#39;</span><span class="p">,</span> <span class="s1">&#39;ac&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">Any</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)))],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;ab*c&#39;</span><span class="p">,</span> <span class="s1">&#39;acc&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">Any</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)))],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;ab*c&#39;</span><span class="p">,</span> <span class="s1">&#39;abc&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">Any</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)))],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;ab*c&#39;</span><span class="p">,</span> <span class="s1">&#39;abbbc&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">Any</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)))],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;ab*c&#39;</span><span class="p">,</span> <span class="s1">&#39;abxc&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">Any</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)))],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;ab*c&#39;</span><span class="p">,</span> <span class="s1">&#39;ac&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">LazyAny</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)))],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;ab*c&#39;</span><span class="p">,</span> <span class="s1">&#39;acc&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">LazyAny</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)))],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;ab*&#39;</span><span class="p">,</span> <span class="s1">&#39;ab&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">LazyAny</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">)))],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;ab+c&#39;</span><span class="p">,</span> <span class="s1">&#39;ac&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">Plus</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)))],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;ab+c&#39;</span><span class="p">,</span> <span class="s1">&#39;abc&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">Plus</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)))],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;a(b|c)d&#39;</span><span class="p">,</span> <span class="s1">&#39;xabdy&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">Alt</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;d&#39;</span><span class="p">)))],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;a(b|c)d&#39;</span><span class="p">,</span> <span class="s1">&#39;xabady&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">Alt</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;d&#39;</span><span class="p">)))],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;ab?c&#39;</span><span class="p">,</span> <span class="s1">&#39;abc&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">Opt</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)))],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;ab?c&#39;</span><span class="p">,</span> <span class="s1">&#39;acc&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">Opt</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)))],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;ab?c&#39;</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">Opt</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)))],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s2">&#34;[abcd]&#34;</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">CharClass</span><span class="p">([</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;d&#39;</span><span class="p">)])],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s2">&#34;[abcd]&#34;</span><span class="p">,</span> <span class="s1">&#39;ab&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">CharClass</span><span class="p">([</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;d&#39;</span><span class="p">)])],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s2">&#34;[abcd]&#34;</span><span class="p">,</span> <span class="s1">&#39;xhy&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">CharClass</span><span class="p">([</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;d&#39;</span><span class="p">)])],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s2">&#34;c[abcd]&#34;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="nx">CharClass</span><span class="p">([</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;d&#39;</span><span class="p">)]))],</span>
</span></span><span class="line"><span class="cl">    <span class="p">])(</span><span class="s1">&#39;Regex base test (&#34;%s&#34; &#34;%s&#34; &#34;%p&#34;)&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">_pattern</span><span class="p">,</span> <span class="nx">text</span><span class="p">,</span> <span class="nx">expected</span><span class="p">,</span> <span class="nx">matcher</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kr">const</span> <span class="nx">actual</span> <span class="o">=</span> <span class="nx">matcher</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nx">expect</span><span class="p">(</span><span class="nx">actual</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="nx">expected</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>顺便一提的是，这种相同的验证逻辑, 但是输入多个不同的参数以验证不同case的做法，叫做 <code>Parameterized Test</code></p>
<p>我在《<a href="https://ramsayleung.github.io/zh/categories/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6/">测试技能进阶系列</a>》的第二篇也曾经介绍过： <a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%BA%8C_parameterized_tests/">Parameterized Tests</a></p>
<p>这样我们就完成了一个功能较完整的正则表达式引擎了。</p>
<h2 id="表达式解析"><span class="section-num">5</span> 表达式解析</h2>
<p>虽然我们已经完成了一个正则表达式引擎，只不过我们平时用表达式是 <code>a*bc</code> ，现在要写成 <code>Any(Lit('a'), Lib('b', Lib('c')))</code> 多个类的实例也太烦琐了。</p>
<p>让我们再来分析下正则表达式，以 <code>^(a|b|$)*z$</code> 为例，以任意数量的 <code>a</code>, <code>b</code>, 或 <code>$</code> 开头, 再紧接一个 <code>z</code>, 然后结束。</p>
<p>我们可以创建一个树来表达这个表达式:</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-4379e" hidden>
    <label for="zoomCheck-4379e">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/reinvent_regex_express_as_tree.jpg"/> 
    
    
    </label>
</figure>

<p>在考虑如何把表达式变成上面那棵树之前，我们可以先从最简单的步骤开始：分割字符串</p>
<p>正如物理学家给不可再分的元素称之为「原子」(atom), 计算机科学家也给不可再分割的文本起了一个名字，称之为 <strong>token</strong>, 类似 <code>a</code>, <code>b</code>, <code>$</code>, <code>*</code> 这些都是 token，而把文本切分成 token 的过程，即为 <em>tokenize</em> 。</p>
<p>不同的token可能代表不同的含义，像 <code>a</code>, <code>b</code>, <code>c</code> 这类，所以它们的值不同，但是它们都可以被称为字面量(Literal), 而像 <code>*</code>, <code>+</code>, <code>|</code>, <code>(</code>, <code>)</code> 这样的字符又各种其代表的含义, 如:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">SYMBOL_TOKEN_TYPE_MAP</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;*&#39;</span><span class="o">:</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">Any</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;|&#39;</span><span class="o">:</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">Alt</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;(&#39;</span><span class="o">:</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">GroupStart</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;)&#39;</span><span class="o">:</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">GroupEnd</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>定义好 token 类型之后， <code>tokenize</code> 跃然纸上了：</p>
<p>直接按照字符作匹配，如果能匹配上的就是特殊类型的 <code>Token</code> ，不然就是字面量:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">interface</span> <span class="nx">Token</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">kind</span><span class="o">:</span> <span class="nx">TokenKind</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">location</span><span class="o">:</span> <span class="nx">number</span>
</span></span><span class="line"><span class="cl">  <span class="nx">value</span><span class="o">?:</span> <span class="nx">string</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">tokenize</span> <span class="o">=</span> <span class="p">(</span><span class="nx">text</span><span class="o">:</span> <span class="nx">string</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">result</span><span class="o">:</span> <span class="nx">Token</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">text</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">text</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">c</span> <span class="k">in</span> <span class="nx">SIMPLE</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span> <span class="nx">kind</span><span class="o">:</span> <span class="nx">SIMPLE</span><span class="p">[</span><span class="nx">c</span><span class="p">],</span> <span class="nx">location</span><span class="o">:</span> <span class="nx">i</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">((</span><span class="nx">c</span> <span class="o">===</span> <span class="s1">&#39;^&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">i</span> <span class="o">===</span> <span class="mi">0</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span> <span class="nx">kind</span><span class="o">:</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">Start</span><span class="p">,</span> <span class="nx">location</span><span class="o">:</span> <span class="nx">i</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">((</span><span class="nx">c</span> <span class="o">===</span> <span class="s1">&#39;$&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">i</span> <span class="o">===</span> <span class="p">(</span><span class="nx">text</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span> <span class="nx">kind</span><span class="o">:</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">End</span><span class="p">,</span> <span class="nx">location</span><span class="o">:</span> <span class="nx">i</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span> <span class="nx">kind</span><span class="o">:</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">Lit</span><span class="p">,</span> <span class="nx">location</span><span class="o">:</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="nx">c</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>^(a|b|$)*z$</code> 就会被解析成如下的结果:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;kind&#34;</span><span class="o">:</span> <span class="s2">&#34;Start&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;location&#34;</span><span class="o">:</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;kind&#34;</span><span class="o">:</span> <span class="s2">&#34;GroupStart&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;location&#34;</span><span class="o">:</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;kind&#34;</span><span class="o">:</span> <span class="s2">&#34;Lit&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;location&#34;</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;value&#34;</span><span class="o">:</span> <span class="s2">&#34;a&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;kind&#34;</span><span class="o">:</span> <span class="s2">&#34;Alt&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;location&#34;</span><span class="o">:</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;kind&#34;</span><span class="o">:</span> <span class="s2">&#34;Lit&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;location&#34;</span><span class="o">:</span> <span class="mi">4</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;value&#34;</span><span class="o">:</span> <span class="s2">&#34;b&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;kind&#34;</span><span class="o">:</span> <span class="s2">&#34;Alt&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;location&#34;</span><span class="o">:</span> <span class="mi">5</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;kind&#34;</span><span class="o">:</span> <span class="s2">&#34;Lit&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;location&#34;</span><span class="o">:</span> <span class="mi">6</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;value&#34;</span><span class="o">:</span> <span class="s2">&#34;$&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;kind&#34;</span><span class="o">:</span> <span class="s2">&#34;GroupEnd&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;location&#34;</span><span class="o">:</span> <span class="mi">7</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;kind&#34;</span><span class="o">:</span> <span class="s2">&#34;Any&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;location&#34;</span><span class="o">:</span> <span class="mi">8</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;kind&#34;</span><span class="o">:</span> <span class="s2">&#34;Lit&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;location&#34;</span><span class="o">:</span> <span class="mi">9</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;value&#34;</span><span class="o">:</span> <span class="s2">&#34;z&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;kind&#34;</span><span class="o">:</span> <span class="s2">&#34;End&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;location&#34;</span><span class="o">:</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="组装抽象语法树"><span class="section-num">6</span> 组装抽象语法树</h2>
<p><code>tokenize</code> 的结果是一个包含 Token 的列表，我们要如何组装成树状数据结构呢？</p>
<p>顺带一提，这树状数据结构全称是抽象语法树(Abstract syntax tree, AST), 是一种用来表示程序结构的数据结构，如:</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-7b55c" hidden>
    <label for="zoomCheck-7b55c">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/Abstract_syntax_tree_for_Euclidean_algorithm.svg.png"/> 
    
    
    </label>
</figure>

<p>我们可以分情况来讨论，因为不同的模式有不同的组装方式，组装完之后的 AST 的输出是一个 <code>output</code>, 包含组装后的 <code>token</code> 列表:</p>
<p>对于表达式 <code>a</code>, 我们可以创建一个 <code>Lit</code> 类型的 <code>token</code> (为了便于理解，「创建」指创建一个 <code>token</code>, 然后插入到 <code>output</code>.)</p>
<p>对于表达式 <code>a*</code> 呢？我们可以先创建一个 <code>Lit('a')</code> 的 <code>token</code>, 当遇到 <code>*</code> 时，因为 <code>*</code> 表示匹配0至任意的前一个字符, 所以我们可以创建一个 <code>Any</code> 类型的 token, 然后把 <code>output</code> 最后一个元素 <code>pop</code> 出来，作为 <code>Any</code> 的 <code>child</code> 元素.</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-63031" hidden>
    <label for="zoomCheck-63031">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/reinvent_regex_construct_ast_any.jpg"/> 
    
    
    </label>
</figure>

<p>对于表达式 <code>(ab)</code>, 情况就变得复杂一些:
当遇到 <code>(</code> 括号的时候，我们可以创建一个 <code>Group</code> ，但是问题在于，我们不知道这个 <code>Group</code> 什么时候结束，即不知道什么时候才会遇上 <code>)</code>.</p>
<p>所以我们需要换种解决思路：当遇到 <code>(</code>, 创建一个 <code>GroupStart</code> 类型的 <code>token</code>, 然后再继续处理 <code>a</code>, <code>b</code>, 当遇到 <code>)</code> 时，创建一个 <code>Group</code> 类型的 <code>token</code>, 然后一直调用 <code>pop</code> 函数直到把 <code>GroupStart</code> 也 <code>pop</code> 出来, 然后把过程中 <code>pop</code> 出来的 <code>token</code> 都当作是 <code>Group</code> 的 <code>children</code> 列表，而 <code>GroupStart</code> 相当于起到一个标记符的作用。</p>
<p>这种思路就自动处理了 <code>(a*)</code> 和 <code>(a(b*)c)</code> 的差异:</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-49c57" hidden>
    <label for="zoomCheck-49c57">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/reinvent_regex_ast_group.jpg"/> 
    
    
    </label>
</figure>

<p>对于表达式 <code>a|b</code>, 我们是否可以参考 <code>Any</code> 的做法呢?</p>
<p>遇到 <code>a</code> 的时候先创建一个 <code>Lit('a')</code>, 遇到 <code>|</code> 时再创建一个 <code>Alt</code>, 然后把 <code>Lit('a')</code> 从 <code>output</code> pop 出来作为 <code>left</code> 节点， 再遇到下一个字符 <code>b</code> 的时候，再把 <code>Alt</code> 从 output pop 出来，把 <code>b</code> 作为 <code>right</code> 节点。</p>
<p>听起来没问题，但是上面的算法无法正确解析 <code>a|b*</code>, 它表示匹配一个 <code>a</code> 或者是任意数量的 <code>b</code>, 但是我们的做法会把它解析成 <code>(a|b)*</code>, 即任意数量的 <code>a</code> 或 <code>b</code>.</p>
<p>更合理的做法是先部分组装 Alt 的 <code>left</code> 节点，等解析完所有字符之后，再重新解析一次，把 <code>right</code> 节点给组装上。</p>
<p>以 <code>a|b*</code> 为例子:</p>
<ol>
<li>创建一个 <code>Lit('a')</code> token</li>
<li>当遇到 <code>|</code> 的时候，创建一个 <code>Alt</code>, 并将 <code>Lit('a')</code> pop 出来作为 <code>left</code> 节点</li>
<li>创建一个 <code>Lit('b')</code> token</li>
<li>创建一个 <code>Any</code> token, 并将 <code>Lit('b')</code> pop 出来作为 <code>child</code> 节点.</li>
<li>当解析完所有字符后, 再遍历一次 <code>output</code>, 如果遇到 <code>Alt</code> token, 那么就把它的下一个 <code>token</code> (即 <code>Any</code>) 作为它的 <code>right</code> 节点.</li>
</ol>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-11542" hidden>
    <label for="zoomCheck-11542">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/reinvent_regex_ast_alt.jpg"/> 
    
    
    </label>
</figure>

<p>实现代码如下:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">parse</span> <span class="o">=</span> <span class="p">(</span><span class="nx">text</span><span class="o">:</span> <span class="nx">string</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">result</span><span class="o">:</span> <span class="nx">Token</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">allTokens</span> <span class="o">=</span> <span class="nx">tokenize</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">allTokens</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">token</span> <span class="o">=</span> <span class="nx">allTokens</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">isLast</span> <span class="o">=</span> <span class="nx">i</span> <span class="o">===</span> <span class="nx">allTokens</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">handle</span><span class="p">(</span><span class="nx">result</span><span class="p">,</span> <span class="nx">token</span><span class="p">,</span> <span class="nx">isLast</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">compress</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">handle</span> <span class="o">=</span> <span class="p">(</span><span class="nx">result</span><span class="o">:</span> <span class="nx">Token</span><span class="p">[],</span> <span class="nx">token</span><span class="o">:</span> <span class="nx">Token</span><span class="p">,</span> <span class="nx">isLast</span><span class="o">:</span> <span class="kr">boolean</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">token</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">Lit</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">token</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">token</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">Start</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">assert</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;Should not have start token after other tokens&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">token</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">token</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">End</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">assert</span><span class="p">(</span><span class="nx">isLast</span><span class="p">,</span> <span class="sb">`Should not have end token before other tokens`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">token</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">token</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">GroupStart</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">token</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">token</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">GroupEnd</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">groupEnd</span><span class="p">(</span><span class="nx">result</span><span class="p">,</span> <span class="nx">token</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">token</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">Any</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">assert</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="sb">`No Operand for &#39;*&#39; (location </span><span class="si">${</span><span class="nx">token</span><span class="p">.</span><span class="nx">location</span><span class="si">}</span><span class="sb">)`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">token</span><span class="p">.</span><span class="nx">child</span> <span class="o">=</span> <span class="nx">result</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">token</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">token</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">Alt</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">assert</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="sb">`No Operand for &#39;|&#39; (location </span><span class="si">${</span><span class="nx">token</span><span class="p">.</span><span class="nx">location</span><span class="si">}</span><span class="sb">)`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">token</span><span class="p">.</span><span class="nx">left</span> <span class="o">=</span> <span class="nx">result</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="nx">token</span><span class="p">.</span><span class="nx">right</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">token</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">assert</span><span class="p">(</span><span class="kc">false</span><span class="p">,</span> <span class="sb">`UNIMPLEMENTED`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">groupEnd</span> <span class="o">=</span> <span class="p">(</span><span class="nx">result</span><span class="o">:</span> <span class="nx">Token</span><span class="p">[],</span> <span class="nx">token</span><span class="o">:</span> <span class="nx">Token</span><span class="p">)</span><span class="o">:</span> <span class="nx">Token</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">group</span><span class="o">:</span> <span class="nx">Token</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">kind</span><span class="o">:</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">Group</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">location</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">end</span><span class="o">:</span> <span class="nx">token</span><span class="p">.</span><span class="nx">location</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">children</span><span class="o">:</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">assert</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="sb">`Unmatched end parenthesis (location </span><span class="si">${</span><span class="nx">token</span><span class="p">.</span><span class="nx">location</span><span class="si">}</span><span class="sb">)`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">child</span> <span class="o">=</span> <span class="nx">result</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">child</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">GroupStart</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">group</span><span class="p">.</span><span class="nx">location</span> <span class="o">=</span> <span class="nx">child</span><span class="p">.</span><span class="nx">location</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">group</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nx">child</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">group</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// go through the output list to fill in the right side of Alts:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">compress</span> <span class="o">=</span> <span class="p">(</span><span class="nx">raw</span><span class="o">:</span> <span class="nx">Token</span><span class="p">[])</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">cooked</span><span class="o">:</span> <span class="nx">Token</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="nx">raw</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">token</span> <span class="o">=</span> <span class="nx">raw</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">token</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">Alt</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">assert</span><span class="p">(</span><span class="nx">cooked</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="sb">`No right operand for alt (location </span><span class="si">${</span><span class="nx">token</span><span class="p">.</span><span class="nx">location</span><span class="si">}</span><span class="sb">)`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="nx">token</span><span class="p">.</span><span class="nx">right</span> <span class="o">=</span> <span class="nx">cooked</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">cooked</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nx">token</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">cooked</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>对于表达式 <code>a|(bc)</code>, 输出的 AST 如下:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">kind</span><span class="o">:</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">Alt</span><span class="p">,</span> <span class="nx">location</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">left</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">kind</span><span class="o">:</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">Lit</span><span class="p">,</span> <span class="nx">location</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;a&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="nx">right</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">kind</span><span class="o">:</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">Group</span><span class="p">,</span> <span class="nx">location</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">end</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nx">children</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                <span class="p">{</span> <span class="nx">kind</span><span class="o">:</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">Lit</span><span class="p">,</span> <span class="nx">location</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;b&#39;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">                <span class="p">{</span> <span class="nx">kind</span><span class="o">:</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">Lit</span><span class="p">,</span> <span class="nx">location</span><span class="o">:</span> <span class="mi">4</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;c&#39;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="实例化"><span class="section-num">7</span> 实例化</h2>
<p>既然抽象语法树 AST 已经就绪了，我们就差最后一步了，把 AST 转变为我们的类实例.</p>
<p>还记得上文提到过, 不同的模式对应不同的类，然后通过 <code>rest</code> 指针指向下一个模式类，以此串成一个链表。</p>
<p>那么我们对于 <code>output</code> 这个包含多个 token 的列表，我们可以抽象成两个 token, 当前 token 和下一个 token:</p>
<p>假如我们有函数 <code>f</code> 可以把当前 <code>token</code> 初始化对应的模式类，我们只需要再把剩下的 token 列表初始化成 <code>rest</code>, 那么 <code>rest</code> 要怎么初始化呢？</p>
<p>只需要再调用 <code>f</code> 即可.</p>
<p>这不就是递归嘛! 是的，通过递归就很简单地把实例化也实现出来了:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">compile</span> <span class="o">=</span> <span class="p">(</span><span class="nx">text</span><span class="o">:</span> <span class="nx">string</span><span class="p">)</span><span class="o">:</span> <span class="nx">RegexBase</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">tokens</span><span class="o">:</span> <span class="nx">Token</span><span class="p">[]</span> <span class="o">=</span> <span class="nx">parse</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">createObjectByAST</span><span class="p">(</span><span class="nx">tokens</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// return instances of classes derived from RegexBase by abstract syntax tree
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">createObjectByAST</span> <span class="o">=</span> <span class="p">(</span><span class="nx">tokens</span><span class="o">:</span> <span class="nx">Token</span><span class="p">[])</span><span class="o">:</span> <span class="nx">RegexBase</span> <span class="o">|</span> <span class="kc">null</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">tokens</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">token</span> <span class="o">=</span> <span class="nx">tokens</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">token</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">Lit</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">Lit</span><span class="p">(</span><span class="nx">token</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span> <span class="nx">createObjectByAST</span><span class="p">(</span><span class="nx">tokens</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">token</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">Start</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">Start</span><span class="p">(</span><span class="nx">createObjectByAST</span><span class="p">(</span><span class="nx">tokens</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">token</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">End</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">assert</span><span class="p">(</span><span class="nx">tokens</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">,</span> <span class="sb">`Should not have end token before other tokens`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">End</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">token</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">Alt</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">Alt</span><span class="p">(</span><span class="nx">createObjectByAST</span><span class="p">([</span><span class="nx">token</span><span class="p">.</span><span class="nx">left</span><span class="p">]),</span> <span class="nx">createObjectByAST</span><span class="p">([</span><span class="nx">token</span><span class="p">.</span><span class="nx">right</span><span class="p">]),</span> <span class="nx">createObjectByAST</span><span class="p">(</span><span class="nx">tokens</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">token</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">Group</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">Group</span><span class="p">(</span><span class="nx">token</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">childToken</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">createObjectByAST</span><span class="p">([</span><span class="nx">childToken</span><span class="p">])),</span> <span class="nx">createObjectByAST</span><span class="p">(</span><span class="nx">tokens</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">token</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">Any</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">Any</span><span class="p">(</span><span class="nx">createObjectByAST</span><span class="p">([</span><span class="nx">token</span><span class="p">.</span><span class="nx">child</span><span class="p">]),</span> <span class="nx">createObjectByAST</span><span class="p">(</span><span class="nx">tokens</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">assert</span><span class="p">(</span><span class="kc">false</span><span class="p">,</span> <span class="sb">`UNKNOWN token type </span><span class="si">${</span><span class="nx">token</span><span class="p">.</span><span class="nx">kind</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="总结"><span class="section-num">8</span> 总结</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">it</span><span class="p">.</span><span class="nx">each</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="s1">&#39;^a&#39;</span><span class="p">,</span> <span class="s1">&#39;ab&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Start</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">))],</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="s1">&#39;a$&#39;</span><span class="p">,</span> <span class="s1">&#39;ab&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">End</span><span class="p">())],</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="s1">&#39;a*&#39;</span><span class="p">,</span> <span class="s1">&#39;baac&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Any</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">))],</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="s1">&#39;ab+c&#39;</span><span class="p">,</span> <span class="s1">&#39;abc&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">Plus</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)))],</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="s1">&#39;ab+c&#39;</span><span class="p">,</span> <span class="s1">&#39;abxc&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">Plus</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)))],</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="s1">&#39;(ab)|(cd)&#39;</span><span class="p">,</span> <span class="s1">&#39;xaby&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Alt</span><span class="p">(</span><span class="nx">Group</span><span class="p">([</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">)]),</span> <span class="nx">Group</span><span class="p">([</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;d&#39;</span><span class="p">)]))],</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="s1">&#39;a(b|c)d&#39;</span><span class="p">,</span> <span class="s1">&#39;xabdy&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">Group</span><span class="p">([</span><span class="nx">Alt</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">))],</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;d&#39;</span><span class="p">)))],</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="s1">&#39;ab?c&#39;</span><span class="p">,</span> <span class="s1">&#39;ac&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">Opt</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)))],</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="s1">&#39;ab?c&#39;</span><span class="p">,</span> <span class="s1">&#39;acc&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">Opt</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)))],</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="s2">&#34;[abcd]c&#34;</span><span class="p">,</span> <span class="s1">&#39;ac&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">CharClass</span><span class="p">([</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;d&#39;</span><span class="p">)],</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">))],</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="s2">&#34;c[abcd]&#34;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="nx">CharClass</span><span class="p">([</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;d&#39;</span><span class="p">)]))],</span>
</span></span><span class="line"><span class="cl"><span class="p">])(</span><span class="s1">&#39;parse, compile and matcher test (&#34;%s&#34; &#34;%s&#34; &#34;%p&#34;)&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">pattern</span><span class="p">,</span> <span class="nx">text</span><span class="p">,</span> <span class="nx">expected</span><span class="p">,</span> <span class="nx">expectedMatcher</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">actualMatcher</span> <span class="o">=</span> <span class="nx">compile</span><span class="p">(</span><span class="nx">pattern</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">expect</span><span class="p">(</span><span class="nx">actualMatcher</span><span class="p">).</span><span class="nx">toStrictEqual</span><span class="p">(</span><span class="nx">expectedMatcher</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">actual</span> <span class="o">=</span> <span class="nx">actualMatcher</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">expect</span><span class="p">(</span><span class="nx">actual</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="nx">expected</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>大功告成，终于将所有的功能都组装起来实现这个正则表达式引擎了, 除去前文提到的功能之外，还实现了 <code>\*</code> 转义特殊字符， <code>[xya]</code> 匹配 <code>x</code>, <code>y</code>, <code>z</code> 其中任意字符，以及 <code>*?</code> 实现惰性匹配的功能。</p>
<p>完整功能集的测试 case 可见 <a href="https://github.com/ramsayleung/reinvent/blob/master/__tests__/regular_expression/parser-test.ts">parser_test.ts</a></p>
<p>日常使用正则表达式的场景非常多，因为其强大的功能和表达能力，总会下意识觉得很难实现（当然，高性能的完整版本的确是非常有挑战性的）。</p>
<p>但是当自己把正则表达式引擎这个轮子拆开，再重新造一个出来之后，才感悟到：</p>
<p>「没有启程的路才会遥不可及」，很多时候，困难只是我们给自己设下的心理障碍。</p>
<p><a href="/zh/post/2025/reinvent_project/">回到本系列的目录</a></p>
<h2 id="参考"><span class="section-num">9</span> 参考</h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Stephen_Cole_Kleene">https://en.wikipedia.org/wiki/Stephen_Cole_Kleene</a></li>
<li><a href="https://en.wikipedia.org/wiki/Ed_%28software%29">https://en.wikipedia.org/wiki/Ed_(software)</a></li>
<li><a href="https://en.wikipedia.org/wiki/Grep">https://en.wikipedia.org/wiki/Grep</a></li>
<li><a href="https://third-bit.com/sdxjs/regex-parser/">https://third-bit.com/sdxjs/regex-parser/</a></li>
<li><a href="https://third-bit.com/sdxjs/pattern-matching/">https://third-bit.com/sdxjs/pattern-matching/</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>重新造轮子系列(三): HTML Selector</title>
      <link>https://ramsayleung.github.io/zh/post/2025/reinvent_selector/</link>
      <pubDate>Sat, 15 Mar 2025 10:53:00 -0700</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2025/reinvent_selector/</guid>
      <description>&lt;p&gt;项目 GitHub 地址: &lt;a href=&#34;https://github.com/ramsayleung/reinvent/tree/master/html_selector&#34;&gt;Selector&lt;/a&gt; &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2 id=&#34;前言&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; 前言&lt;/h2&gt;
&lt;p&gt;以前写爬虫的时候，必不可少的一个工具就是 HTML selector, 就是用于匹配指定的 HTML 标签。&lt;/p&gt;
&lt;p&gt;毕竟爬虫的本质就是找出需要的标签里面的内容，然后解析出来。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>项目 GitHub 地址: <a href="https://github.com/ramsayleung/reinvent/tree/master/html_selector">Selector</a> <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>以前写爬虫的时候，必不可少的一个工具就是 HTML selector, 就是用于匹配指定的 HTML 标签。</p>
<p>毕竟爬虫的本质就是找出需要的标签里面的内容，然后解析出来。</p>
<p>而 selector 主要有两个流派，一个是 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_selectors">CSS selector</a> <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, 另外一个是 <a href="https://developer.mozilla.org/en-US/docs/Web/XML/XPath/Guides">XPath selector</a> <sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> ,本质都是通过某种语法来匹配指定的标签，区别只是一个用的是 CSS 的语法，另外一个是 XML 语法.</p>
<p>这次我们就来写个基于 CSS 语法的 Selector, 来深入理解下 HTML 的 DOM 模型</p>
<h2 id="dom"><span class="section-num">2</span> DOM</h2>
<p>写过前端的朋友应该都知道，前端代码主要是由所谓的三剑客组成的：HTML + CSS + JavaScript, 其中的三剑客各司其职，相互配合。</p>
<p>HTML 负责内容展示, CSS 负责布局和样式，而 JavaScript 是负责用户与页面之间的动态交互。</p>
<p>而对于如下的 HTML 代码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Example<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Title<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">blockquote</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;important&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Opening<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Explanation<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">p</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;highlight&#34;</span><span class="p">&gt;</span>Warning<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">blockquote</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Closing<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>浏览器会将其进行解析，并生成名为 <a href="//developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model">Document Object Model</a>(DOM) 的数据结构，听着好像很玄乎，但本质就是一棵多叉树 (Multiway Tree):</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-6910d" hidden>
    <label for="zoomCheck-6910d">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/reinvent_dom_tree.jpg"/> 
    
    
    </label>
</figure>

<p>知道 <code>DOM</code> 是多叉树, 我们就可以写出简化版本 <code>DOM</code> 的数据结构了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">interface</span> <span class="nx">DomNode</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">type</span><span class="o">:</span> <span class="nx">string</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">name</span><span class="o">?:</span> <span class="nx">string</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">attribs</span><span class="o">?:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">id</span><span class="o">?:</span> <span class="nx">string</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kr">class</span><span class="o">?:</span> <span class="nx">string</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="nx">key</span><span class="o">:</span> <span class="nx">string</span><span class="p">]</span><span class="o">:</span> <span class="nx">string</span> <span class="o">|</span> <span class="kc">undefined</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="nx">children</span><span class="o">?:</span> <span class="nx">DomNode</span><span class="p">[];</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">?:</span> <span class="nx">string</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">parent</span><span class="o">?:</span> <span class="nx">DomNode</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>一个节点可能有多个子节点 <code>(children?)</code> 或者一个父节点 <code>(parent?)</code>, 也可能都没有，所以标记成 <code>?(optional)</code>;</p>
<p>一个节点可能有多个属性 <code>attribs</code>.</p>
<p>而节点的=type= 可能是 <code>tag</code>, <code>text</code>, <code>comment</code>, <code>script</code>, <code>style</code>, 而对于 <code>text</code> 和 <code>comment</code> 类型的节点， <code>name</code> 也是为空的.</p>
<p>这个 <code>DOM</code> 结构只是我们的简化版本，完整的 DOM 还有很多的属性和回调函数，详情可以查看文档： <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model">Document Object Model (DOM)</a></p>
<h2 id="bfs-vs-dfs"><span class="section-num">3</span> BFS vs DFS</h2>
<p>理解到 <code>DOM</code> 的本质是个多叉树之后，我们很快就能意识到， <code>selector</code> 本质也就是遍历多叉树，找到符合要求的所有节点, 比如按 <code>tag</code> 名来匹配，按 <code>id</code> 来匹配，按 <code>class</code> 来匹配等等。</p>
<p>而用于遍历多叉树的常用算法就是广度优先搜索(Breadth First Search, BFS)和深度优先搜索(Depth First Search, DFS)</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-93592" hidden>
    <label for="zoomCheck-93592">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/reinvent_dfs_vs_bfs.jpg"/> 
    
    
    </label>
</figure>

<p>通常来说，BFS 和 DFS 都能完成多叉树遍历，时间复杂度也是相同的，BFS通常使用一个 <code>queue</code> 来记录遍历待节点，所以会使用更多的内存，但是能找到最短路径；而 DFS 通常使用递归，如果遇到个循环图，就会 StackOverflow，无法找到结果。</p>
<p>因为我们明确知道 DOM 是个多叉树（有向无环图），所以我们就使用 DFS 来遍历查找。</p>
<h2 id="strategy-设计模式"><span class="section-num">4</span> Strategy 设计模式</h2>
<p>分析好问题之后，我们的实现也差不多能出来了, 按 tag 名来匹配，无非是 <code>domNode.name === tagName</code>; 按 <code>class</code> 来匹配, 即 <code>domNode.attribs.class=== class</code>.</p>
<p>为了解耦和易于扩展，我们可以使用个策略设计模式(<a href="https://refactoring.guru/design-patterns/strategy">Strategy Design Pattern</a> <sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>).</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">interface</span> <span class="nx">Selector</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">match</span><span class="p">(</span><span class="nx">node</span><span class="o">:</span> <span class="nx">DomNode</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">findByTagName</span> <span class="o">=</span> <span class="p">(</span><span class="nx">tag</span><span class="o">:</span> <span class="nx">string</span><span class="p">)</span><span class="o">:</span> <span class="nx">Selector</span> <span class="p">=&gt;</span> <span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">match</span><span class="o">:</span> <span class="p">(</span><span class="nx">node</span><span class="o">:</span> <span class="nx">DomNode</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">node</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()</span> <span class="o">===</span> <span class="nx">tag</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">findById</span> <span class="o">=</span> <span class="p">(</span><span class="nx">id</span><span class="o">:</span> <span class="nx">string</span><span class="p">)</span><span class="o">:</span> <span class="nx">Selector</span> <span class="p">=&gt;</span> <span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">match</span><span class="o">:</span> <span class="p">(</span><span class="nx">node</span><span class="o">:</span> <span class="nx">DomNode</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">node</span><span class="p">.</span><span class="nx">attribs</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="nx">id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">findByClass</span> <span class="o">=</span> <span class="p">(</span><span class="nx">clazz</span><span class="o">:</span> <span class="nx">string</span><span class="p">)</span><span class="o">:</span> <span class="nx">Selector</span> <span class="p">=&gt;</span> <span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">match</span><span class="o">:</span> <span class="p">(</span><span class="nx">node</span><span class="o">:</span> <span class="nx">DomNode</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">node</span><span class="p">.</span><span class="nx">attribs</span><span class="p">.</span><span class="kr">class</span> <span class="o">===</span> <span class="nx">clazz</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后遍历节点的时候，只需要判断 <code>Selector</code> 是否符合要求，而具体的匹配条件则由 <code>selector</code> 决定:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">isMatch</span> <span class="o">=</span> <span class="p">(</span><span class="nx">node</span><span class="o">:</span> <span class="nx">DomNode</span><span class="p">,</span> <span class="nx">selectors</span><span class="o">:</span> <span class="nx">Selector</span><span class="p">[])</span><span class="o">:</span> <span class="kr">boolean</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">selectors</span><span class="p">.</span><span class="nx">every</span><span class="p">(</span><span class="nx">selector</span> <span class="p">=&gt;</span> <span class="nx">selector</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">node</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这样的话，要增加一个根据属性keyValue值的匹配条件也是非常容易的, 如 <code>div[align=center]</code>, 即匹配属性 <code>align</code> 和value 为 <code>center</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">findByAttributes</span> <span class="o">=</span> <span class="p">(</span><span class="nx">key</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="nx">string</span><span class="p">)</span><span class="o">:</span> <span class="nx">Selector</span> <span class="p">=&gt;</span> <span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">match</span><span class="o">:</span> <span class="p">(</span><span class="nx">node</span><span class="o">:</span> <span class="nx">DomNode</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">node</span><span class="p">.</span><span class="nx">attribs</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">===</span> <span class="nx">value</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="测试验证"><span class="section-num">5</span> 测试验证</h2>
<p>DFS + Strategy design pattern 就实现了一个基础的 CSS Selector, 我们自然需要测试验证下是否正确:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;HTML selector testsuite&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">HTML</span> <span class="o">=</span> <span class="sb">`&lt;main&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">  &lt;p&gt;text of first p&lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">  &lt;p id=&#34;id-01&#34;&gt;text of p#id-01&lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">  &lt;p id=&#34;id-02&#34;&gt;text of p#id-02&lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">  &lt;p class=&#34;class-03&#34;&gt;text of p.class-03&lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">  &lt;div&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">    &lt;p&gt;text of div / p&lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">    &lt;p id=&#34;id-04&#34;&gt;text of div / p#id-04&lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">    &lt;p class=&#34;class-05&#34;&gt;text of div / p.class-05&lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">    &lt;p class=&#34;class-06&#34;&gt;should not be found&lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">  &lt;/div&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">  &lt;div id=&#34;id-07&#34;&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">    &lt;p&gt;text of div#id-07 / p&lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">    &lt;p class=&#34;class-06&#34;&gt;text of div#id-07 / p.class-06&lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">  &lt;/div&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">&lt;/main&gt;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">it</span><span class="p">.</span><span class="nx">each</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;p&#39;</span><span class="p">,</span> <span class="s1">&#39;text of first p&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;p#id-01&#39;</span><span class="p">,</span> <span class="s1">&#39;text of p#id-01&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;p#id-02&#39;</span><span class="p">,</span> <span class="s1">&#39;text of p#id-02&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;p.class-03&#39;</span><span class="p">,</span> <span class="s1">&#39;text of p.class-03&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;div p&#39;</span><span class="p">,</span> <span class="s1">&#39;text of div / p&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;div p#id-04&#39;</span><span class="p">,</span> <span class="s1">&#39;text of div / p#id-04&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;div p.class-05&#39;</span><span class="p">,</span> <span class="s1">&#39;text of div / p.class-05&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;div#id-07 p&#39;</span><span class="p">,</span> <span class="s1">&#39;text of div#id-07 / p&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;div#id-07 p.class-06&#39;</span><span class="p">,</span> <span class="s1">&#39;text of div#id-07 / p.class-06&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">])(</span><span class="s1">&#39;test select %s %s&#39;</span><span class="p">,</span> <span class="kr">async</span> <span class="p">(</span><span class="nx">selector</span><span class="p">,</span> <span class="nx">expected</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kr">const</span> <span class="nx">doc</span> <span class="o">=</span> <span class="nx">htmlparser2</span><span class="p">.</span><span class="nx">parseDOM</span><span class="p">(</span><span class="nx">HTML</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="kr">const</span> <span class="nx">node</span> <span class="o">=</span> <span class="nx">select</span><span class="p">(</span><span class="nx">doc</span><span class="p">,</span> <span class="nx">selector</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="kr">const</span> <span class="nx">actual</span> <span class="o">=</span> <span class="nx">getText</span><span class="p">(</span><span class="nx">node</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nx">expect</span><span class="p">(</span><span class="nx">actual</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="nx">expected</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>使用 Jest 框架编写了如上的单元测试用例， unit test 都通过了，完工.</p>
<p>顺便一提的是，这种相同的验证逻辑, 但是输入多个不同的参数以验证不同case的做法，叫做 <code>Parameterized Test</code></p>
<p>我在《<a href="https://ramsayleung.github.io/zh/categories/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6/">测试技能进阶系列</a>》的第二篇也曾经介绍过： <a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%BA%8C_parameterized_tests/">Parameterized Tests</a></p>
<h2 id="总结"><span class="section-num">6</span> 总结</h2>
<p>这个简单的 CSS Selector 全部代码仅有 <strong>103</strong> 行, 但麻雀虽小，五脏俱全，功能还是齐备的:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">&gt; tokei simple-selectors.ts
</span></span><span class="line"><span class="cl"><span class="o">===============================================================================</span>
</span></span><span class="line"><span class="cl">Language            Files        Lines         Code     Comments       <span class="nv">Blanks</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================================</span>
</span></span><span class="line"><span class="cl">TypeScript              <span class="m">1</span>          <span class="m">131</span>          <span class="m">103</span>            <span class="m">9</span>           <span class="nv">19</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================================</span>
</span></span><span class="line"><span class="cl">Total                   <span class="m">1</span>          <span class="m">131</span>          <span class="m">103</span>            <span class="m">9</span>           <span class="nv">19</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================================</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>所以标题也可以修改成 100 行代码实现一个简单的 CSS Selector :)</p>
<p>如果细看实现，还是有不少的优化之处的，比如 <code>parseSelector</code> 函数可以实现得更优雅些，以便进一步扩展支持其他的语法。</p>
<p>另外就是目前支持的都是所有 selector 完全匹配的情况，即 <code>and</code>, 但是目前不支持 <code>or</code> 的功能，即类如: <code>h1,h2,h3</code>, 可以匹配 <code>h1</code>, <code>h2</code>, 或者 <code>h3</code>.</p>
<hr>
<p>如果想要看下较完整版本的 CSS Selector, 可以看下我六年多前我用 C++ 实现的<a href="https://github.com/ramsayleung/crawler">版本</a>, 实现从字符串解析并生成 <code>DOM</code>, 再实现 CSS 解析器，纯正的 OOP 风味。</p>
<p>当时初学 C++, 这个算是我早期写得比较大的 C++17 项目，核心代码大概1000行，还有几百行的单元测试。</p>
<p>现在再翻看自己的代码，会惊讶于当时自己代码写的工整，可谓是有板有眼，像极了书法初学者写的楷书。</p>
<blockquote>
<p><span class="org-target" id="org-target--Unix----"></span>这本砖头书读过, 其他的C++书籍, 如<span class="org-target" id="org-target--C---Primer"></span>, <span class="org-target" id="org-target--Effective-C--"></span>, <span class="org-target" id="org-target--Modern-C--"></span>也读过, 感觉不把书中的内容实践下, 很容易遗忘。</p>
<p>但是日常的工作内容并不会涉及底层网络服务, 一切底层细节内容都被框架给包掉了, 开发的主力语言是Java, 也不会使用到C++.</p>
<p>因此决定创造个机会实践下这些知识，最终决定只用C/C++内置函数库实现。</p></blockquote>
<p>的确所有工具都是用C/C++内置函数库实现的，甚至测试框架还是自己用宏实现的.</p>
<p>只是我未曾想到的是，写了这段话后不足一年，C++就成为了我下一家公司干活的主力语言; 而现在，我又在重新写 Java, 着实是「白衣苍狗」。</p>
<p><a href="/zh/post/2025/reinvent_project/">回到本系列的目录</a></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://github.com/ramsayleung/reinvent/tree/master/html_selector">https://github.com/ramsayleung/reinvent/tree/master/html_selector</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_selectors">https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_selectors</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="https://developer.mozilla.org/en-US/docs/Web/XML/XPath/Guides">https://developer.mozilla.org/en-US/docs/Web/XML/XPath/Guides</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p><a href="https://refactoring.guru/design-patterns/strategy">https://refactoring.guru/design-patterns/strategy</a>&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>重新造轮子系列(二)：文件备份</title>
      <link>https://ramsayleung.github.io/zh/post/2025/reinvent_file_backup/</link>
      <pubDate>Sun, 02 Mar 2025 11:57:00 -0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2025/reinvent_file_backup/</guid>
      <description>&lt;p&gt;项目 GitHub 地址: &lt;a href=&#34;https://github.com/ramsayleung/reinvent/tree/master/file_backup&#34;&gt;File Backup&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;前言&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; 前言&lt;/h2&gt;
&lt;p&gt;既然我们已经有&lt;a href=&#34;https://ramsayleung.github.io/zh/post/2025/reinvent_unit_test/&#34;&gt;单元测试&lt;/a&gt;框架来测试软件了，我们肯定不想已经写好的代码丢失掉。&lt;/p&gt;
&lt;p&gt;对于重要的文件，一个必不可少的功能肯定是备份, 这样在丢失文件之后可以重新恢复。&lt;/p&gt;
&lt;p&gt;今天我们就来写个简单的文件备份软件，类似 Git 这样的版本系统可以当作是高级版本的文件系统，因为它还支持切换到不同版本，对比版本间的差异等等功能，而我们不打算实现一个版本管理系统，只实现基础的文件备份功能。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>项目 GitHub 地址: <a href="https://github.com/ramsayleung/reinvent/tree/master/file_backup">File Backup</a></p>
<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>既然我们已经有<a href="/zh/post/2025/reinvent_unit_test/">单元测试</a>框架来测试软件了，我们肯定不想已经写好的代码丢失掉。</p>
<p>对于重要的文件，一个必不可少的功能肯定是备份, 这样在丢失文件之后可以重新恢复。</p>
<p>今天我们就来写个简单的文件备份软件，类似 Git 这样的版本系统可以当作是高级版本的文件系统，因为它还支持切换到不同版本，对比版本间的差异等等功能，而我们不打算实现一个版本管理系统，只实现基础的文件备份功能。</p>
<h2 id="实现思路"><span class="section-num">2</span> 实现思路</h2>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-05fa5" hidden>
    <label for="zoomCheck-05fa5">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/reinvent_file_backup_design.png"/> 
    
    
    </label>
</figure>

<h3 id="校验文件是否变更"><span class="section-num">2.1</span> 校验文件是否变更</h3>
<p>我们不可能备份都将所有的文件备份一次，这样做效率太低了，我们应该只备份发生变更的文件，那么如何高效地判断文件是否发生变更呢？</p>
<p>最简单粗暴的方式是把文件读取出来，然后与以备份的文件作对比，但是这样的效率太低，并且算法复杂度是: O(N), 即运行时间是随着文件内容增长而增长的，文件越长，对比越慢。</p>
<p>最优算法的复杂度是 <code>O(1)</code>, 我们希望可以通过常数时间内比较完文件内容。</p>
<p>我们可以使用 <a href="https://en.wikipedia.org/wiki/Cryptographic_hash_function">密码哈希算法(Cryptographic hash algorithms)</a>, 来实现判断文件是否发生变更，它有两个显著的特征:</p>
<ol>
<li>hash 函数的结果是定长，不会因输入变化而增加或减少</li>
<li>只要输入的任意bit生成变更， hash 函数生成的结果都会不一样</li>
</ol>
<p>因此我们可以将文件的内容使用密码哈希函数如 <code>sha1</code> 来hash, 通过比较两次的哈希结果是否一致来判断文件是否发生变更。</p>
<h3 id="判断文件是否被备份"><span class="section-num">2.2</span> 判断文件是否被备份</h3>
<p>判断文件是否被备份就很直接了，只需要看下当前文件是否在目标路径存在。</p>
<p>再结合上文提到的，只备份内容发生变更的文件，那么我们可以使用哈希函数的结果作为目标路径的备份文件名。</p>
<p>假设有文件 <code>src/a.txt</code>, 它的文件内容的哈希结果是 <code>86f7e437faa5a7fce15d1ddcb9eaeaea377667b8</code>, 那么我们使用哈希值作为文件名备份到 <code>dst</code>, 即 <code>dst/86f7e437faa5a7fce15d1ddcb9eaeaea377667b8</code>.</p>
<p>对于文件 <code>a.txt</code>, 只需要判断 <code>dst</code> 是否存在 <code>86f7e437faa5a7fce15d1ddcb9eaeaea377667b8</code>, 就知道 <code>a.txt</code> 是否被备份;</p>
<p>更巧妙的是，如果的 <code>a.txt</code> 文件内容发生变化，那么它的哈希值就一定不再会是 <code>86f7e437faa5a7fce15d1ddcb9eaeaea377667b8</code> 那么查找文件不存在，也可以当作是未备份，直接重新备份。</p>
<p>下面的序列图就是low level design:</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-5040e" hidden>
    <label for="zoomCheck-5040e">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/reinvent_file_backup_lowlevel_design.png"/> 
    
    
    </label>
</figure>

<h3 id="性能优化"><span class="section-num">2.3</span> 性能优化</h3>
<p>备份涉及到非常多的文件IO操作，而IO恰恰就是 Nodejs 最擅长的领域, 毕竟曾经的 NodeJS 还有个项目叫做 <code>io.js</code>.</p>
<p>NodeJS 的异步IO是基于 <a href="https://github.com/libuv/libuv">libuv</a>, 但是我们不需要支持使用 <code>libuv</code> 的API, 只需要把文件相关的操作封装在 <code>Promise</code> 里面，NodeJS就会帮我们在处理底层的 IO 调度, 尽可能地并发处理IO, 避免阻塞.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">hashExisting</span> <span class="o">=</span> <span class="p">(</span><span class="nx">rootDir</span><span class="o">:</span> <span class="nx">string</span><span class="p">)</span><span class="o">:</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">PathHashPair</span><span class="p">[]</span><span class="o">&gt;</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">pattern</span> <span class="o">=</span> <span class="sb">`</span><span class="si">${</span><span class="nx">rootDir</span><span class="si">}</span><span class="sb">/**/*`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">glob</span><span class="p">(</span><span class="nx">pattern</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">matches</span> <span class="p">=&gt;</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="nx">matches</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">path</span> <span class="p">=&gt;</span> <span class="nx">statPath</span><span class="p">(</span><span class="nx">path</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">            <span class="p">))</span>
</span></span><span class="line"><span class="cl">            <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">pairs</span><span class="o">:</span> <span class="nx">PathStatPair</span><span class="p">[])</span> <span class="p">=&gt;</span> <span class="nx">pairs</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="p">([</span><span class="nx">path</span><span class="p">,</span> <span class="nx">stat</span><span class="p">])</span> <span class="p">=&gt;</span> <span class="nx">stat</span><span class="p">.</span><span class="nx">isFile</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">            <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">pairs</span><span class="o">:</span> <span class="nx">PathStatPair</span><span class="p">[])</span> <span class="p">=&gt;</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="nx">pairs</span><span class="p">.</span><span class="nx">map</span><span class="p">(([</span><span class="nx">path</span><span class="p">,</span> <span class="nx">stat</span><span class="p">])</span> <span class="p">=&gt;</span> <span class="nx">readPath</span><span class="p">(</span><span class="nx">path</span><span class="p">))))</span>
</span></span><span class="line"><span class="cl">            <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">pairs</span><span class="o">:</span> <span class="nx">PathContentPair</span><span class="p">[])</span> <span class="p">=&gt;</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="nx">pairs</span><span class="p">.</span><span class="nx">map</span><span class="p">(([</span><span class="nx">path</span><span class="p">,</span> <span class="nx">content</span><span class="p">])</span> <span class="p">=&gt;</span> <span class="nx">hashPath</span><span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="nx">content</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">            <span class="p">))</span>
</span></span><span class="line"><span class="cl">            <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">pairs</span><span class="o">:</span> <span class="nx">PathHashPair</span><span class="p">[])</span> <span class="p">=&gt;</span> <span class="nx">resolve</span><span class="p">(</span><span class="nx">pairs</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">            <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span> <span class="p">=&gt;</span> <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>更多关于 <code>Promise</code> 的内容，可以查看<a href="https://javascript.info/async">这本书</a>，它的解释非常到位.</p>
<h3 id="测试文件系统"><span class="section-num">2.4</span> 测试文件系统</h3>
<p>备份文件的设计我们已经分析和实现完了，接下来肯定是需要编写单元测试来测试我们的函数的，我们的文件备份涉及到非常多的文件操作，免不了要和文件系统打交道，包括创建文件，查找文件等等。</p>
<p>单元测试的其中一个原则就是要尽量屏蔽掉外部系统的依赖，以保证我们只聚焦在测试功能本身，文件系统的读写更像是集成测试需要做的事情, 各种操作也很容易把文件目录结构给搞乱，导致单元测试失败。</p>
<p>所以我们希望可以使用一个 mock object 来把文件系统 mock 掉，<a href="https://github.com/tschaub/mock-fs"><code>mock-fs</code></a> 这个库做的就是这样的事情, 它可以把程序中的文件操作都 mock 掉，实际操作的是内存对象而非文件系统.</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-28fbb" hidden>
    <label for="zoomCheck-28fbb">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/reivent_file_backup_mock_fs.jpg"/> 
    
    
    </label>
</figure>

<p>我们就可以在每个单元测试运行时，任意构造任何想要的文件目录，并且保证文件操作都是在操纵内存对象，
而不会直接作用到文件系统，保证单元测试的相互隔离。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">mock</span> <span class="nx">from</span> <span class="s1">&#39;mock-fs&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;checks for pre-existing hashes using mock filesystem&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">beforeEach</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">mock</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;bck-0-csv-0&#39;</span><span class="o">:</span> <span class="p">{},</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;bck-1-csv-1&#39;</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="s1">&#39;0001.csv&#39;</span><span class="o">:</span> <span class="s1">&#39;alpha.js,abcd1234&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s1">&#39;abcd1234.bck&#39;</span><span class="o">:</span> <span class="s1">&#39;alpha.js content&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;bck-4-csv-2&#39;</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="s1">&#39;0001.csv&#39;</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;alpha.js,abcd1234&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                             <span class="s1">&#39;beta.txt,bcde2345&#39;</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;\n&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                <span class="s1">&#39;3024.csv&#39;</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;alpha.js,abcd1234&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                             <span class="s1">&#39;gamma.png,3456cdef&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                             <span class="s1">&#39;subdir/renamed.txt,bcde2345&#39;</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;\n&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                <span class="s1">&#39;3456cdef.bck&#39;</span><span class="o">:</span> <span class="s1">&#39;gamma.png content&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s1">&#39;abcd1234.bck&#39;</span><span class="o">:</span> <span class="s1">&#39;alpha content&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s1">&#39;bcde2345.bck&#39;</span><span class="o">:</span> <span class="s1">&#39;beta.txt became subdir/renamed.txt&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">afterEach</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">mock</span><span class="p">.</span><span class="nx">restore</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>上面的代码就构造出下如下的文件目录：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">├── bck-0-csv-0
</span></span><span class="line"><span class="cl">├── bck-1-csv-1
</span></span><span class="line"><span class="cl">│   ├── 0001.csv
</span></span><span class="line"><span class="cl">│   └── abcd1234.bck
</span></span><span class="line"><span class="cl">└── bck-4-csv-2
</span></span><span class="line"><span class="cl">├── 0001.csv
</span></span><span class="line"><span class="cl">├── 3028.csv
</span></span><span class="line"><span class="cl">├── 3456cdef.bck
</span></span><span class="line"><span class="cl">├── abcd1234.bck
</span></span><span class="line"><span class="cl">└── bcde2345.bck
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="使用示例"><span class="section-num">3</span> 使用示例</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">&gt; tree .
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── backup.ts
</span></span><span class="line"><span class="cl">├── check-existing-files.ts
</span></span><span class="line"><span class="cl">├── hash-existing-promise.ts
</span></span><span class="line"><span class="cl">├── main.ts
</span></span><span class="line"><span class="cl">├── manifest.ts
</span></span><span class="line"><span class="cl">├── reinvent_file_backup.org
</span></span><span class="line"><span class="cl">├── run-hash-existing-promise.ts
</span></span><span class="line"><span class="cl">├── stream-copy.ts
</span></span><span class="line"><span class="cl">└── <span class="nb">test</span>
</span></span><span class="line"><span class="cl">    ├── bck-0-csv-0
</span></span><span class="line"><span class="cl">    ├── bck-1-csv-1
</span></span><span class="line"><span class="cl">    │   ├── 0001.csv
</span></span><span class="line"><span class="cl">    │   └── abcd1234.bck
</span></span><span class="line"><span class="cl">    ├── bck-4-csv-2
</span></span><span class="line"><span class="cl">    │   ├── 0001.csv
</span></span><span class="line"><span class="cl">    │   ├── 3028.csv
</span></span><span class="line"><span class="cl">    │   ├── 3456cdef.bck
</span></span><span class="line"><span class="cl">    │   ├── abcd1234.bck
</span></span><span class="line"><span class="cl">    │   └── bcde2345.bck
</span></span><span class="line"><span class="cl">    ├── test-backup.js
</span></span><span class="line"><span class="cl">    ├── test-find-mock.js
</span></span><span class="line"><span class="cl">    └── test-find.js
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">5</span> directories, <span class="m">18</span> files
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt; npx tsx main.ts -s . -d /tmp/backup -f json -v
</span></span><span class="line"><span class="cl"><span class="o">[</span>INFO<span class="o">]</span> Destination directory ensured: /tmp/backup
</span></span><span class="line"><span class="cl"><span class="o">[</span>INFO<span class="o">]</span> Starting backup from <span class="s1">&#39;.&#39;</span> to <span class="s1">&#39;/tmp/backup&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>INFO<span class="o">]</span> Copied <span class="m">8</span> files from /Users/ramsayleung/code/javascript/reinvent/file_backup to /tmp/backup
</span></span><span class="line"><span class="cl">Backup completed in: 15.96ms
</span></span><span class="line"><span class="cl">Backup completed successfully!
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt; ls -alrt /tmp/backup
</span></span><span class="line"><span class="cl">total <span class="m">88</span>
</span></span><span class="line"><span class="cl">drwxrwxrwt  <span class="m">23</span> root         wheel   <span class="m">736</span>  <span class="m">2</span> Mar 17:06 ..
</span></span><span class="line"><span class="cl">-rw-r--r--@  <span class="m">1</span> ramsayleung  wheel  <span class="m">1056</span>  <span class="m">2</span> Mar 21:02 6bd385393bd0e4a4f9a3b68eea500b88165033b1.bck
</span></span><span class="line"><span class="cl">-rw-r--r--@  <span class="m">1</span> ramsayleung  wheel  <span class="m">1649</span>  <span class="m">2</span> Mar 21:02 8b0bc65c42ca2ae9095bb1c340844080f2f054da.bck
</span></span><span class="line"><span class="cl">-rw-r--r--@  <span class="m">1</span> ramsayleung  wheel  <span class="m">9795</span>  <span class="m">2</span> Mar 21:02 464240b6ef1f03652fefc56152039c0f8d105cfe.bck
</span></span><span class="line"><span class="cl">-rw-r--r--@  <span class="m">1</span> ramsayleung  wheel   <span class="m">636</span>  <span class="m">2</span> Mar 21:02 d0f548d134e99f1fcc2d1c81e1371f48d9f3ca0c.bck
</span></span><span class="line"><span class="cl">-rw-r--r--@  <span class="m">1</span> ramsayleung  wheel   <span class="m">182</span>  <span class="m">2</span> Mar 21:02 7fa1b33f68d734b406ddb58e3f85f199851393db.bck
</span></span><span class="line"><span class="cl">-rw-r--r--@  <span class="m">1</span> ramsayleung  wheel   <span class="m">666</span>  <span class="m">2</span> Mar 21:02 369034de6e5b7ee0e867c6cfca66eab59f834447.bck
</span></span><span class="line"><span class="cl">-rw-r--r--@  <span class="m">1</span> ramsayleung  wheel  <span class="m">2533</span>  <span class="m">2</span> Mar 21:02 02d5c238d29f9e49d2a1f525e7db5f420a654a3f.bck
</span></span><span class="line"><span class="cl">-rw-r--r--@  <span class="m">1</span> ramsayleung  wheel  <span class="m">3512</span>  <span class="m">2</span> Mar 21:02 964c0245a5d8cb217d64d794952c80ddf2aecca8.bck
</span></span><span class="line"><span class="cl">drwxr-xr-x@ <span class="m">11</span> ramsayleung  wheel   <span class="m">352</span>  <span class="m">2</span> Mar 21:02 .
</span></span><span class="line"><span class="cl">-rw-r--r--@  <span class="m">1</span> ramsayleung  wheel  <span class="m">1030</span>  <span class="m">2</span> Mar 21:02 0000000000.json
</span></span></code></pre></td></tr></table>
</div>
</div><p>为什么 <code>file_backup</code> 目录里面有 18 个文件，只备份了8个文件呢？因为 <code>test</code> 目录里面所有的文件都是空的，所以备份时就跳过了。</p>
<h2 id="总结"><span class="section-num">4</span> 总结</h2>
<p>我们就完成了一个文件备份软件的开发，功能当然还非常简单，还有非常多优化的空间，比如现在 <code>src</code> 目录的所有文件都会被平铺到 <code>dst</code> 目录，如果我们可以保存目录结构，那么就更好用了。</p>
<p>另外，使用哈希函数值作为文件名的确很巧妙，但是对于用户而已，如果不逐个打开文件，根本不知道哪个文件是对应哪个源文件等等。</p>
<p>如果想要实现一个更健壮易用的备份文件，可以参考下关于这 <a href="https://michael.stapelberg.ch/posts/2022-06-18-rsync-overview/">rsync 系列的文章</a> , <code>rsync</code> 是Linux 上非常流行的增量备份的文件，不仅可以备份本地文件，更可以把文件备份把远程服务器，非常强大。</p>
<p><a href="/zh/post/2025/reinvent_project/">回到本系列的目录</a></p>
<h2 id="参考"><span class="section-num">5</span> 参考</h2>
<ul>
<li><a href="https://third-bit.com/sdxjs/file-backup/">https://third-bit.com/sdxjs/file-backup/</a></li>
<li><a href="https://en.wikipedia.org/wiki/Cryptographic_hash_function">https://en.wikipedia.org/wiki/Cryptographic_hash_function</a></li>
<li><a href="https://michael.stapelberg.ch/posts/2022-06-18-rsync-overview/">https://michael.stapelberg.ch/posts/2022-06-18-rsync-overview/</a></li>
<li><a href="https://javascript.info/async">https://javascript.info/async</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>软件工程师的软技能指北（六）：谈薪篇</title>
      <link>https://ramsayleung.github.io/zh/post/2025/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%BD%AF%E6%8A%80%E8%83%BD%E6%8C%87%E5%8C%97_%E8%B0%88%E8%96%AA%E7%AF%87/</link>
      <pubDate>Mon, 17 Feb 2025 15:06:00 -0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2025/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%BD%AF%E6%8A%80%E8%83%BD%E6%8C%87%E5%8C%97_%E8%B0%88%E8%96%AA%E7%AF%87/</guid>
      <description>&lt;h2 id=&#34;目录&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; 目录&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://ramsayleung.github.io/zh/post/2023/%E6%80%BB%E8%A7%88%E7%AF%87/&#34;&gt;软件工程师的软技能指北（一）：总览篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ramsayleung.github.io/zh/post/2023/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%BD%AF%E6%8A%80%E8%83%BD%E6%8C%87%E5%8C%97_%E4%BA%8B%E4%B8%9A%E7%AF%872/&#34;&gt;软件工程师的软技能指北（二）：事业篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ramsayleung.github.io/zh/post/2023/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%BD%AF%E6%8A%80%E8%83%BD%E6%8C%87%E5%8C%97_%E9%AB%98%E6%95%88%E4%BA%A4%E6%B5%81%E7%AF%873/&#34;&gt;软件工程师的软技能指北（三）：高效交流篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ramsayleung.github.io/zh/post/2023/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%BD%AF%E6%8A%80%E8%83%BD%E6%8C%87%E5%8C%97_%E7%AE%80%E5%8E%86%E7%AF%87/&#34;&gt;软件工程师的软技能指北（四）：简历篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;软件工程师的软技能指北（五）：面试篇(暂时跳过, 后面再填)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ramsayleung.github.io/zh/post/2025/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%BD%AF%E6%8A%80%E8%83%BD%E6%8C%87%E5%8C%97_%E8%B0%88%E8%96%AA%E7%AF%87/&#34;&gt;软件工程师的软技能指北（六）：谈薪篇&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;前言&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; 前言&lt;/h2&gt;
&lt;p&gt;打了这么多年工，要说最后悔和最遗憾的是什么，「拿到 Offer 之后没有好好和 HR 谈薪资绝对算是（甚至没有之一）」。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="目录"><span class="section-num">1</span> 目录</h2>
<ol>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%80%BB%E8%A7%88%E7%AF%87/">软件工程师的软技能指北（一）：总览篇</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%BD%AF%E6%8A%80%E8%83%BD%E6%8C%87%E5%8C%97_%E4%BA%8B%E4%B8%9A%E7%AF%872/">软件工程师的软技能指北（二）：事业篇</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%BD%AF%E6%8A%80%E8%83%BD%E6%8C%87%E5%8C%97_%E9%AB%98%E6%95%88%E4%BA%A4%E6%B5%81%E7%AF%873/">软件工程师的软技能指北（三）：高效交流篇</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%BD%AF%E6%8A%80%E8%83%BD%E6%8C%87%E5%8C%97_%E7%AE%80%E5%8E%86%E7%AF%87/">软件工程师的软技能指北（四）：简历篇</a></li>
<li>软件工程师的软技能指北（五）：面试篇(暂时跳过, 后面再填)</li>
<li><a href="https://ramsayleung.github.io/zh/post/2025/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%BD%AF%E6%8A%80%E8%83%BD%E6%8C%87%E5%8C%97_%E8%B0%88%E8%96%AA%E7%AF%87/">软件工程师的软技能指北（六）：谈薪篇</a></li>
</ol>
<h2 id="前言"><span class="section-num">2</span> 前言</h2>
<p>打了这么多年工，要说最后悔和最遗憾的是什么，「拿到 Offer 之后没有好好和 HR 谈薪资绝对算是（甚至没有之一）」。</p>
<p>如果说面试前的简历准备，刷题，面试中应付面试官的各种提问以及面试之外的学习与积累是一场马拉松比赛的话，那么拿到 Offer 就意味着你已经成功完成征程的前九十九步了，而商谈薪资待遇就是最后一步，亦是最关键的一步。</p>
<p>如果这一步没有做好，前面的九十九步无论多完美都等于白费了，可谓是令人痛惜。</p>
<p>谈得成功的话，可能一年工资就多了一辆车了（至于是五菱MINI 还是保时捷911就看实力了）。</p>
<h2 id="认知"><span class="section-num">3</span> 认知</h2>
<p>回想我之前曾经关于「谈薪资」的错误认知，可谓是非常经典，可惜当初没有师长可以为我指正。</p>
<h3 id="学生思维"><span class="section-num">3.1</span> 学生思维</h3>
<p>刚毕业时的「这是家大公司，我是来学东西的，开什么薪资都可以」, 这个可以算是典型的「学生思维」，甚至出发点就是错的。</p>
<p>工作的根本目的就是「为了赚钱养活自己，过上更好的生活」，而不是去企业里面学习，「学习新本领」也只是「打工赚钱」的副产品而已。</p>
<p>经历过各种残酷的「末位淘汰」后我就发现，企业招「应届生」进去也不是因为看中你潜力大啥的，而是需要你这个年龄段的员工，
企业也有各种政府下达的就业指标，而招你进去也不是让你学东西的，而是让你干活的。</p>
<p>最明显的佐证就是，我所经历过的大公司每年的「末位淘汰」会有很多的应届生被打低绩效，
毕竟刚出校门的学生在能力，经验等方面是肯定是不如老员工的。</p>
<p>「末位淘汰」从来都不是激励你学习的，而是让你多干活的。</p>
<p>既然公司招聘员工是为了公司利益的最大化，员工自然就要最大化自己的利益。</p>
<h3 id="心理负担"><span class="section-num">3.2</span> 心理负担</h3>
<p>不要把公司 <strong>拟人化</strong> ，不要觉得和公司「谈判」不好，因此产生心理负担，公司只是众多利益相关的人组成的共同体而已。</p>
<h3 id="不愿意承担风险"><span class="section-num">3.3</span> 不愿意承担风险</h3>
<p>诚然, 现在整体就业大环境肯定不如2010-2020年的黄金十年，各种裁员降薪的消息层出不穷, 但如果持有「能找到个工作就不错了，还谈什么薪资」的认知，可能很难去HR谈薪资, 毕竟你潜意识就已经选择接受 Offer, 除非是 HR 的报价是远低于你的底线.</p>
<p>须知，收益永远是风险挂钩的，你永远不可能有高收益，零风险的投资标的。</p>
<h3 id="默认公平幻想"><span class="section-num">3.4</span> 默认公平幻想</h3>
<p>「工资由能力决定，相信公司会公平对待，肯定可以拿到对应的薪资，不需要自己去谈」</p>
<p>我曾经也持有种这样的「幻想」，以为凭借面试的表现折服了面试官，他自己会帮我争取, 甚至给我一个好的薪资.</p>
<p>首先，在较大的公司，面试官都是无法决定或者甚至知道薪资的，会有专门的 HR 团队来和你的谈判薪资的；</p>
<p>其次，你也很难期望面试官能把技术面试的结果如实呈现给非技术出身的 HR.</p>
<p>总而言之，「有枣子没枣子打一棒就好了」，争取了不一定要有，但是不争取绝对不会有人给你加工资的.</p>
<h2 id="风险收益分析"><span class="section-num">4</span> 风险收益分析</h2>
<p>我用博弈论模型来简单分析下分析公司和求职者的策略互动过程中风险与收益, 用收益矩阵来表示双方的选择和收益。</p>
<p>假设公司有三种策略:</p>
<ol>
<li>接受谈薪（给更高薪资）</li>
<li>拒绝谈薪（维持原 Offer）</li>
<li>撤回 Offer</li>
</ol>
<p>求职者也有三种策略:</p>
<ol>
<li>不谈</li>
<li>温和谈判</li>
<li>强硬谈判</li>
</ol>
<p>分析策略:</p>
<ul>
<li>不谈薪（保守策略）
<ul>
<li>公司不会撤回 Offer，但求职者没有额外收益。</li>
</ul>
</li>
<li>温和谈判（合理博弈）
<ul>
<li>60% 机会加薪 5W，40% 机会薪资不变，公司很少会撤回 Offer（5%）。</li>
</ul>
</li>
<li>强硬谈判（高风险高回报）
<ul>
<li>50% 机会加薪 10W，30% 机会薪资不变，但 20% 可能失去 Offer。</li>
</ul>
</li>
</ul>
<p>收益矩阵:</p>
<table>
  <thead>
      <tr>
          <th></th>
          <th>公司接受 (+5W)</th>
          <th>公司拒绝 (0W)</th>
          <th>公司撤回 (-5W)</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>不谈 (30W)</td>
          <td>30W</td>
          <td>30W</td>
          <td>30W</td>
      </tr>
      <tr>
          <td>温和谈判 (35W)</td>
          <td>35W(60%)</td>
          <td>30W(40%)</td>
          <td>30W(5%)</td>
      </tr>
      <tr>
          <td>强硬谈判 (40W)</td>
          <td>40W (50%)</td>
          <td>30W (30%)</td>
          <td>5W (20%)</td>
      </tr>
  </tbody>
</table>
<p>纳什均衡:</p>
<ul>
<li>如果求职者选择温和谈判，公司最优策略是接受或拒绝，而非撤回 Offer，因为撤回 Offer 也意味着公司损失招聘成本。</li>
<li>如果求职者选择强硬谈判，公司可能更倾向于撤回 Offer，因为不愿承担过高的薪资成本。</li>
<li>温和谈判是最优策略，因为它在风险和收益之间达到了较好的平衡, 既有提升空间，又降低 Offer 撤回风险.</li>
</ul>
<p>也就是对于求职者来说，如果你选择谈判，谈判失败，你的结果大概率也是接受原 Offer而已，而一旦谈判成功，你将会获得额外的收益。</p>
<p>可以说在接 Offer 谈判时 <strong>风险低, 收益中, 甚至高</strong> , 而不谈薪是最保守的策略，但也是收益最低的.</p>
<h2 id="公司的策略"><span class="section-num">5</span> 公司的策略</h2>
<p>公司的终极目的肯定是为了创造营收，而在招聘中直接目的是希望可以招到想要的，能干活的员工。</p>
<p>每个职位肯定都是有级别，不同级别有不同的工资范围，但是级别只是定义了上下限，拿到上限和下限之间可谓有天渊之别。
而且，绝大部分职位，都不会给上限工资，人人都给上限，工资预算肯定超标了。</p>
<p>HR 给你 offer 数字之前，要考虑几个因素:</p>
<ol>
<li>公司招人有预算，能用低价招到的，就肯定不会出高价</li>
<li>你可能会讨价还价，所以不能直接给上限，要留有提价的余地</li>
<li>如果工资太低，你可能一怒之下就拒了。</li>
</ol>
<h2 id="求职者的手牌"><span class="section-num">6</span> 求职者的手牌</h2>
<p>虽然求职者与公司谈判过程中处于相对弱势地位，但是这并不意味着我们完全没有牌可打，所以我们要利用好手上的牌。</p>
<h3 id="公司内部的助力"><span class="section-num">6.1</span> 公司内部的助力</h3>
<p>说起来可能难以置信，虽然求职者可能与公司的人还毫无联系，但是求职者会在公司内有相当的助力，因为基本上你接触到的公司每个人都是想你接 offer 的.</p>
<p>对于公司来说，在你身上已经花费了相当的成本，HR 筛选简历，安排面试官面试，2-4轮的面试，都要花费面试官与HR时间的，公司付给员工工资，这些时间都是要算钱的。</p>
<p>而一旦你拒绝，这些花费的时间成本都会成为沉没成本。</p>
<p>对于 HR 来说，她们也是有考核指标的，招聘人数也是她们的考核指标，所以她们也有强烈的动机尽快招到人。</p>
<p>而对于招聘你的团队老板来说，肯定是希望赶紧招到人来干活的，工资多少他不关心，反正出的又不是他的钱。</p>
<p>所以这些人都是希望你能接 offer 的潜在助力。</p>
<h3 id="多拿offer"><span class="section-num">6.2</span> 多拿Offer</h3>
<p>拿到多个的 offer，这个会成为你和 HR 谈判的最大底气，你就不会担心谈崩了，这家给不了，了不起去下家；如果多个公司愿意相互竞价，你就能渔翁得利，利益最大化。</p>
<p>对于公司来说，肯定是希望招到能力强，能干活的候选人，但是怎么去量化能力强呢，即便候选人通过了面试，也不能说明他们能力一定能胜任。</p>
<p>但是如果你能通过多个公司的面试，对于HR来说，相当你额外再通过了十几二十轮的面试，
从概率来说，你是没能力的候选人的机率大大降低，既然大家都说你好，那么他们就有更强烈的意愿与你洽谈。</p>
<h3 id="薪资是底牌"><span class="section-num">6.3</span> 薪资是底牌</h3>
<p>上文提到，公司的策略是希望以尽量低的薪资来招到人，那么两个非常重要的参考标准：</p>
<p>一个就是别的公司给你开的工资，另外一个就是你现在的工资,</p>
<p>假如你现在的工资是20W 一年, 那我就只给你加个20%, 最多给加个30%, 既然你20W都愿意干，为什么我要开高价.</p>
<p>所以你现在的薪资就是你的底牌, 千万不要给人看到, 不然就定死上限了。</p>
<p>不然你拿了一次低工资，后面次次跳槽都要拿低工资，凭什么呢？真的是闻者伤心。</p>
<p>所以HR问你的时候，不要正面回答，尽量模糊化，以此争取最大利益。</p>
<p>比如HR换个问法，问你的预期薪资是多少？</p>
<p>这个问题非常坑，相当于给自己划定上限，如果你回答30W, 她就绝对不可能给你40W, 你可以回答说：我心里没个具体数字，但我对任何有竞争力的 offer 持开放态度.</p>
<p>一定要给的话，就给个模糊的范围, 比如阿里P7的水平吧。</p>
<h2 id="谈判的手段"><span class="section-num">7</span> 谈判的手段</h2>
<h3 id="表达强烈的兴趣"><span class="section-num">7.1</span> 表达强烈的兴趣</h3>
<p>&ldquo;你想加入这家公司&quot;这个前提是一切谈判的基础。</p>
<p>如果你表现出对加入这家公司兴趣寥廖, 那么即使你强如 Linus Torvalds, 也不会有HR会想和你谈薪资的，因为这个注定是不会有结果，她们当然也不会浪费时间。</p>
<p>所以你需要表示出对这家公司有强烈兴趣，无论是文化，工作方式，业务或者技术栈都与你非常契合，而你加入公司目前唯一的障碍就是没有拿到满意的薪资，这样HR才会非常乐意来为你争取。</p>
<p>你总要创造些条件给 HR, 她们才能为你争取更多。</p>
<p>所以无论你是否对这家公司感兴趣，起码你在谈薪资阶段都要表现出强烈的兴趣。</p>
<h3 id="少说多听"><span class="section-num">7.2</span> 少说多听</h3>
<p>求职者在谈薪资过程中是处于相对弱势的地位的，所以在谈判过程中要多听少说，
因为你的底牌不能被她们套出来，说得越多，不经意间漏出来的可能就越大。</p>
<p>而在电话中，当对方HR 试探性给出一个报价后，你都不要太快回应或者表达出来，因为对面的大概率也是谈判的老手，如果你表现得很欣喜, 那么她们就知道这个已经比你的底线要高了.</p>
<p>所以当听到报价之后，你可以适当地保持沉默，表示犹豫，然后让她们进一步加码, 即使她们不加码，你也用沉默表达了对报价的不满意.</p>
<h3 id="多个公司竞价"><span class="section-num">7.3</span> 多个公司竞价</h3>
<p>如果只向一个公司谈 offer, 最多两轮，可能就到了摊牌的时刻了。</p>
<p>只有能让多个公司竞价，你才能让你的「未来雇主们」卷起来，实现利益最大化, 另外其他公司的报价也可以成为的谈薪资的底价.</p>
<p>比如你工资是20W, 你想要30W, 公司的HR就会挑战你，说你这30W 太高了，他们给不来, 其实也是换种说法说你不值30W.</p>
<p>但是如果A公司给了你30W, 那么你就有底气问 B 公司要高于30W 的薪资, 毕竟这是市场对你的认可.</p>
<p>假设B 公司给了你35W, 那么你就可以回头向A 公司说，你拿到个35W 的offer, 让A公司提高下标准, A 公司可能给到个37W,</p>
<p>然后你再回到 B 公司说:</p>
<blockquote>
<p>我真的很想加入贵公司，和你们一起工作，只是A公司给了37W, 着实很为难，我真的很加入你们, 你们可以再匹配一下嘛?</p></blockquote>
<p>B 如果能给到40W, 再把同样的话和A 说一次, 两家公司工作竞价两次, 就相当于谈了4次了.</p>
<p>如果手握两家以上公司的 offer, 那么这个可以再用到其他公司身上，所以这个就要求你要在差不多的时间拿到全部的 offer.</p>
<h3 id="不要当场答应"><span class="section-num">7.4</span> 不要当场答应</h3>
<p>无论 HR 给你的报价多么诱人，又或者这个是你梦寐以求的公司，都不要当场答应下来，
万一其他公司给你更好的报价呢，当场答应而后又反悔给人的印象太不好了, 要给自己留有余地。</p>
<p>如果 HR 要你马上给出答案，你也可以这样回应:</p>
<blockquote>
<p>我非常珍惜贵公司提供的这个机会，我也非常希望加入贵公司，但是我意识到这个机会会对我的职业生涯产生重大影响，
我希望可以和家人商量之后再下决定。</p></blockquote>
<h2 id="总结"><span class="section-num">8</span> 总结</h2>
<p>几轮谈薪之后, 你可能拿到满意或者仍然不满意的报价，你就可以根据自己的诉求选择公司了。</p>
<p>你不一定会选钱最多的，可能你还会考虑公司前景，职业前景，工作强度等因素，但是起码选择之后你不会因没有为争取更高的收入进行谈判而后悔。</p>
<p>此外，这个可能是你在这家公司最容易调薪的一次了。</p>
<p>一旦你加入公司之后，你就会受限于绩效，级别，部门业绩等各种限制，再也不会有打几通电话, 发几封邮件就能涨薪的美事了。</p>
<p>所以，从这个角度来说，谈薪资的电话可能是你最应该打，且性价比最高的电话(大概率也没有之一)</p>
<h2 id="参考"><span class="section-num">9</span> 参考</h2>
<ul>
<li><a href="https://www.healthyhacker.com/2019/07/13/more-money-please/">https://www.healthyhacker.com/2019/07/13/more-money-please/</a> (一个我很喜欢的播客的主持人分享他自己谈薪资的过程)</li>
<li><a href="https://www.1point3acres.com/bbs/thread-286214-1-1.html">https://www.1point3acres.com/bbs/thread-286214-1-1.html</a> (一亩三分地版主分享求职如何跟公司讨价还价)</li>
<li><a href="https://podcasts.apple.com/us/podcast/no-477-%E6%88%91%E8%AE%A4%E8%AF%86%E7%9A%84%E6%9C%80%E5%8E%89%E5%AE%B3%E7%9A%84%E5%88%9D%E4%B8%AD%E6%AF%95%E4%B8%9A%E7%94%9F-%E5%8A%AA%E5%8A%9B%E5%B7%A5%E4%BD%9C-%E5%AD%98%E9%92%B1-%E7%95%99%E5%AD%A6-%E8%AF%BB%E4%B9%A6-%E7%BB%A7%E7%BB%AD%E5%8A%AA%E5%8A%9B%E5%B7%A5%E4%BD%9C/id1147186605?i=1000676154793">https://podcasts.apple.com/us/podcast/no-477-%E6%88%91%E8%AE%A4%E8%AF%86%E7%9A%84%E6%9C%80%E5%8E%89%E5%AE%B3%E7%9A%84%E5%88%9D%E4%B8%AD%E6%AF%95%E4%B8%9A%E7%94%9F-%E5%8A%AA%E5%8A%9B%E5%B7%A5%E4%BD%9C-%E5%AD%98%E9%92%B1-%E7%95%99%E5%AD%A6-%E8%AF%BB%E4%B9%A6-%E7%BB%A7%E7%BB%AD%E5%8A%AA%E5%8A%9B%E5%B7%A5%E4%BD%9C/id1147186605?i=1000676154793</a>(忽软忽硬电台采访，这位同行在下家要求出具薪资证明的时候，请财务吃饭，直接将工资x2再打印出来，叹为观止)</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>重新造轮子系列(一)：单元测试框架</title>
      <link>https://ramsayleung.github.io/zh/post/2025/reinvent_unit_test/</link>
      <pubDate>Sun, 16 Feb 2025 22:27:00 -0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2025/reinvent_unit_test/</guid>
      <description>&lt;p&gt;项目 GitHub 地址: &lt;a href=&#34;https://github.com/ramsayleung/reinvent/tree/master/unit_test&#34;&gt;Unit Test&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;前言&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; 前言&lt;/h2&gt;
&lt;p&gt;单元测试的重要性无须多言，它是保证项目质量的基石.&lt;/p&gt;
&lt;p&gt;如果没有单元测试，根本没有信心说自己开发的功能是符合要求的，更没法在没有测试的保证进行项目的重构。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>项目 GitHub 地址: <a href="https://github.com/ramsayleung/reinvent/tree/master/unit_test">Unit Test</a></p>
<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>单元测试的重要性无须多言，它是保证项目质量的基石.</p>
<p>如果没有单元测试，根本没有信心说自己开发的功能是符合要求的，更没法在没有测试的保证进行项目的重构。</p>
<p>既然单元测试如此重要，今天就用Typescript来写一个简单但五脏俱全的单元测试框架。</p>
<h2 id="历史"><span class="section-num">2</span> 历史</h2>
<p>Javascript 比较流行的测试框架是 <a href="https://mochajs.org/">Mocha</a> 和 <a href="https://jestjs.io/">Jest</a> , Java 具有统治地位的单元测试框架就是 <a href="https://junit.org/junit5/">JUnit</a>, 现在做单元测试的框架, 一般称为 xUnit 家族, 而 xUnit 家族最早的成员, 不是 JUnit, 而是 SUnit(Smalltalk Unit), SUnit 的历史比 Junit 悠久得多, 大约在1994年的时候, <a href="https://en.wikipedia.org/wiki/Kent_Beck">Kent Beck</a>, 也就是 Junit 的作者之一, 写了 <a href="https://sunit.sourceforge.net/">SUnit</a>, 而后才有了 JUnit (1998).</p>
<p>所以, 在 <a href="https://sunit.sourceforge.net/">SUnit</a> 的网站上, 极其显摆的写着”一切单元测试框架之母” (The mother of all unit testing frameworks).</p>
<p>事实上这是大实话 — 所有单元测试框架里面的名词术语, 都从 Sunit 来的, 如 TestCase, Fixture 等等.</p>
<h2 id="实现"><span class="section-num">3</span> 实现</h2>
<h3 id="需求"><span class="section-num">3.1</span> 需求</h3>
<p>先定义需求, 一个单元测试框架应该可以做到下面的事:</p>
<ol>
<li>找到包含测试的文件</li>
<li>找到上述文件的测试 case</li>
<li>运行测试case</li>
<li>捕获测试运行结果，并输出所有的测试的运行总结</li>
</ol>
<h3 id="原型"><span class="section-num">3.2</span> 原型</h3>
<p>一条 <code>assert</code> 语句就可以看作是最简单的测试 case, 对于测试case, 我们会有以下三种结果：</p>
<ul>
<li>Pass: 运行成功, 测试结果与预期一致</li>
<li>Fail: 运行失败, 测试结果与预期不一致</li>
<li>Error: 运行测试过程中出现错误，我们不确定测试结果是否与预期一致</li>
</ul>
<p>我们用以下的状态机来判断测试的结果:</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-44b21" hidden>
    <label for="zoomCheck-44b21">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/unit_test_result_state.png"/> 
    
    
    </label>
</figure>

<p>我们把要实现的单元测试框架命名为 <code>Hope</code>, 根据上面的状态机，我们很快就可以写出一个原型：</p>
<p>单元测试用例接收一个函数作为参数，然后又集中运行所有的测试用例，并根据是否抛出异常以及异常的类型来判断结果:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">assert</span> <span class="nx">from</span> <span class="s1">&#39;assert&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">HopeTests</span><span class="o">:</span> <span class="p">[</span><span class="nx">string</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="k">void</span><span class="p">][]</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">HopePass</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">HopeFail</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">HopeError</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Record a single test for running later.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">hopeThat</span> <span class="o">=</span> <span class="p">(</span><span class="nx">message</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">callback</span><span class="o">:</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="k">void</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">HopeTests</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="nx">message</span><span class="p">,</span> <span class="nx">callback</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">HopeTests</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(([</span><span class="nx">message</span><span class="p">,</span> <span class="nx">test</span><span class="p">])</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">test</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="nx">HopePass</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">assert</span><span class="p">.</span><span class="nx">AssertionError</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">HopeFail</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">HopeError</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`pass </span><span class="si">${</span><span class="nx">HopePass</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`fail </span><span class="si">${</span><span class="nx">HopeFail</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`error </span><span class="si">${</span><span class="nx">HopeError</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>让我们编写点代码来测试下我们的「单元测试框架」:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">// Something to test(doesn&#39;t handle zero properly)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">sign</span> <span class="o">=</span> <span class="p">(</span><span class="nx">value</span><span class="o">:</span> <span class="nx">number</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">value</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// These two should pass
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">hopeThat</span><span class="p">(</span><span class="s1">&#39;Sign of negative is -1&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">assert</span><span class="p">(</span><span class="nx">sign</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">)</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="nx">hopeThat</span><span class="p">(</span><span class="s1">&#39;Sign of positive is 1&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">assert</span><span class="p">(</span><span class="nx">sign</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="o">===</span> <span class="mi">1</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// This one should fail.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">hopeThat</span><span class="p">(</span><span class="s1">&#39;Sign of zero is 0&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">assert</span><span class="p">(</span><span class="nx">sign</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">===</span> <span class="mi">0</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// This one is an error.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">hopeThat</span><span class="p">(</span><span class="s1">&#39;Sign mispelled is erorr&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">assert</span><span class="p">(</span><span class="nx">sign</span><span class="p">(</span><span class="nx">sgn</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Call the main driver
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">main</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>输出的结果是:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">-&gt; npx tsx dry_run.ts
</span></span><span class="line"><span class="cl">pass <span class="m">2</span>
</span></span><span class="line"><span class="cl">fail <span class="m">1</span>
</span></span><span class="line"><span class="cl">error <span class="m">1</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们的第一版单元测试框架 <code>Hope</code> 能正常运行了，不过它有几个问题：</p>
<ol>
<li>它只是输出结果，但没有告诉我们是哪个单元测试成功了，哪个失败了，哪个报错，没法 debug</li>
<li>可变全局变量通常是有很大副作用的，我们应该把它封装起来</li>
<li>如果我们要测的函数里面，预期是要抛出 <code>assert.AssertionError</code>, 那么这个函数对应的测试用例就会被识别成失败的测试用例，也就是意味着我们不应该依赖 <code>assert.AssertError</code> 来作运行结果判断。</li>
</ol>
<h3 id="单例版本"><span class="section-num">3.3</span> 单例版本</h3>
<p>我们可以将上面的测试代码地址封装在一个类里，然后通过单例设计模式(<a href="https://refactoring.guru/design-patterns/singleton">Singleton pattern</a>)来确保只初始化出一个实例，这样就可以模拟出全局变量的效果，以此来解决前面的两个问题。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">assert</span> <span class="nx">from</span> <span class="s2">&#34;assert&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">caller</span> <span class="nx">from</span> <span class="s1">&#39;caller&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">Hope</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">private</span> <span class="nx">todo</span><span class="o">:</span> <span class="p">[</span><span class="nx">string</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="k">void</span><span class="p">][]</span> <span class="o">=</span> <span class="p">[];</span> <span class="c1">// 记录所有需要运行的测试case.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kr">private</span> <span class="nx">passes</span><span class="o">:</span> <span class="nx">string</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">  <span class="kr">private</span> <span class="nx">fails</span><span class="o">:</span> <span class="nx">string</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">  <span class="kr">private</span> <span class="nx">errors</span><span class="o">:</span> <span class="nx">string</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">  <span class="nx">constructor</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">todo</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">passes</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">fails</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">errors</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">test</span><span class="p">(</span><span class="nx">comment</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">callback</span><span class="o">:</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="k">void</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 通过caller 获取单元测试用例对应的文件名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="nx">todo</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="sb">`</span><span class="si">${</span><span class="nx">caller</span><span class="p">()</span><span class="si">}</span><span class="sb">::</span><span class="si">${</span><span class="nx">comment</span><span class="si">}</span><span class="sb">`</span><span class="p">,</span> <span class="nx">callback</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">run</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">todo</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(([</span><span class="nx">comment</span><span class="p">,</span> <span class="nx">test</span><span class="p">])</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">test</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">passes</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">comment</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">assert</span><span class="p">.</span><span class="nx">AssertionError</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="k">this</span><span class="p">.</span><span class="nx">fails</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">comment</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="k">this</span><span class="p">.</span><span class="nx">errors</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">comment</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="k">new</span> <span class="nx">Hope</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>上面的代码又是如何实现单例模式的呢？依靠的是 Node 的两个运行机制:</p>
<ol>
<li>在加载一个 <code>module</code> 的时候, 它就会解释并执行 <code>module</code> 的代码，这意味着它会运行 <code>new Hope()</code> 并且导出新创建的实例</li>
<li>那么是否意味着，每个 <code>import</code> 语句都会运行一下 <code>new Hope()</code> 呢? 并不是，Node会缓存导入的 <code>module</code> ，也就是说无论一个 <code>module</code> 被导入多少次, 它也只会执行一次代码。</li>
</ol>
<p>只要导入 <code>hope.ts</code> 之后, 就可以使用 <code>hope.test()</code> 会注册单元测试用例，以便后续执行:</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-5712b" hidden>
    <label for="zoomCheck-5712b">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/unit_test_hope_structure.svg"/> 
    
    
    </label>
</figure>

<p>最后， 我们只需要再实现下输出测试结果的功能，既支持输出一行的简短结果，又可以支持详尽的输出. 如果需要的话，后续还可以支持输出JSON, CSV, 或者HTML 格式的结果:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">terse</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">cases</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="nx">map</span><span class="p">(([</span><span class="nx">title</span><span class="p">,</span> <span class="nx">results</span><span class="p">])</span> <span class="p">=&gt;</span> <span class="sb">`</span><span class="si">${</span><span class="nx">title</span><span class="si">}</span><span class="sb">: </span><span class="si">${</span><span class="nx">results</span><span class="p">.</span><span class="nx">length</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">verbose</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">report</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">prefix</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="p">[</span><span class="nx">title</span><span class="p">,</span> <span class="nx">results</span><span class="p">]</span> <span class="k">of</span> <span class="k">this</span><span class="p">.</span><span class="nx">cases</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">report</span> <span class="o">+=</span> <span class="sb">`</span><span class="si">${</span><span class="nx">prefix</span><span class="si">}${</span><span class="nx">title</span><span class="si">}</span><span class="sb">:`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">prefix</span> <span class="o">=</span> <span class="s1">&#39;\n&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="nx">r</span> <span class="k">of</span> <span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">report</span> <span class="o">+=</span> <span class="sb">`</span><span class="si">${</span><span class="nx">prefix</span><span class="si">}</span><span class="sb"> </span><span class="si">${</span><span class="nx">r</span><span class="si">}</span><span class="sb">`</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">report</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">cases</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="s1">&#39;passes&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">passes</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="s1">&#39;fails&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">fails</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="s1">&#39;errors&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">errors</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>万事具备，接下来就让我们写个函数验证下 <code>Hope</code> 框架:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">assert</span> <span class="nx">from</span> <span class="s2">&#34;assert&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">hope</span> <span class="nx">from</span> <span class="s2">&#34;./hope&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">hope</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;Sum of 1 and 2&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">assert</span><span class="p">((</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="o">===</span> <span class="mi">3</span><span class="p">));</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>看起来挺不错，但是要怎么运行这个测试case 呢? 总不能每个测试文件都调用下 <code>hope.run()</code> 嘛? 人家 <code>Jest</code> 都可以自动扫描并运行测试用例。</p>
<p>让我们参考 Jest, 实现一个 <code>Runner</code>, 也实现动态加载测试文件.</p>
<p><code>import</code> 不仅可以用来导入其他的模块，它可以当作是一个 async 函数，加载指定路径的文件, 如:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">await</span> <span class="kr">import</span><span class="p">(</span><span class="nx">module_path</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>为了更好地控制我们的单元测试, 我们可以给 <code>Hope</code> 框架增加上一些命令行参数以控制其行为, CLI + Runner 的实现如下:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">minimist</span> <span class="nx">from</span> <span class="s1">&#39;minimist&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">glob</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;glob&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">hope</span> <span class="nx">from</span> <span class="s1">&#39;./hope&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">fileURLToPath</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;url&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">parse</span> <span class="o">=</span> <span class="p">(</span><span class="nx">args</span><span class="o">:</span> <span class="nx">string</span><span class="p">[])</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">parsed</span> <span class="o">=</span> <span class="nx">minimist</span><span class="p">(</span><span class="nx">args</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Default root directory is current directory if not specified
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">root</span><span class="o">:</span> <span class="nx">parsed</span><span class="p">.</span><span class="nx">root</span> <span class="o">||</span> <span class="s1">&#39;.&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Output format can be &#39;terse&#39; or &#39;verbose&#39; (default)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">output</span><span class="o">:</span> <span class="nx">parsed</span><span class="p">.</span><span class="nx">output</span> <span class="o">||</span> <span class="s1">&#39;verbose&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Array of test filenames if explicitly provided
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">filenames</span><span class="o">:</span> <span class="nx">parsed</span><span class="p">.</span><span class="nx">_</span> <span class="o">||</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="kr">async</span> <span class="p">(</span><span class="nx">args</span><span class="o">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">options</span> <span class="o">=</span> <span class="nx">parse</span><span class="p">(</span><span class="nx">args</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">filenames</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">options</span><span class="p">.</span><span class="nx">filenames</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">glob</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">options</span><span class="p">.</span><span class="nx">root</span><span class="si">}</span><span class="sb">/**/test*.{ts,js}`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="nx">f</span> <span class="k">of</span> <span class="nx">options</span><span class="p">.</span><span class="nx">filenames</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">absolutePath</span> <span class="o">=</span> <span class="nx">fileURLToPath</span><span class="p">(</span><span class="k">new</span> <span class="nx">URL</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span> <span class="kr">import</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">url</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="kr">await</span> <span class="kr">import</span><span class="p">(</span><span class="nx">absolutePath</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">hope</span><span class="p">.</span><span class="nx">run</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">output</span> <span class="o">===</span> <span class="s1">&#39;terse&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="nx">hope</span><span class="p">.</span><span class="nx">terse</span><span class="p">()</span> <span class="o">:</span> <span class="nx">hope</span><span class="p">.</span><span class="nx">verbose</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">main</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们默认会匹配所有以 <code>test</code> 为前缀的 ts 和 js 文件, 然后通过 <code>import</code> 导入, 因为 <code>hope</code> 是单例模式，所以所有的测试文件用的都是同一个实例, <code>hope.run</code> 就将注册的所有单元测试运行.</p>
<p>整个框架的工作流程如下:</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-d335a" hidden>
    <label for="zoomCheck-d335a">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/unit_test_workflow.png"/> 
    
    
    </label>
</figure>

<p>大功告成，现在就来运行下我们的单元测试:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">&gt; npx tsx pray.ts
</span></span><span class="line"><span class="cl">passes:
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_add.ts::Sum of <span class="m">1</span> and <span class="m">2</span>
</span></span><span class="line"><span class="cl">fails:
</span></span><span class="line"><span class="cl">errors:
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="优化"><span class="section-num">3.4</span> 优化</h3>
<h4 id="增加运行时间"><span class="section-num">3.4.1</span> 增加运行时间</h4>
<p>我们还可以记录每个测试用例的运行时间, 纳秒有点太小了，就精确到微秒即可:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">run</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">this</span><span class="p">.</span><span class="nx">todo</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(([</span><span class="nx">comment</span><span class="p">,</span> <span class="nx">test</span><span class="p">])</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="kr">const</span> <span class="nx">now</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">hrtime</span><span class="p">.</span><span class="nx">bigint</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">      <span class="nx">test</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">      <span class="kr">const</span> <span class="nx">elapsedInMicro</span> <span class="o">=</span> <span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">hrtime</span><span class="p">.</span><span class="nx">bigint</span><span class="p">()</span> <span class="o">-</span> <span class="nx">now</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="nx">BigInt</span><span class="p">(</span><span class="mi">1000</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">passes</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">comment</span> <span class="o">+</span> <span class="sb">`, execution time: </span><span class="si">${</span><span class="nx">elapsedInMicro</span><span class="si">}</span><span class="sb">us`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">assert</span><span class="p">.</span><span class="nx">AssertionError</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">fails</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">comment</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">errors</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">comment</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">&gt; npx tsx pray.ts
</span></span><span class="line"><span class="cl">passes:
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_add.ts::Sum of <span class="m">1</span> and 2, execution time: 5us
</span></span><span class="line"><span class="cl">fails:
</span></span><span class="line"><span class="cl">errors:
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="增加-assert-函数"><span class="section-num">3.4.2</span> 增加 assert 函数</h4>
<p>内置的 <code>assert</code> 函数只支持比较输入值是否为 True, 现代的测试框架都有很多的 <code>helper</code> 函数来简化 <code>assert</code> 语句，就让我们来实现下 <code>assertEqual</code>, <code>assertThrows</code>, <code>assertMapEqual</code>, <code>assertSetEqual</code>, <code>assertArraySame</code> 这几个函数:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * assert 抛出指定的异常
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kd">function</span> <span class="nx">assertThrows</span><span class="o">&lt;</span><span class="nx">T</span> <span class="kr">extends</span> <span class="nb">Error</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">expectedType</span><span class="o">:</span> <span class="k">new</span> <span class="p">(...</span><span class="nx">args</span><span class="o">:</span> <span class="nx">any</span><span class="p">[])</span> <span class="p">=&gt;</span> <span class="nx">T</span><span class="p">,</span> <span class="nx">func</span><span class="o">:</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="k">void</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// expected to throw exception
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">func</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// unreachable
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">assert</span><span class="p">(</span><span class="kc">false</span><span class="p">,</span> <span class="sb">`Expected function to throw </span><span class="si">${</span><span class="nx">expectedType</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span><span class="sb"> but it did not throw`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">assert</span><span class="p">(</span><span class="nx">error</span> <span class="k">instanceof</span> <span class="nx">expectedType</span><span class="p">,</span> <span class="sb">`Expected function to throw </span><span class="si">${</span><span class="nx">expectedType</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span><span class="sb"> but it threw </span><span class="si">${</span><span class="nx">error</span> <span class="k">instanceof</span> <span class="nb">Error</span> <span class="o">?</span> <span class="nx">error</span><span class="p">.</span><span class="nx">constructor</span><span class="p">.</span><span class="nx">name</span> <span class="o">:</span> <span class="k">typeof</span> <span class="nx">error</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * assert 两个元素相等
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kd">function</span> <span class="nx">assertEqual</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">actual</span><span class="o">:</span> <span class="nx">T</span><span class="p">,</span> <span class="nx">expected</span><span class="o">:</span> <span class="nx">T</span><span class="p">,</span> <span class="nx">message</span><span class="o">:</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">assert</span><span class="p">(</span><span class="nx">actual</span> <span class="o">===</span> <span class="nx">expected</span><span class="p">,</span> <span class="nx">message</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * assert 两个 Set 相同
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kd">function</span> <span class="nx">assertSetEqual</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">actual</span><span class="o">:</span> <span class="nx">Set</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">,</span> <span class="nx">expected</span><span class="o">:</span> <span class="nx">Set</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">,</span> <span class="nx">message</span><span class="o">:</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">assert</span><span class="p">(</span><span class="nx">actual</span><span class="p">.</span><span class="nx">size</span> <span class="o">==</span> <span class="nx">expected</span><span class="p">.</span><span class="nx">size</span><span class="p">,</span> <span class="nx">message</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="nx">element</span> <span class="k">of</span> <span class="nx">actual</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">assert</span><span class="p">(</span><span class="nx">expected</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">element</span><span class="p">),</span> <span class="nx">message</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * assert 两个 Map 相同
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kd">function</span> <span class="nx">assertMapEqual</span><span class="o">&lt;</span><span class="nx">K</span> <span class="kr">extends</span> <span class="nx">string</span> <span class="o">|</span> <span class="nx">number</span> <span class="o">|</span> <span class="nx">symbol</span><span class="p">,</span> <span class="nx">V</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">actual</span><span class="o">:</span> <span class="nx">Record</span><span class="o">&lt;</span><span class="nx">K</span><span class="p">,</span> <span class="nx">V</span><span class="o">&gt;</span><span class="p">,</span> <span class="nx">expected</span><span class="o">:</span> <span class="nx">Record</span><span class="o">&lt;</span><span class="nx">K</span><span class="p">,</span> <span class="nx">V</span><span class="o">&gt;</span><span class="p">,</span> <span class="nx">message</span><span class="o">:</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">actualKeys</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">actual</span><span class="p">)</span> <span class="nx">as</span> <span class="nx">K</span><span class="p">[];</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">expectedKeys</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">expected</span><span class="p">)</span> <span class="nx">as</span> <span class="nx">K</span><span class="p">[];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">assert</span><span class="p">(</span><span class="nx">actualKeys</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="nx">expectedKeys</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="nx">message</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="nx">actualKey</span> <span class="k">of</span> <span class="nx">actualKeys</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">assert</span><span class="p">(</span><span class="nx">expected</span><span class="p">[</span><span class="nx">actualKey</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="nx">actual</span><span class="p">[</span><span class="nx">actualKey</span><span class="p">]</span> <span class="o">==</span> <span class="nx">expected</span><span class="p">[</span><span class="nx">actualKey</span><span class="p">],</span> <span class="nx">message</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * assert两个列举的值相等，如元素相等，但是顺序不同也被视为相同
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kd">function</span> <span class="nx">assertArraySame</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">actual</span><span class="o">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">,</span> <span class="nx">expected</span><span class="o">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">,</span> <span class="nx">message</span><span class="o">:</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">assert</span><span class="p">(</span><span class="nx">actual</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="nx">expected</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="nx">message</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">assertSetEqual</span><span class="p">(</span><span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="nx">actual</span><span class="p">),</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="nx">expected</span><span class="p">),</span> <span class="nx">message</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>针对上述函数的测试:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">assert</span> <span class="nx">from</span> <span class="s2">&#34;assert&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">hope</span><span class="p">,</span> <span class="p">{</span> <span class="nx">assertArraySame</span><span class="p">,</span> <span class="nx">assertMapEqual</span><span class="p">,</span> <span class="nx">assertSetEqual</span><span class="p">,</span> <span class="nx">assertThrows</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&#34;./hope&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">hope</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;test assertSetEqual happy path&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">setA</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">setB</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">([</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assertSetEqual</span><span class="p">(</span><span class="nx">setA</span><span class="p">,</span> <span class="nx">setB</span><span class="p">,</span> <span class="s1">&#39;Set supposed to be equal&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">assertSetEqual</span><span class="p">(</span><span class="k">new</span> <span class="nx">Set</span><span class="p">([]),</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">([]),</span> <span class="s1">&#39;Empty Set&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">hope</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;test assertMapEqual unhappy path&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assertThrows</span><span class="p">(</span><span class="nx">assert</span><span class="p">.</span><span class="nx">AssertionError</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">setA</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">setB</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">assertSetEqual</span><span class="p">(</span><span class="nx">setA</span><span class="p">,</span> <span class="nx">setB</span><span class="p">,</span> <span class="s1">&#39;Set supposed to be equal&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">hope</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;test assertMapEqual happy path&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">mapA</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;a&#39;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;b&#39;</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">mapB</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;b&#39;</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;a&#39;</span><span class="o">:</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assertMapEqual</span><span class="p">(</span><span class="nx">mapA</span><span class="p">,</span> <span class="nx">mapB</span><span class="p">,</span> <span class="s1">&#39;Map supposed to be map&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">hope</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;test assertMapEqual unhappy path&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">mapA</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;a&#39;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;b&#39;</span><span class="o">:</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">mapB</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;b&#39;</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;a&#39;</span><span class="o">:</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assertThrows</span><span class="p">(</span><span class="nx">assert</span><span class="p">.</span><span class="nx">AssertionError</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">assertMapEqual</span><span class="p">(</span><span class="nx">mapA</span><span class="p">,</span> <span class="nx">mapB</span><span class="p">,</span> <span class="s1">&#39;Map supposed to be map&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">hope</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;test assertArraySame happy path&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assertArraySame</span><span class="p">(</span><span class="nx">arr1</span><span class="p">,</span> <span class="nx">arr2</span><span class="p">,</span> <span class="s2">&#34;Arrays should have same elements&#34;</span><span class="p">);</span> <span class="c1">// Passe
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">hope</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;test assertArraySame unhappy path&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">assertThrows</span><span class="p">(</span><span class="nx">assert</span><span class="p">.</span><span class="nx">AssertionError</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">assertArraySame</span><span class="p">(</span><span class="nx">arr1</span><span class="p">,</span> <span class="nx">arr2</span><span class="p">,</span> <span class="s2">&#34;Arrays should have same elements&#34;</span><span class="p">);</span> <span class="c1">// Passe
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="增加-s-select-参数指定测试文件"><span class="section-num">3.4.3</span> 增加 -s/&ndash;select 参数指定测试文件</h4>
<p>我们的 <code>Runner</code> 默认匹配的是以 <code>test</code> 为前缀的测试文件, 我们可以增加一个 <code>-s/--select</code> 参数，用来指定需要匹配的测试文件名：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">parse</span> <span class="o">=</span> <span class="p">(</span><span class="nx">args</span><span class="o">:</span> <span class="nx">string</span><span class="p">[])</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">parsed</span> <span class="o">=</span> <span class="nx">minimist</span><span class="p">(</span><span class="nx">args</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">...</span>
</span></span><span class="line"><span class="cl">    <span class="nx">select</span><span class="o">:</span> <span class="nx">parsed</span><span class="p">.</span><span class="nx">select</span> <span class="o">||</span> <span class="nx">parsed</span><span class="p">.</span><span class="nx">s</span> <span class="c1">// 增加select 参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="kr">async</span> <span class="p">(</span><span class="nx">args</span><span class="o">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">options</span> <span class="o">=</span> <span class="nx">parse</span><span class="p">(</span><span class="nx">args</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">filenames</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">namePattern</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">select</span> <span class="o">??</span> <span class="s1">&#39;test*&#39;</span><span class="p">;</span> <span class="c1">// 使用传入的模式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">options</span><span class="p">.</span><span class="nx">filenames</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">glob</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">options</span><span class="p">.</span><span class="nx">root</span><span class="si">}</span><span class="sb">/**/</span><span class="si">${</span><span class="nx">namePattern</span><span class="si">}</span><span class="sb">.{ts,js}`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>运行结果:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">&gt; ls -al test*
</span></span><span class="line"><span class="cl">-rw-r--r--@ <span class="m">1</span> ramsayleung  wheel   <span class="m">115</span> <span class="m">17</span> Feb 10:01 test_add.ts
</span></span><span class="line"><span class="cl">-rw-r--r--@ <span class="m">1</span> ramsayleung  wheel   <span class="m">762</span> <span class="m">17</span> Feb 10:01 test_approx_equal.ts
</span></span><span class="line"><span class="cl">-rw-r--r--@ <span class="m">1</span> ramsayleung  wheel  <span class="m">1536</span> <span class="m">17</span> Feb 10:38 test_assert.ts
</span></span><span class="line"><span class="cl">-rw-r--r--@ <span class="m">1</span> ramsayleung  wheel   <span class="m">187</span> <span class="m">17</span> Feb 10:38 test_async.ts
</span></span><span class="line"><span class="cl">-rw-r--r--@ <span class="m">1</span> ramsayleung  wheel   <span class="m">275</span> <span class="m">17</span> Feb 10:38 test_setup_teardown.ts
</span></span><span class="line"><span class="cl">-rw-r--r--@ <span class="m">1</span> ramsayleung  wheel   <span class="m">140</span> <span class="m">17</span> Feb 10:38 test_tag.ts
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt; npx tsx pray.ts -s <span class="s2">&#34;test_a*&#34;</span>
</span></span><span class="line"><span class="cl">passes:
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_async.ts::delayed test, execution time: 412us
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_assert.ts::test assertSetEqual happy path, execution time: 31us
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_assert.ts::test assertMapEqual unhappy path, execution time: 1175us
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_assert.ts::test assertMapEqual happy path, execution time: 32us
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_assert.ts::test assertMapEqual unhappy path, execution time: 85us
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_assert.ts::test assertArraySame happy path, execution time: 17us
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_assert.ts::test assertArraySame unhappy path, execution time: 54us
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_approx_equal.ts::Default margin throws exception, execution time: 111us
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_approx_equal.ts::Large margin not throws exception, execution time: 6us
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_approx_equal.ts::Relative error throw exception, execution time: 51us
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_approx_equal.ts::Default Relative error not throw exception: , execution time: 5us
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_add.ts::Sum of <span class="m">1</span> and 2, execution time: 4us
</span></span><span class="line"><span class="cl">fails:
</span></span><span class="line"><span class="cl">errors:
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="增加-t-tag-参数按标签运行测试case"><span class="section-num">3.4.4</span> 增加 -t/&ndash;tag 参数按标签运行测试case</h4>
<p>对于 <code>hope.test</code> 函数，我们还可以提供一个额外的参数，用于给这个test case 打标签:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">hope</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;Difference of 1 and 2&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">assert</span><span class="p">((</span><span class="mi">1</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">          <span class="p">[</span><span class="s1">&#39;math&#39;</span><span class="p">,</span> <span class="s1">&#39;fast&#39;</span><span class="p">])</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后通过 <code>-t/--tag</code> 按指定的tag来运行测试用例, 实现起来很容易:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">test</span><span class="p">(</span><span class="nx">comment</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">callback</span><span class="o">:</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="k">void</span><span class="p">,</span> <span class="nx">tags</span><span class="o">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">[])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">todo</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="sb">`</span><span class="si">${</span><span class="nx">caller</span><span class="p">()</span><span class="si">}</span><span class="sb">::</span><span class="si">${</span><span class="nx">comment</span><span class="si">}</span><span class="sb">`</span><span class="p">,</span> <span class="nx">callback</span><span class="p">,</span> <span class="nx">tags</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">run</span><span class="p">(</span><span class="nx">tag</span><span class="o">:</span> <span class="nx">string</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">todo</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="nx">filter</span><span class="p">(([</span><span class="nx">comment</span><span class="p">,</span> <span class="nx">test</span><span class="p">,</span> <span class="nx">tags</span><span class="p">])</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="nx">tag</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">true</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="nx">tags</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">tag</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">})</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="nx">forEach</span><span class="p">(([</span><span class="nx">comment</span><span class="p">,</span> <span class="nx">test</span><span class="p">,</span> <span class="nx">tags</span><span class="p">])</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// run the test, nothing change
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">parse</span> <span class="o">=</span> <span class="p">(</span><span class="nx">args</span><span class="o">:</span> <span class="nx">string</span><span class="p">[])</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">parsed</span> <span class="o">=</span> <span class="nx">minimist</span><span class="p">(</span><span class="nx">args</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="p">...</span>
</span></span><span class="line"><span class="cl">            <span class="nx">tag</span><span class="o">:</span> <span class="nx">parsed</span><span class="p">.</span><span class="nx">tag</span> <span class="o">||</span> <span class="nx">parsed</span><span class="p">.</span><span class="nx">t</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="kr">async</span> <span class="p">(</span><span class="nx">args</span><span class="o">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="p">...</span>
</span></span><span class="line"><span class="cl">            <span class="nx">hope</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">tag</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">...</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>test_tag.ts</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">assert</span> <span class="nx">from</span> <span class="s2">&#34;assert&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">hope</span> <span class="nx">from</span> <span class="s2">&#34;./hope&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">hope</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;Differene of 1 and 2&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">assert</span><span class="p">((</span><span class="mi">1</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="p">[</span><span class="s1">&#39;math&#39;</span><span class="p">,</span> <span class="s1">&#39;fast&#39;</span><span class="p">]);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">&gt; npx tsx pray.ts -t <span class="s2">&#34;math&#34;</span>
</span></span><span class="line"><span class="cl">passes:
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_tag.ts::Differene of <span class="m">1</span> and 2, execution time: 5us
</span></span><span class="line"><span class="cl">fails:
</span></span><span class="line"><span class="cl">errors:
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="setup与teardown"><span class="section-num">3.4.5</span> setup与teardown</h4>
<p>正常的测试框架都是有 <code>setup</code> 与 <code>teardown</code> 函数的，可以指定在每个测试case 运行之前或之后的函数，比如运行测试case 前的数据准备，以为运行结束时的数据清理，我们的测试框架也可以支持这个功能：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">type</span> <span class="nx">CallbackType</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="k">void</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">Hope</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">...</span>
</span></span><span class="line"><span class="cl">  <span class="kr">private</span> <span class="nx">setupFn</span><span class="o">:</span> <span class="nx">CallbackType</span> <span class="o">|</span> <span class="kc">null</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kr">private</span> <span class="nx">teardownFn</span><span class="o">:</span> <span class="nx">CallbackType</span> <span class="o">|</span> <span class="kc">null</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">setup</span><span class="p">(</span><span class="nx">setupFn</span><span class="o">:</span> <span class="nx">CallbackType</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">setupFn</span> <span class="o">=</span> <span class="nx">setupFn</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">teardown</span><span class="p">(</span><span class="nx">teardownFn</span><span class="o">:</span> <span class="nx">CallbackType</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">teardownFn</span> <span class="o">=</span> <span class="nx">teardownFn</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">run</span><span class="p">(</span><span class="nx">tag</span><span class="o">:</span> <span class="nx">string</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">todo</span>
</span></span><span class="line"><span class="cl">      <span class="p">.</span><span class="nx">filter</span><span class="p">(([</span><span class="nx">comment</span><span class="p">,</span> <span class="nx">test</span><span class="p">,</span> <span class="nx">tags</span><span class="p">])</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nx">tag</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">true</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">tags</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">tag</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">})</span>
</span></span><span class="line"><span class="cl">      <span class="p">.</span><span class="nx">forEach</span><span class="p">(([</span><span class="nx">comment</span><span class="p">,</span> <span class="nx">test</span><span class="p">,</span> <span class="nx">tags</span><span class="p">])</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">setupFn</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="p">.</span><span class="nx">setupFn</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">          <span class="kr">const</span> <span class="nx">now</span> <span class="o">=</span> <span class="nx">microtime</span><span class="p">.</span><span class="nx">now</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">          <span class="nx">test</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">          <span class="kr">const</span> <span class="nx">elapsedInMicro</span> <span class="o">=</span> <span class="nx">microtime</span><span class="p">.</span><span class="nx">now</span><span class="p">()</span> <span class="o">-</span> <span class="nx">now</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="k">this</span><span class="p">.</span><span class="nx">passes</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">comment</span> <span class="o">+</span> <span class="sb">`, execution time: </span><span class="si">${</span><span class="nx">elapsedInMicro</span><span class="si">}</span><span class="sb">us`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">          <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">teardownFn</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="p">.</span><span class="nx">teardownFn</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="k">if</span> <span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">assert</span><span class="p">.</span><span class="nx">AssertionError</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="p">.</span><span class="nx">fails</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">comment</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="p">.</span><span class="nx">errors</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">comment</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>针对上述函数的测试:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">hope</span><span class="p">,</span> <span class="p">{</span> <span class="nx">assertEqual</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&#34;./hope&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">createFixtures</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">hope</span><span class="p">.</span><span class="nx">setup</span><span class="p">(</span><span class="nx">createFixtures</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">hope</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;Validate x should be 1&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assertEqual</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;X should be 1&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">cleanUp</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">hope</span><span class="p">.</span><span class="nx">teardown</span><span class="p">(</span><span class="nx">cleanUp</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="增加对-async-测试case-的支持"><span class="section-num">3.4.6</span> 增加对 async 测试case 的支持</h4>
<p>目前我们的test case 都只支持同步的函数, 我们可以增加上对 <code>Promise</code> 的支持, 这样我们可以使用以下的语法:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">hope</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;delayed test&#39;</span><span class="p">,</span> <span class="kr">async</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{...})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>实现方式也很直接: 一种就是判断传入函数的类型, 如果是同步函数则直接调用，如果是 async 函数, 那么就加上 <code>await</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">type</span> <span class="nx">SyncCallbackType</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="k">void</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">type</span> <span class="nx">AsyncCallbackType</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="k">void</span><span class="o">&gt;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">type</span> <span class="nx">CallbackType</span> <span class="o">=</span> <span class="nx">SyncCallbackType</span> <span class="o">|</span> <span class="nx">AsyncCallbackType</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">Hope</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">private</span> <span class="nx">todo</span><span class="o">:</span> <span class="p">[</span><span class="nx">string</span><span class="p">,</span> <span class="nx">CallbackType</span><span class="p">,</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span><span class="p">][]</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">    <span class="kr">private</span> <span class="nx">setupFn</span><span class="o">:</span> <span class="nx">CallbackType</span> <span class="o">|</span> <span class="kc">null</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kr">private</span> <span class="nx">teardownFn</span><span class="o">:</span> <span class="nx">CallbackType</span> <span class="o">|</span> <span class="kc">null</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">setup</span><span class="p">(</span><span class="nx">setupFn</span><span class="o">:</span> <span class="nx">CallbackType</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">setupFn</span> <span class="o">=</span> <span class="nx">setupFn</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">teardown</span><span class="p">(</span><span class="nx">teardownFn</span><span class="o">:</span> <span class="nx">CallbackType</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">teardownFn</span> <span class="o">=</span> <span class="nx">teardownFn</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">test</span><span class="p">(</span><span class="nx">comment</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">callback</span><span class="o">:</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="k">void</span><span class="p">,</span> <span class="nx">tags</span><span class="o">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">[])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">todo</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="sb">`</span><span class="si">${</span><span class="nx">caller</span><span class="p">()</span><span class="si">}</span><span class="sb">::</span><span class="si">${</span><span class="nx">comment</span><span class="si">}</span><span class="sb">`</span><span class="p">,</span> <span class="nx">callback</span><span class="p">,</span> <span class="nx">tags</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kr">private</span> <span class="kr">async</span> <span class="nx">runTest</span><span class="p">(</span><span class="nx">comment</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">test</span><span class="o">:</span> <span class="nx">CallbackType</span><span class="p">,</span> <span class="nx">tags</span><span class="o">:</span> <span class="nx">string</span><span class="p">[])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">setupFn</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">isAsync</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">setupFn</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="kr">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">setupFn</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="k">this</span><span class="p">.</span><span class="nx">setupFn</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="kr">const</span> <span class="nx">now</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">hrtime</span><span class="p">.</span><span class="nx">bigint</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">isAsync</span><span class="p">(</span><span class="nx">test</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="kr">await</span> <span class="nx">test</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">test</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="kr">const</span> <span class="nx">elapsedInMicro</span> <span class="o">=</span> <span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">hrtime</span><span class="p">.</span><span class="nx">bigint</span><span class="p">()</span> <span class="o">-</span> <span class="nx">now</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="nx">BigInt</span><span class="p">(</span><span class="mi">1000</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="p">.</span><span class="nx">passes</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">comment</span> <span class="o">+</span> <span class="sb">`, execution time: </span><span class="si">${</span><span class="nx">elapsedInMicro</span><span class="si">}</span><span class="sb">us`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">teardownFn</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">isAsync</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">teardownFn</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="kr">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">teardownFn</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="k">this</span><span class="p">.</span><span class="nx">teardownFn</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">assert</span><span class="p">.</span><span class="nx">AssertionError</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">this</span><span class="p">.</span><span class="nx">fails</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">comment</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">this</span><span class="p">.</span><span class="nx">errors</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">comment</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kr">async</span> <span class="nx">run</span><span class="p">(</span><span class="nx">tag</span><span class="o">:</span> <span class="nx">string</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kr">const</span> <span class="nx">tests</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">todo</span>
</span></span><span class="line"><span class="cl">              <span class="p">.</span><span class="nx">filter</span><span class="p">(([</span><span class="nx">comment</span><span class="p">,</span> <span class="nx">test</span><span class="p">,</span> <span class="nx">tags</span><span class="p">])</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="k">if</span> <span class="p">(</span><span class="nx">tag</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">true</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">                  <span class="k">return</span> <span class="nx">tags</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">tag</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">              <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="p">[</span><span class="nx">comment</span><span class="p">,</span> <span class="nx">test</span><span class="p">,</span> <span class="nx">tags</span><span class="p">]</span> <span class="k">of</span> <span class="nx">tests</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="kr">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">runTest</span><span class="p">(</span><span class="nx">comment</span><span class="p">,</span> <span class="nx">test</span><span class="p">,</span> <span class="nx">tags</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kr">private</span> <span class="nx">isAsync</span><span class="p">(</span><span class="nx">fn</span><span class="o">:</span> <span class="nx">CallbackType</span><span class="p">)</span><span class="o">:</span> <span class="nx">fn</span> <span class="nx">is</span> <span class="nx">AsyncCallbackType</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">constructor</span><span class="p">.</span><span class="nx">name</span> <span class="o">===</span> <span class="s1">&#39;AsyncFunction&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>pray.ts</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="kr">async</span> <span class="p">(</span><span class="nx">args</span><span class="o">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">options</span> <span class="o">=</span> <span class="nx">parse</span><span class="p">(</span><span class="nx">args</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">filenames</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">namePattern</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">select</span> <span class="o">??</span> <span class="s1">&#39;test*&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">options</span><span class="p">.</span><span class="nx">filenames</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">glob</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">options</span><span class="p">.</span><span class="nx">root</span><span class="si">}</span><span class="sb">/**/</span><span class="si">${</span><span class="nx">namePattern</span><span class="si">}</span><span class="sb">.{ts,js}`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="nx">f</span> <span class="k">of</span> <span class="nx">options</span><span class="p">.</span><span class="nx">filenames</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">absolutePath</span> <span class="o">=</span> <span class="nx">fileURLToPath</span><span class="p">(</span><span class="k">new</span> <span class="nx">URL</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span> <span class="kr">import</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">url</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="kr">await</span> <span class="kr">import</span><span class="p">(</span><span class="nx">absolutePath</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">await</span> <span class="nx">hope</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">tag</span><span class="p">);</span> <span class="c1">// 增加上await
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">output</span> <span class="o">===</span> <span class="s1">&#39;terse&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="nx">hope</span><span class="p">.</span><span class="nx">terse</span><span class="p">()</span> <span class="o">:</span> <span class="nx">hope</span><span class="p">.</span><span class="nx">verbose</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span><span class="kr">await</span> <span class="nx">hope</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">tag</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="参考"><span class="section-num">4</span> 参考</h2>
<p><a href="/zh/post/2025/reinvent_project/">回到本系列的目录</a></p>
<ul>
<li><a href="https://third-bit.com/sdxjs/unit-test/">https://third-bit.com/sdxjs/unit-test/</a></li>
<li><a href="https://blog.youxu.info/2008/11/30/pearl-in-smalltal/">https://blog.youxu.info/2008/11/30/pearl-in-smalltal/</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>ReInvent: 重新造轮子系列(序言)</title>
      <link>https://ramsayleung.github.io/zh/post/2025/reinvent_project/</link>
      <pubDate>Sun, 16 Feb 2025 22:10:00 -0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2025/reinvent_project/</guid>
      <description>&lt;h2 id=&#34;起因与动机&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; 起因与动机&lt;/h2&gt;
&lt;p&gt;最近在看 &lt;a href=&#34;https://third-bit.com/sdxjs/unit-test/&#34;&gt;System Design By Example&lt;/a&gt; 这本书，主旨是通过设计和实现各种日常开发中常见的软件，以理解和提高系统设计(System Design)的能力。&lt;/p&gt;
&lt;p&gt;每个章节都会实现一个软件，然后还会有大量的习题来完善这个软件，以练带学。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="起因与动机"><span class="section-num">1</span> 起因与动机</h2>
<p>最近在看 <a href="https://third-bit.com/sdxjs/unit-test/">System Design By Example</a> 这本书，主旨是通过设计和实现各种日常开发中常见的软件，以理解和提高系统设计(System Design)的能力。</p>
<p>每个章节都会实现一个软件，然后还会有大量的习题来完善这个软件，以练带学。</p>
<p>而我最推崇，并且认为最好的学习方法就是：<a href="https://ramsayleung.github.io/zh/post/2022/feynman_technique/">费曼学习法(Feynman Technique)</a>, 其核心理念就是:</p>
<p><strong>学习一种新事物最好的方法是，用你的话讲给别人听。</strong></p>
<p><strong>通过向别人清楚的解说某一事物，来确认自己是否真的弄懂了这件事。</strong></p>
<p>所以说，学习最好的方式，是把你学到的东西教给别人。</p>
<p>因此，这个项目就是我在学习和理解 System Design By Example 这本书后，结合参考的论文和个人经验内化出来的学习成果。</p>
<p>也希望其他人也可以从中受益。</p>
<h2 id="项目"><span class="section-num">2</span> 项目</h2>
<p>GitHub: <a href="https://github.com/ramsayleung/reinvent">https://github.com/ramsayleung/reinvent</a></p>
<p>原书是用 node + Javascript 编写的，部分代码因API变更而变得不可用，因此本项目也做了对应修改，并将 Javascript 替换成 Typescript, 通过类型系统来降低维护成本。</p>
<ol>
<li><a href="/zh/post/2025/reinvent_unit_test/">单元测试框架</a></li>
<li><a href="/zh/post/2025/reinvent_file_backup/">文件备份</a></li>
<li><a href="/zh/post/2025/reinvent_selector/">HTML Selector</a></li>
<li><a href="/zh/post/2025/reinvent_regex/">正则表达式引擎</a></li>
<li><a href="/zh/post/2025/reinvent_page_template/">模板引擎</a></li>
<li><a href="/zh/post/2025/reinvent_build_manager/">构建工具</a></li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>杂谈AI取代程序员</title>
      <link>https://ramsayleung.github.io/zh/post/2025/%E6%9D%82%E8%B0%88ai%E5%8F%96%E4%BB%A3%E7%A8%8B%E5%BA%8F%E5%91%98/</link>
      <pubDate>Fri, 14 Feb 2025 21:15:00 -0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2025/%E6%9D%82%E8%B0%88ai%E5%8F%96%E4%BB%A3%E7%A8%8B%E5%BA%8F%E5%91%98/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; 前言&lt;/h2&gt;
&lt;p&gt;最近国产的DeepSeek 模型的爆火，让「AI取代程序员」的说法又甚嚣尘上, 比如在国内著名的程序员社区 V2ex 搜索「&lt;a href=&#34;https://www.sov2ex.com/?q=AI%E5%8F%96%E4%BB%A3%E7%A8%8B%E5%BA%8F%E5%91%98&#34;&gt;AI取代程序员&lt;/a&gt;」&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，可以搜索出 69627 条结果(截止2025-02-15):&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>最近国产的DeepSeek 模型的爆火，让「AI取代程序员」的说法又甚嚣尘上, 比如在国内著名的程序员社区 V2ex 搜索「<a href="https://www.sov2ex.com/?q=AI%E5%8F%96%E4%BB%A3%E7%A8%8B%E5%BA%8F%E5%91%98">AI取代程序员</a>」<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>，可以搜索出 69627 条结果(截止2025-02-15):</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-bb60f" hidden>
    <label for="zoomCheck-bb60f">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/v2ex_ai_replace_programmer.jpg"/> 
    
    
    </label>
</figure>

<p>以至于我的一位非程序员朋友都来关心我，问我是否有被取代的担忧。</p>
<p>在感谢朋友的关心之后，我也开始静下心来思考这个问题，以及形成这种想法背后可能的原因，然后就有了这篇文章。</p>
<h2 id="ai取代程序员"><span class="section-num">2</span> AI取代程序员</h2>
<p>在谈论AI能否真的取代程序员之前，我想先聊一下程序员的工作是什么, 毕竟定义好了问题才会分析.</p>
<h3 id="研发流程"><span class="section-num">2.1</span> 研发流程</h3>
<p>既然是程序员，那工作肯定是写代码嘛, 但是就我个人经验来说，我真正花费在写代码的时间可能连我工作时间30%都占不到.</p>
<p>一个新功能大体的研发流程如下：
当产品经理或者老板提出一个新需求的时候，程序员需要评估需求的可行性，然后撰写设计文档，评审设计方案，而后编码，测试再灰度上线功能，最后对新功能增加新监控告警，提供各项数据指标。</p>
<p>由此可知, 产品经理只会跟你说他/她想要什么(what), 但是产品经理肯定不知道如何实现这个功能的(how), 需要程序员把模糊又朦胧的问题具体化和细致化，然后再根据方案来编码。</p>
<p>遇到不合理的需求时，还需要告知产品经理，你的想法是不切实际的，比如经典的「根据手机壳颜色切换壁纸」需求</p>
<p>但是我们在使用AI的时候，更多是一个具体而明确的任务，并且是我们针对的需求已经拆分好的任务，
所以AI在做的只是将具体的设计方案翻译成代码的步骤。</p>
<p>这不禁让我想起自己当年在微信支付7级晋升8级的答辩项目：一个研发提效的代码生成框架。</p>
<p>我当时可谓信心满满，我的项目可以根据模板直接生成代码，不再需要手写CRUD的代码，以此来给工程师提效。</p>
<p>评委就询问我：</p>
<blockquote>
<p>你有对项目开发的各个环节的耗时和阻塞时间做量化分析么？</p>
<p>编码是整个研发流程效能最低的部分么？</p>
<p>从拿到需求到开发上线，只有编码可以提效么?</p></blockquote>
<p>评委这么一顿批头盖脸的输出，直接把我的信心给浇没了。</p>
<p>虽然我写的代码生成工具远不如大模型加持的AI强大，但看起来都只局限于解决编码问题，研发流程的其他问题并没有解决。</p>
<h3 id="冰山之下"><span class="section-num">2.2</span> 冰山之下</h3>
<blockquote>
<p>冰山运动之所以雄伟壮观，是因为它只有八分之一在水面上</p>
<p>《午后之死》 海明威</p></blockquote>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-9c152" hidden>
    <label for="zoomCheck-9c152">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/iceberg.jpg"/> 
    
    
    </label>
</figure>

<p>如同只有只有八分之一在水面上的冰山一样, 很多程序员都可能没有意识到，写代码只是工作的一小部分，甚至可能是其中最轻松的部分, 维护才是工作中最繁琐且具有挑战性的部分。</p>
<p>维护工作包含测试，debug, 修bug, 性能优化, 更新以适应其它改变，代码重构，客户支持，写文档并随时间修改文档.</p>
<p>以我自己的经历为例，之前组里面有不少近10年的历史服务，但是还在发光发热，作为核心组件给客户提供服务.</p>
<p>这些服务基本都是用Java写的, Java 以「Write once, run everywhere」且优秀的向后兼容能力而闻名, 因此还有不少公司还在使用JDK8, 仿佛被封印在 Java8 一样了。</p>
<p>不久前, 在公司内部推行了一个要求将JDK升级到JDK17的全公司范围的项目:</p>
<p>而升级JDK的动机，一方面是因为可以使用最新的语言特性，此外JDK8也马上要被停止支持了，另外一方面是性能优化, 各种评测都显示，从JDK8升级到JDK17，升级后JVM的系统资源使用量平均下降约10%~15%, 对于公司而言，更少的系统资源，就可以使用更少的服务器，通过升级JDK 就可实现无痛「降本增效」。</p>
<p>但即使兼容能力优秀如Java，我也花费了近3周才把组里使用 JDK8/JDK11 的老服务切换到 JDK17，</p>
<p>期间还出现了各种奇怪的问题，比如JVM参数名或者选项在升级之后被废弃了, 新版本JVM 无法识别，又或者是出于安全的考虑，部分JDK内部的 class 无法通过反射访问，会导致运行时异常，服务需要回滚.</p>
<p>AI 也没法帮我们一键升级或维护, 而这些枯燥且繁琐的工作才是那未被人所见的「八分之七」.</p>
<h3 id="功能性与非功能性需求"><span class="section-num">2.3</span> 功能性与非功能性需求</h3>
<p>在程序开发中，除了有功能性需求，还需要非功能性需求.</p>
<p>而功能性需求恰恰是其中最简单直接的，是满足「又不是不能用」的最基本要求。</p>
<p>比如我需要实现加法，这个就是功能性需求，AI就需要帮我把加法实现出来。</p>
<p>而所谓的非功能性需求，比较常见的是可扩展性(scalability)，可维护性(maintainability) 和性能(performance).</p>
<h4 id="非功能性需求"><span class="section-num">2.3.1</span> 非功能性需求</h4>
<p>还是以加法为例, 我可能需要后面扩展到乘法和除法, 或者扩展到复数或者矩阵加法，要怎么易于扩展呢？</p>
<p>这些都是AI生成代码是没有考虑到的因素，AI比较擅长的可能是给它一个需求，它生成一段代码给我们。</p>
<p>但是在软件研发的生命周期中，有大概80%的时间，都是维护已有的系统。</p>
<p>而给已有的系统上增加功能，就需要考虑各种奇怪的兼容性，相当于带着锁链来跳舞，并不能像从无到有，什么都不用考虑的那般洒脱。</p>
<p>而这样的限制，又是AI生成代码时未曾考虑的。</p>
<p>所以从零开始的日抛型，不需要考虑维护成本的项目，很适合由AI来生成.</p>
<h4 id="已解问题"><span class="section-num">2.3.2</span> 已解问题</h4>
<p>但即使功能性的需求，有时候AI也会做不好。</p>
<p>我之前在工作中需要根据已有的Schema, 使用Rust 写入Parquet数据，Rust本来就新，加之操作Parquet的库就更少了, 所以ChatGPT, Claude或者Gemini 都没有给出我满意能跑的结果，最后还是靠自己去读 Parquet库的源码找出的解决办法。</p>
<p>无论模型怎么变，AI现阶段还需要预训练数据的投喂，所以没有相关的预处理数据，AI也只能胡扯。</p>
<p>换而言之，所限于当前的AI模型，AI是只 <strong>善于处理已经被解决过的问题</strong></p>
<p>所以总结下来，在真实项目中，AI还没有办法取代程序员。</p>
<h3 id="ai取代论背后的动机"><span class="section-num">2.4</span> AI取代论背后的动机</h3>
<p>既然你说AI现阶段还没有办法取代程序员，为什么我看到各种各样程序员要被AI取代的新闻，甚至有公司用AI来替代员工了？</p>
<p>除去真的担心自己被AI取代的从业者外，我觉得看到两种扯着AI大旗的人。</p>
<p>一种就是懂程序开发，装不懂程序开发，然后贩卖焦虑的人，最近非常火的就是，「我用Cursor从0 xx 天开发了一个App」 (Cursor是最近一个很火的AI编辑器，可以通过输入的指令生成代码).</p>
<p>大体都是说自己完全不懂程序开发，借助AI/Cursor, xx天内开发出了一个App, 并且冲到了苹果App Store热门榜第一.</p>
<p>普通程序员看到这种说法，一个小白从无到有都能开发出一个App, 难免会焦虑,不得不说，这种反向装弱再变强真的令人防不胜防， 想着不能被落下，就斥资加入各种付费群或者购买各种课程。</p>
<p>神智清明的你可能在心平气和下很难做出这样的决定嘛。</p>
<p>制造焦虑才能更好地贩卖自己的产品，毕竟到现在为止，靠AI盈利主要有两种方式:</p>
<ol>
<li>AI 公司靠产品融资，拉风投</li>
<li>制造AI焦虑，借机卖课卖书卖文档</li>
</ol>
<p>另外一种就是要用AI来取代程序的公司，说要通过AI来增效，裁撤工程师，比如国外的 <a href="https://apnews.com/article/workday-layoffs-job-cuts-ai-investments-437581ad79d6e1cef2de7b300015dfbb?utm_source=t.me/mtfront">Workday 裁员说要再招人做 AI 的新闻</a> <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, 还有2023年 <a href="https://www.bwpeople.in/article/google-contemplates-30000-layoffs-due-to-ai-job-impact-503670">Google 因为AI裁员而30000 名员工的新闻 </a><sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></p>
<p>怎么说呢，AI这块牌子太好用了, 什么都可以往里面套，裁撤工程师降本是真，AI增效大概是假。</p>
<p>裁员就裁员呗，为什么还要说是用AI来取代程序员呢？</p>
<p>因为说是AI取代了程序员，被毕业的员工们和待毕业的员工们都只会把裁员的原因归罪到AI上，
管理层的无所作为，墨守成规，决策失误，无序扩张这些失误都不需要承诺后果了，反正背锅有AI。</p>
<p>苦一苦员工，骂名AI来担。
<img loading="lazy" src="/ox-hugo/ai_bear_the_infamy.jpg"></p>
<h2 id="ai一无用处"><span class="section-num">3</span> AI一无用处</h2>
<p>当然凡事都有例外，有人觉得AI会取代程序员，也有人觉得AI一无用处，不值一提。</p>
<p>我对此也是持反对态度了，虽然AI无法取代程序员，但是它的确在很多方面可以给我提升相当大的效率，其效率跃升堪比计算机连上互联网。</p>
<p>所以我也藉此来分享下我的AI用法</p>
<h2 id="我的ai用法"><span class="section-num">4</span> 我的AI用法</h2>
<p>我使用对AI的定位把它当作一位非常耐心，能力全面的助理，所以我给它分配的都是明确而繁琐的任务，并且我有能力对其输出进行评判的情景。
(也就是让它干脏活累活)</p>
<p>先声明一下我使用的AI 模型，日常事务我会使用ChatGPT, 响应速度快，量大够饱； 编码我会使用Claude 3.5 Sonnet，目前是我使用过效果最好的; 中文相关会使用DeepSeek, 但是经常服务器繁忙，体验不好。</p>
<h3 id="生成测试用例"><span class="section-num">4.1</span> 生成测试用例</h3>
<p>测试用例太适合让AI来写了，毕竟任务是非常明确的，需要被测的函数也是非常明确的，你只需要使用把测试的场景说清楚。</p>
<p>我觉得都可以把这个内容扩展写成 <a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%B8%80_%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E8%AE%A4%E7%9F%A5/">测试技能进阶系列</a> 的第四篇了</p>
<p>假设我需要测试一个计算字符串中元音数量的函数 <code>count_vowels(s: str) -&gt; int</code>, 我的指令是:</p>
<blockquote>
<p>请为以下函数 `count_vowels(s: str) -&gt; int` 生成pytest测试用例：</p>
<ol>
<li>正常输入包含大小写元音的情况</li>
<li>空字符串边界条件</li>
<li>全元音字符的特殊情况</li>
<li>不含元音的字符串</li>
<li>非法输入类型校验</li>
</ol></blockquote>
<p>AI生成结果：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pytest</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">test_count_vowels_normal_cases</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 混合大小写元音测试</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">count_vowels</span><span class="p">(</span><span class="s2">&#34;Hello World&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">count_vowels</span><span class="p">(</span><span class="s2">&#34;AEiou&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">5</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">test_count_vowels_edge_cases</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 空字符串/全元音测试</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">count_vowels</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">count_vowels</span><span class="p">(</span><span class="s2">&#34;aei&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">test_count_vowels_special_cases</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 无元音字符串测试</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">count_vowels</span><span class="p">(</span><span class="s2">&#34;rhythm&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">count_vowels</span><span class="p">(</span><span class="s2">&#34;12345!@#&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">test_count_vowels_invalid_input</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 类型校验测试</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="n">pytest</span><span class="o">.</span><span class="n">raises</span><span class="p">(</span><span class="ne">TypeError</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">count_vowels</span><span class="p">(</span><span class="mi">123</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="n">pytest</span><span class="o">.</span><span class="n">raises</span><span class="p">(</span><span class="ne">TypeError</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">count_vowels</span><span class="p">([</span><span class="s2">&#34;hello&#34;</span><span class="p">])</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="语言学习"><span class="section-num">4.2</span> 语言学习</h3>
<p>AI的多语言翻译功能对比其他传统基于单词的翻译软件简直是降维打击bb，毕竟Google的科学家最初做 Transform 模型就是为了做翻译的。</p>
<p>记得我之前考雅思的时候，口语和写作考前复习就是把题库的复制给AI，然后让他来给我答题，我就把思路背下来，做题这方面，AI实在是太擅长了。</p>
<blockquote>
<p>Given the following IELTS Speaking Part1, you are an examinee, could you give me some band 9 answer:</p>
<p>Ielts Speaking 3 Practice 5 (Change)</p>
<ol>
<li>Do you think change is good?</li>
<li>What are some of the major changes that occur to people throughout their lives?</li>
<li>Is your country changing rapidly?</li>
<li>In what ways have changes in technology changed people&rsquo;s lives?</li>
<li>Why do old people not accept change?</li>
</ol></blockquote>
<!--quoteend-->
<blockquote>
<p>Here are some Band 9 answers for the IELTS Speaking Part 1 topic &ldquo;Change&rdquo;, with a natural, fluent style and advanced vocabulary.</p>
<ol>
<li>Do you think change is good?</li>
</ol>
<p>Absolutely. Change is an inevitable part of life, and in most cases, it drives progress and personal growth. While change can be daunting at first, it often leads to new opportunities and valuable experiences. Without change, we would stagnate, both individually and as a society.
&hellip;</p></blockquote>
<p>让AI做词典, 帮我解释和翻译我不懂的单词，或者做中译英方便交流:</p>
<blockquote>
<p>You are a professional translator. Translate all input Chinese paragraphs into English and all input English into Chinese, and help me explain its meaning</p></blockquote>
<p>而后我输入中文，它就会给我英文翻译；输入英文，它会给我中文翻译:</p>
<blockquote>
<p>&ldquo;爱哭的孩子有奶喝&rdquo;</p>
<hr>
<p>&ldquo;The crying baby gets the milk.&rdquo;
Meaning:</p>
<p>This Chinese proverb &ldquo;爱哭的孩子有奶喝&rdquo; (ài kū de háizi yǒu nǎi hē) means that those who complain, express their needs, or fight for their interests are more likely to get attention and benefits. It suggests that speaking up and advocating for oneself can lead to better outcomes, similar to how a baby who cries gets fed first.</p></blockquote>
<!--quoteend-->
<blockquote>
<p>illiterate</p>
<hr>
<p>&ldquo;Illiterate&rdquo; 的中文翻译是 “文盲” 或 “不识字”。
含义：</p>
<ol>
<li>
<p>基本含义：指一个人 不识字或无法阅读和书写。</p>
<ul>
<li>例如：Many people in the past were illiterate because they had no access to education.（过去，许多人因为无法接受教育而是文盲。）</li>
</ul>
</li>
<li>
<p>引申含义：在某个领域缺乏基本知识或技能。</p>
<ul>
<li>例如：&ldquo;He is financially illiterate.&quot;（他在财务方面一窍不通。）</li>
<li>在科技、法律、文化等方面，也可以用 illiterate 来形容缺乏基础知识的人，例如 &ldquo;technologically illiterate&rdquo;（科技文盲）。</li>
</ul>
</li>
</ol></blockquote>
<p>还有一个就是让AI 给我写的内容纠错，这个也比传统的语法工具类如 Grammarly 好用.</p>
<blockquote>
<p>You are a professional and seasoned translator, correct me if I am wrong.</p></blockquote>
<h3 id="代码审计"><span class="section-num">4.3</span> 代码审计</h3>
<p>有时候我会查看一些智能合约的代码或者TG bot的代码，在实际交互前，我一般会把代码丢给AI，让它检查一下是否有可疑的代码片段，类如窃取用户的私钥，把资金转到可疑账户等等。</p>
<p>或者把我自己写的代码丢给AI，让它看下是否有安全漏洞:</p>
<blockquote>
<p>Given the following code, help me spot if there is any vulnerability here:</p></blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nd">@app.route</span><span class="p">(</span><span class="s1">&#39;/search&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">search</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">query</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;q&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;SELECT * FROM products WHERE name LIKE &#39;%</span><span class="si">{</span><span class="n">query</span><span class="si">}</span><span class="s2">%&#39;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s1">&#39;results.html&#39;</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">cursor</span><span class="o">.</span><span class="n">fetchall</span><span class="p">())</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Yes, there are several serious security vulnerabilities in this code. Let me break them down:</p>
<ul>
<li>SQL Injection Vulnerability (Critical):</li>
</ul>
<p>The most severe issue is that the code uses string formatting (f-string) to directly insert user input into the SQL query. This allows SQL injection attacks. For example, a malicious user could input:</p>
<p>Here&rsquo;s a secure version of the code:</p></blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nd">@app.route</span><span class="p">(</span><span class="s1">&#39;/search&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">search</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">query</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;q&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">query</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s1">&#39;results.html&#39;</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="p">[])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Using parameterized query with placeholders</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;SELECT * FROM products WHERE name LIKE ?&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="s1">&#39;%&#39;</span> <span class="o">+</span> <span class="n">query</span> <span class="o">+</span> <span class="s1">&#39;%&#39;</span><span class="p">,)</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s1">&#39;results.html&#39;</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">cursor</span><span class="o">.</span><span class="n">fetchall</span><span class="p">())</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="反编译"><span class="section-num">4.4</span> 反编译</h3>
<p>现代前端基本都会使用类似webpack 的打包工具进行打包压缩, 甚至还会进行代码混淆，所以F12 查看源码，并不能查出端倪.</p>
<p>因此我一般都是让AI 来帮我反编译和还原, 这样就免去了复杂的人工转译的过程:</p>
<blockquote>
<p>Given the obfuscated and compressed code, could you reverse it back to the original source code?</p></blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">_0x3f2a</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;\x48\x65\x6c\x6c\x6f&#39;</span><span class="p">,</span> <span class="s1">&#39;\x6c\x6f\x67&#39;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">_0x12d3f0</span><span class="p">,</span> <span class="nx">_0x3f2a8c</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">_0x553e8f</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">_0x5e7a28</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="p">(</span><span class="o">--</span><span class="nx">_0x5e7a28</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">_0x12d3f0</span><span class="p">[</span><span class="s1">&#39;push&#39;</span><span class="p">](</span><span class="nx">_0x12d3f0</span><span class="p">[</span><span class="s1">&#39;shift&#39;</span><span class="p">]());</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="nx">_0x553e8f</span><span class="p">(</span><span class="o">++</span><span class="nx">_0x3f2a8c</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}(</span><span class="nx">_0x3f2a</span><span class="p">,</span> <span class="mh">0x1a4</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">_0x553e</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">_0x12d3f0</span><span class="p">,</span> <span class="nx">_0x3f2a8c</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">_0x12d3f0</span> <span class="o">=</span> <span class="nx">_0x12d3f0</span> <span class="o">-</span> <span class="mh">0x0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">_0x553e8f</span> <span class="o">=</span> <span class="nx">_0x3f2a</span><span class="p">[</span><span class="nx">_0x12d3f0</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">_0x553e8f</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">_ax342</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">_0x5e7a28</span> <span class="o">=</span> <span class="nx">_0x553e</span><span class="p">(</span><span class="s1">&#39;0x0&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">[</span><span class="nx">_0x553e</span><span class="p">(</span><span class="s1">&#39;0x1&#39;</span><span class="p">)](</span><span class="nx">_0x5e7a28</span> <span class="o">+</span> <span class="s1">&#39; World!&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">_ax342</span><span class="p">();</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Let me help you deobfuscate this code. Based on the patterns and structure, this appears to be JavaScript code that has been obfuscated using common techniques like array-based string storage and variable name mangling.
The original source code would be:</p></blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">greet</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Hello World!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">greet</span><span class="p">();</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>着实有点东西</p>
<h3 id="排查问题"><span class="section-num">4.5</span> 排查问题</h3>
<p>在出现大模型AI之前，当遇到某个工具或者库的错误信息时，我一般的做法是：</p>
<ol>
<li>复制错误信息</li>
<li>粘贴到Google</li>
<li>点击排名最靠前的Stackoverflow 链接</li>
<li>扫一下是否是我想问的问题，如果不是就再回到2</li>
<li>按照最高赞的解决方案尝试下</li>
<li>如果还不行，再回到2</li>
</ol>
<p>有了AI之后，我一般的做法是:</p>
<ol>
<li>复制错误信息</li>
<li>问AI &ldquo;How to fix this erro&rdquo;, 粘贴上错误信息</li>
<li>按照AI的建议一步步尝试</li>
<li>如果不行，把最新的错误信息复制粘贴给AI, 告诉它这不管用.</li>
</ol>
<p>与Google 的方案相比，我现在有了个再反馈的过程, 可以把最新的结果再告知AI, 这样更方便AI基于上下文做出解答.</p>
<h3 id="数据处理"><span class="section-num">4.6</span> 数据处理</h3>
<p>非结构化数据转换成结构化数据，如JSON, 相当于让AI做了数据清洗的脏活:</p>
<blockquote>
<p>Given the following output of ls command, could you convert it to JSON?</p></blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">-&gt; % ls -alrt
</span></span><span class="line"><span class="cl">total <span class="m">828</span>
</span></span><span class="line"><span class="cl">-rw-rw----+   <span class="m">1</span> ramsay ramsay   <span class="m">4672</span> Mar <span class="m">21</span>  <span class="m">2019</span> abbrev_defs
</span></span><span class="line"><span class="cl">-rw-rw----+   <span class="m">1</span> ramsay ramsay  <span class="m">10079</span> Mar <span class="m">21</span>  <span class="m">2019</span> recentf~
</span></span><span class="line"><span class="cl">drwxr-xr-x    <span class="m">2</span> ramsay ramsay   <span class="m">4096</span> Apr <span class="m">16</span>  <span class="m">2021</span> images
</span></span><span class="line"><span class="cl">drwxrw----+  <span class="m">44</span> ramsay ramsay   <span class="m">4096</span> Apr <span class="m">16</span>  <span class="m">2021</span> snippets
</span></span><span class="line"><span class="cl">-rw-rw----+   <span class="m">1</span> ramsay ramsay   <span class="m">3740</span> Dec <span class="m">10</span>  <span class="m">2021</span> projectile-bookmarks.eld
</span></span><span class="line"><span class="cl">-rw-rw----+   <span class="m">1</span> ramsay ramsay <span class="m">241501</span> May <span class="m">27</span>  <span class="m">2022</span> company-statistics-cache.el
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Here is the JSON representation of the given ls -alrt output:
Explanation:</p>
<ul>
<li>Each file/directory is represented as an object inside the &ldquo;files&rdquo; array.</li>
<li>&ldquo;name&rdquo; is the file/directory name.</li>
<li>&ldquo;permissions&rdquo; is the file permissions.</li>
<li>&ldquo;links&rdquo; is the number of hard links.</li>
<li>&ldquo;owner&rdquo; is the owner of the file.</li>
<li>&ldquo;group&rdquo; is the group the file belongs to.</li>
<li>&ldquo;size&rdquo; is the size of the file in bytes.</li>
<li>&ldquo;modified&rdquo; is the date of the last modification.</li>
</ul></blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl">     <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;files&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;abbrev_defs&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;permissions&#34;</span><span class="p">:</span> <span class="s2">&#34;-rw-rw----+&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;links&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;owner&#34;</span><span class="p">:</span> <span class="s2">&#34;ramsay&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;group&#34;</span><span class="p">:</span> <span class="s2">&#34;ramsay&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">4672</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;modified&#34;</span><span class="p">:</span> <span class="s2">&#34;Mar 21 2019&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;recentf~&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;permissions&#34;</span><span class="p">:</span> <span class="s2">&#34;-rw-rw----+&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;links&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;owner&#34;</span><span class="p">:</span> <span class="s2">&#34;ramsay&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;group&#34;</span><span class="p">:</span> <span class="s2">&#34;ramsay&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">10079</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;modified&#34;</span><span class="p">:</span> <span class="s2">&#34;Mar 21 2019&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;images&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;permissions&#34;</span><span class="p">:</span> <span class="s2">&#34;drwxr-xr-x&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;links&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;owner&#34;</span><span class="p">:</span> <span class="s2">&#34;ramsay&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;group&#34;</span><span class="p">:</span> <span class="s2">&#34;ramsay&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">4096</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;modified&#34;</span><span class="p">:</span> <span class="s2">&#34;Apr 16 2021&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;snippets&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;permissions&#34;</span><span class="p">:</span> <span class="s2">&#34;drwxrw----+&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;links&#34;</span><span class="p">:</span> <span class="mi">44</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;owner&#34;</span><span class="p">:</span> <span class="s2">&#34;ramsay&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;group&#34;</span><span class="p">:</span> <span class="s2">&#34;ramsay&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">4096</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;modified&#34;</span><span class="p">:</span> <span class="s2">&#34;Apr 16 2021&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;projectile-bookmarks.eld&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;permissions&#34;</span><span class="p">:</span> <span class="s2">&#34;-rw-rw----+&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;links&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;owner&#34;</span><span class="p">:</span> <span class="s2">&#34;ramsay&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;group&#34;</span><span class="p">:</span> <span class="s2">&#34;ramsay&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">3740</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;modified&#34;</span><span class="p">:</span> <span class="s2">&#34;Dec 10 2021&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;company-statistics-cache.el&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;permissions&#34;</span><span class="p">:</span> <span class="s2">&#34;-rw-rw----+&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;links&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;owner&#34;</span><span class="p">:</span> <span class="s2">&#34;ramsay&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;group&#34;</span><span class="p">:</span> <span class="s2">&#34;ramsay&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">241501</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;modified&#34;</span><span class="p">:</span> <span class="s2">&#34;May 27 2022&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>对于非结构化的数据，或者缺失格式的数据, AI都能处理.</p>
<h2 id="总结"><span class="section-num">5</span> 总结</h2>
<p>这是我用即梦AI生成的一张街舞海报，我注明了地址，联系电话，以及价格，生成出来的结果是这样的</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-26467" hidden>
    <label for="zoomCheck-26467">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/genai_cover_image.jpg"/> 
    
    
    </label>
</figure>

<p>远看是那么一回事！细看是什么回事?</p>
<p>AI现阶段还是无法取代程序员的，未来AI我也觉得很难取代程序员(当然，取代把需求翻译成代码的人肉翻译器还是有可能的)，因为程序员虽然是和机器打交道，但是本质上还是解决人的问题。</p>
<p>担忧程序员被AI取代的人可能只看到了测试场景里面的 happy path, 也就是AI能生成老板们想要的代码，没有看到unhappy path, 也就是老板们想要的代码, AI生成不出来要怎么办?</p>
<p>毕竟人可以根据已有的经验进行归纳总结，把已有的经验应用在未踏足的领域，且持续学习，但是AI还是受限于预训练数据，做不出来就是做不出来。</p>
<p>但是对程序员而言，AI不失为一个好用且提效的工具，好用的工具就应该多学多用多玩，而不是担忧被其取代。</p>
<p>AI无法取代持续精进者, 傲慢自满方为淘汰之源</p>
<p>(什么，你问我当初的答辩结果？自然是</p>
<hr>
<p>挂了)</p>
<h3 id="推荐阅读">推荐阅读</h3>
<ul>
<li>旅加经历
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E8%BF%99%E4%BA%9B%E5%B9%B4%E8%B5%B0%E8%BF%87%E7%9A%84%E8%B7%AF_%E4%BB%8E%E5%B9%BF%E5%B7%9E%E5%88%B0%E6%B8%A9%E5%93%A5%E5%8D%8E/">这些年走过的路：从广州到温哥华</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E5%8A%A0%E6%8B%BF%E5%A4%A7%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C/">加拿大之初体验</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E7%99%BB%E9%99%86%E5%8A%A0%E6%8B%BF%E5%A4%A7%E4%B8%80%E5%B9%B4%E7%9A%84%E4%BD%93%E4%BC%9A/">登陆加拿大一年后的体会</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E5%A4%8F%E6%97%A5%E6%8D%95%E8%9F%B9%E8%AE%B0/">夏日捕蟹记</a></li>
</ul>
</li>
<li>历史思考
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E7%BD%AE%E8%BA%AB%E4%BA%8B%E5%86%85/">为什么梦想买不起，故乡回不去</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E9%97%B2%E8%81%8A%E5%86%99%E4%BD%9C/">闲聊写作的好处</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E9%87%91%E6%A6%9C%E9%A2%98%E5%90%8D%E4%B9%8B%E5%90%8E/">金榜题名之后</a></li>
</ul>
</li>
<li>工具流分享
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E7%AE%80%E6%98%8E%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/">简明写作指南</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E5%86%99%E4%BD%9C%E6%B5%81/">我的写作流</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E7%94%BB%E5%9B%BE%E6%B5%81/">我的画图流：画图工具与技巧分享</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E6%90%9C%E7%B4%A2%E6%B5%81/">我的搜索流：高效搜索经验分享</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2022/feynman_technique/">最好的学习方式：费曼学习法(Feynman Technique)</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2021/%E7%B3%BB%E7%BB%9F%E6%80%9D%E8%80%83/">系统思考：既见树木，又见森林</a></li>
</ul>
</li>
<li>职场思考
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E7%BC%96%E7%A8%8B%E5%8D%81%E5%B9%B4%E7%9A%84%E6%84%9F%E6%82%9F/">编程十年的感悟</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E4%BB%8E%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E7%A6%BB%E7%BA%BF_%E6%88%91%E5%B8%A6%E8%B5%B0%E4%BA%86%E4%BB%80%E4%B9%88/">那些年，我从微信支付学到的东西</a></li>
</ul>
</li>
<li>软件工程
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%B8%80_%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E8%AE%A4%E7%9F%A5/">测试技能进阶(一): 软件质量认知</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%BA%8C_parameterized_tests/">测试技能进阶(二): Parameterized Tests</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%B8%89_property_based_testing/">测试技能进阶(三): Property Based Testing</a></li>
</ul>
</li>
</ul>
<div center class="qr-container">
<img src="/ox-hugo/qrcode_gh_e06d750e626f_1.jpg" alt="qrcode_gh_e06d750e626f_1.jpg" width="160px" height="160px" center="t" class="qr-container" />
公号同步更新，欢迎关注👻
</div>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://www.sov2ex.com/?q=AI%E5%8F%96%E4%BB%A3%E7%A8%8B%E5%BA%8F%E5%91%98">https://www.sov2ex.com/?q=AI%E5%8F%96%E4%BB%A3%E7%A8%8B%E5%BA%8F%E5%91%98</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://apnews.com/article/workday-layoffs-job-cuts-ai-investments-437581ad79d6e1cef2de7b300015dfbb?utm_source=t.me/mtfront">https://apnews.com/article/workday-layoffs-job-cuts-ai-investments-437581ad79d6e1cef2de7b300015dfbb?utm_source=t.me/mtfront</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="https://www.bwpeople.in/article/google-contemplates-30000-layoffs-due-to-ai-job-impact-503670">https://www.bwpeople.in/article/google-contemplates-30000-layoffs-due-to-ai-job-impact-503670</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
  </channel>
</rss>

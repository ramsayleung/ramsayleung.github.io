<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on 自由庄园</title>
    <link>https://ramsayleung.github.io/zh/post/</link>
    <description>Recent content in Posts on 自由庄园</description>
    <image>
      <title>自由庄园</title>
      <url>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.120.4</generator>
    <language>zh</language>
    <copyright>See this site&amp;rsquo;s source code here, licensed under GPLv3 ·</copyright>
    <lastBuildDate>Mon, 14 Oct 2024 15:28:08 -0700</lastBuildDate>
    <atom:link href="https://ramsayleung.github.io/zh/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>测试技能进阶(三): Property Based Testing</title>
      <link>https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%B8%89_property_based_testing/</link>
      <pubDate>Mon, 14 Oct 2024 09:37:00 -0700</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%B8%89_property_based_testing/</guid>
      <description>1 前言 1.1 test case的局限 想要更好地理解什么是 Property based testing, 就来先看下已有 test case 的局限，再来观察它解决了什么问题。 用之前《测试技能进阶(二): Parameterized Test</description>
      <content:encoded><![CDATA[<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<h3 id="test-case的局限"><span class="section-num">1.1</span> test case的局限</h3>
<p>想要更好地理解什么是 Property based testing, 就来先看下已有 test case 的局限，再来观察它解决了什么问题。</p>
<p>用之前<a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%BA%8C_parameterized_tests/">《测试技能进阶(二): Parameterized Tests》</a>中计算折扣的函数为例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">calculate_discount</span><span class="p">(</span><span class="n">price</span><span class="p">,</span> <span class="n">discount_percentage</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">price</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Price must be greater than zero: </span><span class="si">{</span><span class="n">price</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">discount_percentage</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Discount_percentage must be greater than zero: </span><span class="si">{</span><span class="n">discount_percentage</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">price</span> <span class="o">&gt;</span> <span class="mi">50000</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">price</span> <span class="o">-</span> <span class="p">(</span><span class="n">price</span> <span class="o">*</span> <span class="p">(</span><span class="n">discount_percentage</span> <span class="o">*</span> <span class="mf">1.15</span><span class="p">)</span> <span class="o">/</span> <span class="mi">100</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">elif</span> <span class="n">price</span> <span class="o">&gt;</span> <span class="mi">100000</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">price</span> <span class="o">-</span> <span class="p">(</span><span class="n">price</span> <span class="o">*</span> <span class="p">(</span><span class="n">discount_percentage</span> <span class="o">*</span> <span class="mf">1.18</span><span class="p">)</span> <span class="o">/</span> <span class="mi">100</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">price</span> <span class="o">-</span> <span class="p">(</span><span class="n">price</span> <span class="o">*</span> <span class="n">discount_percentage</span> <span class="o">/</span> <span class="mi">100</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>即使我们使用了 Parameterized Test, 把测试逻辑和测试数据集作了分离，但是还是有两个缺点：</p>
<ol>
<li>我们的测试数据集还是要手工构造，即使现在不需要写新的 test case, 手工构造数据集还是很麻烦</li>
<li>第二个问题更严重，就是我们的构建的数据集可能不是完备的，如果数据集没有办法覆盖所有的条件分支，那我们仍然可能发现不了代码中的Bug</li>
</ol>
<h2 id="property-based-testing"><span class="section-num">2</span> Property Based Testing</h2>
<p>而 Property Based Testing 就是想解决这个问题，它希望可以结合人脑对特定问题域的理解和机器的运算能力，使用更少的时间来生成更优的测试case.</p>
<p>Property Based Testing 这个概念是由 Haskell 项目 <a href="https://en.wikipedia.org/wiki/QuickCheck">QuickCheck</a> <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>在1999年引入的，它的理念是，程序员应该只定义某个测试case, 参数需要满足的标准(specification), 然后程序就会自动生成大量满足这个标准的随机数，用这些随机数来测试这个 test case。</p>
<p>而因为测试数据是随机生成的，所以你意料之内的数据，或者意料之外的数据都会被用来测试，
既省去了费时费力构造不同数据作数据集来测试的烦恼，又能保证数据集的完备性, 经常可以帮助你发现意想不到的bug.</p>
<p>这就是声明式定义的一种，你只需要声明你想干什么(用什么样的数据测试什么函数)，而非命令式定义（你需要定义你要怎么做）.</p>
<p>人力应该是很珍贵，而机器的计算资源却是很便宜，应该让机器代替人去做生成数据的事。</p>
<p>举例来说, 以上面的 <code>calculate_discount</code> 函数为例，如果我们告诉程序, <code>price</code> 和 <code>discount_percentage</code> 应该是整数（specification）, 那么 Quickcheck 就会生成各种整数, 从 Integer.Min 到 Integer.Max 不等，用来测试我们的程序.</p>
<p>如果还是觉得这个概念比较抽象，可以来看下具体的例子：</p>
<h2 id="hypothesis"><span class="section-num">3</span> Hypothesis</h2>
<p>Python Property Based Testing的测试框架叫 <a href="https://hypothesis.works/">Hypothesis </a><sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>(假想)，这个项目名字也是起得非常有水平，结合Property Based Testing的哲学，可谓信雅达.</p>
<p>假设我们现在要实现一个简单的数据压缩的算法： <a href="https://en.wikipedia.org/wiki/Run-length_encoding">Run-length Encoding</a> <sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>(RLE)，通常用于压缩包含连续重复数据的序列, 这种编码方法特别适用于那些有大量重复字符或值的数据.</p>
<p>它的基本原理是：</p>
<ol>
<li>统计连续重复的数据元素的数量。</li>
<li>用一个计数值和数据值的组合来替代这些重复的数据。</li>
</ol>
<p>比如字符串: <code>AABBBCCCC</code>, RLE 编码后: <code>2A3B4C</code>. <code>2A</code> 表示两个连续的 <code>A</code>, <code>3B</code> 表示三个连续的 <code>B</code>, <code>4C</code> 表示四个连续的 <code>C</code> 。</p>
<p>Python实现如下:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">encode</span><span class="p">(</span><span class="n">input_string</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">count</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">prev</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">lst</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">character</span> <span class="ow">in</span> <span class="n">input_string</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">character</span> <span class="o">!=</span> <span class="n">prev</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">prev</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">entry</span> <span class="o">=</span> <span class="p">(</span><span class="n">prev</span><span class="p">,</span> <span class="n">count</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">lst</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">entry</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">count</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">prev</span> <span class="o">=</span> <span class="n">character</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">entry</span> <span class="o">=</span> <span class="p">(</span><span class="n">character</span><span class="p">,</span> <span class="n">count</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">lst</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">entry</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">lst</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">decode</span><span class="p">(</span><span class="n">lst</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">q</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">character</span><span class="p">,</span> <span class="n">count</span> <span class="ow">in</span> <span class="n">lst</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">q</span> <span class="o">+=</span> <span class="n">character</span> <span class="o">*</span> <span class="n">count</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">q</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果我们的代码实现没有问题的话，对于任意的字符串，编码后的字符串，解码后的结果应该和原来的字符串一致的，这个就是我们的测试逻辑:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">hypothesis</span> <span class="kn">import</span> <span class="n">given</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">hypothesis.strategies</span> <span class="kn">import</span> <span class="n">text</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@given</span><span class="p">(</span><span class="n">text</span><span class="p">())</span> <span class="c1"># 入参的标准是：任意的字符串，hypothesis 框架就会自动生成随机数，并调用test_decode_inverts_encode</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">test_decode_inverts_encode</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">decode</span><span class="p">(</span><span class="n">encode</span><span class="p">(</span><span class="n">s</span><span class="p">))</span> <span class="o">==</span> <span class="n">s</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>使用 <code>pytest</code> 运行上面的用例，结果如下:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">&gt; pytest property_based_testing.py
</span></span><span class="line"><span class="cl"><span class="o">===================================</span> <span class="nb">test</span> session <span class="nv">starts</span> <span class="o">====================================</span>
</span></span><span class="line"><span class="cl">platform darwin -- Python 3.12.6, pytest-8.3.3, pluggy-1.5.0
</span></span><span class="line"><span class="cl">rootdir: /Users/ramsayleung/code/python/test_technique
</span></span><span class="line"><span class="cl">plugins: hypothesis-6.115.0
</span></span><span class="line"><span class="cl">collected <span class="m">1</span> item
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">property_based_testing.py F                                                          <span class="o">[</span>100%<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">=========================================</span> <span class="nv">FAILURES</span> <span class="o">=========================================</span>
</span></span><span class="line"><span class="cl">________________________________ test_decode_inverts_encode ________________________________
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">@given<span class="o">(</span>text<span class="o">())</span>
</span></span><span class="line"><span class="cl">&gt;   def test_decode_inverts_encode<span class="o">(</span>s<span class="o">)</span>:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">property_based_testing.py:29:
</span></span><span class="line"><span class="cl">_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
</span></span><span class="line"><span class="cl">property_based_testing.py:30: in test_decode_inverts_encode
</span></span><span class="line"><span class="cl">assert decode<span class="o">(</span>encode<span class="o">(</span>s<span class="o">))</span> <span class="o">==</span> s
</span></span><span class="line"><span class="cl">_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">input_string</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">def encode<span class="o">(</span>input_string<span class="o">)</span>:
</span></span><span class="line"><span class="cl"><span class="nv">count</span> <span class="o">=</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="nv">prev</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">lst</span> <span class="o">=</span> <span class="o">[]</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> character in input_string:
</span></span><span class="line"><span class="cl">                 <span class="k">if</span> character !<span class="o">=</span> prev:
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> prev:
</span></span><span class="line"><span class="cl">                       <span class="nv">entry</span> <span class="o">=</span> <span class="o">(</span>prev, count<span class="o">)</span>
</span></span><span class="line"><span class="cl">                       lst.append<span class="o">(</span>entry<span class="o">)</span>
</span></span><span class="line"><span class="cl">                       <span class="nv">count</span> <span class="o">=</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl">                       <span class="nv">prev</span> <span class="o">=</span> character
</span></span><span class="line"><span class="cl">                       <span class="k">else</span>:
</span></span><span class="line"><span class="cl">                       <span class="nv">count</span> <span class="o">+=</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl">                       &gt;       <span class="nv">entry</span> <span class="o">=</span> <span class="o">(</span>character, count<span class="o">)</span>
</span></span><span class="line"><span class="cl">                       E       UnboundLocalError: cannot access <span class="nb">local</span> variable <span class="s1">&#39;character&#39;</span> where it is not associated with a value
</span></span><span class="line"><span class="cl">                       E       Falsifying example: test_decode_inverts_encode<span class="o">(</span>
</span></span><span class="line"><span class="cl">                           E           <span class="nv">s</span><span class="o">=</span><span class="s1">&#39;&#39;</span>,
</span></span><span class="line"><span class="cl">                           E       <span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                       property_based_testing.py:17: <span class="nv">UnboundLocalError</span>
</span></span><span class="line"><span class="cl">                       <span class="o">=================================</span> short <span class="nb">test</span> summary <span class="nv">info</span> <span class="o">==================================</span>
</span></span><span class="line"><span class="cl">                       FAILED property_based_testing.py::test_decode_inverts_encode - UnboundLocalError: cannot access <span class="nb">local</span> variable <span class="s1">&#39;character&#39;</span> where it is not associated ...
</span></span><span class="line"><span class="cl">                       <span class="o">====================================</span> <span class="m">1</span> failed in 0.14s <span class="o">=====================================</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到，当 <code>input_string =''</code> 是空字符串的时候， <code>encode</code> 函数抛出异常了，说 <code>character</code> 变量未定义。原来是 <code>encode</code> 函数没有对空字符串这个 corner case 作处理，那么就加个判断条件，修复一下:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">encode</span><span class="p">(</span><span class="n">input_string</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="ow">not</span> <span class="n">input_string</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">count</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">prev</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">lst</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">character</span> <span class="ow">in</span> <span class="n">input_string</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">character</span> <span class="o">!=</span> <span class="n">prev</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">prev</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">entry</span> <span class="o">=</span> <span class="p">(</span><span class="n">prev</span><span class="p">,</span> <span class="n">count</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">lst</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">entry</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">count</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">prev</span> <span class="o">=</span> <span class="n">character</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">entry</span> <span class="o">=</span> <span class="p">(</span><span class="n">character</span><span class="p">,</span> <span class="n">count</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">lst</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">entry</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">lst</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>既然我们知道空字符串是个特殊的 case, 因为 hypothesis 生成的都是任意的随机数，不一定每次都会测到空字符串，那我们就自己指定一个 case:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">hypothesis</span> <span class="kn">import</span> <span class="n">example</span><span class="p">,</span> <span class="n">given</span><span class="p">,</span> <span class="n">strategies</span> <span class="k">as</span> <span class="n">st</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@given</span><span class="p">(</span><span class="n">st</span><span class="o">.</span><span class="n">text</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="nd">@example</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">)</span> <span class="c1"># 手工指定空字符串这个 corner case</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">test_decode_inverts_encode</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">decode</span><span class="p">(</span><span class="n">encode</span><span class="p">(</span><span class="n">s</span><span class="p">))</span> <span class="o">==</span> <span class="n">s</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>pytest</code> 重新运行，测试就通过了。但是，对 <code>hypothesis</code> 框架还没有建立信心的你我就不确定，它是否真的生成很多随机来运行这个 test case 呢？</p>
<p>有两个方法可以验证：</p>
<p>方法一：最简单粗暴的方式，把 <code>s</code> 变量给打印出来，毕竟眼见为实:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nd">@given</span><span class="p">(</span><span class="n">st</span><span class="o">.</span><span class="n">text</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="nd">@example</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">test_decode_inverts_encode</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">decode</span><span class="p">(</span><span class="n">encode</span><span class="p">(</span><span class="n">s</span><span class="p">))</span> <span class="o">==</span> <span class="n">s</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后通过 <code>pytest -s</code> 参数要求 <code>pytest</code> 将写入到 <code>stdout</code> 的内容给打印出来</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">&gt; pytest property_based_testing.py -s
</span></span><span class="line"><span class="cl"><span class="o">=======================================</span> <span class="nb">test</span> session <span class="nv">starts</span> <span class="o">=======================================</span>
</span></span><span class="line"><span class="cl">platform darwin -- Python 3.12.6, pytest-8.3.3, pluggy-1.5.0
</span></span><span class="line"><span class="cl">rootdir: /Users/ramsayleung/code/python/test_technique
</span></span><span class="line"><span class="cl">plugins: hypothesis-6.115.0
</span></span><span class="line"><span class="cl">collected <span class="m">1</span> item
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">property_based_testing.py
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">O
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">¶
</span></span><span class="line"><span class="cl"><span class="se">\å</span>񢄏«
</span></span><span class="line"><span class="cl">𥛗Îbó
</span></span><span class="line"><span class="cl">𜆮å
</span></span><span class="line"><span class="cl">񰘰9
</span></span><span class="line"><span class="cl">gah󭾔𛧁
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">i򼯜+ó»򮩸b񝕨
</span></span><span class="line"><span class="cl">S!ÕTå<span class="p">&amp;</span>𰵩í¤ýäó÷F
</span></span><span class="line"><span class="cl">øôyµ
</span></span><span class="line"><span class="cl">Äª
</span></span><span class="line"><span class="cl">sLz$ï
</span></span><span class="line"><span class="cl">_𠵈
</span></span><span class="line"><span class="cl">Ü
</span></span><span class="line"><span class="cl">A
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">R󃝷<span class="o">{</span>©¾
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   ìõ
</span></span><span class="line"><span class="cl">   æ􂐛BÝ1*􅄢ëóg𮎈¼ ?𩓁
</span></span><span class="line"><span class="cl">   Òör @PP􎾂ö񳱊ûÁ½¬HÈ6#
</span></span><span class="line"><span class="cl">   a𣽗¶󿅌𧑁x~󗜬韹ûð󴯮#Z󅖫<span class="se">\©</span>𳖅ûf&gt;
</span></span><span class="line"><span class="cl">   i
</span></span><span class="line"><span class="cl">   ....
</span></span><span class="line"><span class="cl">   <span class="o">========================================</span> <span class="m">1</span> passed in 0.15s <span class="o">========================================</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这一堆都是什么字符呢, 都乱码了。</p>
<p>毕竟我们告诉 <code>hypothesis</code> 框架的是，我们参数接受的标准是任意的字符串， <code>hypothesis</code> 就非常尽职地帮我们生成了各种字符串，这个测试数据集可比我们自己手工构建的范围大得多，这就是 property based testing 的优势所在.</p>
<p>第二种方法是使用 <code>hypothesis</code> 框架提供的命令行参数 =&ndash;hypothesis-show-statistics=，用于打印统计信息:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">&gt; pytest property_based_testing.py --hypothesis-show-statistics
</span></span><span class="line"><span class="cl"><span class="o">=======================================</span> <span class="nb">test</span> session <span class="nv">starts</span> <span class="o">=======================================</span>
</span></span><span class="line"><span class="cl">platform darwin -- Python 3.12.6, pytest-8.3.3, pluggy-1.5.0
</span></span><span class="line"><span class="cl">rootdir: /Users/ramsayleung/code/python/test_technique
</span></span><span class="line"><span class="cl">plugins: hypothesis-6.115.0
</span></span><span class="line"><span class="cl">collected <span class="m">1</span> item
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">property_based_testing.py .                                                                 <span class="o">[</span>100%<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">======================================</span> Hypothesis <span class="nv">Statistics</span> <span class="o">======================================</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">property_based_testing.py::test_decode_inverts_encode:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">- during generate phase <span class="o">(</span>0.03 seconds<span class="o">)</span>:
</span></span><span class="line"><span class="cl">- Typical runtimes: &lt; 1ms, of which &lt; 1ms in data generation
</span></span><span class="line"><span class="cl">- <span class="m">100</span> passing examples, <span class="m">0</span> failing examples, <span class="m">0</span> invalid examples
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">- Stopped because settings.max_examples<span class="o">=</span><span class="nv">100</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">========================================</span> <span class="m">1</span> passed in 0.05s <span class="o">========================================</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>上面运行了 100 条数据，如果你觉得还想跑更多，可以通过 <code>settings</code> 装饰器指定更多:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nd">@settings</span><span class="p">(</span><span class="n">max_examples</span><span class="o">=</span><span class="mi">500</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="quickcheck-and-proptest"><span class="section-num">4</span> Quickcheck &amp; Proptest</h2>
<p>而在Rust生态，就有两个 Property Based Testing 的库，一个是由Rust社区知名开发者，<a href="https://github.com/BurntSushi/ripgrep">ripgrep</a> <sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>和 regex 库作者移植自 Haskell Quickcheck 库的 <a href="https://github.com/BurntSushi/quickcheck">quickcheck</a> <sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>(名字也一并移植了), 另外一个是思路继承自 Python Hypothesis 的 <a href="https://github.com/proptest-rs/proptest">Proptest</a> <sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup>(这位直接用property based testing技术来命名了，不得不说，命名真的是门艺术)</p>
<p>两者的社区接受度都相差无几(star, 使用者数量), 而在公司内部，我也发现 quickcheck 和 proptest 都有人用，坐我旁边的Principle Engineer 用的是 proptest, 而另外一个现在和我共事的同事，她的之前团队用的就是 quickcheck，看到都势均力敌嘛。</p>
<p>翻开 quickcheck 和 proptest 的API 文档之后，我发现我更喜欢 quickcheck 的接口风格，虽说它的活跃度更低一些，我最后还是选择了使用 quickcheck.</p>
<p>下面就来介绍一下我在Rust上使用 quickcheck 的心得:</p>
<p>假设我们现在有一个可以反转列表的函数 <code>reverse</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">fn</span> <span class="nf">reverse</span><span class="o">&lt;</span><span class="n">T</span>: <span class="nb">Clone</span><span class="o">&gt;</span><span class="p">(</span><span class="n">xs</span>: <span class="kp">&amp;</span><span class="p">[</span><span class="n">T</span><span class="p">])</span><span class="w"> </span>-&gt; <span class="nb">Vec</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">rev</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="fm">vec!</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">xs</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">rev</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="p">.</span><span class="n">clone</span><span class="p">())</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">rev</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>对于任意类型的列表，反转之后再反转的结果，肯定是和原结果一样的，那么我们就可以开始声明我们的标准(specification), 那就是任意的列表，可以是字符串列表，整型列表或者是其他的结构体列表:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="cp">#[cfg(test)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">mod</span> <span class="nn">tests</span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">use</span><span class="w"> </span><span class="n">quickcheck_macros</span>::<span class="n">quickcheck</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">use</span><span class="w"> </span><span class="k">crate</span>::<span class="n">reverse</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cp">#[quickcheck]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">double_reversal_is_identity_isize</span><span class="p">(</span><span class="n">xs</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="kt">isize</span><span class="o">&gt;</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kt">bool</span> <span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">xs</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">reverse</span><span class="p">(</span><span class="o">&amp;</span><span class="n">reverse</span><span class="p">(</span><span class="o">&amp;</span><span class="n">xs</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cp">#[quickcheck]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">double_reversal_is_identity_string</span><span class="p">(</span><span class="n">xs</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kt">bool</span> <span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">xs</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">reverse</span><span class="p">(</span><span class="o">&amp;</span><span class="n">reverse</span><span class="p">(</span><span class="o">&amp;</span><span class="n">xs</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Rust 的unit test 是不支持带参数的，=#[quickcheck]= 这个宏就会自动将 <code>double_reversal_is_identity_isize</code> 转换成 property based test case, 而得益于Rust的类型系统, <code>quickcheck</code> 就能推断出入参就是我们声明的标准 <code>Vec&lt;isze&gt;</code>, 任意 <code>isize</code> 类型的数组.</p>
<h3 id="struct-with-quickcheck"><span class="section-num">4.1</span> Struct with quickcheck</h3>
<p>如果上面的例子觉得过于简单的话，现在就让我们看个复杂一点的例子, 一个简单的图书管理系统，支持会员，借书，还书功能：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span><span class="lnt">91
</span><span class="lnt">92
</span><span class="lnt">93
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">chrono</span>::<span class="p">{</span><span class="n">Duration</span><span class="p">,</span><span class="w"> </span><span class="n">NaiveDate</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">collections</span>::<span class="n">HashMap</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="cp">#[derive(Debug, Clone, PartialEq)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">struct</span> <span class="nc">Book</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">isbn</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">title</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">author</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">publication_year</span>: <span class="kt">u16</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="cp">#[derive(Debug, Clone, PartialEq)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">struct</span> <span class="nc">Member</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">id</span>: <span class="kt">u32</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">name</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">email</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="cp">#[derive(Debug, Clone)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">struct</span> <span class="nc">Loan</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">book_isbn</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">member_id</span>: <span class="kt">u32</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">due_date</span>: <span class="nc">NaiveDate</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="cp">#[derive(Debug, Clone)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">struct</span> <span class="nc">Library</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">books</span>: <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nb">String</span><span class="p">,</span><span class="w"> </span><span class="n">Book</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">members</span>: <span class="nc">HashMap</span><span class="o">&lt;</span><span class="kt">u32</span><span class="p">,</span><span class="w"> </span><span class="n">Member</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">loans</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="n">Loan</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">current_date</span>: <span class="nc">NaiveDate</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Library</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">new</span><span class="p">(</span><span class="n">current_date</span>: <span class="nc">NaiveDate</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">Library</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">books</span>: <span class="nc">HashMap</span>::<span class="n">new</span><span class="p">(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">members</span>: <span class="nc">HashMap</span>::<span class="n">new</span><span class="p">(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">loans</span>: <span class="nb">Vec</span>::<span class="n">new</span><span class="p">(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">current_date</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">add_book</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">book</span>: <span class="nc">Book</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="p">(),</span><span class="w"> </span><span class="nb">String</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">books</span><span class="p">.</span><span class="n">contains_key</span><span class="p">(</span><span class="o">&amp;</span><span class="n">book</span><span class="p">.</span><span class="n">isbn</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nb">Err</span><span class="p">(</span><span class="s">&#34;Book with this ISBN already exists&#34;</span><span class="p">.</span><span class="n">to_string</span><span class="p">())</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="bp">self</span><span class="p">.</span><span class="n">books</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">book</span><span class="p">.</span><span class="n">isbn</span><span class="p">.</span><span class="n">clone</span><span class="p">(),</span><span class="w"> </span><span class="n">book</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nb">Ok</span><span class="p">(())</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">add_member</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">member</span>: <span class="nc">Member</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="p">(),</span><span class="w"> </span><span class="nb">String</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">members</span><span class="p">.</span><span class="n">contains_key</span><span class="p">(</span><span class="o">&amp;</span><span class="n">member</span><span class="p">.</span><span class="n">id</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nb">Err</span><span class="p">(</span><span class="s">&#34;Member with this ID already exists&#34;</span><span class="p">.</span><span class="n">to_string</span><span class="p">())</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="bp">self</span><span class="p">.</span><span class="n">members</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">member</span><span class="p">.</span><span class="n">id</span><span class="p">,</span><span class="w"> </span><span class="n">member</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nb">Ok</span><span class="p">(())</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">loan_book</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">book_isbn</span>: <span class="kp">&amp;</span><span class="kt">str</span><span class="p">,</span><span class="w"> </span><span class="n">member_id</span>: <span class="kt">u32</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="p">(),</span><span class="w"> </span><span class="nb">String</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="o">!</span><span class="bp">self</span><span class="p">.</span><span class="n">books</span><span class="p">.</span><span class="n">contains_key</span><span class="p">(</span><span class="n">book_isbn</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="nb">Err</span><span class="p">(</span><span class="s">&#34;Book not found&#34;</span><span class="p">.</span><span class="n">to_string</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="o">!</span><span class="bp">self</span><span class="p">.</span><span class="n">members</span><span class="p">.</span><span class="n">contains_key</span><span class="p">(</span><span class="o">&amp;</span><span class="n">member_id</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="nb">Err</span><span class="p">(</span><span class="s">&#34;Member not found&#34;</span><span class="p">.</span><span class="n">to_string</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">loans</span><span class="p">.</span><span class="n">iter</span><span class="p">().</span><span class="n">any</span><span class="p">(</span><span class="o">|</span><span class="n">loan</span><span class="o">|</span><span class="w"> </span><span class="n">loan</span><span class="p">.</span><span class="n">book_isbn</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">book_isbn</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="nb">Err</span><span class="p">(</span><span class="s">&#34;Book is already on loan&#34;</span><span class="p">.</span><span class="n">to_string</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">due_date</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">current_date</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">Duration</span>::<span class="n">days</span><span class="p">(</span><span class="mi">14</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="bp">self</span><span class="p">.</span><span class="n">loans</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">Loan</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">book_isbn</span>: <span class="nc">book_isbn</span><span class="p">.</span><span class="n">to_string</span><span class="p">(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">member_id</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">due_date</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nb">Ok</span><span class="p">(())</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">return_book</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">book_isbn</span>: <span class="kp">&amp;</span><span class="kt">str</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="p">(),</span><span class="w"> </span><span class="nb">String</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="kd">let</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="n">index</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">.</span><span class="n">loans</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">.</span><span class="n">iter</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">.</span><span class="n">position</span><span class="p">(</span><span class="o">|</span><span class="n">loan</span><span class="o">|</span><span class="w"> </span><span class="n">loan</span><span class="p">.</span><span class="n">book_isbn</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">book_isbn</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="bp">self</span><span class="p">.</span><span class="n">loans</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">index</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nb">Ok</span><span class="p">(())</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nb">Err</span><span class="p">(</span><span class="s">&#34;Book is not currently on loan&#34;</span><span class="p">.</span><span class="n">to_string</span><span class="p">())</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>通过上面的简单代码，就实现了新增图书，新增会员，借书，和还书功能。现在就让我们来结合 <code>quickcheck</code> 的 <code>Arbitrary</code> 接口，实现生成任意的图书和会员，以便用于测试:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">quickcheck</span>::<span class="p">{</span><span class="n">Arbitrary</span><span class="p">,</span><span class="w"> </span><span class="n">Gen</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Arbitrary</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Book</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">arbitrary</span><span class="p">(</span><span class="n">g</span>: <span class="kp">&amp;</span><span class="nc">mut</span><span class="w"> </span><span class="n">Gen</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">Book</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c1">// isbn必须以`ISBN` 开头，后接任意的大于等于0，小于uint32.max_value
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="c1">// 的整型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="n">isbn</span>: <span class="nc">format</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;ISBN-{}&#34;</span><span class="p">,</span><span class="w"> </span><span class="kt">u32</span>::<span class="n">arbitrary</span><span class="p">(</span><span class="n">g</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">title</span>: <span class="nb">String</span>::<span class="n">arbitrary</span><span class="p">(</span><span class="n">g</span><span class="p">),</span><span class="w"> </span><span class="c1">// 任意的字符串
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="n">author</span>: <span class="nb">String</span>::<span class="n">arbitrary</span><span class="p">(</span><span class="n">g</span><span class="p">),</span><span class="w"> </span><span class="c1">// 任意的字符串
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="n">publication_year</span>: <span class="o">*</span><span class="n">g</span><span class="p">.</span><span class="n">choose</span><span class="p">(</span><span class="o">&amp;</span><span class="p">[</span><span class="mi">2014_</span><span class="k">u16</span><span class="p">,</span><span class="w"> </span><span class="mi">2022_</span><span class="k">u16</span><span class="p">,</span><span class="w"> </span><span class="mi">2025_</span><span class="k">u16</span><span class="p">]).</span><span class="n">unwrap</span><span class="p">(),</span><span class="w"> </span><span class="c1">// 2014,2022或2025年出版的书
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Arbitrary</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Member</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">arbitrary</span><span class="p">(</span><span class="n">g</span>: <span class="kp">&amp;</span><span class="nc">mut</span><span class="w"> </span><span class="n">Gen</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">Member</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">id</span>: <span class="kt">u32</span>::<span class="n">arbitrary</span><span class="p">(</span><span class="n">g</span><span class="p">),</span><span class="w"> </span><span class="c1">// 任意大于0，小于uint32.max_value的整型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="n">name</span>: <span class="nb">String</span>::<span class="n">arbitrary</span><span class="p">(</span><span class="n">g</span><span class="p">),</span><span class="w"> </span><span class="c1">// 任意字符串
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="c1">// 任意字符开头, 以@example.com 结尾的字符
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="n">email</span>: <span class="nc">format</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;{}@example.com&#34;</span><span class="p">,</span><span class="w"> </span><span class="nb">String</span>::<span class="n">arbitrary</span><span class="p">(</span><span class="n">g</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>现在就让我们来看下借助 quickcheck 编写的 test case, 注意参数为 <code>Book</code> 和 <code>Member</code> 类型的 case, quickcheck 就会以我们上面定义的标准，自动给我们生成符合规定的 <code>Book</code> 和 <code>Member</code> 参数.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="cp">#[cfg(test)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">mod</span> <span class="nn">tests</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">use</span><span class="w"> </span><span class="n">chrono</span>::<span class="n">NaiveDate</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">use</span><span class="w"> </span><span class="n">quickcheck_macros</span>::<span class="n">quickcheck</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">use</span><span class="w"> </span><span class="k">crate</span>::<span class="n">book</span>::<span class="n">Member</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">use</span><span class="w"> </span><span class="k">super</span>::<span class="p">{</span><span class="n">Book</span><span class="p">,</span><span class="w"> </span><span class="n">Library</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cp">#[quickcheck]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">adding_book_increases_book_count</span><span class="p">(</span><span class="n">book</span>: <span class="nc">Book</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kt">bool</span> <span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">library</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Library</span>::<span class="n">new</span><span class="p">(</span><span class="n">NaiveDate</span>::<span class="n">from_ymd_opt</span><span class="p">(</span><span class="mi">2024</span><span class="p">,</span><span class="w"> </span><span class="mi">10</span><span class="p">,</span><span class="w"> </span><span class="mi">14</span><span class="p">).</span><span class="n">unwrap</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">initial_count</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">library</span><span class="p">.</span><span class="n">books</span><span class="p">.</span><span class="n">len</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">library</span><span class="p">.</span><span class="n">add_book</span><span class="p">(</span><span class="n">book</span><span class="p">.</span><span class="n">clone</span><span class="p">()).</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">library</span><span class="p">.</span><span class="n">books</span><span class="p">.</span><span class="n">len</span><span class="p">()</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">initial_count</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">library</span><span class="p">.</span><span class="n">books</span><span class="p">.</span><span class="n">contains_key</span><span class="p">(</span><span class="o">&amp;</span><span class="n">book</span><span class="p">.</span><span class="n">isbn</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cp">#[quickcheck]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">cannot_loan_nonexistent_book</span><span class="p">(</span><span class="n">book_isbn</span>: <span class="nb">String</span><span class="p">,</span><span class="w"> </span><span class="n">member_id</span>: <span class="kt">u32</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kt">bool</span> <span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">library</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Library</span>::<span class="n">new</span><span class="p">(</span><span class="n">NaiveDate</span>::<span class="n">from_ymd_opt</span><span class="p">(</span><span class="mi">2024</span><span class="p">,</span><span class="w"> </span><span class="mi">10</span><span class="p">,</span><span class="w"> </span><span class="mi">14</span><span class="p">).</span><span class="n">unwrap</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">library</span><span class="p">.</span><span class="n">loan_book</span><span class="p">(</span><span class="o">&amp;</span><span class="n">book_isbn</span><span class="p">,</span><span class="w"> </span><span class="n">member_id</span><span class="p">).</span><span class="n">is_err</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cp">#[quickcheck]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">can_return_loaned_book</span><span class="p">(</span><span class="n">book</span>: <span class="nc">Book</span><span class="p">,</span><span class="w"> </span><span class="n">member</span>: <span class="nc">Member</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kt">bool</span> <span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">library</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Library</span>::<span class="n">new</span><span class="p">(</span><span class="n">NaiveDate</span>::<span class="n">from_ymd_opt</span><span class="p">(</span><span class="mi">2024</span><span class="p">,</span><span class="w"> </span><span class="mi">10</span><span class="p">,</span><span class="w"> </span><span class="mi">14</span><span class="p">).</span><span class="n">unwrap</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">library</span><span class="p">.</span><span class="n">add_book</span><span class="p">(</span><span class="n">book</span><span class="p">.</span><span class="n">clone</span><span class="p">()).</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">library</span><span class="p">.</span><span class="n">add_member</span><span class="p">(</span><span class="n">member</span><span class="p">.</span><span class="n">clone</span><span class="p">()).</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">library</span><span class="p">.</span><span class="n">loan_book</span><span class="p">(</span><span class="o">&amp;</span><span class="n">book</span><span class="p">.</span><span class="n">isbn</span><span class="p">,</span><span class="w"> </span><span class="n">member</span><span class="p">.</span><span class="n">id</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">library</span><span class="p">.</span><span class="n">return_book</span><span class="p">(</span><span class="o">&amp;</span><span class="n">book</span><span class="p">.</span><span class="n">isbn</span><span class="p">).</span><span class="n">is_ok</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>通过 <code>quickcheck</code> 我们就可以只专注测试逻辑，可以假定测试数据集是完备的了。可能看到 <code>Book</code> 和 <code>Member</code>, 你会觉得 quickcheck 并没有做太多事情，你手工也可以构造。</p>
<p>但是我在的实际工作中，我就需要构造一个超过23个成员变量的 struct, 大部分还是 optional, 然后需要将这个 struct 写入到 parquet 文件，然后再测试读取逻辑。
不同成员变量的值可取的范围实在太多了，再叠加上 optional 的可能性，构造数据的代码写得相当恶心.</p>
<p>所以有了 quickcheck 之后，我只需要为这个 struct 实现 <code>Arbitrary</code> 接口，剩下的就由 <code>quickcheck</code> 替我生成，所以我直接和PE大佬说:</p>
<blockquote>
<p>property test saves me life, now I couldn&rsquo;t live without it.</p>
</blockquote>
<h2 id="总结"><span class="section-num">5</span> 总结</h2>
<p>本来想抒发感想写点结语，但是看到 Hypothesis 作者写的 <a href="https://hypothesis.readthedocs.io/en/latest/manifesto.html">The purpose of Hypothesis</a><sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup> 来说明他开发的 Hypothesis 的动机，他的文章甚至用来给这个《测试技能进阶》系列总结都相当妥当。</p>
<p>我就试翻译下他文章的部分段落, 更推荐阅读原文，可谓是用心良苦，字字珠玑:</p>
<blockquote>
<p>请容我狂妄一下，Hypothesis 的目标是希望可以让这个世界迈进到一个全新，由高质量软件打造的新世代。</p>
<p>正如人们所说，软件正在吞噬整个世界。但软件本身却很烂，它充满bug，又不安全，还经常被设计得很烂，这样的软件可谓是万恶之源.</p>
<p>而软件测试的状况甚至更糟糕，虽然大家都认同应该对代码进行测试，但是你能问心无愧地说，你经手过的代码都有被充分测试么？</p>
<p>问题在于，实在是太难写出好的测试了，
<strong><strong>你写测试用例的时候，通常持有和你写代码时一样的假设与误区，你写的测试用例自然无法发现你当初埋下的bug</strong></strong> (精辟)</p>
<p>与此同时，有各种各样让测试变成更好的工具却基本无人使用，最初的 Quickcheck 是1999年推出的，但是大多数开发者甚至从未听说过它，更别提使用了（开山始祖的Quickcheck在GitHub只有700多个Star，就知道作者所言不虚）。
虽然其他语言有些半成品的实现，但是大部分都不值得一试。</p>
<p>而 Hypothesis 的目标正是正本清源，把先进的测试技术传递给大众，并提供一个高质量的实现，让人们可以接纳它。</p>
<p>希望可以集百家之所长，附以个人微薄之力，让软件测试变得更好。</p>
</blockquote>
<p>系列文章:</p>
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%B8%80_%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E8%AE%A4%E7%9F%A5/">测试技能进阶(一): 软件质量认知</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%BA%8C_parameterized_tests/">测试技能进阶(二): Parameterized Tests</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%B8%89_property_based_testing/">测试技能进阶(三): Property Based Testing</a></li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://en.wikipedia.org/wiki/QuickCheck">https://en.wikipedia.org/wiki/QuickCheck</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://hypothesis.works/">https://hypothesis.works/</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="https://en.wikipedia.org/wiki/Run-length_encoding">https://en.wikipedia.org/wiki/Run-length_encoding</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p><a href="https://github.com/BurntSushi/ripgrep">https://github.com/BurntSushi/ripgrep</a>&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p><a href="https://github.com/BurntSushi/quickcheck">https://github.com/BurntSushi/quickcheck</a>&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p><a href="https://github.com/proptest-rs/proptest">https://github.com/proptest-rs/proptest</a>&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7">
<p><a href="https://hypothesis.readthedocs.io/en/latest/manifesto.html">https://hypothesis.readthedocs.io/en/latest/manifesto.html</a>&#160;<a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>测试技能进阶(二): Parameterized Tests</title>
      <link>https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%BA%8C_parameterized_tests/</link>
      <pubDate>Sun, 13 Oct 2024 09:35:00 -0700</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%BA%8C_parameterized_tests/</guid>
      <description>1 前言 测试技巧具有普适性，大多是与语言无关的，只是不同语言的生态可能对测试技术的支持各不一样， 比如Python和Java，基本什么库都有，而</description>
      <content:encoded><![CDATA[<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>测试技巧具有普适性，大多是与语言无关的，只是不同语言的生态可能对测试技术的支持各不一样，
比如Python和Java，基本什么库都有，而像C++，有顺手的单元测试和Mock库能用就很不错了。</p>
<p>因为Python比较适合写POC(proof of concept), 而我日常工作的语言是Java+Rust，所以我会穿插着引用这三种语言。</p>
<h2 id="parameterized-test"><span class="section-num">2</span> Parameterized Test</h2>
<p>在介绍 Parameterized Test 之前，让我们先来看个简单的计算价格与折扣的函数（实际的生产代码肯定会更复杂，但是背后的思路是相通的）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">calculate_discount</span><span class="p">(</span><span class="n">price</span><span class="p">,</span> <span class="n">discount_percentage</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">price</span> <span class="o">-</span> <span class="p">(</span><span class="n">price</span> <span class="o">*</span> <span class="n">discount_percentage</span> <span class="o">/</span> <span class="mi">100</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>针对这个函数，我们可能会编写多个 test case, 比如价格是 100, 给10%的折扣; 价格是200, 给20%的折扣; 价格是50, 给0的折扣；还有异常case，比如价格为负数的时候，或者折扣为负数的时候.</p>
<h3 id="单个-test-case"><span class="section-num">2.1</span> 单个 test case</h3>
<p>对于这么多的 case, 一个简单粗暴的方式就是把所有的 case 都写在一个 test case 里：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pytest</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">test_calculate_discount</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># happy path</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">calculate_discount</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span> <span class="o">==</span> <span class="mi">90</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">calculate_discount</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span> <span class="o">==</span> <span class="mi">160</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">calculate_discount</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="mi">50</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># unhappy path</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># assert calculate_discount(-2, 10)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># assert calculate_discount(10, -2)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>但是这样的做法一般是不推荐的，Best Practice是一个 test case 只测一种情况，因为如果一个 test case 包含多个测试条件，如果 test case fail 了，那么不看源码或者堆栈，一般还看不出是什么 case 失败了，不好排查。</p>
<h3 id="多个-test-case"><span class="section-num">2.2</span> 多个 test case</h3>
<p>推荐做法就是每个测试条件定个单独的 test case。</p>
<p>另外我们通过test case发现上面的代码没有处理异常情况，我们现在要优化下我们的代码，增加异常处理逻辑(这个就是TDD所推崇的开发哲学, test case 先行，通过test case发现问题，让test case fail掉，然后修正业务逻辑，test case再运行通过).</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pytest</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">calculate_discount</span><span class="p">(</span><span class="n">price</span><span class="p">,</span> <span class="n">discount_percentage</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">price</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Price must be greater than zero: </span><span class="si">{</span><span class="n">price</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">discount_percentage</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Discount_percentage must be greater than zero: </span><span class="si">{</span><span class="n">discount_percentage</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">price</span> <span class="o">-</span> <span class="p">(</span><span class="n">price</span> <span class="o">*</span> <span class="n">discount_percentage</span> <span class="o">/</span> <span class="mi">100</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">TestClassCalculateDiscount</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># happy path</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">test_calculate_discount_with_10_discount_percentage</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">assert</span> <span class="n">calculate_discount</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span> <span class="o">==</span> <span class="mi">90</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">test_calculate_discount_with_20_discount_percentage</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">assert</span> <span class="n">calculate_discount</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span> <span class="o">==</span> <span class="mi">160</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">test_calculate_discount_with_0_discount_percentage</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">assert</span> <span class="n">calculate_discount</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="mi">50</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># unhappy path</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">test_calculate_discount_with_negative_price</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="n">pytest</span><span class="o">.</span><span class="n">raises</span><span class="p">(</span><span class="ne">ValueError</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="k">assert</span> <span class="n">calculate_discount</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">test_calculate_discount_with_negative_discount</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="n">pytest</span><span class="o">.</span><span class="n">raises</span><span class="p">(</span><span class="ne">ValueError</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="k">assert</span> <span class="n">calculate_discount</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>代码的确是整洁易读了，但话虽如此，我们要多写了很多的 test case.</p>
<p>如果 <code>calculate_discount</code> 变得更复杂，我们要写的 test case 肯定是更多更复杂，总不能都 copy-paste test case吧。</p>
<h3 id="parameterized-test"><span class="section-num">2.3</span> Parameterized Test</h3>
<p>话题就回到 Parameterized Test 了, 它就是用来解决这个问题的，它可以让你用不同的测试数据集会运行相同的测试逻辑.
还是以上面的代码为例子，你会发现 <code>test_calculate_discount_with_10_discount_percentage</code> 和 <code>test_calculate_discount_with_20_discount_percentage</code> 的测试逻辑是完全一样的，但只是数据集不同，所以我们就可以使用 Parameterized Test 来优化：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pytest</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">TestClassCalculateDiscount</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Parameterized test for valid cases (happy path)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@pytest.mark.parametrize</span><span class="p">(</span><span class="s2">&#34;price, discount, expected&#34;</span><span class="p">,</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">90</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">160</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">50</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">test_calculate_discount</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">discount</span><span class="p">,</span> <span class="n">expected</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">assert</span> <span class="n">calculate_discount</span><span class="p">(</span><span class="n">price</span><span class="p">,</span> <span class="n">discount</span><span class="p">)</span> <span class="o">==</span> <span class="n">expected</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Parameterized test for invalid cases (unhappy path)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@pytest.mark.parametrize</span><span class="p">(</span><span class="s2">&#34;price, discount&#34;</span><span class="p">,</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span>   <span class="c1"># Invalid price</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">)</span>    <span class="c1"># Invalid discount percentage</span>
</span></span><span class="line"><span class="cl">    <span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">test_calculate_discount_invalid_cases</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">discount</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="n">pytest</span><span class="o">.</span><span class="n">raises</span><span class="p">(</span><span class="ne">ValueError</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">calculate_discount</span><span class="p">(</span><span class="n">price</span><span class="p">,</span> <span class="n">discount</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>其实就是把测试逻辑和数据进行了分离，后面需要测试新的数据集，只需要向数据集里面添加数据即可。</p>
<p>由此可见，使用 Parameterized Test 有几个显而易见的好处：</p>
<p>首先是减少代码冗余，不需要类似的代码 copy-paste 很多次；其次是方便提到测试覆盖率，这个在上面的例子可能不明显，我们可以再修改一下 <code>calculate_discount</code> 函数，增加两个分支：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">calculate_discount</span><span class="p">(</span><span class="n">price</span><span class="p">,</span> <span class="n">discount_percentage</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">price</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Price must be greater than zero: </span><span class="si">{</span><span class="n">price</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">discount_percentage</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Discount_percentage must be greater than zero: </span><span class="si">{</span><span class="n">discount_percentage</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">price</span> <span class="o">&gt;</span> <span class="mi">50000</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">price</span> <span class="o">-</span> <span class="p">(</span><span class="n">price</span> <span class="o">*</span> <span class="p">(</span><span class="n">discount_percentage</span> <span class="o">*</span> <span class="mf">1.15</span><span class="p">)</span> <span class="o">/</span> <span class="mi">100</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">elif</span> <span class="n">price</span> <span class="o">&gt;</span> <span class="mi">100000</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">price</span> <span class="o">-</span> <span class="p">(</span><span class="n">price</span> <span class="o">*</span> <span class="p">(</span><span class="n">discount_percentage</span> <span class="o">*</span> <span class="mf">1.18</span><span class="p">)</span> <span class="o">/</span> <span class="mi">100</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">price</span> <span class="o">-</span> <span class="p">(</span><span class="n">price</span> <span class="o">*</span> <span class="n">discount_percentage</span> <span class="o">/</span> <span class="mi">100</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>价格超过50000, 在已有折扣基础上，再额外给折扣的15%作为折扣；价格超过100000，在已有折扣的基础上，再额外给折扣的18%作为折扣. 如果要覆盖这两个新的分支，只需要在数据集上添加大于50000 和大于100000的数据集，就可以直接覆盖到了.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nd">@pytest.mark.parametrize</span><span class="p">(</span><span class="s2">&#34;price, discount, expected&#34;</span><span class="p">,</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">90</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">160</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">50</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="mi">50001</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mf">44250.885</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="mi">100001</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mf">88500.885</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">test_calculate_discount</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">discount</span><span class="p">,</span> <span class="n">expected</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">calculate_discount</span><span class="p">(</span><span class="n">price</span><span class="p">,</span> <span class="n">discount</span><span class="p">)</span> <span class="o">==</span> <span class="n">expected</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后测试这段代码的时候，我又发现一个新的问题，这里的价格变成浮点数后，没有作小数点后几位的取整。</p>
<p>（对于这样简单的函数，也能不断地通过写 test case 发现新问题，这无疑就是 test case 最大的价值所在了）</p>
<p>使用 Parameterized Test 还可以提高测试代码的可读性和可维护性，这部分内容还是显而易见的，就不展开了。</p>
<h3 id="junit"><span class="section-num">2.4</span> Junit</h3>
<p>在Java的测试生态中，Junit是毫无疑问的龙头大哥，而在Junit5 ，Junit也引入了对 Parameterized Test 的支持，通过 <code>@ParameterizedTest</code> 这个枚举就可以将某个 test case 标注成 Parameterized Test, 通过 <code>@ValueSource</code> 传入待测试数据集：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">Numbers</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">isOdd</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">number</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">number</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="n">2</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nd">@ParameterizedTest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nd">@ValueSource</span><span class="p">(</span><span class="n">ints</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">3</span><span class="p">,</span><span class="w"> </span><span class="n">5</span><span class="p">,</span><span class="w"> </span><span class="o">-</span><span class="n">3</span><span class="p">,</span><span class="w"> </span><span class="n">15</span><span class="p">,</span><span class="w"> </span><span class="n">Integer</span><span class="p">.</span><span class="na">MAX_VALUE</span><span class="p">})</span><span class="w"> </span><span class="c1">// six numbers</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kt">void</span><span class="w"> </span><span class="nf">isOdd_ShouldReturnTrueForOddNumbers</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">number</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">assertTrue</span><span class="p">(</span><span class="n">Numbers</span><span class="p">.</span><span class="na">isOdd</span><span class="p">(</span><span class="n">number</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这只是最基本的用法，Junit还支持通过函数，枚举，CSV格式甚至文件来传入待测试数据集，可谓是包罗万有，具体的用法可以参考这篇文章：<a href="https://www.baeldung.com/parameterized-tests-junit-5">Guide to JUnit 5 Parameterized Tests</a><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> 和 <a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests">Junit官方文档</a> <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<h3 id="rstest-and-test-case"><span class="section-num">2.5</span> rstest &amp; test_case</h3>
<p>Rust 也有对Parameterized Test支持的库，一个就是 <a href="https://github.com/la10736/rstest"><code>rstest</code></a><sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>, 另外一个就是 <a href="https://github.com/frondeus/test-case"><code>test_case</code></a> <sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>, 两者都对 Parameterized Test 有较好的支持，在公司的代码库中，两者我都见过有项目在使用，而我在工作中使用的是 <code>rstest</code>, 因为它的功能更加强大，维护者也更加活跃.</p>
<h2 id="总结"><span class="section-num">3</span> 总结</h2>
<p>在了解 Parameterized Test 之前，我的每个CR基本都有 test case 覆盖，但是坐我旁边 Principle Engineer 巨佬 review 我代码的时候，总会说我的 test case 太 verbose 和 heavy, 我在想test case多还不好嘛，我的 code coverage 都超过80%了.</p>
<p>然而他的意思是，不是说我的 test case 没有覆盖到代码，我100行的变更，附上200行的 test case 也没有问题，只不过我的test case大多只是数据不一样，测试逻辑基本相同，能否抽象下，减少下code redundancy, 然后就强烈建议我去看下 <code>Parameterized Test</code> 以及 <code>Property Based Test</code>.</p>
<p>大佬的确一针见血，我的 test case 大多是复制已有的 test case, 修改下函数名，再加加减减改下数据集。</p>
<p>经他指点，在了解 <code>Parameterized Test</code> 之后，我的确再也没有复制 test case，每次CR的test case也更精简了，CR也更容易通过了.</p>
<p>而他提到的 <code>Property Based Test</code> 则是一项更强大的测试技术，下回再分解了。</p>
<p>系列文章:</p>
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%B8%80_%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E8%AE%A4%E7%9F%A5/">测试技能进阶(一): 软件质量认知</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%BA%8C_parameterized_tests/">测试技能进阶(二): Parameterized Tests</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%B8%89_property_based_testing/">测试技能进阶(三): Property Based Testing</a></li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://www.baeldung.com/parameterized-tests-junit-5">https://www.baeldung.com/parameterized-tests-junit-5</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests">https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="https://github.com/la10736/rstest">https://github.com/la10736/rstest</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p><a href="https://github.com/frondeus/test-case">https://github.com/frondeus/test-case</a>&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>区块链的完整性校验方案: Merkle Tree</title>
      <link>https://ramsayleung.github.io/zh/post/2024/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E5%AE%8C%E6%95%B4%E6%80%A7%E6%A0%A1%E9%AA%8C%E6%96%B9%E6%A1%88_merkle_tree/</link>
      <pubDate>Sat, 12 Oct 2024 18:22:00 -0700</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2024/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E5%AE%8C%E6%95%B4%E6%80%A7%E6%A0%A1%E9%AA%8C%E6%96%B9%E6%A1%88_merkle_tree/</guid>
      <description>1 前言 最近通过 Solidity-103 课程在学习 Solidity, 看到第36课 Merkle Tree 的时候着实头疼, 即使我已经了解 Merkle Tree 这数据结构，但是课程还是看得不明所以。 所以写下这篇文章，梳理我</description>
      <content:encoded><![CDATA[<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>最近通过 <a href="https://www.wtf.academy/docs/solidity-103">Solidity-103</a> 课程在学习 Solidity, 看到<a href="https://www.wtf.academy/docs/solidity-103/MerkleTree/">第36课</a> Merkle Tree 的时候着实头疼, 即使我已经了解 Merkle Tree 这数据结构，但是课程还是看得不明所以。 <br/></p>
<p>所以写下这篇文章，梳理我所理解的 Merkle Tree 及其用途，既加深自己的理解，又践行了<a href="https://ramsayleung.github.io/zh/post/2022/feynman_technique/">费曼学习法</a> <br/></p>
<h2 id="区块链与交易"><span class="section-num">2</span> 区块链与交易</h2>
<p>关于区块链的资料有非常多，我也不赘述了. <br/></p>
<p>简单理解，区块链是由一个一个区块构成的有序链表，每一个区块都记录了一系列交易，并且，每个区块都指向前一个区块，从而形成一个链条。区块链听起来很高级，其实就是个单链表。 <br/></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/blockchain.jpg"/> 
</figure>
 <br/></p>
<p>每个区块都会保存对应的交易信息，也会包含元数据信息在头部，包括前一个区块的 hash, 包含的交易数，merkle tree 的根节点 hash,时间戳等信息. <br/>
<img loading="lazy" src="/ox-hugo/block_detail.jpg" alt=""  />
 <br/></p>
<p>我们总说区块链是不可窜改，那么它究竟是怎么不可窜改的? <br/></p>
<p>如果用户想要验证某个区块的某笔交易是否被窜改，他要怎么做？ <br/>
最简单的方式自然是把整个区块的交易都下载下来，平均每个区块有1M的数据，验证起来肯定很费时间. <br/></p>
<p>是否有一个验证方案，可以使用很小的数据集就完成验证? <br/></p>
<p>有的，那就是 Merkle Tree. <br/></p>
<h2 id="merkle-tree"><span class="section-num">3</span> Merkle Tree</h2>
<p>那什么是 Merkle Tree? <br/></p>
<p>假如我们有8笔交易被包含在区块中, 每笔交易都可以通过 hash 函数计算出一个 hash 值: <br/></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/8transactions.jpg"/> 
</figure>
 <br/></p>
<p>哈希值也可以看做数据，所以可以把 <code>h1</code> 和 <code>h2</code> 拼起来， <code>h3</code> 和 <code>h4</code> 拼起来, 依此类推，再计算出哈希值 <code>b1</code> 和 <code>b2</code> <br/></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/merkle_tree_layer_two.jpg"/> 
</figure>
 <br/></p>
<p>递归计算下去，直到计算结果只有一个 hash 值，这个就是所谓的 merkle root, 而 h1-h8 就是所谓的 <code>leaf node</code>, 两者之间的就是 <code>non-leaf node</code>. <br/></p>
<p>交易数量恰好是偶数能这么算，如果是奇数，那要怎么算呢？这个时侯，只需要把最后一个 hash 值复制一份，也能算出最终的 merkle root： <br/></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/odd_leaf_merkle_tree.jpg"/> 
</figure>
 <br/></p>
<h2 id="merkle-tree-validation"><span class="section-num">4</span> Merkle tree validation</h2>
<p>现在有了 Merkle Tree, 如果我们要验证区块中的交易是否被修改，要怎么算呢？ <br/></p>
<p>最简单粗暴的方式肯定是把区块所有的交易下载下来，从头重组整棵 Merkle Tree, 8笔交易计算起来还可以，如果是几千笔呢？几百万笔呢？甚至几亿笔交易呢？ <br/></p>
<p>重组 Merkle Tree 的时间复杂度是 O(N), 如果是1亿笔交易，这意味着你要计算1亿次，太慢了。 <br/></p>
<p>但是，如果我们利用 Merkle Tree 的特性，从数学的角度，我们只需要少量的Merkle Proof(你可以理解成需要提供的验证数据集), 就可以完成验证. <br/></p>
<p>回到上文的 Merkle Tree, 假如我们要验证 <code>tx2</code> 是否被窜改，我们需要有 Merkle Tree Root 和 Merkle Proof: <br/></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/merkle_proof.jpg"/> 
</figure>
 <br/></p>
<p>假设现在我们有 <code>tx2</code> 的交易数据，我们只需要 Merkle Proof 提供3个hash 值(图中的绿色部分)，然后我们只计算4次（橙色部分），就会算出 Merkle Root Tree 的值，用来和区块头部的 Merkle root 值进行比对。 <br/></p>
<p>通过 Merkle Proof 提供的数据集，我们就可以把下载8笔交易，计算15次hash，优化成只需3个 hash 值，以及计算4次hash，时间复杂度从O(N)降低成O(logN). <br/></p>
<p>这个比对似乎不明显，但是以1亿交易为例的话，log(1_000_000_000) ~= 27, 也就是只需要 Merkle Proof 提供27个 hash 值即可, 巨大的性能提升. <br/></p>
<h2 id="区块链的不可窜改性"><span class="section-num">5</span> 区块链的不可窜改性</h2>
<p>通过Merkle tree root可以保证交易的不可窜改性，而区块 hash 又能保证区块头部的元数据不被窜改. <br/></p>
<p>因为每个区块都有区块 hash, 区块hash是通过计算头部元数据信息计算出来的: <br/></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/block_hash.jpg"/> 
</figure>
 <br/></p>
<p>只要修改了其中一个元数据值，那么 block hash 就会发生变化，而区块链就是一个单链表，通过后一个区块通过 <code>prev_hash</code> 指向前一个区块，如果 block hash 发生变化，那么后一个区块就无法正确指向前一个区块了，这个链就断了. <br/></p>
<p>如果一个恶意的攻击者修改了一个区块中的某个交易，那么Merkle Hash验证就不会通过。 <br/></p>
<p>所以，他只能重新计算Merkle Hash，然后把区块头的Merkle Hash也修改了。 <br/></p>
<p>这时，我们就会发现，这个区块本身的Block Hash就变了，所以，下一个区块指向它的链接就断掉了, 他就要把后续所有区块全部重新计算并且伪造出来，才能够修改整个区块链； <br/></p>
<p>而要修改后续所有区块，这个攻击者必须掌握全网51%以上的算力才行。 <br/></p>
<p>理论上可行，但是实操难度非常非常非常大. <br/></p>
<h2 id="merkle-tree-版本管理中的应用"><span class="section-num">6</span> Merkle Tree 版本管理中的应用</h2>
<p>除去区块链，Merkle Tree还被应用于类似 Git 和 Mercurial 这样的版本管理系统中，以Git为例, 假如我们Git项目内有4个文件: <br/></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/git_merkle_tree.jpg"/> 
</figure>
 <br/></p>
<p>当你push 代码到远程分支或者从远程分支 pull 代码的时候，Git就计算你的Merkle Tree Root 的值, 比较远程分支的Merkle Tree Root和本地分支的Merkle Tree Root 是否相同: <br/></p>
<p>如果相同，那就不用更新了；如果不同的话它就会检查左节点或者右节点，并且递归下去， <br/>
直到找到是哪些文件发生了修改，只通过网络传输修改部分的内容, 以提高传输效率. <br/></p>
<p>不过Git实际用的是Merkle Tree的变体，并不是直接使用Merkle Tree. <br/></p>
<p>除些之外, Merkle Tree 还在 Cassandra, DynamoDB 这样的NoSQL数据库中被用于检查不同节点数据的一致性, 细节可以看下这个 <a href="https://stackoverflow.com/questions/5486304/explain-merkle-trees-for-use-in-eventual-consistency">Stackoverflow 问题</a>。 <br/></p>
<h2 id="参考"><span class="section-num">7</span> 参考</h2>
<ul>
<li><a href="https://alexromanov.github.io/2022/06/19/bchain-test-7-merkle-tree/">Blockchain for Test Engineers: Merkle Trees</a> <br/></li>
<li><a href="https://medium.com/geekculture/understanding-merkle-trees-f48732772199">Understanding Merkle Trees</a> <br/></li>
<li><a href="https://stackoverflow.com/questions/5486304/explain-merkle-trees-for-use-in-eventual-consistency">Explain Merkle Trees for use in Eventual Consistency</a> <br/></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>测试技能进阶(一): 软件质量认知</title>
      <link>https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%B8%80_%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E8%AE%A4%E7%9F%A5/</link>
      <pubDate>Sat, 12 Oct 2024 10:30:00 -0700</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%B8%80_%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E8%AE%A4%E7%9F%A5/</guid>
      <description>1 前言 最近几个月都在赶个非常重要项目，基本每天或每几天都要提交CR，而因为每个CR都要附上对应的 test case, 所以这段时间写了非常多的 test case, 又在坐我旁边</description>
      <content:encoded><![CDATA[<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>最近几个月都在赶个非常重要项目，基本每天或每几天都要提交CR，而因为每个CR都要附上对应的 test case, 所以这段时间写了非常多的 test case, 又在坐我旁边的 Principle Engineer 巨佬身上学到了很多有用的测试技巧，所以就想写个系列文章总结和分享我所学到的新技能。</p>
<h2 id="why"><span class="section-num">2</span> Why</h2>
<p>有个很著名的思考方式，叫黄金圈法则, 简而言之，就是对于某件事找到Why，How，What：</p>
<p>我为什么要做，我怎么做，做这件事的结果是什么？</p>
<p>所以我就先来聊聊为什么要写测试case，或者说为什么是软件开发写测试case，后续的文章再来聊聊How.</p>
<h2 id="软件质量文化"><span class="section-num">3</span> 软件质量文化</h2>
<p>关于软件工程师来写测试 case, 最有名的应该是Google，他们就是推崇由软件工程师来写测试case，而他们的测试文化已经成为谷歌的工程文化的重要组成部分。</p>
<p>Google的工程师也前后写了两本书来布道他们的测试文化/工程文化, 也非常推荐阅读:</p>
<ul>
<li><a href="https://book.douban.com/subject/25742200/">Google软件测试之道</a> <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></li>
<li><a href="https://book.douban.com/subject/35838155/">Google软件工程</a> <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></li>
</ul>
<p>毕业以后待过几家大公司，这几家公司的文化各有不同，但就我所供职过的部门而言，对于测试，他们都有着相同的观点：
不应该也不会有所谓的测试工程师，每个软件开发都应该为自己的代码编写测试，并保证质量.</p>
<p>其中微信支付基本就是在践行《Google软件测试之道》的理念，推广微信支付自己的测试文化，强调测试左称，面向测试设计等等。</p>
<p>Amazon 内部的测试文化也是和Google 相当类似，只是远没有Google出名.</p>
<p>不知道是因为Amazon的测试文化是受Google所影响, 讲究先来后到, 主客分明; 还是Amazon的开源项目或者技术影响力没有Google高，导致Amazon 工程文化没有Google出名，又或是因为Amazon工程师在血汗工厂打工，忙着赶需求，没有时间写书布道, 所以不为人所知呢.</p>
<p>这种文化背后，是对软件开发与质量测试密不可分的认知：</p>
<h3 id="职责"><span class="section-num">3.1</span> 职责</h3>
<p>首先，每个工程师，都应该为他们的代码编写测试用例，
这个工作本身就是研发流程的一部分，而质量保障又是软件开发生命周期非常关键的一步，
如果写出来的功能充满问题，这样的功能再多，开发得再快又有什么意义呢。</p>
<h3 id="ci-cd"><span class="section-num">3.2</span> CI/CD</h3>
<p>所以我现在所在S3部门而言，要求每个CR都要有对应的测试用例来保证CR代码的质量，因为代码合并到主干之后，
就会被 Continuous Deployment 自动部署上线，所以要求每个提到的CR都是 production-ready的</p>
<p>软件工程师自己编写测试配合CI/CD就可以更早更快地发现问题，并且由软件工程师快速完成修复, 降低反馈周期, 提高开发效率.</p>
<h3 id="成本"><span class="section-num">3.3</span> 成本</h3>
<p>其次，沟通是有成本的，如果存在测试工程师，软件工程师就要给测试工程师交待清楚业务功能是什么，
这次的改动要测什么功能，预期结果是什么，沟通成本就相当高，你可能还需要通过文档或者工单将测试内容呈现给测试工程师。</p>
<p>如果软件工程师都能把这些东西解释清楚，那为什么不自己把测试用例写完呢, 何必劳心劳力去写工单呢？</p>
<h3 id="面向测试设计"><span class="section-num">3.4</span> 面向测试设计</h3>
<p>虽然Test-Driven Development(TDD)的开发理念不一定所有人都认同, 但是让软件开发工程师来编写测试用例，能让软件工程师有测试先行，设计测试友好接口的认知, 反过来又会对其接口设计能力有新的要求.</p>
<h3 id="敏捷开发"><span class="section-num">3.5</span> 敏捷开发</h3>
<p>总结下来，让软件工程师对质量负责，自己编写测试用例, 是确保团队能敏捷开发(move fast), 又能确保软件质量的关键手段</p>
<h2 id="总结"><span class="section-num">4</span> 总结</h2>
<p>每个人对于测试技巧的认知并不一样，像单元测试，集成测试这类测试，
在我个人认知里，是属于每个软件工程师都需要掌握的基础技能，就不在「进阶」之列。</p>
<p>而像混沌测试(Chaos Monkey) 这样的测试, 自然属于进阶测试的一部分，但是因为其与公司的基础架构强耦合;</p>
<p>在微信支付的时候，同组的一位同事就专项负责先驱搞整个微信支付的混沌测试，
前后搞了1年半还在开发，都是和运维团队以及基础组件团队密切合作来开发混沌测试功能的，
无法用示例代码来直观呈现，所以也不会列入这个系列。</p>
<p>这系列文章更专注于日常开发中，每个软件工程师都有机会用上的测试技巧.</p>
<p>系列文章:</p>
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%B8%80_%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E8%AE%A4%E7%9F%A5/">测试技能进阶(一): 软件质量认知</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%BA%8C_parameterized_tests/">测试技能进阶(二): Parameterized Tests</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%B8%89_property_based_testing/">测试技能进阶(三): Property Based Testing</a></li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://book.douban.com/subject/25742200/">https://book.douban.com/subject/25742200/</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://book.douban.com/subject/35838155/">https://book.douban.com/subject/35838155/</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>悼念我家的狗</title>
      <link>https://ramsayleung.github.io/zh/post/2024/%E6%82%BC%E5%BF%B5%E6%88%91%E5%AE%B6%E7%9A%84%E7%8B%97/</link>
      <pubDate>Wed, 02 Oct 2024 11:54:00 -0700</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2024/%E6%82%BC%E5%BF%B5%E6%88%91%E5%AE%B6%E7%9A%84%E7%8B%97/</guid>
      <description>1 缘起 老家是在广东农村，现在还会有养狗看家护院的习俗，虽然看家的作用有多大尚且未知，但是终归是聊胜于无，半是护院，半是陪伴。 一般是有其他养狗</description>
      <content:encoded><![CDATA[<h2 id="缘起"><span class="section-num">1</span> 缘起</h2>
<p>老家是在广东农村，现在还会有养狗看家护院的习俗，虽然看家的作用有多大尚且未知，但是终归是聊胜于无，半是护院，半是陪伴。 <br/></p>
<p>一般是有其他养狗人家的狗产崽之后，然后拿回来家里开始养，所以养的自然是不会是宠物狗，是所谓的土狗，戏称为「田园犬」. <br/></p>
<p>也不会有专门的狗粮，而是给它们喂米粮，或是和人吃一样的米饭，或是专门去买稍次一些的米，煮给它们吃。 <br/></p>
<h2 id="经过"><span class="section-num">2</span> 经过</h2>
<p>昨天和妈妈视频聊天，闲谈间就聊到了我家的狗子，妈妈说现在不用煮多少米给它们吃了，我问为什么? <br/></p>
<p>毕竟我记得家里一只狗一顿都差不多要吃半斤米饭. <br/></p>
<p>妈妈说，有两只狗被人偷狗不成，被毒死了, 一只是不到一年大的狗，另外一只是养了好多年的白色母狗. <br/></p>
<p>在凌晨时段，偷狗贼来我家附近偷狗, 狗声大作，我爸出去查看，灯光和声音吓走了贼人, 他没来得及带走狗. <br/></p>
<p>我爸前去查看狗的状况，母狗很快就瘫软在地，不一会就生机全无了; 另外一只狗不见踪影，我妈一直在寻觅，几天后, 对狗仍抱有希望的我妈在附近找到了尸体. <br/></p>
<h2 id="印记"><span class="section-num">3</span> 印记</h2>
<h3 id="贪吃"><span class="section-num">3.1</span> 贪吃</h3>
<p>常年离家的我对那只一年大的狗，脑海没有留下太多印象, 没有过太多交集，而另外一只白色母狗， <br/>
我已经记不清养了多久年，大概是我大学时期就已经在我家了，它给我留下最大的特点就是贪吃。 <br/></p>
<p>农村的土狗都贪吃嘛，因为总是吃不饱，这有什么新奇的? <br/></p>
<p>不过我家的狗一般都有一日两餐，我妈有时候还会把去村宴打包回来的饭菜给它们吃，所以我家的狗终究还是能落个饱腹的, 妈妈甚至有时会责怪它们吃腻了，给它们米饭都不吃了。 <br/></p>
<p>而这白色的母狗贪吃的最大特点就是爱吃零食，尤其喜欢吃甜食，听起来有点难而置信，一只狗会喜欢吃甜食. <br/></p>
<p>但是事实的确如此, 无论零食还是水果，它都喜欢。 <br/></p>
<p>屋子旁边有棵十几年树龄的龙眼树，前些年收成好的时候，树上都挂满龙眼，核小肉实还很甘甜，甚至品质比水果摊的还要好. <br/></p>
<p>家人夏天收获龙眼的时候，有时朋友也会过来，大家就坐在屋旁围坐着吃刚摘下来的龙眼， <br/>
它也喜欢过来湊热闹，家人就会开玩笑地帮忙把壳剥了，把果肉放在地上，它究竟就上来吃，还知道把核吐出来, 大家才开始知道它真的吃水果。 <br/></p>
<p>它甚至还知道怎么吃小块甘蔗, 把汁水在嘴里吮吸完之后，还会把渣吐出来。 <br/></p>
<p>以前在深圳打工的时候，妈妈和我聊天的时候还会聊到这只贪吃的狗，说它又凑过来想要吃的. <br/></p>
<p>电话那头的我自然是不信的, 只会觉得这是妈妈和我聊天的谈资. <br/></p>
<h3 id="饼干"><span class="section-num">3.2</span> 饼干</h3>
<p>我家这边的吃席习俗，比如红白事或者是生日宴，客人带些饼干水果作为贺礼， <br/>
主人家一般会把散席前给客人人手一袋礼品作为回礼，里面基本会有饼干, 坚果, 花生. <br/></p>
<p>因为我爸人缘比较好，总会有朋友邀请他参加村宴，所以他总能带些回礼回家，被妈妈放在蓝罐曲奇的铁皮盒子. <br/>
只是他们都不是很喜欢吃这些零食，这些饼干就在敞开的曲奇盒子放着，静静地在茶桌上躺着。 <br/></p>
<p>当我回家，百无聊赖的时候，就会拿起一两包盒中的饼干，就着电视中播着的抗日神剧，消磨着闲暇的时光. <br/></p>
<p>白色的母狗它就会湊过, 也不叫，也不闹，也不会像宠物狗那样把爪子搭到我身上， <br/>
只是用它的大眼睛静静地看着我，我被它看得有点不好意思，想起妈妈给我说起过的，关于它贪吃的事，寻思着它不会也想吃饼干嘛？ <br/></p>
<p>我试探着把一块饼干抽出来，放在地上，它走过去，朝着饼干低下头, 嗅了嗅，又抬头看了下正在吃饼干的我，然后我看它把饼干叼到一边，叼着饼干时, 就抬起头把饼干向嘴里送. <br/></p>
<p>原来妈妈说得是真的，它是真的贪吃. <br/></p>
<h3 id="花生"><span class="section-num">3.3</span> 花生</h3>
<p>我很喜欢吃花生，尤其是农家的盐水花生，就着电视剧或者视频，可以一两个小时不停嘴。 <br/></p>
<p>妈妈知道我有这么个小嗜好，就会去市场上买些花生回来，只用盐水煮熟，不加其他香料， 然后晒干，等我回家的时候可以吃，或者在我回深圳时，让我装一大包带回去。 <br/></p>
<p>有一次在家，我照例在桌上剥着花生吃，然后它又走过来，看着我，我在想，花生你也吃么？ <br/></p>
<p>就把一枚花生剥开，里面有两粒仁，我吃了一粒，然后把另外一粒放在凳子上，它走过来, 把头侧转, 贴着凳子，伸出舌头一卷，就把花生卷走了. <br/></p>
<p>从此之后，我吃花生总是喊上它，我来剥花生，我和它一起吃；有一粒花生仁，我自己吃；有两粒花生仁，我和它一人一粒; 有三粒仁，我吃两个粒, 它吃一粒，毕竟我动手剥花生了. <br/></p>
<p>后面发现，它不但吃花生，连月饼也吃，去年中秋的时候，家人分食月饼时，也给了它一小块. <br/></p>
<p>当你吃东西，它也想吃的时候, 它不会吵，也不会闹，就是静静地看着你; <br/></p>
<p>而当你东西吃完，开始收拾时，跟它说，没有了，吃完啦。 <br/></p>
<p>它也不会缠着你不走, 期望索求更多，而是会静静地走开。 <br/></p>
<p>所以我有时候看到它，我会在想，我不知道我人生追求的是什么，但是它肯定是追求好吃的, 和去码头整点薯条的海鸥是一样的，简单又容易满足。 <br/></p>
<h2 id="现实"><span class="section-num">4</span> 现实</h2>
<p>它虽然贪吃，但是也非常谨慎，并不是谁给的东西都吃，我姐姐给它的食物，它就基本不吃，可能是我姐姐曾经呵斥过它. <br/></p>
<p>即使我给它东西吃，它也要见我吃过，它才会下嘴. <br/></p>
<p>谨慎如它，陌生人给的东西，它自然是不会吃的. <br/></p>
<p>自我有记忆起，家里就一直有养狗，挥之不去的就是觊觎将狗换成钱财的偷狗贼. <br/></p>
<p>之前偷狗的方式大概是两种，一种是强行虏走, 一般两人作案，一人驾车，一人在后座带有绳套，当狗靠近吠叫时，后座之人将绳索套在狗上，另一人快速驾车逃离, 但如果狗不靠近就难以成行. <br/></p>
<p>另外一种就是投铒，就是把抹有迷药的熟肉投给狗，如果狗不慎吃了就会被带走, 如果狗不吃就自然无法上钩 <br/></p>
<p>随着时代发展，现在出现新的偷狗方式，用类似弓弩射毒针，然后再捡尸体, 即使谨慎如它，也难以幸免. <br/></p>
<p>虽然这已经不知道是我家失去的第几只狗了，但是我还是难忍悲伤. <br/></p>
<p>我才意识到，因为家里的狗总是在身边，父母也不像养宠物那样有给它们起名的习惯，只是以特征代称，它甚至没有名字. <br/></p>
<p>想起之前有人描述悲伤的感觉, 亲朋离去的那一瞬间通常不会使人感到悲伤，而真正会让你感到悲痛的是打开冰箱的那半盒牛奶、 <br/>
那窗台上随风微曳的绿萝、那安静折叠在床上的绒被，还有那深夜里洗衣机传来的阵阵喧哗。 <br/></p>
<p>想来，当我再回到家中，看着敞开的饼干盒，我一定会止不住想起那个在树下和它吃饼干的午后. <br/></p>
<p>谨以此文悼念它吧. <br/></p>
<p><video width="320" height="240" controls><source src="/ox-hugo/my_family_dog1.mp4" type="video/mp4">
Your browser does not support the video tag.</video></p>
<p><video width="320" height="240" controls><source src="/ox-hugo/my_family_dog2.mp4" type="video/mp4">
Your browser does not support the video tag.</video></p>
]]></content:encoded>
    </item>
    <item>
      <title>我和「异端邪教」摩门教的交集</title>
      <link>https://ramsayleung.github.io/zh/post/2024/%E5%BC%82%E7%AB%AF%E6%91%A9%E9%97%A8%E6%95%99%E7%9A%84%E4%BA%A4%E9%9B%86/</link>
      <pubDate>Sat, 28 Sep 2024 09:52:00 -0700</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2024/%E5%BC%82%E7%AB%AF%E6%91%A9%E9%97%A8%E6%95%99%E7%9A%84%E4%BA%A4%E9%9B%86/</guid>
      <description>1 周处除三害 前段时间，看了部很有后劲的好电影，名为《周处除三害》，电影里面不少情节都在脑海余音绕梁，久久不散。 大概情节是通缉犯陈桂林在逃亡藏</description>
      <content:encoded><![CDATA[<h2 id="周处除三害"><span class="section-num">1</span> 周处除三害</h2>
<p>前段时间，看了部很有后劲的好电影，名为《周处除三害》，电影里面不少情节都在脑海余音绕梁，久久不散。 <br/></p>
<p>大概情节是通缉犯陈桂林在逃亡藏匿中失去最后一个亲人，同时得知自己只有不到三个月的生命。 <br/></p>
<p>万念俱灰的他原打算投案自首，可是当发现他在三大通缉犯中仅仅排名第三时，内心突然躁动起来。 <br/></p>
<p>在此之后，他决定仿效古时候周处除三害的故事，临终之际要在江湖上留下他的传奇名号, 于是踏上追杀榜二和榜一大哥的征途。 <br/></p>
<p>榜二大哥是个凶残，狡诈的香港黑帮老大，陈桂林历经艰险，自损八百，身负重伤，才除掉了榜二大哥。 <br/></p>
<p>榜二都这么难处理，观众自然会觉得榜一大哥肯定就是更难的BOSS, 没想到陈桂林在追踪榜一大哥的过程中，误入一间偏僻的教会。 <br/></p>
<p>在这间教会里，陈病情加剧，在教会尊者的开悟下，他放下执念，打算了却余生，没想到病情却因此好转。 <br/></p>
<p>电影画面也越发清新亮丽，预示着即将迎来 Happy ending。 <br/></p>
<p>然而，在机缘巧合之下，陈偶然发现整个教会都是个骗局，为人开悟的尊者竟然是榜一大哥，整个教会都沦为被洗脑的邪教组织。 <br/></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/loss_everything.jpg"/> 
</figure>
 <br/></p>
<p>于是陈便在教会的圣歌声中，对冥顽不灵的教徒大开杀戒，最后向警方自首。 <br/></p>
<h2 id="缘起"><span class="section-num">2</span> 缘起</h2>
<p>我像往常一样，下午戴着耳机，听着播客，去附近的公园跑步, 我大抵是记不清当时听的是哪个播客了。 <br/></p>
<p>迎面走来两个穿着衬衫，西装裤，打着领带，学生打扮的年轻白人, 向我打招呼。 <br/></p>
<p>我还以为他们是问路，戴着耳机听不清，摘下耳机就再问了一下，然后就交谈了起来。 <br/></p>
<p>他们问我是哪里来的，我觉得有点突兀，但还是答道： <br/></p>
<p>I&rsquo;m orignally from China, 毕竟也没啥好隐瞒的. <br/></p>
<p>他们就开始用略生疏，但流畅的中文和我聊天，我相当惊讶，这两个看起来只有20岁的年轻金发碧眼的白人小哥，还会说中文， <br/>
难免好奇，就走到旁边的椅子坐下，和他们聊了起来。 <br/></p>
<p>反正就当成口语聊天，我是不介意和别人聊天的，然后出现了他们和我说中文，我和他们说英文的奇怪画面。 <br/></p>
<p>可能他们中文不如我英文流利，他们更习惯用英文，后面他们就切换回英文，更顺滑地聊了起来。 <br/></p>
<p>他们介绍自己是传教士(missioner), 1年多前刚刚高中毕业，从美国犹他州来这里是传教的，传教满两年就会回去继续上大学。 <br/></p>
<p>难怪他们这么年经，才高中毕业嘛，这就是美国学生所谓的 gap year，高中毕业之后可以先不去上大学，先玩个1-2年，只是眼前这两位年轻人是用来传教了，难免心生敬意。 <br/></p>
<p>他们还透露，他们未来一个想当科学家，一个想当飞行员，因为飞行员英文(pilot) 和海盗(pirate) 发音非常近，我听到了 pilot 之后愣了一下，然后笑了起来，可能那位说想当飞行员的小哥担心我误会了，还用中文说了飞行员。 <br/></p>
<p>话题后面就回到我好奇的为什么他们会中文的事情上，他们说是因为抽到了来温哥华传教，温哥华华人很多，所以就学了中文。 <br/></p>
<p>看着他们清澈的眼神，想着两年不到的时间，为了传教，就可以把中文学习到能流畅交流的程度，真的是虔诚又好学阿。 <br/></p>
<p>既然他们是传教士，话题自然会绕到宗教上， <br/>
他们就邀请我去周日的洗礼和圣餐去，想来无事，并且对新鲜事物好奇，加之对这两位年轻帅气的白人小哥很有好感，就欣然答应，并交换了手机号码。 <br/></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/the_sacrament.jpg"/> 
</figure>
 <br/></p>
<h2 id="圣餐"><span class="section-num">3</span> 圣餐</h2>
<p>在周日九点半去到教堂，教堂外面看起来不大，远没有想象上的宏大，坐落在一片民居之中 <br/></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/church1.jpg"/> 
</figure>
  <br/></p>
<p>我因为不熟悉，加之在周围逛了下，到的时候已经过了9点半了，给其中一位小哥发消息也没有见到回复，只好进去教堂里面自己四处逛。 <br/></p>
<p>可能是我的目光过于好奇，暴露了我是第一次来的事实，就有个黑人小姐姐过来和我聊起来，问我要去哪个组(group/room)，我也不知道阿。 <br/></p>
<p>只好描述了一下其中一位小哥的特征，黑人小姐姐就把我领到个全是华人的房间，听口音，是台湾人，香港人和大陆同胞都有。 <br/></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/church2.jpg"/> 
</figure>
 <br/></p>
<p>当时在进行的活动类似是倾诉分享环节，听起来是每个月一次，每个人分享自己的对经文学习或最近生活经历，前后大概有10个教众上台分享了。 <br/></p>
<p>每个分享的结尾都以房间内所有教众的「阿门」结束，台下坐着的我还是没有习惯口称上帝，难免有种「配合你演出的我演视而不见」的感觉 <br/></p>
<p>其中有两位教众分享，说着说着都哽咽起来了，这场面难免让我想起《周处除三害》的画面，我表情肃穆，内心却在笑。 <br/></p>
<p>在一位年轻女教众的钢琴伴奏下，众人齐唱圣歌《愿主差遣》（I’ll Go Where You Want Me to Go），历时一小时的分享结束。 <br/></p>
<p>虽然教众唱的是《愿主差遣》，但是我脑海里面响起的却是《周处除三害》陈桂林教堂屠杀时教众唱的《新造的人》， <br/>
这电影画画真的是刻在我脑子了。 <br/></p>
<p>分享会结束后，部分教众离去，剩下的教众参加接下来的经文学习，我见无事，便继续留下了。 <br/></p>
<p>经文课上，大家拿出来的是《摩尔门经》，慢着，我虽然对基督教不是非常熟悉，但是也知道你们读的是《圣经》，这是啥经，你们这是啥教。 <br/></p>
<p>然后牧师开始讲经文的类似排比句的写作手法，大概是通过反复强调相似的句型，来加深读者的印象并传递宗教教义。 <br/></p>
<p>话虽如此，但是你拿本翻译成中文的经书，讲原版《摩尔门经》的修辞结构，你没意识到有哪里不对劲么？ <br/></p>
<p>万一译者水平不够，或者没有意识到这种词法，没有翻译过来，那中文翻译不就没有这种词法了嘛。 <br/></p>
<p>这看起来太草台班子了，加之《周处除三害》中邪教的影响，我还是走为上着，便借口有约，离开了。 <br/></p>
<h2 id="摩门教"><span class="section-num">4</span> 摩门教</h2>
<p>我本来对宗教不感兴趣，只对人感兴趣。 <br/></p>
<p>回来之后，我去查了维基百科，这个以《摩尔门经》为经书的宗教，名为是摩门教，是个被主流基督教徒认为是「异端邪教」(cult)的教会。 <br/></p>
<p>摩门教(Mormons), 除了相信受普遍基督教和天主教所相信及承认的圣经以外，他们也相信《摩尔门经》是神所启示另外的经文。 <br/></p>
<p>概括来说，摩门教就是个基督教和美洲文明融合，本土化的宗教。 <br/></p>
<p>了解宗教的朋友可能会问，耶稣和基督教不是起源于中东-耶路撒冷嘛，和美洲有什么关系？ <br/></p>
<p>摩门教的先知美国人约瑟·斯密说《摩尔门经》是翻译自金页片，该页片纪录了公元前约600年到公元420年间在古代美洲大陆中一古代文明事迹。 <br/></p>
<p>这位约瑟·斯密说，1820年，他在纽约的树林中，看到天父和耶稣降落，后面还被复活的古代美洲先知摩罗乃拜访，告知其「金页片」的下落。 <br/></p>
<p>约瑟·斯密取出「金页片」，进行了翻译，在翻译完成后，摩罗乃就收回了「金页片」，所以现在已没有了金页片的原件了&hellip; <br/></p>
<p>都19世纪了，还搞先知降临。 <br/></p>
<p>按照他们的教义规定，他们禁止喝酒、抽烟、喝茶、喝咖啡以及婚前性行为，听起来相当保守和原教旨主义嘛. <br/></p>
<p>但是摩门教推崇多重婚姻（一夫多妻制）: <br/>
约瑟·斯密称在他研究旧约圣经时希望得知神为什么容许先知亚伯拉罕，摩西，大卫和所罗门拥有许多妻子， <br/>
而后约瑟·斯密称他得到神的回复说那是因为祂吩咐他们. <br/></p>
<p>因为一夫多妻制，摩门教还被美国法院定义成邪教，即使「宗教自由」和「宪法保护」的辨护都打不动， <br/>
被法院解散了教会的法人组织，指示要把教会所有财产都收归政府所有。 <br/></p>
<p>直到当时的摩门教领袖官方声明禁止多重婚姻，才和政府和解。 <br/></p>
<p>也难怪摩门教会被基督徒认为是「邪教」. <br/></p>
<p><strong><strong>如果有摩门教的教徒看到我这篇文章，对我将摩门教称为「邪教」有所不满, 我只是引用基督徒的主流观点和美国最高法院的判决，有气请往他们撒</strong></strong> <br/></p>
<h3 id="伏笔回收"><span class="section-num">4.1</span> 伏笔回收</h3>
<p>摩门教的大本营就是美国犹他州，前面的两个年轻传教士就是犹他州来的。 <br/></p>
<p>当初摩门教在美国被认为是「邪教」，所以传教士们便到欧洲传教. <br/></p>
<p>结果，在欧洲的传教士们成功地吸引了大批大批的新信徒，这些人里有很多都跟随者传教士们，漂洋过海地来到了美国，迅速壮大着摩门教的队伍。 <br/></p>
<p>于是，摩门教便形成了一个传统：大多数美国的摩门教信徒都会学习一门外语，去其他国家传教两年，而且这样的异国传教，大多都是自费的 <br/></p>
<p>这下好了，都对应上了，世界线都回收了。 <br/></p>
<h2 id="后续"><span class="section-num">5</span> 后续</h2>
<p>了解摩门教之后，我对其就完全失去兴趣了。 <br/></p>
<p>从某种角度来说，这个教会和当初洪秀全在太平天国建立的「拜上帝教」并没有什么本质的差别，都是基督教本土化后的产物，新瓶装旧酒。 <br/></p>
<p>只是没有想到，这位传教士就这么纠缠上我了，前面提到我和他交换了手机，接下来一个月的时间，不停给我发消息，打电话，真的是缠上了: <br/></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/missinor_message.jpg"/> 
</figure>
  <br/></p>
<p>还好他不知道我的更多信息，如果他知道我的住址，估计要上门来敲门了。 <br/></p>
<p>感谢陈桂林，敲起了我对邪教的警钟。 <br/></p>
<p>一首《新造的人》, 继续给大家敲钟. <br/></p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/KBmNvThjE9Q" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

]]></content:encoded>
    </item>
    <item>
      <title>使用Rust的Iterator优雅解决FizzBuzz问题</title>
      <link>https://ramsayleung.github.io/zh/post/2024/%E4%BD%BF%E7%94%A8rust%E7%9A%84iterator%E8%A7%A3%E5%86%B3fizzbuzz%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 18 Sep 2024 22:46:00 -0700</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2024/%E4%BD%BF%E7%94%A8rust%E7%9A%84iterator%E8%A7%A3%E5%86%B3fizzbuzz%E9%97%AE%E9%A2%98/</guid>
      <description>1 前言 按照维基百科的说法，FizzBuzz问题 是一个简单但是常见的面试编程问题（可能以前常见，现在都是考Leetcode了,这种连Easy 都</description>
      <content:encoded><![CDATA[<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>按照维基百科的说法，<a href="https://en.wikipedia.org/wiki/Fizz_buzz">FizzBuzz问题</a> 是一个简单但是常见的面试编程问题（可能以前常见，现在都是考Leetcode了,这种连Easy 都不算了），这个问题的要求如下： <br/></p>
<ol>
<li>写一个程序，输出从1到100的数字 <br/></li>
<li>对于3的倍数，不输出数字，而是输出 &ldquo;Fizz&rdquo; <br/></li>
<li>对于5的倍数，不输出数字，而是输出 &ldquo;Buzz&rdquo; <br/></li>
<li>对于即是3的倍数又是5的倍数的数字（即15的倍数），打印 &ldquo;FizzBuzz&rdquo; <br/></li>
</ol>
<h2 id="常规解法"><span class="section-num">2</span> 常规解法</h2>
<p>问题非常简单，刚学编程的学生都可以写出符合要求的代码，下面是 Rust 的常规解法： <br/></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="mi">0</span><span class="o">..=</span><span class="mi">100</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">5</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;FizzBuzz&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;Fizz&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">5</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;Buzz&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;</span><span class="si">{i}</span><span class="s">&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这个没有什么太多可说的，就是直接按需求翻译代码了。 <br/></p>
<h2 id="iterator-解法"><span class="section-num">3</span> Iterator 解法</h2>
<p>如果现在给 FizzBuzz 问题再加一个限制，不能使用乘法，除法，或者取模操作，那么又要怎么实现呢？ <br/></p>
<p>Rust 标准库中的各式 <code>Iterator</code> 可以算是Rust零开销抽象(Zero Cost Abstraction)与表达能力的最佳体现了。 <br/></p>
<p>最近在读 Programming Rust, 2nd edition, 里面就有使用各种 Iterator 组合，不使用除法或者取模操作来解决 FizzBuzz 问题的实现, 可以说是把 <code>iterator</code> 玩得非常花了： <br/></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">iter</span>::<span class="p">{</span><span class="n">once</span><span class="p">,</span><span class="w"> </span><span class="n">repeat</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">fizzes</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">repeat</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">).</span><span class="n">take</span><span class="p">(</span><span class="mi">2</span><span class="p">).</span><span class="n">chain</span><span class="p">(</span><span class="n">once</span><span class="p">(</span><span class="s">&#34;fizz&#34;</span><span class="p">)).</span><span class="n">cycle</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">buzzes</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">repeat</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">).</span><span class="n">take</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="n">chain</span><span class="p">(</span><span class="n">once</span><span class="p">(</span><span class="s">&#34;buzz&#34;</span><span class="p">)).</span><span class="n">cycle</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">fizzes_buzzes</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">fizzes</span><span class="p">.</span><span class="n">zip</span><span class="p">(</span><span class="n">buzzes</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">fizz_buzz</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="o">..=</span><span class="mi">100</span><span class="p">).</span><span class="n">zip</span><span class="p">(</span><span class="n">fizzes_buzzes</span><span class="p">).</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">tuple</span><span class="o">|</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="n">tuple</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;&#34;</span><span class="p">))</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">i</span><span class="p">.</span><span class="n">to_string</span><span class="p">(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">(</span><span class="n">_</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="n">fizz</span><span class="p">,</span><span class="w"> </span><span class="n">buzz</span><span class="p">))</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="fm">format!</span><span class="p">(</span><span class="s">&#34;</span><span class="si">{}{}</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">fizz</span><span class="p">,</span><span class="w"> </span><span class="n">buzz</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">line</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">fizz_buzz</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;</span><span class="si">{line}</span><span class="s">&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>看起来是否不知道所云呢? 现在可以把每个 <code>iterator</code> 的作用逐一拆解。 <br/></p>
<h3 id="repeat-plus-take"><span class="section-num">3.1</span> repeat + take</h3>
<p><code>repeat</code> 的作用就是无限重复某个传入的元素, 例如 <code>repeat(4)</code> 就是生成无限个数字4, <code>repeat(&quot;&quot;)</code> 就是生成无限个空白字符. <br/></p>
<p>虽然 <code>repeat</code> 能生成无限个指定的元素，但是我只想要若干个元素，怎么整呢？ <code>take</code> 就可以满足这个要求，所以 <code>repeat(4).take(4)</code> 就是生成4个数字4的意思，而 <code>repeat(&quot;&quot;).take(2)</code> 就是生成2个空字符 <br/></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">iter</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// that last example was too many fours. Let&#39;s only have four fours.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">four_fours</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">iter</span>::<span class="n">repeat</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="n">take</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="nb">Some</span><span class="p">(</span><span class="mi">4</span><span class="p">),</span><span class="w"> </span><span class="n">four_fours</span><span class="p">.</span><span class="n">next</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="nb">Some</span><span class="p">(</span><span class="mi">4</span><span class="p">),</span><span class="w"> </span><span class="n">four_fours</span><span class="p">.</span><span class="n">next</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="nb">Some</span><span class="p">(</span><span class="mi">4</span><span class="p">),</span><span class="w"> </span><span class="n">four_fours</span><span class="p">.</span><span class="n">next</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="nb">Some</span><span class="p">(</span><span class="mi">4</span><span class="p">),</span><span class="w"> </span><span class="n">four_fours</span><span class="p">.</span><span class="n">next</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// ... and now we&#39;re done
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="nb">None</span><span class="p">,</span><span class="w"> </span><span class="n">four_fours</span><span class="p">.</span><span class="n">next</span><span class="p">());</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="once"><span class="section-num">3.2</span> once</h3>
<p>有生成无限个元素的 <code>iterator</code>, 自然就有只生成一个元素的 <code>iterator</code>, 那就是 <code>once()</code>, 这个 <code>iterator</code> 只会返回一个指定的元素。 <br/></p>
<p>所以 <code>once(&quot;fizz&quot;)</code> 就是创建一个只会返回一个 <code>&quot;fizz&quot;</code> 的 <code>iterator</code> : <br/></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">iter</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// one is the loneliest number
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">one</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">iter</span>::<span class="n">once</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="nb">Some</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span><span class="w"> </span><span class="n">one</span><span class="p">.</span><span class="n">next</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// just one, that&#39;s all we get
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="nb">None</span><span class="p">,</span><span class="w"> </span><span class="n">one</span><span class="p">.</span><span class="n">next</span><span class="p">());</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="chain"><span class="section-num">3.3</span> chain</h3>
<p>顾名思义，就是把两个 iterator 像链子一样串起来, 合并成一个 iterator: <br/></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">iter</span>::<span class="n">chain</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="mi">6</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">iter</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">chain</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="w"> </span><span class="n">b</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">iter</span><span class="p">.</span><span class="n">next</span><span class="p">(),</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">iter</span><span class="p">.</span><span class="n">next</span><span class="p">(),</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">iter</span><span class="p">.</span><span class="n">next</span><span class="p">(),</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="mi">3</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">iter</span><span class="p">.</span><span class="n">next</span><span class="p">(),</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="mi">4</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">iter</span><span class="p">.</span><span class="n">next</span><span class="p">(),</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="mi">5</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">iter</span><span class="p">.</span><span class="n">next</span><span class="p">(),</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="mi">6</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">iter</span><span class="p">.</span><span class="n">next</span><span class="p">(),</span><span class="w"> </span><span class="nb">None</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="circle"><span class="section-num">3.4</span> circle</h3>
<p><code>circle</code> 就比较有趣了，它的作用是无限循环一个 <code>iterator</code>, <code>repeat</code> 循环一个元素，而 <code>circle</code> 是循环一个 iterator: <br/></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="kd">let</span><span class="w"> </span><span class="n">dirs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="s">&#34;North&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;East&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;South&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;West&#34;</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">spin</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dirs</span><span class="p">.</span><span class="n">iter</span><span class="p">().</span><span class="n">cycle</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">spin</span><span class="p">.</span><span class="n">next</span><span class="p">(),</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="o">&amp;</span><span class="s">&#34;North&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">spin</span><span class="p">.</span><span class="n">next</span><span class="p">(),</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="o">&amp;</span><span class="s">&#34;East&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">spin</span><span class="p">.</span><span class="n">next</span><span class="p">(),</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="o">&amp;</span><span class="s">&#34;South&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">spin</span><span class="p">.</span><span class="n">next</span><span class="p">(),</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="o">&amp;</span><span class="s">&#34;West&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">spin</span><span class="p">.</span><span class="n">next</span><span class="p">(),</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="o">&amp;</span><span class="s">&#34;North&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">spin</span><span class="p">.</span><span class="n">next</span><span class="p">(),</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="o">&amp;</span><span class="s">&#34;East&#34;</span><span class="p">));</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>把4个 iterator 组合起来的 <code>repeat(&quot;&quot;).take(2).chain(once(&quot;fizz&quot;)).cycle();</code> 表达式的意思就是: 返回一个 iterator, 这个 iterator 无限循环: <code>&quot;&quot; &quot;&quot; &quot;fizz&quot; &quot;&quot; &quot;&quot; &quot;fizz&quot; ...</code> <br/></p>
<h3 id="zip"><span class="section-num">3.5</span> zip</h3>
<p><code>zip</code> iterator 的含义就是 &ldquo;zips up&rdquo;, 翻译过来就是拉上拉链，它的作用就是把两个 <code>iterator</code> 像拉链一样拉起来，返回一个 iterator，用代码来解释会更直观: <br/></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="kd">let</span><span class="w"> </span><span class="n">a1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="n">a2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="mi">6</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">iter</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">a1</span><span class="p">.</span><span class="n">iter</span><span class="p">().</span><span class="n">zip</span><span class="p">(</span><span class="n">a2</span><span class="p">.</span><span class="n">iter</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">iter</span><span class="p">.</span><span class="n">next</span><span class="p">(),</span><span class="w"> </span><span class="nb">Some</span><span class="p">((</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="mi">4</span><span class="p">)));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">iter</span><span class="p">.</span><span class="n">next</span><span class="p">(),</span><span class="w"> </span><span class="nb">Some</span><span class="p">((</span><span class="o">&amp;</span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="mi">5</span><span class="p">)));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">iter</span><span class="p">.</span><span class="n">next</span><span class="p">(),</span><span class="w"> </span><span class="nb">Some</span><span class="p">((</span><span class="o">&amp;</span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="mi">6</span><span class="p">)));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">iter</span><span class="p">.</span><span class="n">next</span><span class="p">(),</span><span class="w"> </span><span class="nb">None</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><code>zip</code> 就是把 <code>a1</code> 和 <code>a2</code> 两个iterator 「拉起来」了，每次返回一对的元素. 所以 <code>fizzes.zip(buzzes)</code> ，就是合并了两个 iterator : <br/></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="c1">// fizzes: &#34;&#34; &#34;&#34; &#34;fizz&#34; &#34;&#34; &#34;&#34; &#34;fizz&#34; &#34;&#34; &#34;&#34; &#34;fizz&#34; ..
</span></span></span><span class="line"><span class="cl"><span class="c1">// buzzes: &#34;&#34; &#34;&#34; &#34;&#34; &#34;&#34; &#34;buzz&#34; &#34;&#34; &#34;&#34; &#34;&#34; &#34;&#34; &#34;buzz&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1">// fizzes_buzzes: (&#34;&#34; &#34;&#34;) (&#34;&#34; &#34;&#34;) (&#34;fizz&#34; &#34;&#34;) (&#34;&#34; &#34;&#34;) (&#34;&#34; &#34;buzz&#34;) ...
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>而 <code>(1..=100).zip(fizzes_buzzes)</code> 就是创建一个包含三个元素的 tuple： <br/></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="c1">// (1..=100): 1 2 3 4 5 6 7 ...
</span></span></span><span class="line"><span class="cl"><span class="c1">// fizzes_buzzes: (&#34;&#34; &#34;&#34;) (&#34;&#34; &#34;&#34;) (&#34;fizz&#34; &#34;&#34;) (&#34;&#34; &#34;&#34;) (&#34;&#34; &#34;buzz&#34;) ...
</span></span></span><span class="line"><span class="cl"><span class="c1">// (1..=100).zip(fizzes_buzzes): (1 (&#34;&#34; &#34;&#34;)) (2 (&#34;&#34; &#34;&#34;)) (3 (&#34;fizz&#34; &#34;&#34;)) (4 (&#34;&#34; &#34;&#34;)) (5 (&#34;&#34; &#34;buzz&#34;)) ..
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="map"><span class="section-num">3.6</span> map</h3>
<p><code>map</code> 这个 iterator 在其他语言也有相同的实现，入参是一个闭包函数，然后把每个元素作为入参，调用闭包函数，在新的迭代返回函数的调用结果. <br/></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">tuple</span><span class="o">|</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="n">tuple</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;&#34;</span><span class="p">))</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">i</span><span class="p">.</span><span class="n">to_string</span><span class="p">(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">(</span><span class="n">_</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="n">fizz</span><span class="p">,</span><span class="w"> </span><span class="n">buzz</span><span class="p">))</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="fm">format!</span><span class="p">(</span><span class="s">&#34;</span><span class="si">{}{}</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">fizz</span><span class="p">,</span><span class="w"> </span><span class="n">buzz</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">})</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>最核心的是Rust的 pattern matching, 用来匹配不同的值, <code>(i, (&quot;&quot;, &quot;&quot;))</code> 就是匹配所有 fizz 和 buzz为 <code>(&quot;&quot;, &quot;&quot;)</code> 的值，什么情况下 <code>fizz</code> 和 <code>buzz</code> 会都为 &quot;&quot; 呢，无法整除3以及无法整除5的时候，那么就直接返回数字 <code>i</code>; <br/></p>
<p><code>(_, (fizz,buzz))</code>, <code>_</code> 就是通配符，就是匹配掉所有其他的情况，无论是 fizz = &ldquo;&rdquo;, fizz = &ldquo;fizz&rdquo;, buzz = &quot;&quot; 或者 buzz = &ldquo;buzz&rdquo;, 都把返回 <code>&quot;{fizz}{buzz}&quot;</code>, 也就是 <code>(_, (fizz,buzz))</code> 匹配了4种情况. <br/></p>
<p><code>map</code> 迭代器返回的是一个 String, 最后再加 String 打印出来. <br/></p>
<p>同样是解决问题，这个版本的解法肯定是看起来「高大上」得多，说不定能让面试官眼前一亮，又或者是把自己绕晕。 <br/></p>
<h2 id="zero-cost-abstraction"><span class="section-num">4</span> Zero Cost Abstraction</h2>
<p>所谓的是零开销抽象（Zero Cost Abstraction），用C++之父的话来解释就是: <br/></p>
<blockquote>
<p>In general, C++ implementations obey the zero-overhead principle: What you don’t use, you don’t pay for. And further: What you do use, you couldn’t hand code any better. <br/></p>
</blockquote>
<p>概括来说，就是使用 Iterator 写出来的代码，和你自己 for-loop 手写是性能是一样的，并不会有额外的抽象开销。 <br/></p>
<p>换个角度讲，你手写的代码也没法实现得比 Iterator 更快，表达力还可能没有那么强。 <br/></p>
<p>如果看上面的 Iterator 实现觉得着实难以理解，我们可以再来一版兼具优雅与简洁的实现： <br/></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="mi">1</span><span class="o">..=</span><span class="mi">100</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">5</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;FizzBuzz&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">_</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;Fizz&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">(</span><span class="n">_</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;Buzz&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">(</span><span class="n">_</span><span class="p">,</span><span class="w"> </span><span class="n">_</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;</span><span class="si">{}</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="reference"><span class="section-num">5</span> Reference</h2>
<ul>
<li>Programming Rust, 2nd edition <br/></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Rust模拟C&#43;&#43;的函数重载</title>
      <link>https://ramsayleung.github.io/zh/post/2024/rust%E6%A8%A1%E6%8B%9Fc&#43;&#43;%E7%9A%84%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD/</link>
      <pubDate>Fri, 30 Aug 2024 22:23:00 -0700</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2024/rust%E6%A8%A1%E6%8B%9Fc&#43;&#43;%E7%9A%84%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD/</guid>
      <description>1 函数重载(function overloading) 所谓的函数重载，指的是某些语言支持创建函数名相同，但函数签名不同的多个函数，所谓的函数签名，既指参数类型，也指</description>
      <content:encoded><![CDATA[<h2 id="函数重载--function-overloading"><span class="section-num">1</span> 函数重载(function overloading)</h2>
<p>所谓的函数重载，指的是某些语言支持创建函数名相同，但函数签名不同的多个函数，所谓的函数签名，既指参数类型，也指参数的数量。 <br/></p>
<p>如C++，Java都是支持函数重载的，而Rust是不支持函数重载的, 个人猜测可能是Rust最初的设计者认为函数重载可能会导致增加代码理解难度，尤其是在C++里面，隐式类型转换叠加函数重载，可能看代码都看不出实际调用的是哪个版本的函数。 <br/></p>
<h2 id="rust版本的函数重载"><span class="section-num">2</span> Rust版本的函数重载</h2>
<p>但是我个人觉得函数重载在大部分情况下都是很方便，也不需要为相同的函数想不同的名字，毕竟命名是编程最难的问题之一。 <br/>
今天重读 Programming Rust, 2nd Edition关于 <code>Into</code> 这个trait 的功能的时候，突然意识到，可以使用 <code>Into</code> 模拟出部分的函数重载功能。 <br/></p>
<p>为什么说是「部分」呢，因为前文提到，所谓的函数重载是指多个同名但函数签名不一样的函数，而Rust能模拟的就是参数类型不一样，但是参数数量一致的重载函数。 <br/></p>
<p>假设我们想实现自己的 <code>ping</code> 命名, 入参可以是 <a href="https://doc.rust-lang.org/std/net/struct.Ipv4Addr.html"><code>Ipv4Addr</code></a> 这个 struct, ipv4的地址也可以使用2进制来表示, 又或者可以使用 u32 来表示，毕竟只有32位。 <br/></p>
<p>如果用 C++, 我们可以写3个重载函数，入参分别是, <code>Ipv4Addr</code>, <code>bitset</code> 和 <code>uint32</code>. 在 Rust, 我们也实现类似的函数： <br/></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">net</span>::<span class="n">Ipv4Addr</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">ping</span><span class="o">&lt;</span><span class="n">A</span><span class="o">&gt;</span><span class="p">(</span><span class="n">address</span>: <span class="nc">A</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">std</span>::<span class="n">io</span>::<span class="nb">Result</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">where</span><span class="w"> </span><span class="n">A</span>: <span class="nb">Into</span><span class="o">&lt;</span><span class="n">Ipv4Addr</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">ipv4_address</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">address</span><span class="p">.</span><span class="n">into</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">..</span><span class="p">.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>需要注意的是，上面函数的入参并不是 <code>Ipv4Addr</code>, 而是 <code>Into&lt;Ipv4Addr&gt;</code> ，这就是意味着，所有实现了 <code>Into&lt;Ipv4Addr&gt;</code> 这个 trait 的类型都可以是 <code>ping</code> 的入参，而恰好 <code>u32</code> 和 <code>[u8; 4]</code> 都实现了 <code>Into&lt;Ipv4Addr&gt;</code> ，所以下面的调用都是编译通过的： <br/></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;</span><span class="si">{:?}</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ping</span><span class="p">(</span><span class="n">Ipv4Addr</span>::<span class="n">new</span><span class="p">(</span><span class="mi">23</span><span class="p">,</span><span class="w"> </span><span class="mi">21</span><span class="p">,</span><span class="w"> </span><span class="mi">68</span><span class="p">,</span><span class="w"> </span><span class="mi">141</span><span class="p">)));</span><span class="w"> </span><span class="c1">// pass an Ipv4Addr
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;</span><span class="si">{:?}</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ping</span><span class="p">([</span><span class="mi">66</span><span class="p">,</span><span class="w"> </span><span class="mi">146</span><span class="p">,</span><span class="w"> </span><span class="mi">219</span><span class="p">,</span><span class="w"> </span><span class="mi">98</span><span class="p">]));</span><span class="w">             </span><span class="c1">// pass a [u8; 4]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;</span><span class="si">{:?}</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ping</span><span class="p">(</span><span class="mh">0xd076eb94_</span><span class="k">u32</span><span class="p">));</span><span class="w">                 </span><span class="c1">// pass a u32
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>当然，如果你实现了 <code>impl From&lt;u32&gt; for Ipv4Addr</code>, Rust 编译器也会贴心地帮你把反向的 <code>Into&lt;Ipv4Addr&gt;</code> 也实现掉。 <br/></p>
<h2 id="限制"><span class="section-num">3</span> 限制</h2>
<p>看完上面的函数实现，有经验的朋友可能就会发现了，Rust版本的函数重载限制比C++的要多。 <br/></p>
<p>在C++版本的函数重载中： <br/></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">func1</span><span class="p">(</span><span class="n">Type1</span> <span class="n">foo</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">func1</span><span class="p">(</span><span class="n">Type2</span> <span class="n">bar</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>参数类型 <code>Type1</code> 和 <code>Type2</code> 并不需要存在任何关系，但是在 Rust 版本中，需要两个类型之间支持相互转换，所以可以理解成 Rust 的「函数重载」本质就是通过显示类型转换来实现的。 <br/></p>
<p>毕竟 Rust 设计初衷之一就是支持强类型，就函数重载而言，终归聊胜于无啦。 <br/></p>
<h2 id="参考"><span class="section-num">4</span> 参考</h2>
<ul>
<li><a href="https://www.oreilly.com/library/view/programming-rust-2nd/9781492052586/">Programming Rust, 2nd Edition</a> <br/></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>《走出戈壁》：从沙漠苦力到常青藤教授</title>
      <link>https://ramsayleung.github.io/zh/post/2024/%E8%B5%B0%E5%87%BA%E6%88%88%E5%A3%81/</link>
      <pubDate>Sun, 25 Aug 2024 11:24:00 -0700</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2024/%E8%B5%B0%E5%87%BA%E6%88%88%E5%A3%81/</guid>
      <description>1 前言 六月份的时候，读到了一篇名为《运气与努力》1的文章，是由 LeanCloud的创始人江宏博士写的，文章以一本书开篇，引出他关于运气与努力</description>
      <content:encoded><![CDATA[<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>六月份的时候，读到了一篇名为《<a href="https://1byte.io/articles/luck/">运气与努力</a>》<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>的文章，是由 LeanCloud的创始人江宏博士写的，文章以一本书开篇，引出他关于运气与努力的思考:(文章写得相当真诚，充满洞见，也推荐大家阅读下) <br/></p>
<blockquote>
<p>很多人意识不到运气的重要性，而错把成功归功于自己的才能和努力， <br/>
却没有意识到好运在其中的重要性。忽视了这一点就难以保持谦虚，难以不断学习。 <br/></p>
<p>明白了运气的重要性，就知道不是人人生而能得到平等的机会的， <br/>
在遇到处境不如自己的人，不能假设这种差别是聪明或努力程度的不同造成的，应该知道善待弱者。 <br/></p>
</blockquote>
<p>而文章开篇提到的书名为(Out of the Gobi: My story of China and America)《走出戈壁：我的中美故事》, 作者单伟建在读完小学之后，就被文革的知青下乡运动感召，「自愿」下放到内蒙古生产建设兵团做了六年的苦力。 <br/></p>
<p>文革后，没拿到小学毕业证的他进入了首都经济贸易大学，之后在旧金山大学获得了 MBA， <br/>
在 UC Berkeley 取得博士学位，后来在 University of Pennsylvania 任教。 <br/></p>
<p>现在他是亚洲最大的私募基金之一 PAG Group 的主席和 CEO，而他当时在UC Berkeley的导师，现在也成为了美国财政部的部长，即Janet Yellen (珍妮特·耶伦), 她为本书作了序。 <br/></p>
<p>对于这样传奇的人生经历，我自然也是希望一读究竟。 <br/></p>
<h2 id="不以物喜-不以已悲"><span class="section-num">2</span> 不以物喜，不以已悲</h2>
<p>不少自传或者回亿类的书籍看起来，难免会有一种自吹自擂的感觉，这也是人之常情。 <br/></p>
<p>只是在本书的作者却是用一种云淡风轻，略带些幽默的口吻来描写在戈壁滩的艰苦生活，以至于那样痛苦的生活， <br/>
在作者笔下，都显得不那么痛苦了。 <br/></p>
<p>可能正如同样被下放到戈壁滩的民航机长老易教诲作者那般，“前面的路还很长，所有快乐的事情都会结束，所有的悲伤也是如此” <br/></p>
<p>书中有很多动人的经历，我印象比较深的是以下的几个故事： <br/></p>
<h2 id="戈壁生活"><span class="section-num">3</span> 戈壁生活</h2>
<h3 id="理想与现实"><span class="section-num">3.1</span> 理想与现实</h3>
<p>知识青年下乡，响应号召，接受贫下中农再教育；参加建设兵团，为国戌边，建设国家。 <br/></p>
<p>这个是他们离家时的理想与目标，但实际的情况却与他们幻想得天差地别； <br/></p>
<p>一群年轻人秋天去国营农场里收土豆，挖了无数的土豆，但是却没有人来运土豆，他们也只能眼睁睁地看着被挖出来的土豆被冻烂， <br/>
不停地收获土豆，却又不停地看着收获好的土豆被冻烂在地里，循环往复，直到不再有挖土豆的念头。 <br/></p>
<p>兵团领导人希望可以把戈壁变成沃野，思路就是通过挖掘人工运河，把河里的水引到戈壁进行灌溉， <br/>
甚至有一天，作者他们被告知必须连夜赶工完成运河，以赶上最后限期，在完成之前，他们不能离开。 <br/></p>
<p>就这样，这群年轻人连续在运河上工作了31个小时，终于完成了人工运河的建设。 <br/></p>
<p>一周后，他们被告知，运河的路线被误算了，他们建造的那部分太高了，水无法流过，那部分必须被放弃，另建一条新路线。 <br/></p>
<p>军队建议兵团对改善贫困农村没有任何帮忙，事实上，他们只是让事情变成更糟糕，他们每天消耗的粮食是生产的三到四倍， <br/>
他们工作越努力，浪费的资源就越多。 <br/></p>
<p>兵团只是想给他们找些事情做，不让他们闲下来。 <br/></p>
<h3 id="努力-智慧与运气"><span class="section-num">3.2</span> 努力，智慧与运气</h3>
<p>在这样的折腾下，六年时间，难免会让把人的志气给磨没，变得随大流，磨洋工。 <br/></p>
<p>农场上大多数人都不去田里工作，但他还在每天工作， 作者的心态是「干什么事都要干好，否则闲着也是浪费时间，而且争强好胜，虽然身体瘦弱，但不甘人后，如此而已。」 <br/></p>
<p>作者抓住一切能学习的机会，阅读能读到的各种书籍，向同样被流放的前民航机长学习英语，背诵药品的英文名字， <br/>
希望有一天能重新回到城市，能回到大学校园。 <br/></p>
<p>1971年，大学逐渐恢复了上课，但是那时的入学资格却不是考试，而是「群众推荐」制度，即由同龄人选举产生。 <br/></p>
<p>而作者不但没有被推举上，反而因为谈及外语，巴黎纽约这些外国城市，反而被人举报，渴望「资本主义生活方式」，并被众人被声讨。 <br/></p>
<p>这不仅让作者失去了被推举上大学的机会，还留下了个坏名声，但是作者并没有沉沦，他反而反思自己为何会成为众矢之的。 <br/></p>
<p>他分析下来是自己太与众不同，别人下棋他看书，他不屑于追求这些无用的东西，但人终究是群体性动物，太与众不同只会被人疏远。 <br/></p>
<p>所以他决定要融入这个集体，获得大家的好感，而不是作为一个孤僻的书呆子。 <br/></p>
<p>在观察到大家都喜欢篮球和排球运动，但却缺乏熟悉排球规则的裁判时， <br/></p>
<p>他让父亲寄书过来学着当排球裁判，让更多其他连的人认识他，让自己变成不可或缺，同时更加努力地工作，赢得众人的尊重。 <br/>
（能站在旁观者角度冷静分析问题，并利用现有条件进行解决，真的是充满智慧又难能可贵） <br/></p>
<p>终于，在第二年的入学资格「群众推荐」中，他得票第二，但是却因为与连队领导关系不佳， <br/>
他被以「年纪太轻（21岁），不能上大学」为由，把他从名单中删除。 <br/></p>
<p>得知消息的那一天晚上，作者深一脚浅一脚地走出营房，来到空旷的地方，边走边流泪，当再也不会没有人听到他的声音后， <br/>
他放眼大哭，在黑暗中撕心裂肺地喊叫，在沮丧和悲伤中喊得声嘶力竭。 <br/></p>
<p>那天晚上后，作者收拾心情，告诫自己生活必须继续，总会有未来的。 <br/>
他发誓不会让自己失望，他已经经历这么多了，但他绝对不会在绝望中迷失自我，放弃就是对自己犯下罪行。 <br/></p>
<p>如果大环境一直很糟糕，自己要在戈壁待一辈子而没有出头之日，他没有谁可怨； <br/>
但是如果将来发生变化，因为自己没有准备好而失去了改变命运的机会，他只能怪自己。 <br/></p>
<p>所以他在逆境中也一直在为将来准备。 <br/></p>
<p>终于，在第三年，在11人竞选9个名额的竞争中，作者作为最后一名修补人选， <br/>
在名单中的两名正式候选人先后被除名后，递补入选，获得了首都经济贸易大学的入学资格. <br/></p>
<h2 id="自助者天助之"><span class="section-num">4</span> 自助者天助之</h2>
<p>作者在毕业后成为首经贸的教师，后来得到亚洲基金会赞助前往旧金山大学一年的访学机会。 <br/></p>
<p>到校后，在与教授们交流后，他决定攻读该校的MBA 课程并争取拿到学位，但苦于没有学费，他决定先抓住机会学习知识，知识先于学历，再看能否找机会凑到学费。 <br/></p>
<p>第一学期各门课程优异，但是学费还是没有着落，在各种方法尝试未果后将要放弃时， <br/>
他的导师给他带来了一个好消息：一个匿名人士愿意资助他的学费，于是他得而注册并开始MBA课程。 <br/></p>
<p>待他学业小有所成时，他导师告知他，那位匿名赞助人希望与他在某个高档餐厅共进晚餐，相见一面。 <br/></p>
<p>当导师夫妇身着正装出现在餐厅时，他才猛然意识到，他们原来就是自己的资助人，他的感激之情，无以言表。 <br/></p>
<p>如果不是作者在学习过程所表现出来的专注，付出与努力，相信也没有那么容易可以打动到导师，这也许是所谓的「自助者天助之」吧。 <br/></p>
<p>多年之后，待他事业有所成时，他以导师与自己名字，联名捐赠了一个奖学金，以帮助更多学子追求梦想。 <br/></p>
<h2 id="洞察规则的智慧"><span class="section-num">5</span> 洞察规则的智慧</h2>
<p>在旧金山大学获得MBA 课程硕士需要2年时间，在学费问题得而解决之后， <br/>
作者面临的问题就是访学项目只是一年，要获得学位，他就需要亚洲基金会批准延长他的项目，并且获得首都经济贸易大学的批准。 <br/></p>
<p>也就是攻读硕士学位不在项目原有计划之内，他当时已经是首都经济贸易大学的教师，再延期一年属于「节外生枝」。 <br/></p>
<p>基金会领导安迪表示他要给经贸学院的领导写一封信，征求北京的意见。 <br/></p>
<p>作者表示，你不能这么写，安迪问为什么。 <br/></p>
<p>作者回答到，如果你征求北京方面的意见，他们就要研究是否批准。 <br/></p>
<p>只有两个可能——批准或者不予批准。批准了当然好，但是如果不予批准，我怎么办？ <br/></p>
<p>安迪问作者还有更好的办法吗？ <br/></p>
<p>作者表示，你就给北京发个贺电，说我学习成绩优异，校方决定给我奖学金，只需延期一个学期，就可以获得硕士学位， <br/>
对于这样的成绩，亚基会向外贸学院表示祝贺，其他的都不必说。 <br/></p>
<p>安迪写了一封信，信中对作者大加赞扬，但小心地将大部分奉承留给了经贸学院。 <br/></p>
<p>两周后，学院回复，只有四个字——‘非常感谢’。 <br/></p>
<p>作者心花怒放。 <br/></p>
<p>读到此处，真的为作者深谙体制的规则和处理事情的智慧所折服。 <br/></p>
<p>正如他所料，谁能拒绝别人的道贺呢？ <br/></p>
<p>更何况是来自曾经的敌人，美帝国主义的夸奖，这足以让学院领导扬眉吐气。 <br/></p>
<h2 id="总结"><span class="section-num">6</span> 总结</h2>
<p>在单伟建回到母校旧金山大学<a href="https://www.youtube.com/watch?v=R0Niw73cyIo&amp;t=4304s">演讲</a>时<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>，当循例被主持人问到能给学生们什么建议时，他说在任何领域，成功的三个重要要素是： <br/></p>
<ol>
<li>终身学习；如果他在戈壁没有坚持学习，那么他不可能在失学十年后，在中国重新开放时，能抓住来之不易的机会，自然就没有后来的一切 <br/></li>
<li>好的判断力；好的判断比毅力更加重要，做正确的事情远比正确地做事重要，方向对了，努力才有意义。而没有人生来就有好的判断力，这个就源于经验，知识，就需要不断地学习才能获取到，又呼应上「终身学习」了 <br/></li>
<li>运气；正如单伟建的观点与罗翔老师的类似，「运气并非成就，是命运之手把我托举到所不配有的高度，让人飘然，让人晕眩，最终，让人诚惶诚恐」，意识到运气的重要，才能让人谦卑。 <br/></li>
</ol>
<p>对于终身学习这条建议，我自已也有些许浅薄体会，一年半前，我写了一篇文章: <a href="https://ramsayleung.github.io/zh/post/2023/rspotify_%E4%B8%80%E4%B8%AA%E7%94%A8%E7%88%B1%E5%8F%91%E7%94%B5%E4%BA%94%E5%B9%B4%E7%9A%84%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/">《RSpotify: 一个用爱发电五年的开源项目》</a>, 分享自己学习了六年Rust，并且维护一个开源项目的经历。 <br/></p>
<p>在我大学的最后一年，我选择了学习Rust这个新兴的编程语言，距离当时它发布1.0稳定版本也仅仅过了2年， <br/>
我既不觉得我未来的工作会因此受益，也不会获取什么额外的报酬，毕竟这东西太小众了，国内也不会有公司会用，大厂不是用Java就是用C++。 <br/></p>
<p>我只是觉得好玩，再兼之大四没有课，总要学点新东西。 <br/>
就这样，一学就是六七年，维护这个用Rust的开源项目也五年了，除了不时的Github Issue, 也没有其他的收益。 <br/></p>
<p>在今年七月，我又被换到了一个新的组，创下了一个个人职业新纪录，在一年三个月内，待了4个组。 <br/></p>
<p>新组还是在AWS S3, 而新组领导对Rust相当狂热，因为Rust的特点几乎完美契合S3的要求， <br/>
媲美C的高性能，内存安全，强类型，高并发，所以大老板非常想要在新服务使用Rust, 美中不足的就是Rust学习曲线陡峭，懂Rust的人不多。 <br/></p>
<p>而我刚好就是懂Rust又会Java的那个，毕竟都学这么久了，就这样我无缝对接到新组，在新的核心服务上开始写Rust，达成了通过写Rust养活自己的成就。 <br/></p>
<p>像单伟建那样，在戈壁那样艰苦的环境坚持学习，在困境中保持乐观，在苦厄中坚持成长 <br/>
，穷且益坚，实现从小学文凭苦力到常青藤教授的成就，绝大部分人自然难以望其项背。 <br/></p>
<p>但是，如果把终身学习理解成投资的定投，只需要持续学习，无论每天，每周或者每月学多么微小的知识，在时间的复利作用下， <br/>
终有一天，都会有带来质的提升。 <br/></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://1byte.io/articles/luck/">https://1byte.io/articles/luck/</a>  <br/>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://www.youtube.com/watch?v=R0Niw73cyIo&amp;t=4304s">https://www.youtube.com/watch?v=R0Niw73cyIo&amp;t=4304s</a>  <br/>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>夏日捕蟹记</title>
      <link>https://ramsayleung.github.io/zh/post/2024/%E5%A4%8F%E6%97%A5%E6%8D%95%E8%9F%B9%E8%AE%B0/</link>
      <pubDate>Thu, 18 Jul 2024 20:34:00 -0700</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2024/%E5%A4%8F%E6%97%A5%E6%8D%95%E8%9F%B9%E8%AE%B0/</guid>
      <description>1 前言 在2023年经历了冬天各种漫长风雪雨雾后， 终于明白为什么加拿大本地人在夏天全都跑到户外玩了，因为夏天不玩，冬天来了就只能待在室内看雨看</description>
      <content:encoded><![CDATA[<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>在2023年经历了冬天各种漫长风雪雨雾后， <br/>
终于明白为什么加拿大本地人在夏天全都跑到户外玩了，因为夏天不玩，冬天来了就只能待在室内看雨看雪了。 <br/></p>
<p>六月过后，夏天终于来了。 <br/></p>
<h2 id="抓螃蟹"><span class="section-num">2</span> 抓螃蟹</h2>
<p>周末闲来无事待在家中看视频，朋友分享了他和家人合家去海边抓螃蟹的照片，说螃蟹很好抓，看到螃蟹图片我都惊呆了，怎么个头这么大。 <br/></p>
<p>他说明天还去玩，并约我同行，反正周末没事，同去同去。 <br/></p>
<p>去捕螃蟹的地方驱车大概需要20分钟，叫 Boundary Bay Regional Park，翻译过来叫边境海湾区域公园，因为就在美加边境，再向南几公里就是美国了。 <br/></p>
<p>所以我都和朋友开玩笑说，可能我们捕的是美国游过来的蟹，或者我们向南游几公里，就到美国了。 <br/></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/boundary_bay_regional_park.jpg"/> 
</figure>
 <br/></p>
<p>我们去到的时候是中午，海滩还是退潮的，从岸边走到大海边还需要步行十多分钟，大概有一公里的路程: <br/></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/boundary_bay_regional_park2.jpg"/> 
</figure>
 <br/></p>
<p>光着脚，向海滩深处走去，能看到远处的雪山和海岸，退潮之后形成的水滩在太阳的照耀下也不会冷冰刺骨，脚踩下去，非常凉爽，暑意全消。 <br/></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/boundary_bay_regional_park3.jpg"/> 
</figure>
 <br/></p>
<p>我和舍友因为是初次捕蟹，只带了一个水桶和一把小尺子。 <br/></p>
<p>水桶自然是为了装战利品，而带尺子的原因是因为加拿大这边有规定，只有大于16.5CM的公蟹才能带走， <br/>
所以来捕蟹的人基本都会带上尺子来量下尺寸是否够大。 <br/></p>
<p>看到朋友才发现我们的装备实在简陋，除了必备的桶和尺子之外， <br/>
朋友还穿上渔民专用的水裤，因为他说虽然气温能到30多度，但是海水大概只有10来度，非常冷冰，不穿水裤顶不住。 <br/></p>
<p>更有趣的是，朋友还带了多支羽毛球拍，说是拨海草捕蟹的神器，见我们两人两手空空，朋友便各分了我们一支球拍。 <br/></p>
<p>没想到，还没有走到海滩深处，就看到了一只大螃蟹在浅水滩中晒太阳，我兴奋地过去把它抓起来，可以说不费吹灰之力： <br/></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/dungeness_crab1.jpg"/> 
</figure>
  <br/></p>
<p>只是朋友拿他的尺子过来了量了下，说不够16.5cm, 没法带走，不过我们可以把它带到大海深处再放回去. <br/></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/crab_with_ruler.jpg"/> 
</figure>
 <br/></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/crab_in_bucket.jpg"/> 
</figure>
 <br/></p>
<p>来到大海深处，发现长满海草，朋友说蟹就藏在海草下面, 可以用羽毛球拍拨开海草来找蟹，原来羽毛球拍是这么用的。 <br/></p>
<p>在海草丛中摸索不一会就又抓到一只蟹了，非常兴奋地又拍起照来，只是把尺子拿过来量下，又不够大，原来能抓到的都是个头不够大的。 <br/></p>
<p>就这样扒拉了半个小时，不停地抓到蟹，拍照，又放回去。 <br/></p>
<p>期间还遇到了一只水母，原来水母真的是透明的，在阳光的照耀下非常漂亮，只是我不敢碰它，担心它蛰我。 <br/></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/jellyfish.jpg"/> 
</figure>
 <br/></p>
<p>就这样不停地在海草丛中来回走到，突然感觉脚下踩到了什么东西，脚感和踩在沙子完全不一样，有种厚实感。 <br/>
用球拍拨开海草，定睛一看，原来是只藏在沙里的大螃蟹，赶紧招呼舍友一起过来挖，挖出来一看，这个头肯定足够大，晚餐有了。 <br/></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/61115989019969294682.jpg"/> 
</figure>
 <br/></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/crab_ruler.jpg"/> 
</figure>
 <br/></p>
<p>好事成双，不一会，我又踩到了一只大螃蟹上，我们又抓到了一只大螃蟹: <br/></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/6111598901996929469.jpg"/> 
</figure>
 <br/></p>
<p>舍友不一会也挖到了一只大螃蟹。 <br/></p>
<p>原以为的抓螃蟹，最后变成在沙里挖螃蟹。 <br/></p>
<p>而让我们感觉非常可惜的是，是错过了两只个头超大的大螃蟹，个头约有整个球拍那么大。 <br/></p>
<p>只是它们不是把自己埋在沙里，或者是躲在海草丛里，而是在海草边闲逛，见我们向它们走过去，就横着径直向海的深处走去。 <br/></p>
<p>提着短裤，手机在口袋的我，着实没有勇气一往无前地追随它们的脚步把它们抓回来。 <br/></p>
<h2 id="回程"><span class="section-num">3</span> 回程</h2>
<p>从中午12点一直抓到下午2点多开始涨潮，大概总共抓到了十多只螃蟹，因为尺寸和数量的限定，我们最终只带走了3只螃蟹。 <br/></p>
<p>按照BC省的规定，每人最多可以可以带走2只螃蟹，并且需要花费6加元在政府官网购买一个tidal finish licence. <br/></p>
<p>只是从我们到海边，到我们离开，也并没有任何人检查你抓的螃蟹是否小于指定尺寸, 或者是否超过指定数量，或者没有购买 licence 就带走，只是大家都在遵守规定，我们也同样遵守规定。 <br/></p>
<p>在购买完tidal finish licence 之后，政府还会给你发一封邮件，让你自行申报你抓到了什么渔获。 <br/></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/reporting_your_finishing_activity.jpg"/> 
</figure>
 <br/></p>
<p>在涨潮回岸边的时候，我算是见识到本地人夏天到户外游玩的心情是有多么强烈了， <br/>
在一群年青的女孩子穿泳衣走过海边之后，后面紧跟着一位腿上打着石膏，双手撑着拐杖，穿着泳衣的年轻女生。 <br/></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/girl_to_beach.jpg"/> 
</figure>
 <br/></p>
<p>虽然我不知道打着石膏怎么下海玩，但是隔着几十米，我都能感受到她强烈的，不甘人后的游玩之心。 <br/></p>
<h2 id="晚餐"><span class="section-num">4</span> 晚餐</h2>
<p>就这样，我们花费了12加元，收获了三只净重超过一斤的大螃蟹，这种螃蟹是BC省的特产，叫 Dungeness crab, 把战利品拿回家时，还不知道怎么烹饪，只好在 Youtube 上面搜索了一下 Dungeness crab 的烹饪教程，上面的视频大多就是水煮螃蟹，着实提不起啥兴趣。 <br/></p>
<p>身为广东人，那就来个粤菜的姜葱炒蟹，由我这个天桥底炒粉的程序员来处理，耗时一小时，从上案板，到上餐桌： <br/></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/crab_cooking1.jpg"/> 
</figure>
 <br/></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/crab_cooking2.jpg"/> 
</figure>
 <br/></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/crab_cooking3.jpg"/> 
</figure>
 <br/></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/crab_cooking4.jpg"/> 
</figure>
 <br/></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/crab_cooking5.jpg"/> 
</figure>
 <br/></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/crab_cooking6.jpg"/> 
</figure>
 <br/></p>
<p>吃到家乡的味道了。 <br/></p>
]]></content:encoded>
    </item>
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on 自由庄园</title>
    <link>https://ramsayleung.github.io/zh/post/</link>
    <description>Recent content in Posts on 自由庄园</description>
    <image>
      <title>自由庄园</title>
      <url>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>See this site&#39;s source code [here](https://github.com/ramsayleung/ramsayleung.github.io), licensed under GPLv3 ·</copyright>
    <lastBuildDate>Sun, 16 Jul 2023 22:58:00 -0700</lastBuildDate><atom:link href="https://ramsayleung.github.io/zh/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>黑客列传：强得抠脚的教主RMS</title>
      <link>https://ramsayleung.github.io/zh/post/2023/%E5%BC%BA%E5%BE%97%E6%8A%A0%E8%84%9A%E7%9A%84%E6%95%99%E4%B8%BBrms/</link>
      <pubDate>Sun, 16 Jul 2023 22:58:00 -0700</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2023/%E5%BC%BA%E5%BE%97%E6%8A%A0%E8%84%9A%E7%9A%84%E6%95%99%E4%B8%BBrms/</guid>
      <description>1 前言 前段时间流行一种关于程序员效率的说法，叫「10x程序员」，即一个好的程序员的工作效率是普通程序员的10倍。 但是，在编程界，有这么一群人</description>
      <content:encoded><![CDATA[<h2 id="前言"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> 前言</h2>
<p>前段时间流行一种关于程序员效率的说法，叫「10x程序员」，即一个好的程序员的工作效率是普通程序员的10倍。 <!-- raw HTML omitted --></p>
<p>但是，在编程界，有这么一群人，他们的工作效率，可以说是百倍，甚至千倍于普通程序员； <!-- raw HTML omitted --></p>
<p>更令人惊叹的是，他们创造了普通程序员即使百倍努力也无法写出的作品，对于这样的大神，唯有叹服。 <!-- raw HTML omitted --></p>
<p>使用「程序员」这个职业来称呼他们，未免流于平凡，无法展现出他们竖立起的丰碑；而使用「计算机科学家」，又未免过于学术，不接地气； <!-- raw HTML omitted --></p>
<p>那么，就回到最初，用「黑客(hacker)」这个称谓来称呼他们吧。 <!-- raw HTML omitted --></p>
<h2 id="关于黑客"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> 关于黑客</h2>
<p>可能大家对「黑客 (hacker)」的印象多来自于电影，比如《黑客帝国》，就是那种在电脑面前，使用各种看不懂的工具入侵别人电脑的人。 <!-- raw HTML omitted --></p>
<p>但是这种看法大多是对于「黑客」的误解，称之为「骇客(cracker)」可能更加合适，即恶意入侵他人电脑的人。 <!-- raw HTML omitted --></p>
<p><code>hacker</code> 一词又是从 <code>hacking</code> 衍生而来的，将 <code>hacking</code> 翻译成成中文网络语中的「整，搞，开干」可能会更贴切，  而最初的「黑客」指的就是一群富有创造力和兴趣的爱好者，只是比较具有代表性的是在计算机领域。 <!-- raw HTML omitted --></p>
<p>国外有个很有名的科技相关的聚合网站，叫做「Hacker News」, 其中的「Hacker」, 也是沿用黑客最初的含义。 <!-- raw HTML omitted --></p>
<p>既然提到黑客，那么有一个无法绕过去的人物，那就是今天的主角，黑客文化的领军人物：Richard Stallman <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/rms_avatar.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<h2 id="unix"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> UNIX</h2>
<h3 id="分时系统"><!-- raw HTML omitted -->3.1<!-- raw HTML omitted --> 分时系统</h3>
<p>相信今天的我们，对操作系统这个概念不会陌生，在电脑上有 Windows 10, Windows 11, Windows 7 或者苹果的 MacOS操作系统，在手机上有 Android 和 IOS操作系统。 <!-- raw HTML omitted --></p>
<p>所谓的操作系统，即是一套管理硬件，发挥硬件性能的软件，避免应用程序直接和硬件打交道，省去普通程序员大量的开发成本和心智。 <!-- raw HTML omitted --></p>
<p>与今天直接在手机操作系统上，一边聊微信，一边放音乐不同，远古时候(二十世纪六十年代)的操作系统只支持批处理模式： <!-- raw HTML omitted --></p>
<p>即用户同时提交多个任务，任务1运行完才能运行任务2，相当于你只能把音乐听完，然后关掉音乐软件，然后才能打开微信，发送聊天消息。 <!-- raw HTML omitted -->
（请忽略远古时代还没有微信这个问题） <!-- raw HTML omitted --></p>
<p>你可能会想，这也太挫了吧。 <!-- raw HTML omitted --></p>
<p>没错，当时的计算机科学家也这么认为的。 <!-- raw HTML omitted --></p>
<p>因此1964年，通用电气和麻省理工大学就打算合作开发一个多任务操作系统，支持多个用户，运行多个任务，名为 <code>MULTICS</code> <!-- raw HTML omitted --></p>
<p>后来，AT&amp;T公司的贝尔实验室也加入到这个操作系统的研发中，但是项目目标过于庞大，特性太多，性能又很低, AT&amp;T见项目前景不妙，就把资源都撤了，退出了这个项目。 <!-- raw HTML omitted --></p>
<h3 id="玩游戏玩出来的unix"><!-- raw HTML omitted -->3.2<!-- raw HTML omitted --> 玩游戏玩出来的UNIX</h3>
<p>贝尔实验室的一位工程师，名叫Ken Thompson, 刚加入 MULTICS 项目不久，公司就准备退出了，但是通用公司为了项目而准备的机器 GE-645 就还保留在贝尔实验室，Ken 就打算用这些机器写个太空旅行的游戏。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/ge-645.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>然而，Ken 写出来的游戏跑得很慢，每次运行还要75美刀，更难受的是，GE-645 这批机器，不久后就被搬回去通用公司了。 <!-- raw HTML omitted --></p>
<p>所以Ken 只好在实验室角落找了几台没人用的PDP-7, 在同事 Dennis Ritchie 的帮助下，再重写了一次游戏。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/pdp-7.jpeg"/> 
</figure>
  <!-- raw HTML omitted --></p>
<p>这次的游戏开发经历，加上之前的 MULTICS 项目经验，让Ken 开始研究如何使用 PDP-7 开发一个分时多任务操作系统。 <!-- raw HTML omitted --></p>
<p>然后他花费了一年的时间，和 Dennis 一起，在PDP-7上开发了一个分时多任务系统，名为UnICS，这就是第一版的 UNIX。 <!-- raw HTML omitted --></p>
<p>因为PDP-7的性能不佳，最多支持两个用户, Ken 和 Dennis 又把第一版的 UNIX迁移到 PDP-11上，为了方便迁移，还顺便发明了一门编程语言，名为 C语言，并将UnICS 改名为 UNIX. <!-- raw HTML omitted --></p>
<p>(这两位也是神) <!-- raw HTML omitted --></p>
<p>影响后世无数操作系统的 UNIX 操作系统就此诞生，并迅速风靡各大研究机构，政府机关，企业与大学，成为70-80年代，操作系统事实上的标准 <!-- raw HTML omitted --></p>
<h3 id="商业版本与闭源"><!-- raw HTML omitted -->3.3<!-- raw HTML omitted --> 商业版本与闭源</h3>
<p>原来的软件只是买硬件时的赠品，到七十年代未，人们开始发现，原来软件也可以卖钱，很快，制作与销售商业软件成为一门热门生意。 <!-- raw HTML omitted --></p>
<p>最开始的UNIX 版本是开放源代码供使用者的，也就是使用者不但可以安装 UNIX 系统，还可以阅读，并修改UNIX 系统的源代码。 <!-- raw HTML omitted --></p>
<p>但是贝尔实验室的母公司 AT&amp;T毕竟是商业公司，把自己的源代码授权出去，后面还怎么赚钱呢？ <!-- raw HTML omitted --></p>
<p>所以在20世纪80年代相继发布的UNIX 商业版本，只发行二进制，不再包含源代码。 <!-- raw HTML omitted --></p>
<p>对于黑客来说，就是你能看到这个操作系统是怎么跑的，但是你再也无法知道他是怎么实现的了。 <!-- raw HTML omitted --></p>
<h2 id="rms"><!-- raw HTML omitted -->4<!-- raw HTML omitted --> RMS</h2>
<p>Richard Matthew Stallman, 1953年出生于纽约的一个犹太家庭, 1974年毕业于哈佛大学，1975年在 MIT 攻读博士，后来退学在 MIT AI 实验室写代码。 <!-- raw HTML omitted --></p>
<p>他的名字首字母为 RMS, 早期在黑客社区混的时候，以 RMS为用户名，所以大家都叫他 RMS(后面就以RMS来称呼他了). <!-- raw HTML omitted --></p>
<p>当时的「黑客文化」崇尚开放，分享与交流，认为分享才能促进社会进步，在这样的文化熏陶下，RMS 自然对闭源软件痛恨不已。 <!-- raw HTML omitted --></p>
<p>1980年，还在 MIT AI 实验室工作的时候，因为激光打印机和大部分工作人员都不在同一层楼，总是跑上跑下去查看打印结果和进度就很麻烦。 <!-- raw HTML omitted --></p>
<p>RMS 就给实验室的激光打印机写了一个程序： <!-- raw HTML omitted --></p>
<p>可以在打印任务完成时，发消息通知用户；或者当打印任务卡住的时候，也发消息通知用户； <!-- raw HTML omitted --></p>
<p>然而，因为最新版本的打印机源码不再开放，RMS写的程序就无法再适配，让他相当恼火。 <!-- raw HTML omitted --></p>
<p>以小见大，整个软件行业都在发生变化，甚至连UNIX 这样的基石软件都开始不再开放源代码授权，RMS感觉，他要站出来做些什么了。 <!-- raw HTML omitted --></p>
<h2 id="gnu"><!-- raw HTML omitted -->5<!-- raw HTML omitted --> GNU</h2>
<h3 id="荜路蓝缕"><!-- raw HTML omitted -->5.1<!-- raw HTML omitted --> 荜路蓝缕</h3>
<p>在1983年, RMS 宣布了GNU 操作系统计划，计划开发出一个兼容 Unix的源码开放的操作系统，让 Unix用户可以无缝切换到 GNU 操作系统上. <!-- raw HTML omitted --></p>
<p>GNU 就是 &ldquo;GNU is Not Unix&quot;的缩写(那开头的GNU又是什么意思呢? 按照程序员的行话来说，这个叫递归) <!-- raw HTML omitted --></p>
<p>经过十多年的发展，Unix 已经成为操作系统事实上的标准，重新开发一个新的操作系统几近天方夜谭。 <!-- raw HTML omitted --></p>
<p>想象一下，有人跟你说要开发一个 Android 操作系统，用来替换掉 Google 的Android 系统，这工作量和难度可想而知，这就是现实中的想要移山的愚公，大战风车的堂吉诃德。 <!-- raw HTML omitted --></p>
<p>但是 RMS 并未被眼前的困难所吓退，而是一步一步，从0开始构建他心中的类Unix操作系统. <!-- raw HTML omitted --></p>
<p>1984年, RMS 开发并发布GNU Emacs 这个著名的文本编辑器, 方便程序员进行代码开发; <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/gnu_emacs.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>1986年, RMS 开发并发布GNU Debugger(gdb) 调试器, 方便程序员来调试程序; Emacs + gdb 就是他那个时代的IDE <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/gdb_screenshot.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>1987年, RMS 开发并发布GNU Compiler Collection(gcc) 编译器套件; 所谓的编译器，即将人写的代码，转换成机器可以运行的二进制代码。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/gcc_logo.svg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>开发出一个这样的软件就足以在计算机史上留名，RMS 在这3年间，还一口气开发出了3个，这样的技术水平和生产效率，只能让人叹服，影响力堪比盗火的普罗米修斯。 <!-- raw HTML omitted --></p>
<p>何况这些软件至今仍在迭代，被无数程序员所依赖，所使用。 <!-- raw HTML omitted --></p>
<p>比如微信的所有后台代码，都是使用GCC 编译出来的，也就是你现在也在间接使用着 RMS 当初编写的软件。 <!-- raw HTML omitted --></p>
<p>近40年过去了，市面上被广泛使用的C/C++编译器就只有三个: 微软家的 MSVC, 苹果支持开发的 Clang, 还有GNU 项目的 GCC. <!-- raw HTML omitted --></p>
<p>除此之外，GNU 项目还开发了许多的基础设施，如GNU make, GNU grep, bash，以及志在替换掉 PS的 GIMP 等等. <!-- raw HTML omitted --></p>
<p>除了基础设施外，GNU项目还希望类似通过美国宪法保证言论自由一样，通过法律和版权，确保软件开放源代码。 <!-- raw HTML omitted --></p>
<p>因此, 在1989年, RMS 发布了 GNU General Public License(GPL)授权, 主要内容是: 用户可以自由使用，复制，修改GPL软件, 派生的软件也必须使用GPL, 不能转换成闭源软件. <!-- raw HTML omitted --></p>
<p>从法律层面保证了GPL软件不会被有心人直接拿去闭源赚钱。 <!-- raw HTML omitted --></p>
<h3 id="开花结果"><!-- raw HTML omitted -->5.2<!-- raw HTML omitted --> 开花结果</h3>
<p>时间来到90年代, 经过近10年的耕耘, 在基础组件和配套设施相继完善之后，GNU 项目终于来到最关键的节点，开发出可以替换Unix 系统的内核(kernel). <!-- raw HTML omitted --></p>
<p>如果电脑硬件来比喻操作系统的话，就是内存，硬盘，主板，显示器，电源全部都就绪，就差最后的CPU, 画龙最后的点睛. <!-- raw HTML omitted --></p>
<p>但是GNU 的内核 Hurd 却迟迟未能发布, 而天下可谓苦闭源 Unix 久矣。 <!-- raw HTML omitted --></p>
<p>在1991年, 一个叫Linus的芬兰学生在社区上发布了他自己的业余项目：一个类Unix 的操作系统内核。 <!-- raw HTML omitted --></p>
<p>他把GNU 项目的相关组件(bash和gcc)移植到这个系统，也能正常运行起来了, 这个系统就是Linux(完整的名称应该是 GNU/Linux) <!-- raw HTML omitted --></p>
<p>自此, GNU 项目的最后一块拼图完整了, 十年磨一剑, GNU的基础组件加 Linus 的Linux内核, 一个志在替换 Unix 的操作系统终于完成了, 这就是 GNU/Linux. <!-- raw HTML omitted --></p>
<p>苦Unix久矣的社区的开发者云集而来，为 GNU/Linux 添砖加瓦, 让GNU/Linux 成为今天的参天大树(连微软家的服务器也在运行 Linux) <!-- raw HTML omitted --></p>
<p>&mdash; <!-- raw HTML omitted --></p>
<p>只见新人笑，哪闻旧人哭. <!-- raw HTML omitted --></p>
<p>有点离谱的是, GNU Hurd 已经开发超过30年了，还没有发布1.0(稳定可用版本). <!-- raw HTML omitted --></p>
<p>更离谱的是，最近还有更新: <!-- raw HTML omitted --></p>
<p>2023年6月份，还发布了2023年 <a href="https://lists.gnu.org/archive/html/bug-hurd/2023-06/msg00038.html">版本更新</a>: <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/gnu_hurd_2023_release.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<h2 id="轶事"><!-- raw HTML omitted -->6<!-- raw HTML omitted --> 轶事</h2>
<h3 id="教主"><!-- raw HTML omitted -->6.1<!-- raw HTML omitted --> 教主</h3>
<p>为什么称RMS 为教主呢？ <!-- raw HTML omitted --></p>
<p>因为RMS 创建了 Emacs 这个神的编辑器，自其诞生以来，与编辑器之神 Vi/Vim 的圣战就从未停息。 <!-- raw HTML omitted --></p>
<p>使用Emacs 的程序员与使用Vi/Vim 的程序员，一直在争论，究竟哪个才是更好的编辑器？ <!-- raw HTML omitted --></p>
<p>既然 RMS 是Emacs 的创始人，自然被使用 Emacs的人尊称为「教主」。 <!-- raw HTML omitted --></p>
<p>而这场争论已经持续近四十年，依旧没有分出胜负。 <!-- raw HTML omitted --></p>
<p>像 Google 这样浓眉大眼的家伙，还在不时地给这场战争拱火: <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/google_emacs.png"/> 
</figure>
  <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/google_vi.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<h3 id="教主与教主"><!-- raw HTML omitted -->6.2<!-- raw HTML omitted --> 教主与教主</h3>
<p>乔布斯被「果迷」尊称为「教主」，大家可能不知道的是，这两位「教主」曾经有过一场交锋。 <!-- raw HTML omitted --></p>
<p>1993年, 当时乔布斯还在 NeXT公司, 买下了 <code>Objective-C</code> 语言来开发应用程序(后来的IOS用的也是 <code>Objective-C</code>), 使用的编译器也是 GCC. <!-- raw HTML omitted --></p>
<p>NeXT 修改了 GCC的源码，以便增加对 =Objective-C=的支持，而GCC 使用的又是GPL 授权，而根据GPL 的授权，任何对GPL软件的修改，也必须要开放源代码。 <!-- raw HTML omitted --></p>
<p>所以乔布斯就问RMS, 他能否把 GCC 拆分成两部分，一部分是原来GCC, 继续开放源代码；另外一部分是增加 <code>Objective-C</code> 的GCC 编译器前端，闭源收费商用。 <!-- raw HTML omitted --></p>
<p>RMS 回复，当然是不可以。我估计老爷子心想，防的就是你这种人。 <!-- raw HTML omitted --></p>
<p>乔布斯只好将 <code>Objective-C</code> 编译器的前端也以GPL 授权开放出源代码。 <!-- raw HTML omitted --></p>
<p>&mdash; <!-- raw HTML omitted --></p>
<p>若干年后，苹果计划开发自己的编译器，因为设计以及授权的原因，在谋求与 GCC的合作未果后，转而支持 LLVM 的clang, 那也是后话了. <!-- raw HTML omitted --></p>
<h3 id="中国芯"><!-- raw HTML omitted -->6.3<!-- raw HTML omitted --> 中国芯</h3>
<p>根据 RMS <a href="https://usesthis.com/interviews/richard.stallman/">自述</a>, 他之前用的一直是中国科学院设计的龙芯处理器的龙梦电脑, 虽然这台电脑的性能，显示尺寸(只有9英寸)都无法让RMS 满意，但是这台电脑的是完全自由的，包括硬件, bios, 软件: <!-- raw HTML omitted --></p>
<blockquote>
<p>What hardware do you use? <!-- raw HTML omitted --></p>
<p>I am using a Lemote Yeelong, a netbook with a Loongson chip and a 9-inch display. This is my only computer, and I use it all the time. I chose it because I can run it with 100% free software even at the BIOS level. <!-- raw HTML omitted --></p>
</blockquote>
<p>在性能和自由之间，他一如既往地选择了「自由」 <!-- raw HTML omitted --></p>
<p>根据RMS <a href="https://stallman.org/intel.html">官网的描述</a>, 他不用intel 或者 amd 的芯片，是因为他们都有后门: <!-- raw HTML omitted --></p>
<blockquote>
<p>Reasons not to use Intel <!-- raw HTML omitted --></p>
<p>Don&rsquo;t use Intel processors newer than Core2, because they have the &ldquo;management engine&rdquo; back door. <!-- raw HTML omitted --></p>
<p>Recent AMD processors have a similar problem, but we do not yet have an article about it. <!-- raw HTML omitted --></p>
</blockquote>
<p>不过，据闻他的龙梦电脑被偷了之后，他也就换到 <a href="https://stallman.org/stallman-computing.html">ThinkPad 上了</a>: <!-- raw HTML omitted --></p>
<blockquote>
<p>As of 2022 I use a Thinkpad x200 computer, which has a free initialization program (Libreboot) and a free operating system (Trisquel GNU/Linux). <!-- raw HTML omitted --></p>
</blockquote>
<h3 id="抠脚"><!-- raw HTML omitted -->6.4<!-- raw HTML omitted --> 抠脚</h3>
<p>菜的抠脚就听说过，强得抠脚又是什么呢？ <!-- raw HTML omitted --></p>
<p>因为他真的抠脚（字面意思），还吃回去了。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/koujiao_1.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/koujiao2.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<h2 id="总结"><!-- raw HTML omitted -->7<!-- raw HTML omitted --> 总结</h2>
<p>他是天才黑客，是自由软件的精神领袖，是知行合一的孤勇者，更是个凡人堆里的理想主义者. <!-- raw HTML omitted --></p>
<p>当然，还是我大 Emacs 神教的教主. <!-- raw HTML omitted --></p>
<h2 id="参考"><!-- raw HTML omitted -->8<!-- raw HTML omitted --> 参考</h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/GNU_Compiler_Collection">https://en.wikipedia.org/wiki/GNU_Compiler_Collection</a> <!-- raw HTML omitted --></li>
<li><a href="https://en.wikipedia.org/wiki/Richard_Stallman">https://en.wikipedia.org/wiki/Richard_Stallman</a> <!-- raw HTML omitted --></li>
<li><a href="https://en.wikipedia.org/wiki/GNU_Emacs">https://en.wikipedia.org/wiki/GNU_Emacs</a> <!-- raw HTML omitted --></li>
<li><a href="https://en.wikipedia.org/wiki/GNU_Debugger">https://en.wikipedia.org/wiki/GNU_Debugger</a> <!-- raw HTML omitted --></li>
<li><a href="https://stallman.org/">https://stallman.org/</a> <!-- raw HTML omitted --></li>
<li><a href="https://usesthis.com/interviews/richard.stallman/">https://usesthis.com/interviews/richard.stallman/</a> <!-- raw HTML omitted --></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>产品的快速试错与及早反馈</title>
      <link>https://ramsayleung.github.io/zh/post/2023/%E4%BA%A7%E5%93%81%E7%9A%84%E5%BF%AB%E9%80%9F%E8%AF%95%E9%94%99%E4%B8%8E%E5%8F%8A%E6%97%A9%E5%8F%8D%E9%A6%88/</link>
      <pubDate>Fri, 07 Jul 2023 15:06:00 -0700</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2023/%E4%BA%A7%E5%93%81%E7%9A%84%E5%BF%AB%E9%80%9F%E8%AF%95%E9%94%99%E4%B8%8E%E5%8F%8A%E6%97%A9%E5%8F%8D%E9%A6%88/</guid>
      <description>1 关于 Demo 昨天下班路上，和朋友闲聊的时候，想起了当年大学时候看过的《李开复自传》的一个故事。 当年李开复在卡内基梅隆大学的研究方向是语音识别，即</description>
      <content:encoded><![CDATA[<h2 id="关于-demo"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> 关于 Demo</h2>
<p>昨天下班路上，和朋友闲聊的时候，想起了当年大学时候看过的《李开复自传》的一个故事。 <!-- raw HTML omitted --></p>
<p>当年李开复在卡内基梅隆大学的研究方向是语音识别，即如何将人说的声音，转变成计算机可以识别的文字内容。 <!-- raw HTML omitted --></p>
<p>他的语音识别的研究成果还被《商业周刊》评选为「1988年最重要科学创新奖」。 <!-- raw HTML omitted --></p>
<p>但是令我印象深刻的并非是语音识别的成果，而是他导师教他的，如何向世人展示他的成果的市场营销手段： <!-- raw HTML omitted --></p>
<blockquote>
<p>1988 年 4 月，我受邀到纽约参加一年一度的世界语音学术会议，发表学术论 <!-- raw HTML omitted -->
文。赴会的一个月前，我的导师瑞迪教授又给我上了一课，但是不是学术方面，而 <!-- raw HTML omitted -->
是市场方面的。 <!-- raw HTML omitted --></p>
<p>他对我说：“学术演讲的 30 分钟，你只要讲 25 分钟就行了，最后 5 分钟你拿 <!-- raw HTML omitted -->
一个话筒传给观众，让他们自己试试，这个系统是不是真的。” <!-- raw HTML omitted --></p>
<p>我说：“但是，会场噪音很大，一定会打折扣，达不到 96％成功率，而且那么多日本 <!-- raw HTML omitted -->
学者，他们的口音我的系统可没听过。” <!-- raw HTML omitted --></p>
<p>老师说：“实际上你的识别率是 90％还是 96％，没有什么差别。我们这么做的 <!-- raw HTML omitted -->
目的，不是要监测你的识别率，而是要造成一个效果，让每个学者终生都会记得， <!-- raw HTML omitted -->
第一次接触不指定语者系统就是在纽约，在李开复的演讲上。” <!-- raw HTML omitted --></p>
</blockquote>
<p>在学术结果和演示效果的交互相映之下，李开复的研究成果撼动了整个学术领域，认为他的研究成果，建立起了人机沟通的桥梁。 <!-- raw HTML omitted --></p>
<p>纵然演示者的PPT美轮美奂，演讲舌灿莲花，带来的冲击，远不如用户亲身体验来得强烈。 <!-- raw HTML omitted --></p>
<h2 id="mvp与及早反馈"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> MVP与及早反馈</h2>
<p>无论是所谓的敏捷和精益迭代开发，都强调快速试错，快速反馈，开发最小可用的产品(minimial viable product, MVP)。 <!-- raw HTML omitted --></p>
<p>所谓的快速试错，及早反馈，就是把产品原型做出来，然后让用户进行体验，收集用户反馈，再根据用户的评价，进行后续的优化和调整。 <!-- raw HTML omitted --></p>
<p>这样的理念无缝是非常有价值的，可以避免花了好几年，大量人力物力，做了一个过时或者不受市场青睐的产品。 <!-- raw HTML omitted --></p>
<p>而其中的「用户」，并不一定指的是最终使用你产品的「用户」，你的产品经理，组长，总监都是你的用户。 <!-- raw HTML omitted --></p>
<p>他们才是能决定你的产品方向的人，所以在做完产品原型之后，应该尽快让他们尝试产品原型，可以及早得到反馈和修改建议。 <!-- raw HTML omitted --></p>
<p>在展示 Demo 的时候，也应该由他们亲身去尝试产品，观察他们作为新用户的使用习惯； <!-- raw HTML omitted -->
以此得到的反馈和惊喜，也会比工程师亲身演示来得更真实和贴切。 <!-- raw HTML omitted --></p>
<p>此外，正如《动物庄园》里面说「所有动物生而平等，但有些动物比其他动物更平等」。 <!-- raw HTML omitted --></p>
<p>每个用户的反馈和建议都应该被平等对待的，只是他们的意见比普通用户的更平等。 <!-- raw HTML omitted --></p>
<p>而从管理者的角度来说，管理者对员工抱有高信任度的终究在少数，即使每位员工起早贪黑地干活，写周报，日报；开晨会，周会汇报进度； <!-- raw HTML omitted --></p>
<p>管理者难免会有疑问，项目什么时候才能做完，他们是否有在认真干活？ <!-- raw HTML omitted --></p>
<p>可能会有管理者跳出来说，「哪有这样的想法？」。 <!-- raw HTML omitted --></p>
<p>但事实就是许多的管理措施，都体现出这种不信任。 <!-- raw HTML omitted --></p>
<p>而提供MVP供管理者体验就是不断地告知管理者项目的进度： <!-- raw HTML omitted --></p>
<p><strong><strong>项目正在从蓝图，变为现实。</strong></strong> <!-- raw HTML omitted --></p>
<h2 id="后话"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> 后话</h2>
<p>但，尽早反馈，快速试错，从来都不应该成为加班的借口或理由。 <!-- raw HTML omitted --></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>闲聊写作的好处</title>
      <link>https://ramsayleung.github.io/zh/post/2023/%E9%97%B2%E8%81%8A%E5%86%99%E4%BD%9C/</link>
      <pubDate>Sat, 01 Jul 2023 10:28:00 -0700</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2023/%E9%97%B2%E8%81%8A%E5%86%99%E4%BD%9C/</guid>
      <description>1 前言 之前写《软件工程师的软技能指北》系列的时候，就有个挺想聊的话题的，就是写作。 其实不只是对软件工程师而言，我觉得对于所有人而言，都应该尝</description>
      <content:encoded><![CDATA[<h2 id="前言"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> 前言</h2>
<p>之前写《<a href="https://ramsayleung.github.io/zh/post/2023/%E6%80%BB%E8%A7%88%E7%AF%87/">软件工程师的软技能指北</a>》系列的时候，就有个挺想聊的话题的，就是写作。 <!-- raw HTML omitted --></p>
<p>其实不只是对软件工程师而言，我觉得对于所有人而言，都应该尝试下写作。 <!-- raw HTML omitted --></p>
<p>所以今天就来闲聊下写作的好处。 <!-- raw HTML omitted --></p>
<h2 id="提升表达能力"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> 提升表达能力</h2>
<p>社会上，或者是网络上，都会有对软件工程师（俗称码农）的刻板印象：加班多，情商低，表达能力不行，不修边幅。 <!-- raw HTML omitted --></p>
<p>国内国外，基本如此。 <!-- raw HTML omitted --></p>
<p>我去办信用卡的时候，负责帮我办卡的银行工作人员就两次问我，你们是否就只需要一天对着电脑，敲键盘就可以了？ <!-- raw HTML omitted --></p>
<p>虽说这只是刻板印象，但是的确切中了部分要点（起码对于我个人而言）。 <!-- raw HTML omitted --></p>
<p>以表达能力为例，我理解的表达能力好，就是能简洁明了，逻辑清晰地把一件复杂的事情描述清楚。 <!-- raw HTML omitted --></p>
<p>逻辑太跳跃，或者思路不流畅，就很容易让人听得云里雾里。 <!-- raw HTML omitted --></p>
<p>而表达能力本身又非常重要，无论与家人沟通，同事合作或者晋升答辩，良好的表达能力都能事半功倍。 <!-- raw HTML omitted --></p>
<p>而写作就要求你把自己脑海中以网状交织的知识，以结构清晰的方式，呈现给读者，做到「娓娓道来」。 <!-- raw HTML omitted --></p>
<p>在这个过程中，你的文字表达能力能得到提升，口头表达能力也会得到提升。 <!-- raw HTML omitted --></p>
<p>因为两者是相通的，都要求头脑对需要表达的内容具有层次性和条理性，只是最终的输出手段有差别。 <!-- raw HTML omitted --></p>
<h2 id="加深理解"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> 加深理解</h2>
<p>在写作时，我总有种奇怪的感觉「这个东西我懂，但是我写不出来」。 <!-- raw HTML omitted --></p>
<p>其内在原因是，对于该领域的内容，「我懂，但不是完全理解，无法做到信手拈来。」 <!-- raw HTML omitted --></p>
<p>因为要给写一篇让人能读懂的文章，势必要从基本的概念开始讲起，然后层层递进， <!-- raw HTML omitted -->
如果你对该领域的知识体系理解不到位，就会出现卡壳，写不出来的情况。 <!-- raw HTML omitted --></p>
<p>写作过程就促使你回头重新学习，弥补薄弱之处，进而加深对整个体系的理解。 <!-- raw HTML omitted --></p>
<p>所以写作本身就是在践行最好的学习方法：《<a href="https://ramsayleung.github.io/zh/post/2022/feynman_technique/">费曼学习法</a>》。 <!-- raw HTML omitted --></p>
<p>只是从给小朋友讲解，变成了写作，向所有读者分享。 <!-- raw HTML omitted --></p>
<h2 id="促进内容传播"><!-- raw HTML omitted -->4<!-- raw HTML omitted --> 促进内容传播</h2>
<p>对比常见的沟通（如微信聊天，面对面交流等）和信息交流方式（音频，视频），文章拥有更好的传播优势。 <!-- raw HTML omitted --></p>
<p>如果你是面对面与人交流，或者微信聊天，你的交流方式是点对点的，只限于对面的人，你无法将信息广播给其他人； <!-- raw HTML omitted -->
而文章传播是点对面的，文章可以被复制，粘贴以及转发，自然拥有更广的受众。 <!-- raw HTML omitted --></p>
<p>又因为面对面交流，或者微信聊天是点对点的，所以你回答A的问题，可能也会被B问到，但是你却无法「复用」你的答案； <!-- raw HTML omitted -->
而文章是可被复用的，如果A和B看完文章，疑问自消。 <!-- raw HTML omitted --></p>
<p>而对比音频，视频等多媒体内容，文章的传播成本更低，可以直接被转发； <!-- raw HTML omitted -->
此外文章的阅读成本也比音频，视频更低，你可以检读，跳读，搜索文章内容，而视频只能从头看完，才能知道其究竟介绍了什么内容。 <!-- raw HTML omitted --></p>
<h2 id="建立影响力"><!-- raw HTML omitted -->5<!-- raw HTML omitted --> 建立影响力</h2>
<p>无论是有意还是无意，当你写的文章被阅读，被传播之后，你就在建立影响力。 <!-- raw HTML omitted --></p>
<p>如果需要建立影响力，可以通过演讲，制作B站或Youtube视频，或者写作来实现。所以会有这样的话： <!-- raw HTML omitted --></p>
<blockquote>
<p>如果你是个外向的人，你就去演讲和拍视频。 <!-- raw HTML omitted --></p>
<p>如果你是个内向的人，你就去写作。 <!-- raw HTML omitted --></p>
</blockquote>
<p>但从传播学的角度来说，演讲和视频的传播优势都不如文章。 <!-- raw HTML omitted --></p>
<p>而建立个人影响力，都可能会对你的事业和心理健康起到促进作用。 <!-- raw HTML omitted --></p>
<p>从事业的角度来分析，建立影响力可以建立个人品牌，积累个人的影响力，助力职业发展和提升。 <!-- raw HTML omitted --></p>
<p>更多的人知道你，你才会有更多的机会，毕竟有人的地方才会有机会。 <!-- raw HTML omitted --></p>
<p>从自我实现的角度来分析，你的影响力越大，你的读者越多，你传播的知识可以影响和帮助到读者就越多，你就越能满足心理学家马斯洛所说的「自我实现」需求。 <!-- raw HTML omitted --></p>
<h2 id="碰撞交流的火花"><!-- raw HTML omitted -->6<!-- raw HTML omitted --> 碰撞交流的火花</h2>
<p>写文章本质就是在分享观点，当文章被传播，有了读者之后，自然会有人对你的观点持赞同态度，有人持保留意见。 <!-- raw HTML omitted --></p>
<p>读者就有可能向你阐述他们自己的想法： <!-- raw HTML omitted --></p>
<blockquote>
<p>当你有一个苹果，我也有一个苹果，我们交换了苹果，也只有一个苹果； <!-- raw HTML omitted --></p>
<p>但当你有一个想法，我也有一个想法之后，我们交换想法，我们就有了两个想法。 <!-- raw HTML omitted --></p>
</blockquote>
<p>要做到闻过则喜非常难，但是不同的观点就相当于一面镜子，可以让我们审视自己原来的观点是否合理。 <!-- raw HTML omitted --></p>
<p>他人的观点也给我们提供了换位思考的机会，从他人的观点切入，了解别人是如何思考的，避免「同温层效应」，只听到自己想听到的观点。 <!-- raw HTML omitted --></p>
<h2 id="记录思考与成长"><!-- raw HTML omitted -->7<!-- raw HTML omitted --> 记录思考与成长</h2>
<p>所谓「雁过留声」，又所谓「雁去无痕」。 <!-- raw HTML omitted --></p>
<p>横向对比，每个人都是独立的个体；纵向对比，每个人在不同的时期又会有不同的思考和感悟。 <!-- raw HTML omitted --></p>
<p>中学时候，语文老师总是会鼓励大家写日记，或者周记，说可以提高自己的作文水平。 <!-- raw HTML omitted --></p>
<p>所以我当时「轻信」老师的建议，尝试写了近1年的日记和周记，希望可以借此提高下自己的作文成绩。 <!-- raw HTML omitted --></p>
<p>但是即使我写了一年的笔记，也没有见语文老师多给我的作文一些分，感觉用处着实不大，然后就放弃了。 <!-- raw HTML omitted --></p>
<p>前段时间，在家里的柜子发现我这些用稚嫩笔迹写下的日记，翻看着有些泛黄的，写着的各种生活小事或者心情的纸张，忍不住笑了起来。 <!-- raw HTML omitted --></p>
<p>又或者翻开自己大二大三写的博客，记录着自己当初学习的一些笔记，稚嫩的思考，都会有种翻看旧照片的感觉。 <!-- raw HTML omitted --></p>
<p>写作，大概就相当于是用笔触作胶卷，给当下自己的思考和感悟拍下一幅幅「游客照」，以待日后再聆听昔日「雁行」时所留下过的声音。 <!-- raw HTML omitted --></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>我的搜索流：高效搜索经验分享</title>
      <link>https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E6%90%9C%E7%B4%A2%E6%B5%81/</link>
      <pubDate>Sun, 25 Jun 2023 13:55:00 -0700</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E6%90%9C%E7%B4%A2%E6%B5%81/</guid>
      <description>1 前言 人并非全知全能，工作和生活难免会有各种的疑问，有问题自然可以询问有经验的同事或朋友。 但为了避免一有问题就去问人，给别人造成困扰，更推荐</description>
      <content:encoded><![CDATA[<h2 id="前言"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> 前言</h2>
<p>人并非全知全能，工作和生活难免会有各种的疑问，有问题自然可以询问有经验的同事或朋友。 <!-- raw HTML omitted --></p>
<p>但为了避免一有问题就去问人，给别人造成困扰，更推荐的就是: 自己先搜索，然后再去问人(Do a search before you ask a question) <!-- raw HTML omitted --></p>
<p>当然，如果你不想打扰他人，直接问ChatGPT也未尝不可，只是答案的准确性不一定有保证。 <!-- raw HTML omitted --></p>
<p>如何高效地搜索，缩小搜索的范围，如何快速地检索到答案呢？ <!-- raw HTML omitted --></p>
<p>那么我来分享一下自己的个人经验： <!-- raw HTML omitted --></p>
<h2 id="google-search"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> Google Search</h2>
<p>虽然我认为「搜索并不仅限于使用搜索引擎」，但是「搜索引擎」却是搜索并不可少的一部分。 <!-- raw HTML omitted --></p>
<p>虽然搜索引擎有很多，但是我基本只用 Google；如果没法使用 Google, 那么推荐使用Bing, 反正百度不在我的推荐之列. <!-- raw HTML omitted --></p>
<p>Google 搜索的界面很简单，只有一个搜索框，用户只需要把想要搜索的内容输入进去并回车即可。 <!-- raw HTML omitted --></p>
<p>比如搜索：「cpp modules」，返回了 7,320,000条结果。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/google_search_result.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>搜索结果太多，我想对搜索内容进行筛选，google 就提供了相当多的搜索指令(search operator) <!-- raw HTML omitted --></p>
<h3 id="时间"><!-- raw HTML omitted -->2.1<!-- raw HTML omitted --> 时间</h3>
<p>cpp modules是c++20 才新增的特性，如果我想按时间搜索下相关的内容，可以使用 <code>:before</code>, <code>:after</code> 指令，后面跟着一个日期: <!-- raw HTML omitted --></p>
<pre tabindex="0"><code class="language-nil" data-lang="nil">cpp modules :before 2020
</code></pre><p><figure>
    <img loading="lazy" src="/ox-hugo/google_search_before.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>可以看到搜索结果变成了185,000条，并且返回的搜索结果都是在 2020 年以前的纪录，这个在查看历史新闻时特别有用，比如看历史合订本。 <!-- raw HTML omitted --></p>
<h3 id="站点"><!-- raw HTML omitted -->2.2<!-- raw HTML omitted --> 站点</h3>
<p>如果你只想搜索某个站点，但是这个站点没有提供搜索功能（比如学校或者公司官网），或者搜索质量不够好，那么就可以加上 <code>site:</code> 的关键词, 要求 Google 只返回某个网站的检索结果: <!-- raw HTML omitted --></p>
<p>比如我想看下 jetbrains家的IDE 对 c++ 20 Modules的支持程度: <!-- raw HTML omitted --></p>
<pre tabindex="0"><code class="language-nil" data-lang="nil">cpp modules site:jetbrains.com
</code></pre><p><figure>
    <img loading="lazy" src="/ox-hugo/google_search_site.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>又或者，我搜索网站的时候，想把某个网站排除掉, 比如使用中文搜索编程相关关键词的时候，经常会被CSDN 的垃圾内容污染，那么就可以使用 <code>-</code>, 来排除掉某些内容. <!-- raw HTML omitted --></p>
<pre tabindex="0"><code class="language-nil" data-lang="nil">cpp modules -microsoft
</code></pre><p><figure>
    <img loading="lazy" src="/ox-hugo/google_search_exclude.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>原来排名第二的 Miscrosft 就被过滤掉了. <!-- raw HTML omitted --></p>
<h3 id="社交媒体"><!-- raw HTML omitted -->2.3<!-- raw HTML omitted --> 社交媒体</h3>
<p>如果你想在社交媒体上搜索某个关键词，那么可以使用 <code>@</code> 后跟社交媒体的名字来进行搜索，例如 &ldquo;cpp modules @twitter&rdquo; 或者 &ldquo;cpp modules @reddit&rdquo;, 可以把 <code>@</code> 理解成是 <code>:site</code> 指令的简化版本. <!-- raw HTML omitted --></p>
<p>只是社交媒体(social media)的定义比较含糊, Google没有给出具体的说明，但是比较有名的社交媒体都是支持的. <!-- raw HTML omitted --></p>
<pre tabindex="0"><code class="language-nil" data-lang="nil">cpp modules @reddit
</code></pre><p><figure>
    <img loading="lazy" src="/ox-hugo/google_search_reddit.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<pre tabindex="0"><code class="language-nil" data-lang="nil">cpp modules @zhihu
</code></pre><p><figure>
    <img loading="lazy" src="/ox-hugo/google_search_zhihu.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<h3 id="文件类型"><!-- raw HTML omitted -->2.4<!-- raw HTML omitted --> 文件类型</h3>
<p>可以通过 <code>filetype</code> 来指定想要搜索的文件类型，比如想搜索 pdf 相关的内容: <!-- raw HTML omitted --></p>
<pre tabindex="0"><code class="language-nil" data-lang="nil">cpp modules filetype:pdf
</code></pre><p><figure>
    <img loading="lazy" src="/ox-hugo/google_search_pdf.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>这个在知道书名，想要搜索电子书的时候特别有用. <!-- raw HTML omitted --></p>
<h3 id="关键字匹配"><!-- raw HTML omitted -->2.5<!-- raw HTML omitted --> 关键字匹配</h3>
<p>Google 支持若干个关键字匹配的指令: <!-- raw HTML omitted --></p>
<p>双引号: &ldquo;cpp modules&rdquo;, 精确匹配，只匹配包含&quot;cpp modules&quot;的内容 <!-- raw HTML omitted --></p>
<pre tabindex="0"><code class="language-nil" data-lang="nil">&#34;cpp modules&#34;
</code></pre><p><figure>
    <img loading="lazy" src="/ox-hugo/google_search_precise_match.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>搜索结果变成 3530 条纪录了. <!-- raw HTML omitted --></p>
<ul>
<li>星号: &ldquo;* modules&rdquo;, 通配符，所有包含 &ldquo;modules&quot;的内容都会被检索出来。个人觉得用处不大，只会让搜索结果膨胀. <!-- raw HTML omitted --></li>
<li>OR: &ldquo;cpp or module&rdquo;, 匹配包含 &ldquo;cpp&rdquo; 或者&quot;module&rdquo; 的内容, <code>or</code> 可以使用竖线代替 <code>|</code> 个人觉得用处不大，也只会让搜索结果膨胀 <!-- raw HTML omitted --></li>
<li>AND: &ldquo;cpp and module&rdquo;, 匹配包含 &ldquo;cpp&rdquo; 与&quot;module&quot; 的内容, <code>and</code> 可以使用与符号代替 <code>&amp;</code> <!-- raw HTML omitted --></li>
</ul>
<p><figure>
    <img loading="lazy" src="/ox-hugo/google_search_and.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<h2 id="custome-search"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> Custome Search</h2>
<p>前面提到「搜索并不仅限于使用搜索引擎」，是因为有很多内容，搜索引擎检索不到。 <!-- raw HTML omitted --></p>
<p>比如在公司内网的信息，Google 再强大，也不可能会检索得到的，因为不公开。 <!-- raw HTML omitted --></p>
<p>这个时候就可以借助浏览器的 Custom Search能力（Chrome 叫 Site Search, Firefox叫 Keyword Search）。 <!-- raw HTML omitted --></p>
<p>举个例子，我的老东家用的是代码搜索工具是 <a href="https://oracle.github.io/opengrok/">OpenGrok</a>, 可以搜索整个事业群的代码，支持多种语言，可以搜索代码的定义，引用，历史记录等。 <!-- raw HTML omitted --></p>
<p>（下文以同样使用 OpenGrok 部署的开源项目 <code>LibreOffice</code> 的代码为例子） <!-- raw HTML omitted --></p>
<p>因为在日常开发的时候，遇到陌生的函数名或者枚举定义，就需要看下他们的定义与实现，看下有没有问题： <!-- raw HTML omitted --></p>
<p>比如想看下 <code>contains</code> 这个函数的实现： <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/libre_office_definition.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>或者想看下 <code>Intersection</code> 这个函数的引用，看下其他人是怎么用这个函数的，我也顺便抄下。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/libre_office_symbol.png"/> 
</figure>
  <!-- raw HTML omitted --></p>
<p>一般的步骤是: <!-- raw HTML omitted --></p>
<ol>
<li>打开或切换到浏览器(Chrome/Firefox) <!-- raw HTML omitted --></li>
<li>打开内网网站链接, 在例子中就是 <a href="https://opengrok.libreoffice.org">https://opengrok.libreoffice.org</a> <!-- raw HTML omitted --></li>
<li>点击 <code>Definition</code> 或者 <code>Symbol</code> <!-- raw HTML omitted --></li>
<li>输入或者粘贴想要查询的内容，比如 <code>contains</code> <!-- raw HTML omitted --></li>
</ol>
<p>一套流程下来，大概需要30-40秒，不能说很慢吧，但是起码算不上快。 <!-- raw HTML omitted --></p>
<p>但是如果使用 Custom Search, 大概可以缩短至 7-8秒, 并且适用于绝对大部分的网站. <!-- raw HTML omitted --></p>
<p>首先把查询函数引用的url 复制下来, 观察： <!-- raw HTML omitted --></p>
<pre tabindex="0"><code class="language-log" data-lang="log">https://opengrok.libreoffice.org/search?full=&amp;defs=&amp;refs=Intersection&amp;path=&amp;hist=&amp;type=cxx&amp;xrd=&amp;nn=19&amp;si=refs&amp;searchall=true&amp;si=refs
</code></pre><p><code>refs</code> 后面跟着的就是需要查询的内容, 即 <code>Intersection</code>, 将 <code>Intersection</code> 替换成 <code>%s</code> : <!-- raw HTML omitted --></p>
<pre tabindex="0"><code class="language-log" data-lang="log">https://opengrok.libreoffice.org/search?full=&amp;defs=&amp;refs=%s&amp;path=&amp;hist=&amp;type=cxx&amp;xrd=&amp;nn=19&amp;si=refs&amp;searchall=true&amp;si=refs
</code></pre><h3 id="chrome-chromium-site-search"><!-- raw HTML omitted -->3.1<!-- raw HTML omitted --> Chrome/Chromium Site Search</h3>
<p>打开Chrome/Chromium -&gt; 点击设置(Setting) -&gt; 点击搜索引擎（Search Engine） -&gt; Manage search engines and site search -&gt; Site search [Add] <!-- raw HTML omitted --></p>
<ul>
<li>Search Engine: OpenGrok Code Search Find Reference(取个有意义的名字) <!-- raw HTML omitted --></li>
<li>Keyword: csr <!-- raw HTML omitted --></li>
<li>URL: <code>https://opengrok.libreoffice.org/search?full=&amp;defs=&amp;refs=%s&amp;path=&amp;hist=&amp;type=cxx&amp;xrd=&amp;nn=19&amp;si=refs&amp;searchall=true&amp;si=refs</code> <!-- raw HTML omitted --></li>
</ul>
<p><figure>
    <img loading="lazy" src="/ox-hugo/google_site_search_ref.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>然后，在Chrome 的浏览器地址，输入 <code>csr</code>, 空格, 再搜索 <code>Intersection</code>, 回车。就可以直接在Chrome 地址栏里面搜索指定网页的代码. <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/google_site_search_csr.gif"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>而搜索代码定义，URL 如下: <!-- raw HTML omitted --></p>
<pre tabindex="0"><code class="language-log" data-lang="log">https://opengrok.libreoffice.org/search?full=&amp;defs=Intersection&amp;refs=&amp;path=&amp;hist=&amp;type=cxx&amp;xrd=&amp;nn=19&amp;si=defs&amp;searchall=true&amp;si=defs
</code></pre><p>只需要将 <code>defs</code> 后面的内容修改成 <code>%s</code>, 再建一个新的site search, 名为 <code>Opengrok Code Search Find Definition</code>, keyword 为 <code>csd</code>, 就可以快速搜索代码定义. <!-- raw HTML omitted --></p>
<p>如果想要搜索其他网站，比如公司内网: <a href="https://search.xxoa.com/query=Foobar">https://search.xxoa.com/query=Foobar</a>, <!-- raw HTML omitted -->
只需要把查询内容修改为 %s, 再新建个Site Search 即可。 <!-- raw HTML omitted --></p>
<p>在老东家，搜索错误码，或者是搜索内网上的文章，我都是这么干的；所以到新东家之后，我也是这么搞的。 <!-- raw HTML omitted --></p>
<h3 id="firefox"><!-- raw HTML omitted -->3.2<!-- raw HTML omitted --> Firefox</h3>
<p>Firefox 也提供类似的功能，叫 Keyword Search, 添加起来甚至更方便: <!-- raw HTML omitted --></p>
<ol>
<li>打开想要搜索的网站 <!-- raw HTML omitted --></li>
<li>在搜索框点击鼠标右键，然后会看到一个「Add a Keyword for this Search&hellip;」 <!-- raw HTML omitted --></li>
<li>修改名字与 keyword <!-- raw HTML omitted --></li>
</ol>
<p><figure>
    <img loading="lazy" src="/ox-hugo/firefox_add_key_word_search.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/firefox_add_key_word_search_bookmark.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>然后，在 Firefox 的浏览器地址，输入 <code>csd</code>, 空格, 再搜索 <code>Intersection</code>, 回车。就可以直接在 Firefox 地址栏里面搜索指定网页的代码. <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/firefox_keyword_search.gif"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>如果没有右键时没有找到 「Add a Keyword for this Search&hellip;」的选项，也可以使用添加书签的方式，手动添加一个 keyword search: <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/firefox_add_bookmark.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<h2 id="alfred-web-search"><!-- raw HTML omitted -->4<!-- raw HTML omitted --> Alfred Web Search</h2>
<p>如果使用的是 Mac OS, 那么通过Alfred 插件的 Web Search功能，甚至可以不用手动切换到浏览器，直接就可以进行搜索，可以把搜索流的耗时进一步缩短到1-3秒。 <!-- raw HTML omitted --></p>
<p>Alfred -&gt; Preference -&gt; Web Search -&gt; Add custome Search <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/alfred_web_seasch.jpg"/> 
</figure>
  <!-- raw HTML omitted --></p>
<p>除了要将 <code>%s</code> 换成 <code>{query}</code> 之外, 其他添加的步骤与 Site Search 一致： <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/alfred_code_search.gif"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>录制 Gif 只花了1.5 秒. <!-- raw HTML omitted --></p>
<h2 id="总结"><!-- raw HTML omitted -->5<!-- raw HTML omitted --> 总结</h2>
<p>Perl语言之父Larry Wall 有句广为人知的名言：「程序员要有三大美德：急躁，懒惰，自大」。 <!-- raw HTML omitted --></p>
<ul>
<li>急躁意味着不愿意花时间等待缓慢的程序，会想办法优化程序； <!-- raw HTML omitted --></li>
<li>自大意味着不愿让人指谪，对自身要求强，要写出高质量的代码； <!-- raw HTML omitted --></li>
<li>懒惰意味着不想花精心做重复无用的事情，会想办法自动化，让电脑帮忙处理。 <!-- raw HTML omitted --></li>
</ul>
<blockquote>
<p>&ldquo;We will encourage you to develop the three great virtues of a programmer: laziness, impatience, and hubris.&rdquo; &ndash; LarryWall <!-- raw HTML omitted --></p>
</blockquote>
<p>而我对搜索流的优化，就是在培养「急躁」与「懒惰」的美德。 <!-- raw HTML omitted --></p>
<h2 id="延伸阅读"><!-- raw HTML omitted -->6<!-- raw HTML omitted --> 延伸阅读</h2>
<p>我的各种「流」： <!-- raw HTML omitted --></p>
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E5%86%99%E4%BD%9C%E6%B5%81/">我的写作流：写作工具与平台分享</a> <!-- raw HTML omitted --></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E7%94%BB%E5%9B%BE%E6%B5%81/">我的画图流：画图工具与技巧分享</a> <!-- raw HTML omitted --></li>
</ul>
<h2 id="参考"><!-- raw HTML omitted -->7<!-- raw HTML omitted --> 参考</h2>
<ul>
<li><a href="https://support.mozilla.org/en-US/kb/how-search-from-address-bar">Mozilla Support: How to search IMDB, Wikipedia and more from the address bar</a> <!-- raw HTML omitted --></li>
<li><a href="https://support.google.com/websearch/answer/2466433">Google Document: Refine web searches</a> <!-- raw HTML omitted --></li>
<li><a href="https://support.google.com/websearch/answer/35890">Google Document: Do an Advanced Search on Google</a> <!-- raw HTML omitted --></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>两个鲜为人知的Gmail地址技巧</title>
      <link>https://ramsayleung.github.io/zh/post/2023/gmail%E5%9C%B0%E5%9D%80%E7%9A%84%E9%9A%90%E8%97%8F%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Sat, 24 Jun 2023 20:15:00 -0700</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2023/gmail%E5%9C%B0%E5%9D%80%E7%9A%84%E9%9A%90%E8%97%8F%E6%8A%80%E5%B7%A7/</guid>
      <description>1 前言 分享两个鲜为人知，但是却相当有用的 Gmail 地址技巧。「鲜为人知」并非是标题党，而是引用Gmail 博客原话： I recently discovered some little-known ways to use your Gmail address that can give you greater control</description>
      <content:encoded><![CDATA[<h2 id="前言"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> 前言</h2>
<p>分享两个鲜为人知，但是却相当有用的 Gmail 地址技巧。「鲜为人知」并非是标题党，而是引用Gmail 博客原话： <!-- raw HTML omitted --></p>
<blockquote>
<p>I recently discovered some <strong><strong>little-known</strong></strong> ways to use your Gmail address that can give you greater control over your inbox and save you some time and headache. <!-- raw HTML omitted --></p>
</blockquote>
<h2 id="技巧"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> 技巧</h2>
<p>假设你的Gmail 地址是 <code>xiaoming@gmail.com</code>: <!-- raw HTML omitted --></p>
<h3 id="加号"><!-- raw HTML omitted -->2.1<!-- raw HTML omitted --> 加号</h3>
<p>你可以将在用户名后面增加一个加号 <code>+</code>, 并在加号后面增加任意数量的字符，比如 <code>xiaoming+happy@gmail.com</code>, <code>xiaoming+upset@gmail.com</code>, Gmail 都会把这些地址当作成 <code>xiaoming@gmail.com</code>, 发送到你的地址邮箱中。 <!-- raw HTML omitted --></p>
<h3 id="点号"><!-- raw HTML omitted -->2.2<!-- raw HTML omitted --> 点号</h3>
<p>你也可以在地址的任意地方插入任意数量的点号: <code>.</code>, 比如 <code>x.i.a..o.ming@gmail.com</code>, <code>xiao...mi..ng@gmail.com</code>, Gmail 都会把点号忽略掉，解析成 <code>xiaoming@gmail.com</code> <!-- raw HTML omitted --></p>
<h2 id="用途"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> 用途</h2>
<p>技巧比较简单，寥寥数语就说完了，好像也没有什么大不了，有什么用处么？ <!-- raw HTML omitted --></p>
<p>这个就要发挥想象力了。 <!-- raw HTML omitted --></p>
<h3 id="用途一-重复注册用户"><!-- raw HTML omitted -->3.1<!-- raw HTML omitted --> 用途一：重复注册用户</h3>
<p>这个主要是针对能使用邮箱注册的网站，可能大多数是国外网站。 <!-- raw HTML omitted --></p>
<p>如果网站的邮箱地址校验正则写得不好，允许加号和点号，不知道Gmail的这两个规则，那么 <code>xiaoming+user1@gmail.com</code>, <code>xiaoming+user2@gmail.com</code>, <code>xi..aoming@gmail.com</code> 就会被认为是三个不同的邮箱地址，就可以重复注册。 <!-- raw HTML omitted --></p>
<p>在薅羊毛等需要重复注册用户的场景就比较有用了。 <!-- raw HTML omitted --></p>
<h3 id="用途二-溯源"><!-- raw HTML omitted -->3.2<!-- raw HTML omitted --> 用途二：溯源</h3>
<p>个人邮箱难免会收到一些奇怪的邮件，例如：猎头的招聘邮件，钓鱼邮件等等。 <!-- raw HTML omitted --></p>
<p>收到这些邮件的第一反应肯定是把邮件删掉，之后就会思考，究竟是哪里泄漏了个人邮箱。 <!-- raw HTML omitted --></p>
<p>而通过 Gmail 加号的技巧，我就可以做到垃圾邮件溯源. <!-- raw HTML omitted --></p>
<p>首先，在注册每个网站的时候，都给他们加上一个tag, 例如注册Twitter, 那就用 <code>xiaoming+twitter@gmail.com</code>, 如果注册Github, 那就用 <code>xiaoming+github@gmail.com</code>, 依此类推。 <!-- raw HTML omitted --></p>
<p>只要有垃圾邮件，我就能通过加号的后缀，知道是哪个浓眉大眼的网站把我的信息给泄漏出去了。 <!-- raw HTML omitted --></p>
<p>比如下面这个垃圾邮件，我就知道它是通过爬虫爬取我Github 公开邮件群发的. <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/gmail_plus_sign_example.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>我就可以选择不公开 Github 邮箱，来避免后续收到类似的邮件。 <!-- raw HTML omitted --></p>
<h2 id="参考"><!-- raw HTML omitted -->4<!-- raw HTML omitted --> 参考</h2>
<ul>
<li><a href="https://gmail.googleblog.com/2008/03/2-hidden-ways-to-get-more-from-your.html">Google Gmail Blog: 2 hidden ways to get more from your Gmail address</a> <!-- raw HTML omitted --></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>英语听力学习工具分享</title>
      <link>https://ramsayleung.github.io/zh/post/2023/%E8%8B%B1%E8%AF%AD%E5%90%AC%E5%8A%9B%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7%E5%88%86%E4%BA%AB/</link>
      <pubDate>Thu, 15 Jun 2023 20:49:00 -0700</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2023/%E8%8B%B1%E8%AF%AD%E5%90%AC%E5%8A%9B%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7%E5%88%86%E4%BA%AB/</guid>
      <description>1 前言 学习一门语言和学习手艺，过程差不多，没有太多的捷径可走，除了练习，还是练习。 无论是以前，还是现在，去公司上班，都需要接近一个小时的时间</description>
      <content:encoded><![CDATA[<h2 id="前言"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> 前言</h2>
<p>学习一门语言和学习手艺，过程差不多，没有太多的捷径可走，除了练习，还是练习。 <!-- raw HTML omitted --></p>
<p>无论是以前，还是现在，去公司上班，都需要接近一个小时的时间通勤。 <!-- raw HTML omitted --></p>
<p>为了不浪费通勤的一小时，我大多会在路上收听英文播客来练习英语听力。 <!-- raw HTML omitted --></p>
<h2 id="工具"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> 工具</h2>
<p>以前是坐班车上班，经常是听着听着英语听力就睡着了，毕竟播客的对话有深有浅，听不懂就容易睡着，英语练习就变成班车补觉。 <!-- raw HTML omitted --></p>
<p>虽然各种英语学习心得都强调多听的重要性，但是架不住着实听不懂，Podcasts App又没有办法展示字幕，你只知道你听不懂这个单词，但是却不知道这个单词究竟是什么？ <!-- raw HTML omitted --></p>
<p>不会的内容就不会有机会改善。 <!-- raw HTML omitted --></p>
<p>最近接触到一个很优秀的 Podcasts APP, 名为 Snipd, 可以通过AI自动把播客内容翻译成字幕。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/snipd_appstore.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/snipd_transcript1.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>说来有趣，这个Podcasts 软件的产品初衷并不是为了英语学习，而是类似视频截图，将播客的精彩瞬间和金句分享出来。 <!-- raw HTML omitted --></p>
<p>但是声音是很难以视觉化的方式来进行分享，转发的，所以他们就直接将当前播放进度前后80秒的内容以字幕形式呈现。 <!-- raw HTML omitted --></p>
<p>如果想要记录生词，可以直接点击创建「Create snip」，将句子保存下来，相当于保存了生词的上下文。 <!-- raw HTML omitted --></p>
<p>对于字幕生成，我现在发现，Snipd是采用离线缓存+在线生成的方式的： <!-- raw HTML omitted --></p>
<p>如果是热门播客，可能就有用户已经提交了生成字幕请求，其他用户直接点开播客就可以直接展示； <!-- raw HTML omitted -->
对于冷门播客，需要我点击生成字幕，等待个10分钟，他们后台生成完成后会再通知我。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/snip1.jpg"/> 
</figure>
  <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/snip2.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>使用这个App还有一个附带的好处：可以收听非常多的海外播客。 <!-- raw HTML omitted --></p>
<p>因为中国什么都会有特供版本，播客也不例外。 <!-- raw HTML omitted --></p>
<p>如果使用的是国区的 Apple Id, 那么使用Iphone 自带的Podcasts App, 有非常多优秀的海外播客都无法搜索到（毕竟「收听敌对电台」） <!-- raw HTML omitted --></p>
<p>而这个Snipd App可以搜索到非常多的海外播客，而大部分的英文播客都是海外播客。 <!-- raw HTML omitted --></p>
<h2 id="播客"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> 播客</h2>
<p>推荐几个我经常收听的英文播客： <!-- raw HTML omitted --></p>
<h3 id="healthy-hacker"><!-- raw HTML omitted -->3.1<!-- raw HTML omitted --> Healthy hacker</h3>
<p>网站链接：<a href="https://www.healthyhacker.com/">https://www.healthyhacker.com/</a> <!-- raw HTML omitted --></p>
<p>一个从苹果天才吧电脑维修员工，成长为Github 工程师的小哥Chris Hunt主持的播客，我个人的最爱，主要是分享一些 Chris 自己觉得有趣的东西。 <!-- raw HTML omitted --></p>
<p>Chris 声音热情洋溢，可惜播客在2019年之后就没有更新了。 <!-- raw HTML omitted --></p>
<p>从天才吧员工成长为Github 工程师的那一期: <a href="https://www.healthyhacker.com/2014/10/06/growing-as-a-programmer/">《11: Growing as a programmer》</a> <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/healthy_hacker.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<h3 id="the-changelog"><!-- raw HTML omitted -->3.2<!-- raw HTML omitted --> THE CHANGELOG</h3>
<p>网站链接：<a href="https://changelog.com/podcast">https://changelog.com/podcast</a> <!-- raw HTML omitted -->
主要是分享软件工程，极客和行业创新，也有不少大咖上过播客，比如： <!-- raw HTML omitted --></p>
<p>Ruby On Rail之父 DHH, Sqlite 作者 D. Richard Hipp, Ruby之父，以及K&amp;R 中的K( Brian Kernighan) . <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/the_changelog.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<h3 id="daily-easy-english-expression"><!-- raw HTML omitted -->3.3<!-- raw HTML omitted --> Daily Easy English Expression</h3>
<p>网站地址: <a href="https://dailyeasyenglish.libsyn.com/">https://dailyeasyenglish.libsyn.com/</a> <!-- raw HTML omitted --></p>
<p>一个美国老师每期分享的地道英语词句的表达，每期只有几分钟。因为主持人是专业的英语外教，所以语速较慢，难度较低，非常好懂。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/daily_easy_english_expression.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>我在好几年前就在Youtube关注这个老师的口语教程，叫做 <a href="https://www.youtube.com/watch?v=32T-nyka0dM">Daily English Dictation</a>, 深入浅出，娓娓道来。 <!-- raw HTML omitted --></p>
<p>B 站上也有搬运Youtube的教程：每日英语听写 <a href="https://www.bilibili.com/video/BV1U7411a7xG/">Daily English Dictation 1-400</a> <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/daily_english_dictation.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>翻开2020年的笔记，当时一天学习一课 Daily English Dictation，我学习到142课然后就放弃了。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/ddd_practice.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<h3 id="the-hanselminutes-podcast"><!-- raw HTML omitted -->3.4<!-- raw HTML omitted --> THE HANSELMINUTES PODCAST</h3>
<p>网站链接：<a href="https://www.hanselminutes.com/">https://www.hanselminutes.com/</a> <!-- raw HTML omitted --></p>
<p>微软的 Scott Hanselman 主持的播客，类似技术杂谈，在英文技术类播客中也非常有名，他的角色类似个布道师。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/hanselminutes.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<h3 id="lex-fridman-podcast"><!-- raw HTML omitted -->3.5<!-- raw HTML omitted --> Lex Fridman Podcast</h3>
<p>网站：<a href="https://www.hanselminutes.com/">https://www.hanselminutes.com/</a> <!-- raw HTML omitted --></p>
<p>Lex Fridman 是俄裔计算机科学家，在MIT任职，他说话的方式很真诚，口音很好听. 他的访谈对象通常都非常大牌，比如是 Facebook 创始人 Mark Zuckerberg, 特斯拉的Elon Musk, 还有计算机的殿堂大神Donald Knuth等等. <!-- raw HTML omitted --></p>
<p>只是他的访谈一般都很长，2-3个小时，我一般需要用一周的通勤时间来听完一期节目。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/lex_fridman.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<h3 id="bbc-6-minute-english"><!-- raw HTML omitted -->3.6<!-- raw HTML omitted --> BBC 6 Minute English</h3>
<p>网站: <a href="https://www.bbc.co.uk/learningenglish/english/features/6-minute-english">https://www.bbc.co.uk/learningenglish/english/features/6-minute-english</a> <!-- raw HTML omitted --></p>
<p>BBC 主持的英语学习播客，顾名思义，每期6分钟，都是纯正的英音，女主持的英音尤其悦耳。 <!-- raw HTML omitted --></p>
<p>每期都截取一小道报道或者对话，然后学习一些新词，以练带学。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/6_minute_english.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<h2 id="总结"><!-- raw HTML omitted -->4<!-- raw HTML omitted --> 总结</h2>
<p>突然意识到，收听播客和小时候通过收音机收听各种电台节目，如「评书讲古」似乎是异曲同工。 <!-- raw HTML omitted --></p>
<p>虽然媒介在改变，但是对好内容的需求却是一直不变的。 <!-- raw HTML omitted --></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>软件工程师的软技能指北（四）：简历篇</title>
      <link>https://ramsayleung.github.io/zh/post/2023/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%BD%AF%E6%8A%80%E8%83%BD%E6%8C%87%E5%8C%97_%E7%AE%80%E5%8E%86%E7%AF%87/</link>
      <pubDate>Sat, 20 May 2023 13:40:00 -0700</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2023/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%BD%AF%E6%8A%80%E8%83%BD%E6%8C%87%E5%8C%97_%E7%AE%80%E5%8E%86%E7%AF%87/</guid>
      <description>1 前情提要 软件工程师的软技能指北（一）：总览篇 软件工程师的软技能指北（二）：事业篇 软件工程师的软技能指北（三）：高效交流篇 2 前言 我在高三的时</description>
      <content:encoded><![CDATA[<h2 id="前情提要"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> 前情提要</h2>
<ol>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%80%BB%E8%A7%88%E7%AF%87/">软件工程师的软技能指北（一）：总览篇</a> <!-- raw HTML omitted --></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%BD%AF%E6%8A%80%E8%83%BD%E6%8C%87%E5%8C%97_%E4%BA%8B%E4%B8%9A%E7%AF%872/">软件工程师的软技能指北（二）：事业篇</a> <!-- raw HTML omitted --></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%BD%AF%E6%8A%80%E8%83%BD%E6%8C%87%E5%8C%97_%E9%AB%98%E6%95%88%E4%BA%A4%E6%B5%81%E7%AF%873/">软件工程师的软技能指北（三）：高效交流篇</a> <!-- raw HTML omitted --></li>
</ol>
<h2 id="前言"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> 前言</h2>
<p>我在高三的时候，每周有五节的语文课，我的语文老师陆老师总是会拿一节语文课，当作书法课，让我们练字。 <!-- raw HTML omitted --></p>
<p>陆老师认为，写作文能言之有物，切中要点很重要，但是答卷的字体也很重要。 <!-- raw HTML omitted --></p>
<p>可能同样的答案内容，字体写得好的试卷会比字体一般的试卷高5到10分。 <!-- raw HTML omitted --></p>
<p>而陆老师自身的软硬笔书法水平都很过硬，黑板板书相当漂亮。 <!-- raw HTML omitted --></p>
<p>明清两朝，有专门用于科举考试的通用字体，特点是：以乌黑、方正、光洁而大小齐平。 <!-- raw HTML omitted --></p>
<p>明朝称之为「台阁体」，清朝称之为「馆阁体」： <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/%e9%a6%86%e9%98%81%e4%bd%93.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>人终归是视觉动物，内涵固然重要，门面也不可或缺。 <!-- raw HTML omitted --></p>
<p>如果把工程师的职业当作事业的话，那么简历就是门面和敲门砖。 <!-- raw HTML omitted --></p>
<p>如果有足够的亮点的经历的话，再配上优秀的简历，可谓如虎添翼； <!-- raw HTML omitted -->
纵然经历不够亮点，一份得体的简历就如考试时的一手好字，同样可以让人眼前一亮。 <!-- raw HTML omitted --></p>
<h2 id="要点"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> 要点</h2>
<p>所谓的简历，本质上和街边的宣传单，以及电视上的广告没有什么区别，都是希望可以引起潜在客户的注意，把「商品」销售出去。 <!-- raw HTML omitted --></p>
<p>只是他们销售的是商品，你销售的是自己的「劳动力」。 <!-- raw HTML omitted --></p>
<p>而你的目标是在诸多的同行竞争中脱颖而出，你需要做的是「扬长避短」，把自己的长处和优势展示给潜在客户。 <!-- raw HTML omitted --></p>
<p>根据社会心理学的研究，人总是会对先看到的词产生先入为主的认知。 <!-- raw HTML omitted --></p>
<p>如果形容一个人： <!-- raw HTML omitted --></p>
<p>勤劳，勇敢，善良，温柔，俊美，卑鄙，下流，肮脏，贪婪，邋遢。 <!-- raw HTML omitted --></p>
<p>你对他的印象是好是坏呢？ <!-- raw HTML omitted --></p>
<p>那下面这个人呢？ <!-- raw HTML omitted --></p>
<p>卑鄙，下流，肮脏，贪婪，邋遢，勤劳，勇敢，善良，温柔，俊美。 <!-- raw HTML omitted --></p>
<p>你对他的印象是坏是好呢？ <!-- raw HTML omitted --></p>
<p>同样的内容，调换了顺序，给人的认知就完全不一样了。 <!-- raw HTML omitted --></p>
<p>所以你需要做的，就是把你最引以为傲的内容（比如你的经历，学历），放在简历的前面； <!-- raw HTML omitted -->
再把你觉得弱势的内容（比如学历，经历），放到简历的后面。 <!-- raw HTML omitted --></p>
<h2 id="结构"><!-- raw HTML omitted -->4<!-- raw HTML omitted --> 结构</h2>
<p>我个人习惯是会在简历中呈现五部分内容：「联系方式(Contact)」, 「职业经历(Employment)」, 「项目(Project)」, 「教育(Education)」, 「总结(Summary)」。 <!-- raw HTML omitted --></p>
<p>放在最前方的，毫无疑问是「联系方式」，不然潜在客户对你再感兴趣，找不到你的联系方式，也是抓瞎。 <!-- raw HTML omitted --></p>
<p>其次就是「教育」，「职业经历」，「总结」的顺序。 <!-- raw HTML omitted --></p>
<p>我个人的学历不占优势，只有本科学历，又非名校，根据「扬长避短」原则，「教育」就被我放最后了。 <!-- raw HTML omitted --></p>
<p>因为我自己在两家所谓的「大厂」打过工，所以「职业经历」更有优势，所以「职业经历」放在前面。 <!-- raw HTML omitted --></p>
<p>而「项目」大多时候与「职业经历」挂钩，逻辑顺序上，在「职业经历」之后，所以结构就变成： <!-- raw HTML omitted --></p>
<p>「联系方式」 <!-- raw HTML omitted --></p>
<p>「职业经历」 <!-- raw HTML omitted --></p>
<p>「项目」 <!-- raw HTML omitted --></p>
<p>「总结」 <!-- raw HTML omitted --></p>
<p>「教育」 <!-- raw HTML omitted --></p>
<p>结构推荐是这五项，顺序就根据个人自身情况进行调整了。 <!-- raw HTML omitted --></p>
<h2 id="格式"><!-- raw HTML omitted -->5<!-- raw HTML omitted --> 格式</h2>
<p>「联系方式」与「教育」没有太多值得说道的点，可谓千篇一律。 <!-- raw HTML omitted --></p>
<p>主要聚焦点还是在「项目」和「职业经历」上。 <!-- raw HTML omitted --></p>
<h3 id="职业经历"><!-- raw HTML omitted -->5.1<!-- raw HTML omitted --> 职业经历</h3>
<p>职业经历的格式也相对固定： <!-- raw HTML omitted --></p>
<blockquote>
<p>「公司」，「地点」，「担任的角色」，「工作时间」 <!-- raw HTML omitted --></p>
<p>「在公司中负责或参与过的项目，一句话概括」： <!-- raw HTML omitted --></p>
<ol>
<li>参与xxx 项目，负责xxx 的开发，达成了什么成果 <!-- raw HTML omitted --></li>
<li>负责xxx 项目, 设计，开发xxx, 取得了什么项目成果 <!-- raw HTML omitted --></li>
<li>负责xxx 项目，&hellip; <!-- raw HTML omitted --></li>
</ol>
</blockquote>
<p>在职业经历中一句带过项目经历，进而引出下文提到的「项目经历」，相当于承上启下。 <!-- raw HTML omitted --></p>
<p>当然，如果项目太多，也需要作相应的增减。 <!-- raw HTML omitted --></p>
<h3 id="项目"><!-- raw HTML omitted -->5.2<!-- raw HTML omitted --> 项目</h3>
<p>可能会有朋友觉得项目和经历着实没有什么好写的，或者写出来的内容类似： <!-- raw HTML omitted --></p>
<blockquote>
<p>服务编码，前后端对接，测试 <!-- raw HTML omitted --></p>
<p>功能开发并上线 <!-- raw HTML omitted --></p>
</blockquote>
<p>每个项目和经历总是有东西可以写的，成功的项目有可写的内容，失败的项目也有可写的内容，只要有思考，总是有输出的。 <!-- raw HTML omitted --></p>
<p>那么思考的方式是什么呢？ <!-- raw HTML omitted --></p>
<h4 id="star-method"><!-- raw HTML omitted -->5.2.1<!-- raw HTML omitted --> STAR method</h4>
<p>就是之前在「 <a href="https://ramsayleung.github.io/zh/post/2023/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%BD%AF%E6%8A%80%E8%83%BD%E6%8C%87%E5%8C%97_%E9%AB%98%E6%95%88%E4%BA%A4%E6%B5%81%E7%AF%873/">软件工程师的软技能指北（三）：高效交流篇</a>」提到的「STAR method」这种结构化的思考和沟通方式。 <!-- raw HTML omitted --></p>
<p>所谓的STAR method, 是四个单词的首字母缩写，分别是: Situation(场景), Task(任务), Action(行动)，Result(结果)。即： <!-- raw HTML omitted --></p>
<ul>
<li>situation: 描述问题的背景，这个问题是什么，以及你为什么需要做这个事情 <!-- raw HTML omitted --></li>
<li>task: 你具体的任务是什么，你需要做什么，你的角色是什么？ <!-- raw HTML omitted --></li>
<li>action: 你做了什么事情？你的行动是什么? <!-- raw HTML omitted --></li>
<li>result: 项目结果如何？最好用可量化的指标来呈现? <!-- raw HTML omitted --></li>
</ul>
<p>通过STAR method, 以结构化的方式来思考，并呈现你的项目，描述你的职责与成果。 <!-- raw HTML omitted --></p>
<blockquote>
<p>xx 公司/xx 项目, 时间: 2020.03-2020.xx <!-- raw HTML omitted --></p>
<ol>
<li>项目背景一句话、 <!-- raw HTML omitted --></li>
<li>自己在项目里负责的工作 <!-- raw HTML omitted --></li>
<li>用到的技能/思考的过程或者难点攻克的过程 <!-- raw HTML omitted --></li>
<li>项目的结果或者我的成绩 <!-- raw HTML omitted --></li>
</ol>
</blockquote>
<p>例如： <!-- raw HTML omitted --></p>
<blockquote>
<p>服务编码，前后端对接，测试 <!-- raw HTML omitted --></p>
</blockquote>
<p>就可以修改成: <!-- raw HTML omitted --></p>
<blockquote>
<p>负责xxx项目开发与设计，主导前后端契约设计，前后端并行解耦开发工作，项目用时1个半月成功上线，日访问用户20w, 页面浏览量100w, 峰值访问1000/秒，服务平稳无故障。 <!-- raw HTML omitted --></p>
</blockquote>
<p>这不比平铺直述更有感染力嘛。 <!-- raw HTML omitted --></p>
<h4 id="量化指标"><!-- raw HTML omitted -->5.2.2<!-- raw HTML omitted --> 量化指标</h4>
<p>量化的数字让人更有印象，会让你的经历更有说服力，也更能突出你自己的成绩： <!-- raw HTML omitted --></p>
<p>如非量化的指标表述： <!-- raw HTML omitted --></p>
<blockquote>
<p>项目重构之后，服务性能与可用性都得到了显著提高 <!-- raw HTML omitted --></p>
</blockquote>
<p>难免让人觉得说明力不足 <!-- raw HTML omitted --></p>
<blockquote>
<p>项目重构之后，压测TPS从100/秒增长到1000/秒，系统的不可用总时长从上线前的2小时下降到20分钟，系统可用性从99.9% 增长到99.99% <!-- raw HTML omitted --></p>
</blockquote>
<p>这个又可以呼应「软技能指北（三）：高效交流篇」的「云雨伞」模型，通过数据来表述「云」，增加说明力。 <!-- raw HTML omitted --></p>
<h2 id="排版"><!-- raw HTML omitted -->6<!-- raw HTML omitted --> 排版</h2>
<p>所谓亮眼的简历，无非是「优秀的内容」+ 「简洁耐看的排版」。 <!-- raw HTML omitted --></p>
<p>「内容」值得每个工程师花心思去构思，但花时间去「排版」却大可不必。 <!-- raw HTML omitted --></p>
<p>所以写简历，我只推荐使用 LaTex, Word 还是算了吧。 <!-- raw HTML omitted --></p>
<p>有朋友可能不熟悉 LaTex, LaTex 是美国计算机科学家Leslie Lamport(没错，就是那个发明 Paxos 共识算法的大神) 在20世纪80年代开发的排版系统，遵循「展示与内容分离（separating presentation from content）的原则」。 <!-- raw HTML omitted --></p>
<p>即使用户没有排版和写代码的经验，只需要根据模板填入内容，就可以生成精美的出版刊物。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/wikipedia_latex.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>本地安装和使用LaTex 相对麻烦，所以建议使用网页版本的LaTex 服务，如 <a href="https://www.overleaf.com/">Overleaf:</a> <a href="https://www.overleaf.com/">https://www.overleaf.com/</a>. <!-- raw HTML omitted --></p>
<p>至于简历模板, Overleaf 本身有很多的简历模板分享，Github上也有许多类似的项目，如 <a href="https://github.com/billryan/resume">https://github.com/billryan/resume</a>, 只要把在 Overleaf 上把内容填入到模板中，即可生成一份好看的简历： <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/overleaf_resume.png"/> 
</figure>
  <!-- raw HTML omitted --></p>
<h3 id="照片"><!-- raw HTML omitted -->6.1<!-- raw HTML omitted --> 照片</h3>
<p>是否要放照片，这个取决于行业和自身特点，遵循「扬长避短」原则即可，如果形象得体，大可把照片也放在简历中。 <!-- raw HTML omitted --></p>
<h3 id="文件格式"><!-- raw HTML omitted -->6.2<!-- raw HTML omitted --> 文件格式</h3>
<p>只推荐pdf，因为这是一种通用的文件格式，相当多的工具都能打开pdf. <!-- raw HTML omitted --></p>
<p>我既不推荐使用word 写简历，更不推荐发送word 格式的简历。 <!-- raw HTML omitted --></p>
<p>因为并非人人电脑都有装office 办公软件，不一定能打开；此外，版本不正确，或者相应字体没有安装，可能就会导致精心排版的简历乱掉了。 <!-- raw HTML omitted --></p>
<p>简历文件命名: 姓名_[公司/学校]_联系方式.pdf, 如果公司是优势项，那么文件命名就把公司带上，学历同理。 <!-- raw HTML omitted --></p>
<p>切记不要以「简历.pdf」这样的文件来命名，HR可能一天收到几百封简历， <!-- raw HTML omitted -->
她完全有可能不记得自己是否打开过「简历.pdf」这个没有辨识度的文件. <!-- raw HTML omitted --></p>
<h2 id="投递渠道"><!-- raw HTML omitted -->7<!-- raw HTML omitted --> 投递渠道</h2>
<p>写完简历之后，免不了要向潜在客户推销简历，就我个人所知的几个渠道「内推」，「官网」，「第三方招聘网站」，「猎头」，优先级分别是： <!-- raw HTML omitted --></p>
<p>「内推」&gt;&gt;「官网」&gt;「猎头」&gt;&gt;&gt;「第三方招聘网站」。 <!-- raw HTML omitted --></p>
<p>无论是找相熟或者不认识的朋友，「内推」总是投递简历的最优推荐，因为有人可以帮忙跟进处理进度。 <!-- raw HTML omitted --></p>
<p>无论「过」与「不过」，都可以马上知道结果，可以最大限度地避免「石沉大海」 <!-- raw HTML omitted --></p>
<p>如果「心仪公司」没有相熟朋友，也可以在「脉脉」或者「Linkedin」上找人内推。 <!-- raw HTML omitted --></p>
<p>别人一般都很乐意的，部分公司还对「内推」有奖励。 <!-- raw HTML omitted --></p>
<p>如果实在是找不到人内推，「官网」也是一个备选项，一般公司的简历系统都会对处理时间有规定，简历起码都会被处理到，但有可能「渺无音讯」。 <!-- raw HTML omitted --></p>
<p>之前去 Indeed 官网投递，几天后直接收到拒信了. <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/indeed_refuse.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>像「Boss某聘」这类的第三方招聘网站，一般是投递没有「官网」或者内部招聘系统的公司的选择。 <!-- raw HTML omitted --></p>
<p>毕竟HR连官网的简历都有可能处理不过来，着实不大可能去第三方网站上捞简历，只有在要应付指标的时候，才会上去捞一下。 <!-- raw HTML omitted --></p>
<p>当然，把简历直接给到「Linkedin」,「脉脉」之类的三方招聘网站的HR, 那就是属于选项一的「内推」。 <!-- raw HTML omitted --></p>
<p>最后才聊到「猎头」，「猎头」本质上是把你的职业当作商品，你自己的「职业」规划和未来与他们关系着实不大，所以他们给你推的不一定是满足你规划和兴趣的公司。 <!-- raw HTML omitted --></p>
<p>何况「猎头」水平和态度参差不齐，只能作为一个备选项。 <!-- raw HTML omitted --></p>
<p>我在「Linkedin」上，把我的First Name 设为「啤酒的Emoji」，Last Name 才是「我的姓与名」。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/linkedin_basic_info.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>所以那些没有看过我信息，直接私聊发送招聘信息的，就会变成这个样子： <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/hi_beer2.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/hi_beer3.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>连我名字都没有写对的人，还能指望什么呢。 <!-- raw HTML omitted --></p>
<h2 id="示例"><!-- raw HTML omitted -->8<!-- raw HTML omitted --> 示例</h2>
<p>我按照上文提到的要点，结构与格式来整理了一下自己的简历： <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/ramsay_resume1.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/ramsay_resume2.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<h2 id="趣事"><!-- raw HTML omitted -->9<!-- raw HTML omitted --> 趣事</h2>
<p>我在三周前，在博客和公众号上发了一个内网看到的 Amazon的<a href="https://ramsayleung.github.io/zh/post/2023/amazon_canada_hiring_event/">国内专场招聘</a>，给有兴趣去加国血汗工厂打工的朋友分享了这个信息。 <!-- raw HTML omitted --></p>
<p>然后，过了一周后，我的个人邮箱收到了这个专场招聘的另外一位recruiter 的邮件，推荐我去参加这个专场招聘，因为我曾经用自己的个人邮箱给 Amazon 投递过简历。 <!-- raw HTML omitted --></p>
<p>只是这位recruiter 不知道我入职，并且与她同组的另外一位同事沟通过这个专场招聘的事。 <!-- raw HTML omitted --></p>
<p>就变成了我这个帮忙发专场招聘信息的人，最后究竟也收到了这个专场招聘的邀请。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/relocation_opportunity.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<h2 id="总结"><!-- raw HTML omitted -->10<!-- raw HTML omitted --> 总结</h2>
<p>一份优秀的简历就好比一份宣传册子，可以更好地向我们的潜在客户推销自己。 <!-- raw HTML omitted --></p>
<p>但功夫在平时，简历的内容最终也是日常积累的呈现。 <!-- raw HTML omitted --></p>
<p>扎实做好日常工作，成为一个「靠谱（reliable）」的人 <!-- raw HTML omitted --></p>
<p>「金玉其外」固然好，「内有乾坤」两相宜。 <!-- raw HTML omitted --></p>
<h2 id="参考"><!-- raw HTML omitted -->11<!-- raw HTML omitted --> 参考</h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/LaTeX">https://en.wikipedia.org/wiki/LaTeX</a> <!-- raw HTML omitted --></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Linux下如何避免蓝牙音箱自动关机</title>
      <link>https://ramsayleung.github.io/zh/post/2023/linux%E4%B8%8B%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E8%93%9D%E7%89%99%E9%9F%B3%E7%AE%B1%E8%87%AA%E5%8A%A8%E5%85%B3%E6%9C%BA/</link>
      <pubDate>Mon, 15 May 2023 20:48:00 -0700</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2023/linux%E4%B8%8B%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E8%93%9D%E7%89%99%E9%9F%B3%E7%AE%B1%E8%87%AA%E5%8A%A8%E5%85%B3%E6%9C%BA/</guid>
      <description>1 问题 最近整理了桌上乱糟糟的线，把原来使用aux 线连接的蓝牙音响换成通过蓝牙连接。 然后就发现一个问题，只要音响没有发出声音超过30分钟，蓝牙</description>
      <content:encoded><![CDATA[<h2 id="问题"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> 问题</h2>
<p>最近整理了桌上乱糟糟的线，把原来使用aux 线连接的蓝牙音响换成通过蓝牙连接。 <!-- raw HTML omitted --></p>
<p>然后就发现一个问题，只要音响没有发出声音超过30分钟，蓝牙音响就会断开连接，并且自动关机，即使蓝牙音响连接着电源。 <!-- raw HTML omitted --></p>
<p>一番搜索之后，就在知乎上发现了这个问题：<a href="https://www.zhihu.com/question/41682642">求问如何避免蓝牙音箱自动关机？</a> <!-- raw HTML omitted --></p>
<p>但里面提到的解决方案，大多只适用于特定平台，例如Windows 或者Macos, 没有提到 Linux 上的解决方案。 <!-- raw HTML omitted --></p>
<p>每过半个小时手动打开蓝牙音响再连接的方式，实在是太蠢了。 <!-- raw HTML omitted --></p>
<h2 id="灵感"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> 灵感</h2>
<p>但是知乎问题里面的部分回答给了我灵感，让我们想起国内某些APP 为了保活，避免被系统kill 掉，在后台播放无声音频的操作。 <!-- raw HTML omitted --></p>
<p>我可以以低音量循环播放一段音频，以实现保活的作用： <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mpg123 -f <span class="m">1000</span> ~/music/listen_to_the_sea.mp3 --loop -1
</span></span></code></pre></div><p>mpg123 是mp3 播放命令行， <code>-f 1000</code> 参数的含义是：100%的音量是32768, 1000 约等于是1000/32768 = 3% 的音量， <code>-loop -1</code> 就是指无限循环播放。 <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">man mpg123
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">-f factor, --scale factor
</span></span><span class="line"><span class="cl">Change scale factor <span class="o">(</span>default: 32768<span class="o">)</span>.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">--loop <span class="nb">times</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> looping track<span class="o">(</span>s<span class="o">)</span> a certain number of times, &lt; <span class="m">0</span> means infinite loop <span class="o">(</span>not with --random!<span class="o">)</span>.
</span></span></code></pre></div><h2 id="优化"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> 优化</h2>
<p>这样就实现了一个可用的版本，只是还要依赖一个 mp3 文件，肯定还有优化的空间。 <!-- raw HTML omitted --></p>
<p>一番调研之后发现， <code>play/sox</code> 命令可以播放指定频率和时长的声音，可以播放20 hz以下的声音，这个频率下的声音人耳是听不到的： <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">play -q -n synth <span class="m">10</span> sin <span class="m">20</span>
</span></span></code></pre></div><ul>
<li><code>-q</code>: 不显示播放进度条 <!-- raw HTML omitted --></li>
<li><code>-n synth 10</code> 播放10秒的音频 <!-- raw HTML omitted --></li>
<li><code>sin 20</code> 频率为20 hz(如果听到了，可以设置成更低) <!-- raw HTML omitted --></li>
</ul>
<p>执行命令之后，可以使用 <code>pavucontrol</code> 命令查看声音输出，应该是类似这样的效果： <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/sox_pavucontrol.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<h2 id="定时执行"><!-- raw HTML omitted -->4<!-- raw HTML omitted --> 定时执行</h2>
<p>一直开着个terminal 窗口运行命令有点麻烦，这种重复性的工作，就可以交给 crontab, 让它每分钟执行一次，每次播放10秒。 <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">* * * * * play -q -n synth <span class="m">10</span> sin <span class="m">20</span>
</span></span></code></pre></div><p>但实际运行，发现声音不能如预期那样播放。一番搜索之后，发现 <a href="https://askubuntu.com/questions/832072/can-i-use-cron-to-chime-at-top-of-hour-like-a-grandfather-clock">StackExchange</a> 上有个答案提到需要 export 个环境变量，所以最好创建个脚本 <code>play_beep.sh</code>: <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="nb">export</span> <span class="nv">XDG_RUNTIME_DIR</span><span class="o">=</span>/run/user/1000
</span></span><span class="line"><span class="cl">play -q -n synth <span class="m">10</span> sin <span class="m">10</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="k">$(</span>date<span class="k">)</span> <span class="c1"># 打印日期，主要是为了方便排查</span>
</span></span></code></pre></div><p>然后再安装一个 crontab 任务: <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">* * * * * /usr/bin/sh /home/ramsay/code/shell/play_beep.sh &gt;&gt; /tmp/beep.log 2&gt;<span class="p">&amp;</span><span class="m">1</span>
</span></span></code></pre></div><p>经过验证，一天都没有断开过蓝牙，自动关机了。 <!-- raw HTML omitted --></p>
<h2 id="参考"><!-- raw HTML omitted -->5<!-- raw HTML omitted --> 参考</h2>
<ul>
<li><a href="https://www.zhihu.com/question/41682642">求问如何避免蓝牙音箱自动关机？</a> <!-- raw HTML omitted --></li>
<li><a href="https://askubuntu.com/questions/832072/can-i-use-cron-to-chime-at-top-of-hour-like-a-grandfather-clock/832266#832266">Can I use cron to chime at top of hour like a grandfather clock?</a> <!-- raw HTML omitted --></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>软件工程师的软技能指北（三）：高效交流篇</title>
      <link>https://ramsayleung.github.io/zh/post/2023/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%BD%AF%E6%8A%80%E8%83%BD%E6%8C%87%E5%8C%97_%E9%AB%98%E6%95%88%E4%BA%A4%E6%B5%81%E7%AF%873/</link>
      <pubDate>Sun, 14 May 2023 16:51:00 -0700</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2023/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%BD%AF%E6%8A%80%E8%83%BD%E6%8C%87%E5%8C%97_%E9%AB%98%E6%95%88%E4%BA%A4%E6%B5%81%E7%AF%873/</guid>
      <description>1 前情提要 软件工程师的软技能指北（一）：总览篇 软件工程师的软技能指北（二）：事业篇 2 前言 让我静静，我只想写代码 化用《我的团长我的团》里面，孟</description>
      <content:encoded><![CDATA[<h2 id="前情提要"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> 前情提要</h2>
<ol>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%80%BB%E8%A7%88%E7%AF%87/">软件工程师的软技能指北（一）：总览篇</a> <!-- raw HTML omitted --></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%BD%AF%E6%8A%80%E8%83%BD%E6%8C%87%E5%8C%97_%E4%BA%8B%E4%B8%9A%E7%AF%872/">软件工程师的软技能指北（二）：事业篇</a> <!-- raw HTML omitted --></li>
</ol>
<h2 id="前言"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> 前言</h2>
<blockquote>
<p>让我静静，我只想写代码 <!-- raw HTML omitted --></p>
</blockquote>
<p>化用《我的团长我的团》里面，孟烦了父亲的一句话： <!-- raw HTML omitted --></p>
<blockquote>
<p>为何诺大的公司，放不下一张能安静写代码的书桌？ <!-- raw HTML omitted --></p>
</blockquote>
<p>在我此前的固有认知里，所谓的软件工程师就应该安安静静地写代码，但为何我总是求而不得呢？ <!-- raw HTML omitted --></p>
<p>但事实是，在软件开发的大部分时间里，我们都是在与「人」交流，而非与「计算机」交流。 <!-- raw HTML omitted --></p>
<p>即使我们编写代码，首先也是让「人」去理解，其次才是让机器来执行，否则直接写二进制代码即可。 <!-- raw HTML omitted --></p>
<p>而在程序优化中，有一条金科玉律：「针对热点代码进行优化」，因为那是性价比最高的优化策略。 <!-- raw HTML omitted --></p>
<p>既然软件开发中，大部分时间都是与人交流，那么如果能提高与人交流的效率，那么我们的开发效率也会相应地大幅提高。 <!-- raw HTML omitted --></p>
<h2 id="原则"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> 原则</h2>
<h3 id="尊重"><!-- raw HTML omitted -->3.1<!-- raw HTML omitted --> 尊重</h3>
<p>与人相处时，最重要的概念之一（可能没有之一），就是尊重他人，每个人心底都是渴望被尊重的。 <!-- raw HTML omitted --></p>
<p>所谓的尊重体现在各种的细节里面，例如： <!-- raw HTML omitted --></p>
<p>尊重他人的观点和言论，留意倾听，眼神放在对方身上，不随意打断别人。 <!-- raw HTML omitted --></p>
<p>尊重他人的时间，不迟到。 <!-- raw HTML omitted --></p>
<p>尊重他人的成果和工作，引用时注意作者与链接等。 <!-- raw HTML omitted --></p>
<p>尊重别人的空间，不在工位附近大声开会，尽量找个会议室。 <!-- raw HTML omitted --></p>
<p>被尊重是每个人最基本的需要，也是很容易忽略的地方。 <!-- raw HTML omitted --></p>
<p>我自己也会在心急时，直接把别人的话打断掉，所以自己在这方面还有很大的改善空间。 <!-- raw HTML omitted --></p>
<h3 id="不随意批评"><!-- raw HTML omitted -->3.2<!-- raw HTML omitted --> 不随意批评</h3>
<p>因为国内普遍存在的各种上下级等级关系和官本位思想。 <!-- raw HTML omitted --></p>
<p>遇到阻碍或者问题时，很容易通过「批评」来推动和开展工作，甚至很容易出现所谓的「PUA」话术： <!-- raw HTML omitted --></p>
<blockquote>
<p>其实，我对你是有一些失望的。当初给你定级px，是高于你面试时的水平的。 <!-- raw HTML omitted --></p>
<p>我是希望进来后，你能够拼一把，快速成长起来的。 <!-- raw HTML omitted --></p>
<p>px这个层级，不是把事情做好就可以的 <!-- raw HTML omitted --></p>
</blockquote>
<!-- raw HTML omitted -->
<blockquote>
<p>你的产出，和同层级比，是有些单薄的，马上要到年底了，加把劲儿。 <!-- raw HTML omitted --></p>
</blockquote>
<!-- raw HTML omitted -->
<blockquote>
<p>什么，这个事情排期要2周，1周就可以了，没有多少工作的。 <!-- raw HTML omitted --></p>
</blockquote>
<p>我自己也亲耳听过类似的话，心情着实是难受。 <!-- raw HTML omitted --></p>
<p>事实上，如果真的把「尊重」这个基本原则考虑在内，鼓励与赞扬是比批评更有用的工具。 <!-- raw HTML omitted --></p>
<p>我现在的 manager 是个白人，他就很喜欢夸人，我私下喊他做「夸夸群群主」。 <!-- raw HTML omitted --></p>
<p>我和组员刚来的时候，可能他担心我们不适宜，或者是不干活，我们做了一些工作之后，总是在换着法子在夸我们： <!-- raw HTML omitted --></p>
<blockquote>
<p>Thanks you for help to our team, your work makes a great difference. <!-- raw HTML omitted --></p>
<p>You are doing a great job, I am impressed by the way you tackled the problems. <!-- raw HTML omitted --></p>
<p>You will be successful in Amazon, I am pretty confident about that. <!-- raw HTML omitted --></p>
</blockquote>
<p>虽然知道老板目的还是想让我们干活，但是被人夸的感觉肯定比被人用鞭子抽打的感觉要好。 <!-- raw HTML omitted --></p>
<p>见贤思其焉，所以我也学老板多夸人。 <!-- raw HTML omitted --></p>
<p>有一次和舍友去一家韩餐餐馆吃饭，炸鸡很好吃，其他菜也不错。 <!-- raw HTML omitted --></p>
<p>上完菜后，韩国小姐姐过来问我们还有需要，我就说，「all foods are delicious, especially the fried chinken」。 <!-- raw HTML omitted --></p>
<p>小姐姐开心得拍起了小手。 <!-- raw HTML omitted --></p>
<p>身为中国人，可能从小被教育要内敛和矜持，但我们大可不必太高冷，不要吝啬自己的溢美之词。 <!-- raw HTML omitted --></p>
<h3 id="换位思考"><!-- raw HTML omitted -->3.3<!-- raw HTML omitted --> 换位思考</h3>
<p>高效沟通的另外一个要点就是换位思考，从别人的角度，而不是自己的角度来思考问题。 <!-- raw HTML omitted --></p>
<p>在沟通对话中，什么对于他们来说是重要的？他们想要的是什么？ <!-- raw HTML omitted --></p>
<p>最好的方案是一个共赢的方案，可以把多方的诉求都包括在内。 <!-- raw HTML omitted --></p>
<p>一个非常有效的技巧就是，在开始你自己的观点，先重复一次别人的观点，这样就给对方一个明确的信号，我是真的考虑过你的观点的。 <!-- raw HTML omitted --></p>
<p>举个例子，前段时间发了一个 Amazon Canada 招聘的<a href="https://ramsayleung.github.io/zh/post/2023/amazon_canada_hiring_event/">文章</a>，有朋友闻讯而来，给我发简历，让我内推到系统中。 <!-- raw HTML omitted --></p>
<p>只是他没有预料到的是，发送完简历后，马上就收到一封笔试邮件，要求在一周内完成笔试。 <!-- raw HTML omitted --></p>
<p>朋友觉得时间太紧，没有准备好，于是邮件告知我准备放弃。 <!-- raw HTML omitted --></p>
<p>我思索片刻之后，决定与recruiter 沟通下，询问能否推迟笔试截止时间。 <!-- raw HTML omitted --></p>
<p>因为对于朋友而言，他的诉求肯定是有充足的时间来准备； <!-- raw HTML omitted --></p>
<p>而对于recruiter 而言，她们办这个event ，也是希望有尽量多的候选人参加，有尽量多的候选人通过。 <!-- raw HTML omitted --></p>
<p>所以推迟笔试时间，以便朋友参与笔试，是一个符合多方诉求的方案，最后recruiter 的回复也是可以推迟时间： <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/%e7%ac%94%e8%af%95%e5%bb%b6%e6%9c%9f.png"/> 
</figure>
  <!-- raw HTML omitted --></p>
<h3 id="充分的上下文"><!-- raw HTML omitted -->3.4<!-- raw HTML omitted --> 充分的上下文</h3>
<p>高效沟通和决策的前提是，提供足够的，充分的信息。 <!-- raw HTML omitted --></p>
<p>也就是说，在你提问题或者沟通的时候，把问题的上下文信息给提供清楚。 <!-- raw HTML omitted --></p>
<p>以前经常会遇到的一种情形是，在企业微信被人拉到一个群里，然后被@, 「xx哥，帮忙看下这个问题」。 <!-- raw HTML omitted --></p>
<p>我也很想帮忙，但是我连问题是什么都不清楚，我是没有办法解决的。 <!-- raw HTML omitted --></p>
<p>一个群几十上百条信息，我是没有精力去逐条翻聊天纪录的。 <!-- raw HTML omitted --></p>
<p>然后，很快就会有人打电话过来，让我解决这个xx问题。 <!-- raw HTML omitted --></p>
<p>如果想要我快速解决问题的话，麻烦首先要给出定义，问题是什么？然后再给出问题的上下文，这样我才能方便排查问题。 <!-- raw HTML omitted --></p>
<p>但这还不是最佳的咨询姿势，我推崇的咨询方式是所谓的 STAR 方法或者叫「Search before Asking」。 <!-- raw HTML omitted --></p>
<h2 id="star-方法-高效提问"><!-- raw HTML omitted -->4<!-- raw HTML omitted --> STAR 方法：高效提问</h2>
<p>所谓的STAR method, 是四个单词的首字母缩写，分别是: Situation(场景), Task(任务), Action(行动)，Result(结果)。即： <!-- raw HTML omitted --></p>
<ul>
<li>situation: 描述问题的背景，这个问题是什么，以及你为什么需要做这个事情 <!-- raw HTML omitted --></li>
<li>task: 你具体的任务是什么，你需要做什么 <!-- raw HTML omitted --></li>
<li>action: 你做了什么事情？你的行动是什么. <!-- raw HTML omitted --></li>
<li>result: 结果如何，你得出的结论是什么? <!-- raw HTML omitted --></li>
</ul>
<p>前面提到过，尊重是与人交流的基本原则, 尊重自然包括尊重别人的时间，不做伸手党。 <!-- raw HTML omitted --></p>
<p>在咨询别人问题的时候，不仅要把问题说清楚，还需要把自己的调查和排查结果告诉别人，即所谓的「search before asking」，这样给人的印象是我尝试自己来解决，但解决无果才来请教你。 <!-- raw HTML omitted --></p>
<p>既表现出对别人能力的尊重，也显示出自己是经过调查才发问的，避免询问一些低级，Google 就能找到答案的问题。 <!-- raw HTML omitted --></p>
<p>没有人喜欢伸手党，你直接拿个问题，不经自己思考去询问别人，这就不是交流沟通，是「空手套方案」了。 <!-- raw HTML omitted --></p>
<p>别人没有这样的义务来给你提供解决方案。 <!-- raw HTML omitted --></p>
<p>所以我向别人求助，无论是企业微信，邮件，还是当面求教，流程一般是： <!-- raw HTML omitted --></p>
<ol>
<li>我现在尝试解决xx问题，我要去解决这个问题的原因是yyy <!-- raw HTML omitted --></li>
<li>我尝试了解法1, 解法2，都无法解决，这是我的日志 <!-- raw HTML omitted --></li>
<li>尝试这几种解法都不能解决问题，不能你能否根据你的经验，给我提供点思路呢？或者是我漏了什么关键步骤么? <!-- raw HTML omitted --></li>
</ol>
<p>或者是. <!-- raw HTML omitted --></p>
<ol>
<li>我现在尝试解决xx问题，我要去解决这个问题的原因是yyy <!-- raw HTML omitted --></li>
<li>我尝试了方案a xxxx, 得出的结果是xx, 然后我再尝试了方案b xxx, 得出的结果是xxx. <!-- raw HTML omitted --></li>
<li>我个人感觉这两种方案各有优劣，分别是xxx, 我倾向方案a, 原因是xxx. <!-- raw HTML omitted --></li>
<li>想请教下，你的看法是觉得哪个方案更优，或者你有什么建议么？ <!-- raw HTML omitted --></li>
</ol>
<p>提供足够的信息和选项给别人做选择题，让不是提供个空白问卷让别人做主观题。 <!-- raw HTML omitted --></p>
<p>毕竟大多数人都喜欢做选择题，省时省力。 <!-- raw HTML omitted --></p>
<p>&mdash; <!-- raw HTML omitted -->
<!-- raw HTML omitted --><!-- raw HTML omitted -->&lt;2023-05-29 一&gt;<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --></p>
<p>关于如何提问，《<a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/main/README-zh_CN.md">How to ask questions the smart way</a>》一文已经把要点给掰碎讲清楚了，推荐阅读。 <!-- raw HTML omitted --></p>
<h2 id="云雨伞-有效提建议"><!-- raw HTML omitted -->5<!-- raw HTML omitted --> 云雨伞: 有效提建议</h2>
<p>来源于日本知名咨询师大石哲之的著作《靠谱：顶尖咨询师教你的工作基本功》，简单有效，原理概括起来就一句话： <!-- raw HTML omitted --></p>
<blockquote>
<p>天上出现乌云，眼看要下雨，带上伞比较好。 <!-- raw HTML omitted --></p>
</blockquote>
<p>其中的「云」代表通过观察得到的客观事实；「快要下雨」，是从客观事实得出的分析；「带上伞」这个是根据分析给出的建议。 <!-- raw HTML omitted --></p>
<p>这就所谓的「云雨伞」模型的来源，运用「云雨伞」模型提建议，有理有据有方案，能让对方更愿意接受。 <!-- raw HTML omitted --></p>
<p>青史留名，给老板提建议（画饼）的名篇《隆中对》，也运用了「云雨伞」模型： <!-- raw HTML omitted --></p>
<blockquote>
<p>亮答曰：“自董卓以来，豪杰并起，跨州连郡者不可胜数。 <!-- raw HTML omitted --></p>
<p>&hellip; <!-- raw HTML omitted --></p>
<p>荆州北据汉、沔，利尽南海，东连吴会，西通巴、蜀，（描述「云」，表达事实） <!-- raw HTML omitted --></p>
<p>此用武之国，而其主不能守，此殆天所以资将军，（推测「雨」，即分析利弊） <!-- raw HTML omitted --></p>
<p>将军岂有意乎？（带上「伞」，即提出建议） <!-- raw HTML omitted --></p>
<p>益州险塞，沃野千里，天府之土，高祖因之以成帝业。（描述「云」，表达事实） <!-- raw HTML omitted --></p>
<p>刘璋暗弱，张鲁在北，民殷国富而不知存恤，智能之士思得明君。 <!-- raw HTML omitted --></p>
<p>将军既帝室之胄，信义著于四海，总揽英雄，思贤如渴，若跨有荆、益，保其岩阻，西和诸戎，南抚夷越，外结好孙权，内修政理； <!-- raw HTML omitted -->
（推测「雨」，即分析利弊） <!-- raw HTML omitted --></p>
<p>天下有变，则命一上将将荆州之军以向宛、洛，将军身率益州之众出于秦川，百姓孰敢不箪食壶浆以迎将军者乎？ <!-- raw HTML omitted -->
诚如是，则霸业可成，汉室可兴矣。（带上「伞」，即提出建议） <!-- raw HTML omitted --></p>
</blockquote>
<p>这一番结合「云雨伞」的建议（画饼），让老板直呼，「孤之有孔明，犹鱼之有水也」 <!-- raw HTML omitted --></p>
<h2 id="总结"><!-- raw HTML omitted -->6<!-- raw HTML omitted --> 总结</h2>
<p>所谓的「Skill = knowledge + practice」，知道一项知识，如果不运用，没有办法修炼成技能的。 <!-- raw HTML omitted --></p>
<p>毕竟「纸上得来终觉浅，绝知此事要躬行」。 <!-- raw HTML omitted --></p>
<p>要多实践才能提高沟通能力。 <!-- raw HTML omitted --></p>
<p>推荐几本读过的，关于沟通，心理学与咨询的好书，推荐度由高至低： <!-- raw HTML omitted --></p>
<ol>
<li><a href="https://book.douban.com/subject/35519608/">《非暴力沟通》</a>, 豆瓣评分：8.7(当然，评分只是一个参考项) <!-- raw HTML omitted --></li>
<li>《<a href="https://book.douban.com/subject/2328458/">社会性动物</a>》，豆瓣评分：9.0 <!-- raw HTML omitted --></li>
<li>《<a href="https://book.douban.com/subject/27021786/">靠谱</a>》：豆瓣评分：7.6 <!-- raw HTML omitted --></li>
<li>《<a href="https://book.douban.com/subject/1377474/">QBQ!問題背後的問題</a>》，豆瓣评分：7.4 <!-- raw HTML omitted --></li>
</ol>
<p>软技能系列的下一篇是： <!-- raw HTML omitted --></p>
<ul>
<li>软件工程师的软技能指北（四）：简历篇 <!-- raw HTML omitted --></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>软件工程师的软技能指北（二）：事业篇</title>
      <link>https://ramsayleung.github.io/zh/post/2023/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%BD%AF%E6%8A%80%E8%83%BD%E6%8C%87%E5%8C%97_%E4%BA%8B%E4%B8%9A%E7%AF%872/</link>
      <pubDate>Thu, 11 May 2023 21:32:00 -0700</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2023/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%BD%AF%E6%8A%80%E8%83%BD%E6%8C%87%E5%8C%97_%E4%BA%8B%E4%B8%9A%E7%AF%872/</guid>
      <description>1 前情提要 软件工程师的软技能指北（一）：总览篇 2 前言 打工是不可能打工的，这辈子都不可能打工的。 3 心态转变 很多软件工程师容易把自己定义成「写代</description>
      <content:encoded><![CDATA[<h2 id="前情提要"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> 前情提要</h2>
<ol>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%80%BB%E8%A7%88%E7%AF%87/">软件工程师的软技能指北（一）：总览篇</a> <!-- raw HTML omitted --></li>
</ol>
<h2 id="前言"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> 前言</h2>
<blockquote>
<p>打工是不可能打工的，这辈子都不可能打工的。 <!-- raw HTML omitted --></p>
</blockquote>
<h2 id="心态转变"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> 心态转变</h2>
<p>很多软件工程师容易把自己定义成「写代码的」，或者是「码农」，就是以写软件为生的人。 <!-- raw HTML omitted --></p>
<p>也只愿意接受写代码相关的任务，什么文档，设计，需求分析，是一概不想理的，我就是一把唆。 <!-- raw HTML omitted --></p>
<p>也有工程师觉得，反正我把事情做好也只有这么点工资，摆烂收入也不一定会下降，那不如就躺平，反正我的收入是固定。 <!-- raw HTML omitted --></p>
<p>也不能说毫无道理，只是把自己定位成「需求翻译机」，着实和「流水线的工人」区别不大。 <!-- raw HTML omitted --></p>
<p>随着自动化技术的进步，「流水线工人」很容易就被机器人所取代，它们只要能源充足，就可以24小时不停地产出 <!-- raw HTML omitted --></p>
<p>但是踏实干活的工程师，也难免容易有与以上类似的疑惑。 <!-- raw HTML omitted --></p>
<p>那不如换个思路： <!-- raw HTML omitted --></p>
<p>把你的工作当成是你自己的生意（business），那你眼中的一切都会变得截然不同。 <!-- raw HTML omitted --></p>
<h3 id="客户"><!-- raw HTML omitted -->3.1<!-- raw HTML omitted --> 客户</h3>
<p>既然是生意，自然要找对目标客户。 <!-- raw HTML omitted --></p>
<p>如果把工作当成生意，那么你的客户就是你的雇主，虽然你的客户大多数情况下只有一个。 <!-- raw HTML omitted --></p>
<p>但是很多的公司，都是靠给某一个大客户供货而做大做强的。 <!-- raw HTML omitted --></p>
<h4 id="客户-customer-与用户-user"><!-- raw HTML omitted -->3.1.1<!-- raw HTML omitted --> 客户（customer）与用户（user）</h4>
<p>谈起business, 我就想聊一下个人对于客户与用户的浅薄见解。 <!-- raw HTML omitted --></p>
<p>归纳起来，就是两点： <!-- raw HTML omitted --></p>
<p><strong><strong>商业公司总是客户第一</strong></strong> <!-- raw HTML omitted --></p>
<p><strong><strong>用户不等于客户</strong></strong> <!-- raw HTML omitted --></p>
<p>简而言之，用户是使用某项服务或者产品的人，而客户是为某项服务或者产品付费的人。 <!-- raw HTML omitted --></p>
<p>举个例子，经常有人说，微信不注重用户体验，微信不倾听用户的声音，微信有着地球上第二傲慢的产品经理团队（第一可能是苹果）。 <!-- raw HTML omitted --></p>
<p>就我在微信的开发经历而言，的确如此。 <!-- raw HTML omitted --></p>
<p>没有见过哪些产品经理提的需求是来自于改善用户体验的， <!-- raw HTML omitted -->
腾讯内网上都是挂着各种反馈微信用户体验的帖子，最后都是以「这个问题，楼主可以私聊我们讨论」结束的。 <!-- raw HTML omitted --></p>
<p>因为，对于微信而言，微信用户只是使用微信这个软件的人，而不是为微信付费的人，不是微信收入的来源。 <!-- raw HTML omitted --></p>
<p>对于微信支付而言，客户是各种接入微信支付的商户，因为每笔交易，他们要交约等于交易金额 0.0021%或者更多的手续费，属于躺着赚钱的模式； <!-- raw HTML omitted --></p>
<p>对于微信朋友圈，公众号而言，客户是各种广告主； <!-- raw HTML omitted --></p>
<p>在微信用户面前，微信就是个爹，教育你们怎么使用微信；但是在微信客户面前，比如美团，快手这些微信支付的大客户，微信就是孙子。 <!-- raw HTML omitted --></p>
<p>要做什么需求，产品经理根本没有办法推；要什么时候上线，就什么时候上线，即使不合理，也只能回来压榨工程师的时间。 <!-- raw HTML omitted --></p>
<p>毕竟客户说了，你们不做我们就切到支付宝去。 <!-- raw HTML omitted --></p>
<p>所以微信用户本质上只是微信收入来源的耗材和燃料，反正用户离不开微信这口灶，产品经理为什么还要听燃料的心声呢。 <!-- raw HTML omitted --></p>
<p>当然，背后的商业逻辑是这样，用户体验又是另外一回事了。 <!-- raw HTML omitted --></p>
<h3 id="产品"><!-- raw HTML omitted -->3.2<!-- raw HTML omitted --> 产品</h3>
<p>既然是生意，那么自然要有可以营利的产品或服务，对于大部分工程师而言，他们能提供的产品，就是生产软件的服务。 <!-- raw HTML omitted --></p>
<p>那和「写代码的」也没有什么差别嘛？ <!-- raw HTML omitted --></p>
<p>稍安勿躁，这只是第一步嘛。 <!-- raw HTML omitted --></p>
<p>如果我们提供的生产软件的服务是生意的话，那么要想营利，产生更大的利润，就需要我们考虑一个问题： <!-- raw HTML omitted --></p>
<p>如何大家都是生产软件的生意，你的产品又如何从同质化严重的同行中脱颖而出。 <!-- raw HTML omitted --></p>
<h3 id="竞争优势"><!-- raw HTML omitted -->3.3<!-- raw HTML omitted --> 竞争优势</h3>
<p>搞低价倾销（加班巻死他们）？ <!-- raw HTML omitted --></p>
<p>这也是个可行但不能持久的法子： <!-- raw HTML omitted --></p>
<ol>
<li>毕竟你搞低价倾销，即使把生意都抢到，你产能有限，客户的单不一定都能接过来； <!-- raw HTML omitted --></li>
<li>另外低价倾销，只会把市场搞坏，降低了利润空间，只会让客户单方面受益 <!-- raw HTML omitted --></li>
<li>强中自有强中手，一山还有一山高，万一遇到比你还能搞低价倾销的同行，那不是哑巴吃黄莲，有苦说不出嘛。 <!-- raw HTML omitted --></li>
</ol>
<p>所以最优解应该是你提供更优质的服务，将优质服务作为自己的竞争优势。 <!-- raw HTML omitted --></p>
<p>既然要提供优势的服务，就需要 <!-- raw HTML omitted --></p>
<ol>
<li>学会与客户沟通交流，先明确客户的需求， <!-- raw HTML omitted --></li>
<li>然后分析需求，明确这服务是否客户想要的， <!-- raw HTML omitted --></li>
<li>再动工建设，保证最终成品贴近客户的诉求。 <!-- raw HTML omitted --></li>
</ol>
<p>或者是成为某个领域的专家，提供差异化的服务。 <!-- raw HTML omitted --></p>
<p>所谓人无我有，人有我优。 <!-- raw HTML omitted --></p>
<p>看到这里，有朋友可能会质疑：即使我做了这么多，做得这么好，但是工资（产品的售价）还是不涨阿，那还有什么意思？ <!-- raw HTML omitted --></p>
<p>如果把这个当作自己的生意，提供优质服务之后，自然是需要和客户重新谈合同的嘛（加薪）。 <!-- raw HTML omitted --></p>
<p>如果谈不拢，那就换家客户就好了，反正我只要产品够好，自然不缺客户，我还可以拿现有的供货合同和未来的客户谈。 <!-- raw HTML omitted --></p>
<p>生意是自己，服务做优质之后，最终受益的还是自己（当然，需要些时间和策略） <!-- raw HTML omitted --></p>
<h3 id="大厂光环"><!-- raw HTML omitted -->3.4<!-- raw HTML omitted --> 大厂光环</h3>
<p>所谓的大厂光环，和偶像光环类似，就觉得个人会因为进去某个公司，把平台优势当作自己的成就，从而骄傲了起来。 <!-- raw HTML omitted --></p>
<p>坦白讲，以前我也有大厂光环，在自己去了某家大厂之后。 <!-- raw HTML omitted --></p>
<p>走路的时候，头抬得更高了，背挺得更直了，以便于胸前的工牌更加醒目。 <!-- raw HTML omitted --></p>
<p>如果把自己的职业生涯比作一门生意后，我想我应该不会再为与某个客户合作而沾沾自喜，毕竟客户的商业成就，与我关系不大。 <!-- raw HTML omitted --></p>
<p>客户可以有很多个，没有必要为别人的成就而自得不已。 <!-- raw HTML omitted --></p>
<p>最近新读到一首诗，唐代孟郊的《劝学》： <!-- raw HTML omitted --></p>
<blockquote>
<p>击石乃有火，不击元无烟。 <!-- raw HTML omitted --></p>
<p>人学始知道，不学非自然。 <!-- raw HTML omitted --></p>
<p>万事须己运，他得非我贤。 <!-- raw HTML omitted --></p>
<p>青春须早为，岂能长少年。 <!-- raw HTML omitted --></p>
</blockquote>
<p><strong><strong>万事须己运，他得非我贤。</strong></strong> <!-- raw HTML omitted --></p>
<h2 id="十项全能"><!-- raw HTML omitted -->4<!-- raw HTML omitted --> 十项全能</h2>
<p>既然是要做生意，那么只会写代码，注定是不可行。 <!-- raw HTML omitted --></p>
<p>毕竟没有见过哪家成功的商业公司，只在车间生产产品即可，不需要一系列配套的商业运作流程： <!-- raw HTML omitted --></p>
<ol>
<li>营销与广告，打造个人品牌，写博客或者做Up主 <!-- raw HTML omitted --></li>
<li>持续学习，没有什么生意是一成不变，就能从爷爷辈做到孙子辈的 <!-- raw HTML omitted --></li>
<li>如何提升个人效率，以更少的投入获取更多的产出 <!-- raw HTML omitted --></li>
<li>如何理财，管理你生意的营收与支出 <!-- raw HTML omitted --></li>
<li>如何健身，管理你自己的身材 <!-- raw HTML omitted --></li>
<li>旋转720度，落地无水花 <!-- raw HTML omitted --></li>
</ol>
<p>诸如此类，这些技能要求也就变成理所当然。 <!-- raw HTML omitted --></p>
<h2 id="总结"><!-- raw HTML omitted -->5<!-- raw HTML omitted --> 总结</h2>
<p>把工作当作生意的思路转变，只是第一步。 <!-- raw HTML omitted --></p>
<p>套用《霸王别姬》的一句台词： <!-- raw HTML omitted --></p>
<blockquote>
<p>今儿个是破题儿 <!-- raw HTML omitted --></p>
<p>文章还在后头呢 <!-- raw HTML omitted --></p>
</blockquote>
<p>客户或公司是一个抽象的概念，实际也是由形形色色的人组成。 <!-- raw HTML omitted --></p>
<p>与客户合作，实际是与各种人打交道，如何高效沟通和交流就是一个非常有用的技能。 <!-- raw HTML omitted --></p>
<p>但对于曾经社恐的我来说，跨出第一步却是非常艰难。 <!-- raw HTML omitted --></p>
<p>所以软技能系统的下一篇是： <!-- raw HTML omitted --></p>
<p>软件工程师的软技能指北（三）：高效交流篇 <!-- raw HTML omitted --></p>
<p>对于后续的篇章，呼应上文，我有了大概腹稿，分别是： <!-- raw HTML omitted --></p>
<ul>
<li>软件工程师的软技能指北（四）：简历篇 <!-- raw HTML omitted --></li>
<li>软件工程师的软技能指北（五）：面试篇 <!-- raw HTML omitted --></li>
<li>软件工程师的软技能指北（六）：谈薪篇 <!-- raw HTML omitted --></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>

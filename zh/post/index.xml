<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on 自由庄园</title>
    <link>https://ramsayleung.github.io/zh/post/</link>
    <description>Recent content in Posts on 自由庄园</description>
    <image>
      <title>自由庄园</title>
      <url>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>See this site&#39;s source code [here](https://github.com/ramsayleung/ramsayleung.github.io), licensed under GPLv3 ·</copyright>
    <lastBuildDate>Wed, 18 Sep 2024 22:46:00 -0700</lastBuildDate><atom:link href="https://ramsayleung.github.io/zh/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用Rust的Iterator优雅解决FizzBuzz问题</title>
      <link>https://ramsayleung.github.io/zh/post/2024/%E4%BD%BF%E7%94%A8rust%E7%9A%84iterator%E8%A7%A3%E5%86%B3fizzbuzz%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 18 Sep 2024 22:46:00 -0700</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2024/%E4%BD%BF%E7%94%A8rust%E7%9A%84iterator%E8%A7%A3%E5%86%B3fizzbuzz%E9%97%AE%E9%A2%98/</guid>
      <description>1 前言 按照维基百科的说法，FizzBuzz问题 是一个简单但是常见的面试编程问题（可能以前常见，现在都是考Leetcode了,这种连Easy 都</description>
      <content:encoded><![CDATA[<h2 id="前言"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> 前言</h2>
<p>按照维基百科的说法，<a href="https://en.wikipedia.org/wiki/Fizz_buzz">FizzBuzz问题</a> 是一个简单但是常见的面试编程问题（可能以前常见，现在都是考Leetcode了,这种连Easy 都不算了），这个问题的要求如下： <!-- raw HTML omitted --></p>
<ol>
<li>写一个程序，输出从1到100的数字 <!-- raw HTML omitted --></li>
<li>对于3的倍数，不输出数字，而是输出 &ldquo;Fizz&rdquo; <!-- raw HTML omitted --></li>
<li>对于5的倍数，不输出数字，而是输出 &ldquo;Buzz&rdquo; <!-- raw HTML omitted --></li>
<li>对于即是3的倍数又是5的倍数的数字（即15的倍数），打印 &ldquo;FizzBuzz&rdquo; <!-- raw HTML omitted --></li>
</ol>
<h2 id="常规解法"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> 常规解法</h2>
<p>问题非常简单，刚学编程的学生都可以写出符合要求的代码，下面是 Rust 的常规解法： <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="mi">0</span><span class="o">..=</span><span class="mi">100</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">5</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;FizzBuzz&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;Fizz&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">5</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;Buzz&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;{i}&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>这个没有什么太多可说的，就是直接按需求翻译代码了。 <!-- raw HTML omitted --></p>
<h2 id="iterator-解法"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> Iterator 解法</h2>
<p>如果现在给 FizzBuzz 问题再加一个限制，不能使用乘法，除法，或者取模操作，那么又要怎么实现呢？ <!-- raw HTML omitted --></p>
<p>Rust 标准库中的各式 <code>Iterator</code> 可以算是Rust零开销抽象(Zero Cost Abstraction)与表达能力的最佳体现了。 <!-- raw HTML omitted --></p>
<p>最近在读 Programming Rust, 2nd edition, 里面就有使用各种 Iterator 组合，不使用除法或者取模操作来解决 FizzBuzz 问题的实现, 可以说是把 <code>iterator</code> 玩得非常花了： <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">iter</span>::<span class="p">{</span><span class="n">once</span><span class="p">,</span><span class="w"> </span><span class="n">repeat</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">fizzes</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">repeat</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">).</span><span class="n">take</span><span class="p">(</span><span class="mi">2</span><span class="p">).</span><span class="n">chain</span><span class="p">(</span><span class="n">once</span><span class="p">(</span><span class="s">&#34;fizz&#34;</span><span class="p">)).</span><span class="n">cycle</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">buzzes</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">repeat</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">).</span><span class="n">take</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="n">chain</span><span class="p">(</span><span class="n">once</span><span class="p">(</span><span class="s">&#34;buzz&#34;</span><span class="p">)).</span><span class="n">cycle</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">fizzes_buzzes</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">fizzes</span><span class="p">.</span><span class="n">zip</span><span class="p">(</span><span class="n">buzzes</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">fizz_buzz</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="o">..=</span><span class="mi">100</span><span class="p">).</span><span class="n">zip</span><span class="p">(</span><span class="n">fizzes_buzzes</span><span class="p">).</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">tuple</span><span class="o">|</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="n">tuple</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;&#34;</span><span class="p">))</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">i</span><span class="p">.</span><span class="n">to_string</span><span class="p">(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">(</span><span class="n">_</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="n">fizz</span><span class="p">,</span><span class="w"> </span><span class="n">buzz</span><span class="p">))</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="fm">format!</span><span class="p">(</span><span class="s">&#34;{}{}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">fizz</span><span class="p">,</span><span class="w"> </span><span class="n">buzz</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">line</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">fizz_buzz</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;{line}&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>看起来是否不知道所云呢? 现在可以把每个 <code>iterator</code> 的作用逐一拆解。 <!-- raw HTML omitted --></p>
<h3 id="repeat-plus-take"><!-- raw HTML omitted -->3.1<!-- raw HTML omitted --> repeat + take</h3>
<p><code>repeat</code> 的作用就是无限重复某个传入的元素, 例如 <code>repeat(4)</code> 就是生成无限个数字4, <code>repeat(&quot;&quot;)</code> 就是生成无限个空白字符. <!-- raw HTML omitted --></p>
<p>虽然 <code>repeat</code> 能生成无限个指定的元素，但是我只想要若干个元素，怎么整呢？ <code>take</code> 就可以满足这个要求，所以 <code>repeat(4).take(4)</code> 就是生成4个数字4的意思，而 <code>repeat(&quot;&quot;).take(2)</code> 就是生成2个空字符 <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">iter</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// that last example was too many fours. Let&#39;s only have four fours.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">four_fours</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">iter</span>::<span class="n">repeat</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="n">take</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="nb">Some</span><span class="p">(</span><span class="mi">4</span><span class="p">),</span><span class="w"> </span><span class="n">four_fours</span><span class="p">.</span><span class="n">next</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="nb">Some</span><span class="p">(</span><span class="mi">4</span><span class="p">),</span><span class="w"> </span><span class="n">four_fours</span><span class="p">.</span><span class="n">next</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="nb">Some</span><span class="p">(</span><span class="mi">4</span><span class="p">),</span><span class="w"> </span><span class="n">four_fours</span><span class="p">.</span><span class="n">next</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="nb">Some</span><span class="p">(</span><span class="mi">4</span><span class="p">),</span><span class="w"> </span><span class="n">four_fours</span><span class="p">.</span><span class="n">next</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// ... and now we&#39;re done
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="nb">None</span><span class="p">,</span><span class="w"> </span><span class="n">four_fours</span><span class="p">.</span><span class="n">next</span><span class="p">());</span><span class="w">
</span></span></span></code></pre></div><h3 id="once"><!-- raw HTML omitted -->3.2<!-- raw HTML omitted --> once</h3>
<p>有生成无限个元素的 <code>iterator=，自然就有只生成一个元素的 =iterator</code>, 那就是 <code>once()</code>, 这个 <code>iterator</code> 只会返回一个指定的元素。 <!-- raw HTML omitted --></p>
<p>所以 <code>once(&quot;fizz&quot;)</code> 就是创建一个只会返回一个 &ldquo;fizz&rdquo; 的 <code>iterator</code> : <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">iter</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// one is the loneliest number
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">one</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">iter</span>::<span class="n">once</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="nb">Some</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span><span class="w"> </span><span class="n">one</span><span class="p">.</span><span class="n">next</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// just one, that&#39;s all we get
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="nb">None</span><span class="p">,</span><span class="w"> </span><span class="n">one</span><span class="p">.</span><span class="n">next</span><span class="p">());</span><span class="w">
</span></span></span></code></pre></div><h3 id="chain"><!-- raw HTML omitted -->3.3<!-- raw HTML omitted --> chain</h3>
<p>顾名思义，就是把两个 iterator 像链子一样串起来, 合并成一个 iterator: <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">iter</span>::<span class="n">chain</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="mi">6</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">iter</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">chain</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="w"> </span><span class="n">b</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">iter</span><span class="p">.</span><span class="n">next</span><span class="p">(),</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">iter</span><span class="p">.</span><span class="n">next</span><span class="p">(),</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">iter</span><span class="p">.</span><span class="n">next</span><span class="p">(),</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="mi">3</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">iter</span><span class="p">.</span><span class="n">next</span><span class="p">(),</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="mi">4</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">iter</span><span class="p">.</span><span class="n">next</span><span class="p">(),</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="mi">5</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">iter</span><span class="p">.</span><span class="n">next</span><span class="p">(),</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="mi">6</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">iter</span><span class="p">.</span><span class="n">next</span><span class="p">(),</span><span class="w"> </span><span class="nb">None</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><h3 id="circle"><!-- raw HTML omitted -->3.4<!-- raw HTML omitted --> circle</h3>
<p><code>circle</code> 就比较有趣了，它的作用是无限循环一个 <code>iterator</code>, <code>repeat</code> 循环一个元素，而 <code>circle</code> 是循环一个 iterator: <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="kd">let</span><span class="w"> </span><span class="n">dirs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="s">&#34;North&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;East&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;South&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;West&#34;</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">spin</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dirs</span><span class="p">.</span><span class="n">iter</span><span class="p">().</span><span class="n">cycle</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">spin</span><span class="p">.</span><span class="n">next</span><span class="p">(),</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="o">&amp;</span><span class="s">&#34;North&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">spin</span><span class="p">.</span><span class="n">next</span><span class="p">(),</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="o">&amp;</span><span class="s">&#34;East&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">spin</span><span class="p">.</span><span class="n">next</span><span class="p">(),</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="o">&amp;</span><span class="s">&#34;South&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">spin</span><span class="p">.</span><span class="n">next</span><span class="p">(),</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="o">&amp;</span><span class="s">&#34;West&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">spin</span><span class="p">.</span><span class="n">next</span><span class="p">(),</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="o">&amp;</span><span class="s">&#34;North&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">spin</span><span class="p">.</span><span class="n">next</span><span class="p">(),</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="o">&amp;</span><span class="s">&#34;East&#34;</span><span class="p">));</span><span class="w">
</span></span></span></code></pre></div><p>把4个 iterator 组合起来的 <code>repeat(&quot;&quot;).take(2).chain(once(&quot;fizz&quot;)).cycle();</code> 表达式的意思就是, 返回一个 iterator, 这个 iterator 无限循环: <code>&quot;&quot; &quot;&quot; &quot;fizz&quot; &quot;&quot; &quot;&quot; &quot;fizz&quot; ...</code> <!-- raw HTML omitted --></p>
<h3 id="zip"><!-- raw HTML omitted -->3.5<!-- raw HTML omitted --> zip</h3>
<p><code>zip</code> iterator 的含义就是 &ldquo;zips up&rdquo;, 翻译过来就是拉上拉链，它的作用就是把两个 <code>iterator</code> 像拉链一样拉起来，返回一个 iterator，用代码来解释会更直观: <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="kd">let</span><span class="w"> </span><span class="n">a1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="n">a2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="mi">6</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">iter</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">a1</span><span class="p">.</span><span class="n">iter</span><span class="p">().</span><span class="n">zip</span><span class="p">(</span><span class="n">a2</span><span class="p">.</span><span class="n">iter</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">iter</span><span class="p">.</span><span class="n">next</span><span class="p">(),</span><span class="w"> </span><span class="nb">Some</span><span class="p">((</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="mi">4</span><span class="p">)));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">iter</span><span class="p">.</span><span class="n">next</span><span class="p">(),</span><span class="w"> </span><span class="nb">Some</span><span class="p">((</span><span class="o">&amp;</span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="mi">5</span><span class="p">)));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">iter</span><span class="p">.</span><span class="n">next</span><span class="p">(),</span><span class="w"> </span><span class="nb">Some</span><span class="p">((</span><span class="o">&amp;</span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="mi">6</span><span class="p">)));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">iter</span><span class="p">.</span><span class="n">next</span><span class="p">(),</span><span class="w"> </span><span class="nb">None</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p><code>zip</code> 就是把 <code>a1</code> 和 <code>a2</code> 两个iterator 「拉起来」了，每次返回一对的元素. 所以 =fizzes.zip(buzzes)=，就是合并了两个 iterator : <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="c1">// fizzes: &#34;&#34; &#34;&#34; &#34;fizz&#34; &#34;&#34; &#34;&#34; &#34;fizz&#34; &#34;&#34; &#34;&#34; &#34;fizz&#34; ..
</span></span></span><span class="line"><span class="cl"><span class="c1">// buzzes: &#34;&#34; &#34;&#34; &#34;&#34; &#34;&#34; &#34;buzz&#34; &#34;&#34; &#34;&#34; &#34;&#34; &#34;&#34; &#34;buzz&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1">// fizzes_buzzes: (&#34;&#34; &#34;&#34;) (&#34;&#34; &#34;&#34;) (&#34;fizz&#34; &#34;&#34;) (&#34;&#34; &#34;&#34;) (&#34;&#34; &#34;buzz&#34;) ...
</span></span></span></code></pre></div><p>而 <code>(1..=100).zip(fizzes_buzzes)</code> 就是创建一个包含三个元素的 tuple： <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="c1">// (1..=100): 1 2 3 4 5 6 7 ...
</span></span></span><span class="line"><span class="cl"><span class="c1">// fizzes_buzzes: (&#34;&#34; &#34;&#34;) (&#34;&#34; &#34;&#34;) (&#34;fizz&#34; &#34;&#34;) (&#34;&#34; &#34;&#34;) (&#34;&#34; &#34;buzz&#34;) ...
</span></span></span><span class="line"><span class="cl"><span class="c1">// (1..=100).zip(fizzes_buzzes): (1 (&#34;&#34; &#34;&#34;)) (2 (&#34;&#34; &#34;&#34;)) (3 (&#34;fizz&#34; &#34;&#34;)) (4 (&#34;&#34; &#34;&#34;)) (5 (&#34;&#34; &#34;buzz&#34;)) ..
</span></span></span></code></pre></div><h3 id="map"><!-- raw HTML omitted -->3.6<!-- raw HTML omitted --> map</h3>
<p><code>map</code> 这个 iterator 在其他语言也有相同的实现，入参是一个闭包函数，然后把每个元素作为入参，调用闭包函数，在新的迭代返回函数的调用结果. <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">tuple</span><span class="o">|</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="n">tuple</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;&#34;</span><span class="p">))</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">i</span><span class="p">.</span><span class="n">to_string</span><span class="p">(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">(</span><span class="n">_</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="n">fizz</span><span class="p">,</span><span class="w"> </span><span class="n">buzz</span><span class="p">))</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="fm">format!</span><span class="p">(</span><span class="s">&#34;{}{}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">fizz</span><span class="p">,</span><span class="w"> </span><span class="n">buzz</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">})</span><span class="w">
</span></span></span></code></pre></div><p>最核心的是Rust的 pattern matching, 用来匹配不同的值, <code>(i, (&quot;&quot;, &quot;&quot;))</code> 就是匹配所有 fizz 和 buzz为 <code>(&quot;&quot;, &quot;&quot;)</code> 的值，什么情况下 <code>fizz</code> 和 <code>buzz</code> 会都为 &quot;&quot; 呢，无法整除3以及无法整除5的时候，那么就直接返回数字 <code>i</code>; <!-- raw HTML omitted --></p>
<p><code>(_, (fizz,buzz))</code>, <code>_</code> 就是通配符，就是匹配掉所有其他的情况，无论是 fizz = &ldquo;&rdquo;, fizz = &ldquo;fizz&rdquo;, buzz <code>&quot;&quot; 或者 buzz = &quot;buzz&quot;, 都把返回 &quot;{fizz}{buzz}&quot;, 也就是 =(_, (fizz,buzz))</code> 匹配了4种情况. <!-- raw HTML omitted --></p>
<p><code>map</code> 迭代器返回的是一个 String, 最后再加 String 打印出来. <!-- raw HTML omitted --></p>
<p>同样是解决问题，这个版本的解法肯定是看起来「高大上」得多，说不定能让面试官眼前一亮，又或者是把自己绕晕。 <!-- raw HTML omitted --></p>
<h2 id="zero-cost-abstraction"><!-- raw HTML omitted -->4<!-- raw HTML omitted --> Zero Cost Abstraction</h2>
<p>所谓的是零开销抽象（Zero Cost Abstraction），用C++之父的话来解释就是: <!-- raw HTML omitted --></p>
<blockquote>
<p>In general, C++ implementations obey the zero-overhead principle: What you don’t use, you don’t pay for. And further: What you do use, you couldn’t hand code any better. <!-- raw HTML omitted --></p>
</blockquote>
<p>概括来说，就是使用 Iterator 写出来的代码，和你自己 for-loop 手写是性能是一样的，并不会有额外的抽象开销。 <!-- raw HTML omitted --></p>
<p>换个角度讲，你手写的代码也没法实现得比 Iterator 更快，表达力还可能没有那么强。 <!-- raw HTML omitted --></p>
<p>如果看上面的 Iterator 实现觉得着实难以理解，我们可以再来一版兼具优雅与简洁的实现： <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="mi">1</span><span class="o">..=</span><span class="mi">100</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">5</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;FizzBuzz&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">_</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;Fizz&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">(</span><span class="n">_</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;Buzz&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">(</span><span class="n">_</span><span class="p">,</span><span class="w"> </span><span class="n">_</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;{}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h2 id="reference"><!-- raw HTML omitted -->5<!-- raw HTML omitted --> Reference</h2>
<ul>
<li>Programming Rust, 2nd edition <!-- raw HTML omitted --></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Rust模拟C&#43;&#43;的函数重载</title>
      <link>https://ramsayleung.github.io/zh/post/2024/rust%E6%A8%A1%E6%8B%9Fc&#43;&#43;%E7%9A%84%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD/</link>
      <pubDate>Fri, 30 Aug 2024 22:23:00 -0700</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2024/rust%E6%A8%A1%E6%8B%9Fc&#43;&#43;%E7%9A%84%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD/</guid>
      <description>1 函数重载(function overloading) 所谓的函数重载，指的是某些语言支持创建函数名相同，但函数签名不同的多个函数，所谓的函数签名，既指参数类型，也指</description>
      <content:encoded><![CDATA[<h2 id="函数重载--function-overloading"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> 函数重载(function overloading)</h2>
<p>所谓的函数重载，指的是某些语言支持创建函数名相同，但函数签名不同的多个函数，所谓的函数签名，既指参数类型，也指参数的数量。 <!-- raw HTML omitted --></p>
<p>如C++，Java都是支持函数重载的，而Rust是不支持函数重载的, 个人猜测可能是Rust最初的设计者认为函数重载可能会导致增加代码理解难度，尤其是在C++里面，隐式类型转换叠加函数重载，可能看代码都看不出实际调用的是哪个版本的函数。 <!-- raw HTML omitted --></p>
<h2 id="rust版本的函数重载"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> Rust版本的函数重载</h2>
<p>但是我个人觉得函数重载在大部分情况下都是很方便，也不需要为相同的函数想不同的名字，毕竟命名是编程最难的问题之一。 <!-- raw HTML omitted -->
今天重读 Programming Rust, 2nd Edition关于 <code>Into</code> 这个trait 的功能的时候，突然意识到，可以使用 <code>Into</code> 模拟出部分的函数重载功能。 <!-- raw HTML omitted --></p>
<p>为什么说是「部分」呢，因为前文提到，所谓的函数重载是指多个同名但函数签名不一样的函数，而Rust能模拟的就是参数类型不一样，但是参数数量一致的重载函数。 <!-- raw HTML omitted --></p>
<p>假设我们想实现自己的 <code>ping</code> 命名, 入参可以是 <a href="https://doc.rust-lang.org/std/net/struct.Ipv4Addr.html"><code>Ipv4Addr</code></a> 这个 struct, ipv4的地址也可以使用2进制来表示, 又或者可以使用 u32 来表示，毕竟只有32位。 <!-- raw HTML omitted --></p>
<p>如果用 C++, 我们可以写3个重载函数，入参分别是, <code>Ipv4Addr</code>, <code>bitset</code> 和 <code>uint32</code>. 在 Rust, 我们也实现类似的函数： <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">net</span>::<span class="n">Ipv4Addr</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">ping</span><span class="o">&lt;</span><span class="n">A</span><span class="o">&gt;</span><span class="p">(</span><span class="n">address</span>: <span class="nc">A</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">std</span>::<span class="n">io</span>::<span class="nb">Result</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">where</span><span class="w"> </span><span class="n">A</span>: <span class="nb">Into</span><span class="o">&lt;</span><span class="n">Ipv4Addr</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">ipv4_address</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">address</span><span class="p">.</span><span class="n">into</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">..</span><span class="p">.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>需要注意的是，上面函数的入参并不是 <code>Ipv4Addr</code>, 而是 <code>Into&lt;Ipv4Addr&gt;</code> ，这就是意味着，所有实现了 <code>Into&lt;Ipv4Addr&gt;</code> 这个 trait 的类型都可以是 <code>ping</code> 的入参，而恰好 <code>u32</code> 和 <code>[u8; 4]</code> 都实现了 <code>Into&lt;Ipv4Addr&gt;</code> ，所以下面的调用都是编译通过的： <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;{:?}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ping</span><span class="p">(</span><span class="n">Ipv4Addr</span>::<span class="n">new</span><span class="p">(</span><span class="mi">23</span><span class="p">,</span><span class="w"> </span><span class="mi">21</span><span class="p">,</span><span class="w"> </span><span class="mi">68</span><span class="p">,</span><span class="w"> </span><span class="mi">141</span><span class="p">)));</span><span class="w"> </span><span class="c1">// pass an Ipv4Addr
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;{:?}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ping</span><span class="p">([</span><span class="mi">66</span><span class="p">,</span><span class="w"> </span><span class="mi">146</span><span class="p">,</span><span class="w"> </span><span class="mi">219</span><span class="p">,</span><span class="w"> </span><span class="mi">98</span><span class="p">]));</span><span class="w">             </span><span class="c1">// pass a [u8; 4]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;{:?}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ping</span><span class="p">(</span><span class="mh">0xd076eb94_</span><span class="k">u32</span><span class="p">));</span><span class="w">                 </span><span class="c1">// pass a u32
</span></span></span></code></pre></div><p>当然，如果你实现了 <code>impl From&lt;u32&gt; for Ipv4Addr</code>, Rust 编译器也会贴心地帮你把反向的 <code>Into&lt;Ipv4Addr&gt;</code> 也实现掉。 <!-- raw HTML omitted --></p>
<h2 id="限制"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> 限制</h2>
<p>看完上面的函数实现，有经验的朋友可能就会发现了，Rust版本的函数重载限制比C++的要多。 <!-- raw HTML omitted --></p>
<p>在C++版本的函数重载中： <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">func1</span><span class="p">(</span><span class="n">Type1</span> <span class="n">foo</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">func1</span><span class="p">(</span><span class="n">Type2</span> <span class="n">bar</span><span class="p">);</span>
</span></span></code></pre></div><p>参数类型 <code>Type1</code> 和 <code>Type2</code> 并不需要存在任何关系，但是在 Rust 版本中，需要两个类型之间支持相互转换，所以可以理解成 Rust 的「函数重载」本质就是通过显示类型转换来实现的。 <!-- raw HTML omitted --></p>
<p>毕竟 Rust 设计初衷之一就是支持强类型，就函数重载而言，终归聊胜于无啦。 <!-- raw HTML omitted --></p>
<h2 id="参考"><!-- raw HTML omitted -->4<!-- raw HTML omitted --> 参考</h2>
<ul>
<li><a href="https://www.oreilly.com/library/view/programming-rust-2nd/9781492052586/">Programming Rust, 2nd Edition</a> <!-- raw HTML omitted --></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>《走出戈壁》：从沙漠苦力到常青藤教授</title>
      <link>https://ramsayleung.github.io/zh/post/2024/%E8%B5%B0%E5%87%BA%E6%88%88%E5%A3%81/</link>
      <pubDate>Sun, 25 Aug 2024 11:24:00 -0700</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2024/%E8%B5%B0%E5%87%BA%E6%88%88%E5%A3%81/</guid>
      <description>1 前言 六月份的时候，读到了一篇名为《运气与努力》1的文章，是由 LeanCloud的创始人江宏博士写的，文章以一本书开篇，引出他关于运气与努力</description>
      <content:encoded><![CDATA[<h2 id="前言"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> 前言</h2>
<p>六月份的时候，读到了一篇名为《<a href="https://1byte.io/articles/luck/">运气与努力</a>》<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>的文章，是由 LeanCloud的创始人江宏博士写的，文章以一本书开篇，引出他关于运气与努力的思考:(文章写得相当真诚，充满洞见，也推荐大家阅读下) <!-- raw HTML omitted --></p>
<blockquote>
<p>很多人意识不到运气的重要性，而错把成功归功于自己的才能和努力， <!-- raw HTML omitted -->
却没有意识到好运在其中的重要性。忽视了这一点就难以保持谦虚，难以不断学习。 <!-- raw HTML omitted --></p>
<p>明白了运气的重要性，就知道不是人人生而能得到平等的机会的， <!-- raw HTML omitted -->
在遇到处境不如自己的人，不能假设这种差别是聪明或努力程度的不同造成的，应该知道善待弱者。 <!-- raw HTML omitted --></p>
</blockquote>
<p>而文章开篇提到的书名为(Out of the Gobi: My story of China and America)《走出戈壁：我的中美故事》, 作者单伟建在读完小学之后，就被文革的知青下乡运动感召，「自愿」下放到内蒙古生产建设兵团做了六年的苦力。 <!-- raw HTML omitted --></p>
<p>文革后，没拿到小学毕业证的他进入了首都经济贸易大学，之后在旧金山大学获得了 MBA， <!-- raw HTML omitted -->
在 UC Berkeley 取得博士学位，后来在 University of Pennsylvania 任教。 <!-- raw HTML omitted --></p>
<p>现在他是亚洲最大的私募基金之一 PAG Group 的主席和 CEO，而他当时在UC Berkeley的导师，现在也成为了美国财政部的部长，即Janet Yellen (珍妮特·耶伦), 她为本书作了序。 <!-- raw HTML omitted --></p>
<p>对于这样传奇的人生经历，我自然也是希望一读究竟。 <!-- raw HTML omitted --></p>
<h2 id="不以物喜-不以已悲"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> 不以物喜，不以已悲</h2>
<p>不少自传或者回亿类的书籍看起来，难免会有一种自吹自擂的感觉，这也是人之常情。 <!-- raw HTML omitted --></p>
<p>只是在本书的作者却是用一种云淡风轻，略带些幽默的口吻来描写在戈壁滩的艰苦生活，以至于那样痛苦的生活， <!-- raw HTML omitted -->
在作者笔下，都显得不那么痛苦了。 <!-- raw HTML omitted --></p>
<p>可能正如同样被下放到戈壁滩的民航机长老易教诲作者那般，“前面的路还很长，所有快乐的事情都会结束，所有的悲伤也是如此” <!-- raw HTML omitted --></p>
<p>书中有很多动人的经历，我印象比较深的是以下的几个故事： <!-- raw HTML omitted --></p>
<h2 id="戈壁生活"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> 戈壁生活</h2>
<h3 id="理想与现实"><!-- raw HTML omitted -->3.1<!-- raw HTML omitted --> 理想与现实</h3>
<p>知识青年下乡，响应号召，接受贫下中农再教育；参加建设兵团，为国戌边，建设国家。 <!-- raw HTML omitted --></p>
<p>这个是他们离家时的理想与目标，但实际的情况却与他们幻想得天差地别； <!-- raw HTML omitted --></p>
<p>一群年轻人秋天去国营农场里收土豆，挖了无数的土豆，但是却没有人来运土豆，他们也只能眼睁睁地看着被挖出来的土豆被冻烂， <!-- raw HTML omitted -->
不停地收获土豆，却又不停地看着收获好的土豆被冻烂在地里，循环往复，直到不再有挖土豆的念头。 <!-- raw HTML omitted --></p>
<p>兵团领导人希望可以把戈壁变成沃野，思路就是通过挖掘人工运河，把河里的水引到戈壁进行灌溉， <!-- raw HTML omitted -->
甚至有一天，作者他们被告知必须连夜赶工完成运河，以赶上最后限期，在完成之前，他们不能离开。 <!-- raw HTML omitted --></p>
<p>就这样，这群年轻人连续在运河上工作了31个小时，终于完成了人工运河的建设。 <!-- raw HTML omitted --></p>
<p>一周后，他们被告知，运河的路线被误算了，他们建造的那部分太高了，水无法流过，那部分必须被放弃，另建一条新路线。 <!-- raw HTML omitted --></p>
<p>军队建议兵团对改善贫困农村没有任何帮忙，事实上，他们只是让事情变成更糟糕，他们每天消耗的粮食是生产的三到四倍， <!-- raw HTML omitted -->
他们工作越努力，浪费的资源就越多。 <!-- raw HTML omitted --></p>
<p>兵团只是想给他们找些事情做，不让他们闲下来。 <!-- raw HTML omitted --></p>
<h3 id="努力-智慧与运气"><!-- raw HTML omitted -->3.2<!-- raw HTML omitted --> 努力，智慧与运气</h3>
<p>在这样的折腾下，六年时间，难免会让把人的志气给磨没，变得随大流，磨洋工。 <!-- raw HTML omitted --></p>
<p>农场上大多数人都不去田里工作，但他还在每天工作， 作者的心态是「干什么事都要干好，否则闲着也是浪费时间，而且争强好胜，虽然身体瘦弱，但不甘人后，如此而已。」 <!-- raw HTML omitted --></p>
<p>作者抓住一切能学习的机会，阅读能读到的各种书籍，向同样被流放的前民航机长学习英语，背诵药品的英文名字， <!-- raw HTML omitted -->
希望有一天能重新回到城市，能回到大学校园。 <!-- raw HTML omitted --></p>
<p>1971年，大学逐渐恢复了上课，但是那时的入学资格却不是考试，而是「群众推荐」制度，即由同龄人选举产生。 <!-- raw HTML omitted --></p>
<p>而作者不但没有被推举上，反而因为谈及外语，巴黎纽约这些外国城市，反而被人举报，渴望「资本主义生活方式」，并被众人被声讨。 <!-- raw HTML omitted --></p>
<p>这不仅让作者失去了被推举上大学的机会，还留下了个坏名声，但是作者并没有沉沦，他反而反思自己为何会成为众矢之的。 <!-- raw HTML omitted --></p>
<p>他分析下来是自己太与众不同，别人下棋他看书，他不屑于追求这些无用的东西，但人终究是群体性动物，太与众不同只会被人疏远。 <!-- raw HTML omitted --></p>
<p>所以他决定要融入这个集体，获得大家的好感，而不是作为一个孤僻的书呆子。 <!-- raw HTML omitted --></p>
<p>在观察到大家都喜欢篮球和排球运动，但却缺乏熟悉排球规则的裁判时， <!-- raw HTML omitted --></p>
<p>他让父亲寄书过来学着当排球裁判，让更多其他连的人认识他，让自己变成不可或缺，同时更加努力地工作，赢得众人的尊重。 <!-- raw HTML omitted -->
（能站在旁观者角度冷静分析问题，并利用现有条件进行解决，真的是充满智慧又难能可贵） <!-- raw HTML omitted --></p>
<p>终于，在第二年的入学资格「群众推荐」中，他得票第二，但是却因为与连队领导关系不佳， <!-- raw HTML omitted -->
他被以「年纪太轻（21岁），不能上大学」为由，把他从名单中删除。 <!-- raw HTML omitted --></p>
<p>得知消息的那一天晚上，作者深一脚浅一脚地走出营房，来到空旷的地方，边走边流泪，当再也不会没有人听到他的声音后， <!-- raw HTML omitted -->
他放眼大哭，在黑暗中撕心裂肺地喊叫，在沮丧和悲伤中喊得声嘶力竭。 <!-- raw HTML omitted --></p>
<p>那天晚上后，作者收拾心情，告诫自己生活必须继续，总会有未来的。 <!-- raw HTML omitted -->
他发誓不会让自己失望，他已经经历这么多了，但他绝对不会在绝望中迷失自我，放弃就是对自己犯下罪行。 <!-- raw HTML omitted --></p>
<p>如果大环境一直很糟糕，自己要在戈壁待一辈子而没有出头之日，他没有谁可怨； <!-- raw HTML omitted -->
但是如果将来发生变化，因为自己没有准备好而失去了改变命运的机会，他只能怪自己。 <!-- raw HTML omitted --></p>
<p>所以他在逆境中也一直在为将来准备。 <!-- raw HTML omitted --></p>
<p>终于，在第三年，在11人竞选9个名额的竞争中，作者作为最后一名修补人选， <!-- raw HTML omitted -->
在名单中的两名正式候选人先后被除名后，递补入选，获得了首都经济贸易大学的入学资格. <!-- raw HTML omitted --></p>
<h2 id="自助者天助之"><!-- raw HTML omitted -->4<!-- raw HTML omitted --> 自助者天助之</h2>
<p>作者在毕业后成为首经贸的教师，后来得到亚洲基金会赞助前往旧金山大学一年的访学机会。 <!-- raw HTML omitted --></p>
<p>到校后，在与教授们交流后，他决定攻读该校的MBA 课程并争取拿到学位，但苦于没有学费，他决定先抓住机会学习知识，知识先于学历，再看能否找机会凑到学费。 <!-- raw HTML omitted --></p>
<p>第一学期各门课程优异，但是学费还是没有着落，在各种方法尝试未果后将要放弃时， <!-- raw HTML omitted -->
他的导师给他带来了一个好消息：一个匿名人士愿意资助他的学费，于是他得而注册并开始MBA课程。 <!-- raw HTML omitted --></p>
<p>待他学业小有所成时，他导师告知他，那位匿名赞助人希望与他在某个高档餐厅共进晚餐，相见一面。 <!-- raw HTML omitted --></p>
<p>当导师夫妇身着正装出现在餐厅时，他才猛然意识到，他们原来就是自己的资助人，他的感激之情，无以言表。 <!-- raw HTML omitted --></p>
<p>如果不是作者在学习过程所表现出来的专注，付出与努力，相信也没有那么容易可以打动到导师，这也许是所谓的「自助者天助之」吧。 <!-- raw HTML omitted --></p>
<p>多年之后，待他事业有所成时，他以导师与自己名字，联名捐赠了一个奖学金，以帮助更多学子追求梦想。 <!-- raw HTML omitted --></p>
<h2 id="洞察规则的智慧"><!-- raw HTML omitted -->5<!-- raw HTML omitted --> 洞察规则的智慧</h2>
<p>在旧金山大学获得MBA 课程硕士需要2年时间，在学费问题得而解决之后， <!-- raw HTML omitted -->
作者面临的问题就是访学项目只是一年，要获得学位，他就需要亚洲基金会批准延长他的项目，并且获得首都经济贸易大学的批准。 <!-- raw HTML omitted --></p>
<p>也就是攻读硕士学位不在项目原有计划之内，他当时已经是首都经济贸易大学的教师，再延期一年属于「节外生枝」。 <!-- raw HTML omitted --></p>
<p>基金会领导安迪表示他要给经贸学院的领导写一封信，征求北京的意见。 <!-- raw HTML omitted --></p>
<p>作者表示，你不能这么写，安迪问为什么。 <!-- raw HTML omitted --></p>
<p>作者回答到，如果你征求北京方面的意见，他们就要研究是否批准。 <!-- raw HTML omitted --></p>
<p>只有两个可能——批准或者不予批准。批准了当然好，但是如果不予批准，我怎么办？ <!-- raw HTML omitted --></p>
<p>安迪问作者还有更好的办法吗？ <!-- raw HTML omitted --></p>
<p>作者表示，你就给北京发个贺电，说我学习成绩优异，校方决定给我奖学金，只需延期一个学期，就可以获得硕士学位， <!-- raw HTML omitted -->
对于这样的成绩，亚基会向外贸学院表示祝贺，其他的都不必说。 <!-- raw HTML omitted --></p>
<p>安迪写了一封信，信中对作者大加赞扬，但小心地将大部分奉承留给了经贸学院。 <!-- raw HTML omitted --></p>
<p>两周后，学院回复，只有四个字——‘非常感谢’。 <!-- raw HTML omitted --></p>
<p>作者心花怒放。 <!-- raw HTML omitted --></p>
<p>读到此处，真的为作者深谙体制的规则和处理事情的智慧所折服。 <!-- raw HTML omitted --></p>
<p>正如他所料，谁能拒绝别人的道贺呢？ <!-- raw HTML omitted --></p>
<p>更何况是来自曾经的敌人，美帝国主义的夸奖，这足以让学院领导扬眉吐气。 <!-- raw HTML omitted --></p>
<h2 id="总结"><!-- raw HTML omitted -->6<!-- raw HTML omitted --> 总结</h2>
<p>在单伟建回到母校旧金山大学<a href="https://www.youtube.com/watch?v=R0Niw73cyIo&amp;t=4304s">演讲</a>时<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>，当循例被主持人问到能给学生们什么建议时，他说在任何领域，成功的三个重要要素是： <!-- raw HTML omitted --></p>
<ol>
<li>终身学习；如果他在戈壁没有坚持学习，那么他不可能在失学十年后，在中国重新开放时，能抓住来之不易的机会，自然就没有后来的一切 <!-- raw HTML omitted --></li>
<li>好的判断力；好的判断比毅力更加重要，做正确的事情远比正确地做事重要，方向对了，努力才有意义。而没有人生来就有好的判断力，这个就源于经验，知识，就需要不断地学习才能获取到，又呼应上「终身学习」了 <!-- raw HTML omitted --></li>
<li>运气；正如单伟建的观点与罗翔老师的类似，「运气并非成就，是命运之手把我托举到所不配有的高度，让人飘然，让人晕眩，最终，让人诚惶诚恐」，意识到运气的重要，才能让人谦卑。 <!-- raw HTML omitted --></li>
</ol>
<p>对于终身学习这条建议，我自已也有些许浅薄体会，一年半前，我写了一篇文章: <a href="https://ramsayleung.github.io/zh/post/2023/rspotify_%E4%B8%80%E4%B8%AA%E7%94%A8%E7%88%B1%E5%8F%91%E7%94%B5%E4%BA%94%E5%B9%B4%E7%9A%84%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/">《RSpotify: 一个用爱发电五年的开源项目》</a>, 分享自己学习了六年Rust，并且维护一个开源项目的经历。 <!-- raw HTML omitted --></p>
<p>在我大学的最后一年，我选择了学习Rust这个新兴的编程语言，距离当时它发布1.0稳定版本也仅仅过了2年， <!-- raw HTML omitted -->
我既不觉得我未来的工作会因此受益，也不会获取什么额外的报酬，毕竟这东西太小众了，国内也不会有公司会用，大厂不是用Java就是用C++。 <!-- raw HTML omitted --></p>
<p>我只是觉得好玩，再兼之大四没有课，总要学点新东西。 <!-- raw HTML omitted -->
就这样，一学就是六七年，维护这个用Rust的开源项目也五年了，除了不时的Github Issue, 也没有其他的收益。 <!-- raw HTML omitted --></p>
<p>在今年七月，我又被换到了一个新的组，创下了一个个人职业新纪录，在一年三个月内，待了4个组。 <!-- raw HTML omitted --></p>
<p>新组还是在AWS S3, 而新组领导对Rust相当狂热，因为Rust的特点几乎完美契合S3的要求， <!-- raw HTML omitted -->
媲美C的高性能，内存安全，强类型，高并发，所以大老板非常想要在新服务使用Rust, 美中不足的就是Rust学习曲线陡峭，懂Rust的人不多。 <!-- raw HTML omitted --></p>
<p>而我刚好就是懂Rust又会Java的那个，毕竟都学这么久了，就这样我无缝对接到新组，在新的核心服务上开始写Rust，达成了通过写Rust养活自己的成就。 <!-- raw HTML omitted --></p>
<p>像单伟建那样，在戈壁那样艰苦的环境坚持学习，在困境中保持乐观，在苦厄中坚持成长 <!-- raw HTML omitted -->
，穷且益坚，实现从小学文凭苦力到常青藤教授的成就，绝大部分人自然难以望其项背。 <!-- raw HTML omitted --></p>
<p>但是，如果把终身学习理解成投资的定投，只需要持续学习，无论每天，每周或者每月学多么微小的知识，在时间的复利作用下， <!-- raw HTML omitted -->
终有一天，都会有带来质的提升。 <!-- raw HTML omitted --></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://1byte.io/articles/luck/">https://1byte.io/articles/luck/</a>  <!-- raw HTML omitted -->&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://www.youtube.com/watch?v=R0Niw73cyIo&amp;t=4304s">https://www.youtube.com/watch?v=R0Niw73cyIo&amp;t=4304s</a>  <!-- raw HTML omitted -->&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>夏日捕蟹记</title>
      <link>https://ramsayleung.github.io/zh/post/2024/%E5%A4%8F%E6%97%A5%E6%8D%95%E8%9F%B9%E8%AE%B0/</link>
      <pubDate>Thu, 18 Jul 2024 20:34:00 -0700</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2024/%E5%A4%8F%E6%97%A5%E6%8D%95%E8%9F%B9%E8%AE%B0/</guid>
      <description>1 前言 在2023年经历了冬天各种漫长风雪雨雾后， 终于明白为什么加拿大本地人在夏天全都跑到户外玩了，因为夏天不玩，冬天来了就只能待在室内看雨看</description>
      <content:encoded><![CDATA[<h2 id="前言"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> 前言</h2>
<p>在2023年经历了冬天各种漫长风雪雨雾后， <!-- raw HTML omitted -->
终于明白为什么加拿大本地人在夏天全都跑到户外玩了，因为夏天不玩，冬天来了就只能待在室内看雨看雪了。 <!-- raw HTML omitted --></p>
<p>六月过后，夏天终于来了。 <!-- raw HTML omitted --></p>
<h2 id="抓螃蟹"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> 抓螃蟹</h2>
<p>周末闲来无事待在家中看视频，朋友分享了他和家人合家去海边抓螃蟹的照片，说螃蟹很好抓，看到螃蟹图片我都惊呆了，怎么个头这么大。 <!-- raw HTML omitted --></p>
<p>他说明天还去玩，并约我同行，反正周末没事，同去同去。 <!-- raw HTML omitted --></p>
<p>去捕螃蟹的地方驱车大概需要20分钟，叫 Boundary Bay Regional Park，翻译过来叫边境海湾区域公园，因为就在美加边境，再向南几公里就是美国了。 <!-- raw HTML omitted --></p>
<p>所以我都和朋友开玩笑说，可能我们捕的是美国游过来的蟹，或者我们向南游几公里，就到美国了。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/boundary_bay_regional_park.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>我们去到的时候是中午，海滩还是退潮的，从岸边走到大海边还需要步行十多分钟，大概有一公里的路程: <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/boundary_bay_regional_park2.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>光着脚，向海滩深处走去，能看到远处的雪山和海岸，退潮之后形成的水滩在太阳的照耀下也不会冷冰刺骨，脚踩下去，非常凉爽，暑意全消。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/boundary_bay_regional_park3.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>我和舍友因为是初次捕蟹，只带了一个水桶和一把小尺子。 <!-- raw HTML omitted --></p>
<p>水桶自然是为了装战利品，而带尺子的原因是因为加拿大这边有规定，只有大于16.5CM的公蟹才能带走， <!-- raw HTML omitted -->
所以来捕蟹的人基本都会带上尺子来量下尺寸是否够大。 <!-- raw HTML omitted --></p>
<p>看到朋友才发现我们的装备实在简陋，除了必备的桶和尺子之外， <!-- raw HTML omitted -->
朋友还穿上渔民专用的水裤，因为他说虽然气温能到30多度，但是海水大概只有10来度，非常冷冰，不穿水裤顶不住。 <!-- raw HTML omitted --></p>
<p>更有趣的是，朋友还带了多支羽毛球拍，说是拨海草捕蟹的神器，见我们两人两手空空，朋友便各分了我们一支球拍。 <!-- raw HTML omitted --></p>
<p>没想到，还没有走到海滩深处，就看到了一只大螃蟹在浅水滩中晒太阳，我兴奋地过去把它抓起来，可以说不费吹灰之力： <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/dungeness_crab1.jpg"/> 
</figure>
  <!-- raw HTML omitted --></p>
<p>只是朋友拿他的尺子过来了量了下，说不够16.5cm, 没法带走，不过我们可以把它带到大海深处再放回去. <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/crab_with_ruler.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/crab_in_bucket.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>来到大海深处，发现长满海草，朋友说蟹就藏在海草下面, 可以用羽毛球拍拨开海草来找蟹，原来羽毛球拍是这么用的。 <!-- raw HTML omitted --></p>
<p>在海草丛中摸索不一会就又抓到一只蟹了，非常兴奋地又拍起照来，只是把尺子拿过来量下，又不够大，原来能抓到的都是个头不够大的。 <!-- raw HTML omitted --></p>
<p>就这样扒拉了半个小时，不停地抓到蟹，拍照，又放回去。 <!-- raw HTML omitted --></p>
<p>期间还遇到了一只水母，原来水母真的是透明的，在阳光的照耀下非常漂亮，只是我不敢碰它，担心它蛰我。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/jellyfish.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>就这样不停地在海草丛中来回走到，突然感觉脚下踩到了什么东西，脚感和踩在沙子完全不一样，有种厚实感。 <!-- raw HTML omitted -->
用球拍拨开海草，定睛一看，原来是只藏在沙里的大螃蟹，赶紧招呼舍友一起过来挖，挖出来一看，这个头肯定足够大，晚餐有了。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/61115989019969294682.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/crab_ruler.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>好事成双，不一会，我又踩到了一只大螃蟹上，我们又抓到了一只大螃蟹: <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/6111598901996929469.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>舍友不一会也挖到了一只大螃蟹。 <!-- raw HTML omitted --></p>
<p>原以为的抓螃蟹，最后变成在沙里挖螃蟹。 <!-- raw HTML omitted --></p>
<p>而让我们感觉非常可惜的是，是错过了两只个头超大的大螃蟹，个头约有整个球拍那么大。 <!-- raw HTML omitted --></p>
<p>只是它们不是把自己埋在沙里，或者是躲在海草丛里，而是在海草边闲逛，见我们向它们走过去，就横着径直向海的深处走去。 <!-- raw HTML omitted --></p>
<p>提着短裤，手机在口袋的我，着实没有勇气一往无前地追随它们的脚步把它们抓回来。 <!-- raw HTML omitted --></p>
<h2 id="回程"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> 回程</h2>
<p>从中午12点一直抓到下午2点多开始涨潮，大概总共抓到了十多只螃蟹，因为尺寸和数量的限定，我们最终只带走了3只螃蟹。 <!-- raw HTML omitted --></p>
<p>按照BC省的规定，每人最多可以可以带走2只螃蟹，并且需要花费6加元在政府官网购买一个tidal finish licence. <!-- raw HTML omitted --></p>
<p>只是从我们到海边，到我们离开，也并没有任何人检查你抓的螃蟹是否小于指定尺寸, 或者是否超过指定数量，或者没有购买 licence 就带走，只是大家都在遵守规定，我们也同样遵守规定。 <!-- raw HTML omitted --></p>
<p>在购买完tidal finish licence 之后，政府还会给你发一封邮件，让你自行申报你抓到了什么渔获。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/reporting_your_finishing_activity.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>在涨潮回岸边的时候，我算是见识到本地人夏天到户外游玩的心情是有多么强烈了， <!-- raw HTML omitted -->
在一群年青的女孩子穿泳衣走过海边之后，后面紧跟着一位腿上打着石膏，双手撑着拐杖，穿着泳衣的年轻女生。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/girl_to_beach.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>虽然我不知道打着石膏怎么下海玩，但是隔着几十米，我都能感受到她强烈的，不甘人后的游玩之心。 <!-- raw HTML omitted --></p>
<h2 id="晚餐"><!-- raw HTML omitted -->4<!-- raw HTML omitted --> 晚餐</h2>
<p>就这样，我们花费了12加元，收获了三只净重超过一斤的大螃蟹，这种螃蟹是BC省的特产，叫 Dungeness crab, 把战利品拿回家时，还不知道怎么烹饪，只好在 Youtube 上面搜索了一下 Dungeness crab 的烹饪教程，上面的视频大多就是水煮螃蟹，着实提不起啥兴趣。 <!-- raw HTML omitted --></p>
<p>身为广东人，那就来个粤菜的姜葱炒蟹，由我这个天桥底炒粉的程序员来处理，耗时一小时，从上案板，到上餐桌： <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/crab_cooking1.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/crab_cooking2.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/crab_cooking3.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/crab_cooking4.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/crab_cooking5.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/crab_cooking6.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>吃到家乡的味道了。 <!-- raw HTML omitted --></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>寒冬怎么过</title>
      <link>https://ramsayleung.github.io/zh/post/2024/%E5%AF%92%E5%86%AC%E6%80%8E%E4%B9%88%E8%BF%87/</link>
      <pubDate>Sun, 21 Apr 2024 18:30:00 -0700</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2024/%E5%AF%92%E5%86%AC%E6%80%8E%E4%B9%88%E8%BF%87/</guid>
      <description>1 前言 一个人的命运啊，当然要靠自我奋斗，但是也要考虑到历史的进程。—— 长者 在22年开始，经济下行的阴云就一直笼罩在每个人头上，无论国内国外，</description>
      <content:encoded><![CDATA[<h2 id="前言"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> 前言</h2>
<blockquote>
<p>一个人的命运啊，当然要靠自我奋斗，但是也要考虑到历史的进程。—— 长者 <!-- raw HTML omitted --></p>
</blockquote>
<p>在22年开始，经济下行的阴云就一直笼罩在每个人头上，无论国内国外，耳边听到的都是毕业，layoff的故事，并且裁员现在也还在<a href="https://layoffs.fyi/">持续进行中</a> <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> <!-- raw HTML omitted --></p>
<p>与光景好的时候，各种跳槽拿大包的蒸蒸日上的氛围相比，着实是云泥之别。 <!-- raw HTML omitted --></p>
<p>最近这段时间, 我自己也因为各种遭遇，稍显消沉。 <!-- raw HTML omitted --></p>
<p>所以就写了这篇文章，既为渡己，也为宽慰有同样遭遇和心情的朋友。 <!-- raw HTML omitted --></p>
<h2 id="我所经历的寒冬"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> 我所经历的寒冬</h2>
<p>从2022年到2024年 <!-- raw HTML omitted --></p>
<h3 id="微信"><!-- raw HTML omitted -->2.1<!-- raw HTML omitted --> 微信</h3>
<p>我自己个人职场遭遇比较坎坷，22年以前的经历在之前的文章《<a href="https://ramsayleung.github.io/zh/post/2023/%E8%BF%99%E4%BA%9B%E5%B9%B4%E8%B5%B0%E8%BF%87%E7%9A%84%E8%B7%AF_%E4%BB%8E%E5%B9%BF%E5%B7%9E%E5%88%B0%E6%B8%A9%E5%93%A5%E5%8D%8E/">这些年走过的路：从广州到温哥华</a>》写过， <!-- raw HTML omitted -->
就不多赘述，就只说下自己经历过的寒冬和最近的种种遭遇。 <!-- raw HTML omitted --></p>
<p>我在2020年加入了微信支付的委托代扣，当时的委托代扣还和付款码，收银台合称「基础支付」， <!-- raw HTML omitted -->
虽然交易量不及付款码和收银台，但是也是属于同一个量级的。 <!-- raw HTML omitted --></p>
<p>在2022年初的时候，当时整个腾讯里面都是铺天盖地的「降本增效」的「谣言」，要过冬。 <!-- raw HTML omitted --></p>
<p>因为每年都说要过冬，所以我一直以为是在做预期管理，又是不想发太多年终奖，就没有太当一回事。 <!-- raw HTML omitted --></p>
<p>到后来，腾讯的内部论坛开始逐渐出现各种「毕业论文」(被毕业同事们写的离别感言)，然后毕业论文越来越多，有铺天盖地之势。 <!-- raw HTML omitted --></p>
<p>我开始意识到，大规模的裁员真的在发生，有些业务线直接被砍，比如腾讯体育； <!-- raw HTML omitted -->
有些是整个业务线被砍成一个中心，比如腾讯新闻（具体细节记不清了）。 <!-- raw HTML omitted --></p>
<p>因为微信事业群人本来就不多，而且我们业务很核心，组里人也不多，算上老板也才只有10个人，所以我一直觉得这一刀不会砍得我们头上。 <!-- raw HTML omitted --></p>
<p>腾讯午餐+午休大概有2个小时，我之前一般是在这段时间去健身房锻炼， <!-- raw HTML omitted -->
然后运动完再去吃饭，回来工位的时候，同事一般都趴在座位或午休床上休息。 <!-- raw HTML omitted --></p>
<p>某天，我如往常般吃完饭回工位，却看到旁边位置的两位同事没有如往常般休息， <!-- raw HTML omitted -->
而是在窃窃私语。可能是今天有啥事情，不想大声说话影响其他同事休息吧，我并不在意。 <!-- raw HTML omitted --></p>
<p>只是后面连续好几天，我都没有发现旁边的同事来上班，我就问另外一位同事，这位同事是休假了么？好像没有听到他提起。 <!-- raw HTML omitted --></p>
<p>同事稍显惊讶，你不知道么？他被毕业了。 <!-- raw HTML omitted --></p>
<p>我当时真的被这个消息惊呆了，着实没有想到裁员这样的事发生了，并切实在旁边的同事身上。 <!-- raw HTML omitted --></p>
<p>我后面了解到，无论是什么组，都有10%的毕业指标，第一次感受到寒冬的凛冽。 <!-- raw HTML omitted --></p>
<h3 id="aws"><!-- raw HTML omitted -->2.2<!-- raw HTML omitted --> AWS</h3>
<p>在各种机缘巧合之下，我在2022年年中拿到了AWS Canada的 Offer, 招聘的组是在AWS上面做CDN, 因为办签证等各种事情，我一直是等到2023年初才能入职。 <!-- raw HTML omitted --></p>
<p>但是，在2023年初，AWS也开始向国内大厂学习，开始了裁员潮，很不幸的是，我的offer也受到影响，岗位被撤回了。 <!-- raw HTML omitted --></p>
<p>但幸运的是，我只是岗位被撤回了，Offer没有被撤回，然后就被搬到一个为AWS 服务做碳排放工具的组。 <!-- raw HTML omitted --></p>
<p>这个组完全没有营收，各种事情在我看来都非常离谱，具体的离谱事我在《<a href="https://ramsayleung.github.io/zh/post/2024/%E7%99%BB%E9%99%86%E5%8A%A0%E6%8B%BF%E5%A4%A7%E4%B8%80%E5%B9%B4%E7%9A%84%E4%BD%93%E4%BC%9A/">登陆加拿大一年后的体会</a>》也介绍过了. <!-- raw HTML omitted --></p>
<p>鉴于我以往的经历，我觉得这样的组在当前环境非常危险，说不定哪天组就没有了或者我人也没了，所以我就决定内部转组。 <!-- raw HTML omitted -->
（4个月过后再看，这个组的确快要没了） <!-- raw HTML omitted --></p>
<p>我还特意和转组的manager聊他们的营收和2024年的目标，最后挑了一个在大力招人，营收很可观的，在AWS上做Kafka的组。 <!-- raw HTML omitted --></p>
<p>在当前环境下，如果有很多HeadCount招人，起码能说明是个很被重视的组。 <!-- raw HTML omitted --></p>
<p>然而，在我加入这个组1个半月后，有一天，我们的总监突然出现在团队的会议上，说有个组织变动的决定要宣布，你们组全部人都合并到S3去。 <!-- raw HTML omitted --></p>
<p>会议室上，大家面面相觑，这又是哪一出，Kafka和S3是同一个东西嘛？ <!-- raw HTML omitted --></p>
<p>决定就是决定，并没有商量的余地。 <!-- raw HTML omitted --></p>
<p>经过一个月时间的交接，我们手上所有的东西都交接给其他团队， <!-- raw HTML omitted -->
我就这样成为了S3的一员，我又开创了一年经历3个团队的新纪录（如果算上入职前的招聘团队，那就是4个团队了） <!-- raw HTML omitted --></p>
<p>我可以自我安慰道，总不会连S3都要裁吧，S3起码是个暂时安全的好去处，我也不需要向其他人解释我在做什么业务，S3是什么了。 <!-- raw HTML omitted --></p>
<p>只是相处下来，人nice, 技术又好，管理风格又放权透明的Kafka组 manager 也因为种种原因最后决定不加入 S3, 让我惋惜了好久，好不容易遇上个好 manager, 只叹缘分不够. <!-- raw HTML omitted --></p>
<h2 id="凛冬将至"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> 凛冬将至</h2>
<h3 id="寒冬的征兆"><!-- raw HTML omitted -->3.1<!-- raw HTML omitted --> 寒冬的征兆</h3>
<p>作为经历了各种寒冬毕业潮的「老毕业员」了，我可以分享下自己的个人经验，来说下寒冬来临的征兆。 <!-- raw HTML omitted --></p>
<h4 id="停止招聘"><!-- raw HTML omitted -->3.1.1<!-- raw HTML omitted --> 停止招聘</h4>
<p>公司停止招聘是一个非常重要的信号，这个意味着业务要停止扩张，起码对前景不看好。 <!-- raw HTML omitted --></p>
<p>这个直观的数据，可以直接从官网或者各种的招聘网站看到。 <!-- raw HTML omitted --></p>
<h4 id="谣言纷纷"><!-- raw HTML omitted -->3.1.2<!-- raw HTML omitted --> 谣言纷纷</h4>
<p>各种小道消息，谣言开始疯传。 <!-- raw HTML omitted --></p>
<p>谣言着实是遥遥领先的预言，大部分都会成真。 <!-- raw HTML omitted --></p>
<p>因为很多的小道消息，就是HR和财务团队放出来的，给员工提前做预期管理。 <!-- raw HTML omitted --></p>
<p>真的要裁你，约谈的时候，你就不至于毫无心理准备，HR团队就免去了很多的麻烦，和你说「内网或者脉脉上面早就有人提起过了」。 <!-- raw HTML omitted --></p>
<h4 id="领导离职"><!-- raw HTML omitted -->3.1.3<!-- raw HTML omitted --> 领导离职</h4>
<p>各种中层领导，GM或者总监开始突然离职, 这个时候就要开始注意了。 <!-- raw HTML omitted --></p>
<p>因为他们的位置比你高，知道的消息比你多，可能是收到暗示，先行跑路， <!-- raw HTML omitted --></p>
<p>或者是领导离职，底下员工就更容易拿捏了，毕竟能出头的人都没了。 <!-- raw HTML omitted --></p>
<h3 id="引-雷-位"><!-- raw HTML omitted -->3.2<!-- raw HTML omitted --> 引「雷」位</h3>
<p>要预测什么位置容易被雷，首先要理解企业裁员背后的逻辑: <!-- raw HTML omitted --></p>
<h4 id="业务裁撤"><!-- raw HTML omitted -->3.2.1<!-- raw HTML omitted --> 业务裁撤</h4>
<p>环境好的时候，多养些不赚钱的创新业务，好向投资人讲故事，拉升股价，对企业而已，是无伤大雅。 <!-- raw HTML omitted --></p>
<p>但是在寒冬来临的时候，企业要做的就是所谓的「降本增效」。 <!-- raw HTML omitted --></p>
<p>企业裁员是为了缩减成本，提高利润率，所以如果你所在的业务不赚钱，那么你就很危险了。 <!-- raw HTML omitted --></p>
<p>很多时候，并不是要把你这个人给裁掉，而是说这个业务要舍弃了，对应的岗位没有了，在这个岗位上的人被顺便抹掉了。 <!-- raw HTML omitted --></p>
<p>所以如果你所在的业务不赚钱，就要早做准备。 <!-- raw HTML omitted --></p>
<p>总是有程序员说，要写让人看不懂的代码，这样就有job security, 不会被裁。 <!-- raw HTML omitted --></p>
<p>有不少朋友是把段子当真，但当真的要裁撤业务线的时候，你的领导，你领导的领导都可能被裁掉，谁又会去看你的代码呢。 <!-- raw HTML omitted --></p>
<h4 id="摊大饼"><!-- raw HTML omitted -->3.2.2<!-- raw HTML omitted --> 摊大饼</h4>
<p>还有另外一种裁员方式就是「摊大饼」，就是搞指标摊派，比如每个组要裁10%的人。 <!-- raw HTML omitted --></p>
<p>HR可能就会给每个组的人拉数据，比照薪资，绩效，工作年限等因素，然后就拉出一串清单给 manager, 如果 manager 没有强烈反对的话，一般就是名单上的人了。 <!-- raw HTML omitted --></p>
<p>manager 大概率就顺水推舟了，毕竟一个人出去了，另外一个人就要进去，谁都不愿作这个恶人。 <!-- raw HTML omitted --></p>
<p>如果你在同一级别待了比较久，那么你就比较危险，一个是会被认为没有快速晋升，潜力不足； <!-- raw HTML omitted -->
另外一个在同一级别待久了，薪资在同一级别就显得很高，对公司而言，性价比就下降了。 <!-- raw HTML omitted --></p>
<p>所以升职比加薪重要，只加薪不升职就比较危险。 <!-- raw HTML omitted --></p>
<p>如果绩效不好，那么就很容易被顺便雷了，道理就不言自明了。 <!-- raw HTML omitted --></p>
<p>工作年限短的，也容易被雷，因为对业务熟悉程度不够，裁了对业务影响也不大；另外年限短，赔偿也少。 <!-- raw HTML omitted --></p>
<h2 id="过冬准备"><!-- raw HTML omitted -->4<!-- raw HTML omitted --> 过冬准备</h2>
<h3 id="锻炼身体"><!-- raw HTML omitted -->4.1<!-- raw HTML omitted --> 锻炼身体</h3>
<p>身体是一切的本钱，没有一个好的身体，其他一切都是空谈。 <!-- raw HTML omitted --></p>
<p>所以要好好运动，健康生活。 <!-- raw HTML omitted --></p>
<p>运动还可以产生足够的多巴胺，可以让你感觉心情愉悦，降低焦虑感。 <!-- raw HTML omitted --></p>
<p>穿上鞋子，出去跑个步吧。 <!-- raw HTML omitted --></p>
<h3 id="持续学习"><!-- raw HTML omitted -->4.2<!-- raw HTML omitted --> 持续学习</h3>
<blockquote>
<p>沉舟侧畔千帆过 枯树前头万木春 <!-- raw HTML omitted --></p>
</blockquote>
<p>总有人问，在现在这个环境下，学习是否还有用？ <!-- raw HTML omitted --></p>
<p>在我看来，学习无论在什么时候，都非常有用，所以要持续学习，终身学习。 <!-- raw HTML omitted --></p>
<p>机会只会留给有准备的人，如果在市场下行的时候不做好准备，那么市场上调的时候，又怎么能抓住机会，拿到好的 Offer 呢。 <!-- raw HTML omitted --></p>
<p>所以在寒冬时候学习，既是一个「无本抄底，低位建仓」的机会，也是一个降低焦虑感的手段。 <!-- raw HTML omitted --></p>
<p>如果你一直担心被裁员，那么只要你持续地在学习，持续地在刷题，那么被裁员了，也有信心可以再找一个新工作。 <!-- raw HTML omitted --></p>
<p>总不成天天在摸鱼打混，离职就能找到新工作吧。 <!-- raw HTML omitted --></p>
<p>你的信心是来源于你的行动的。 <!-- raw HTML omitted --></p>
<h3 id="去杠杆-减少债务"><!-- raw HTML omitted -->4.3<!-- raw HTML omitted --> 去杠杆, 减少债务</h3>
<p>对于裁员焦虑的很大一部分原因是担心失去工作后，失去收入来源。 <!-- raw HTML omitted --></p>
<p>每个人的账务状况和收入状况都不一样，没有办法给出具体的建议。 <!-- raw HTML omitted --></p>
<p>但是思路和企业是一样的，是「降本增效」。 <!-- raw HTML omitted --></p>
<p>减少不必要的开销，降低债务水平，例如手上有余钱的可以考虑提前还房贷，而不是再去投资。 <!-- raw HTML omitted --></p>
<p>你投资的收益还不一定能跑赢房贷利率。 <!-- raw HTML omitted --></p>
<p>有应急资金，手中有粮，心中不慌。 <!-- raw HTML omitted --></p>
<p>因为各种毕业潮，导致「独立开发」或者「副业」的概念在程序员间兴起，大家都希望有自己的小生意，希望有稳定的「睡后收入」。 <!-- raw HTML omitted --></p>
<p>希望肯定是这样希望，但是不要在失业焦虑和急功近利的情况下去开展副业，因为那样很容易受挫后变成沮丧，进而变成更加消极。 <!-- raw HTML omitted --></p>
<p>先把主业给干好，有余力的时候，再多思考下，再看下是否有机会，不要因小失大。 <!-- raw HTML omitted --></p>
<p>不要用战术上的冒进去掩盖战略上的懒惰。 <!-- raw HTML omitted --></p>
<h3 id="no-loyalty"><!-- raw HTML omitted -->4.4<!-- raw HTML omitted --> No Loyalty</h3>
<p>摆正心态。 <!-- raw HTML omitted --></p>
<p>对于企业而言，裁员只是他们的经营手段之一。 <!-- raw HTML omitted --></p>
<p>不需要为被裁员而去愤恨，抱怨一家公司, 毕竟「交绝无恶声，去臣无怨词」 <!-- raw HTML omitted --></p>
<p>也无需去拟人化一家公司，公司并不是人，而是由各种各样的人组成的一个集体。 <!-- raw HTML omitted --></p>
<p>不要抱有“我为你付出了这么久，加班这么多，你怎么可以这样对我，没有功劳也有苦劳阿” <!-- raw HTML omitted --></p>
<p>只要把补偿给到位，就不要和公司有太多无谓的纠缠。 <!-- raw HTML omitted --></p>
<p>同样，也不要对公司有所谓的 loyalty 的想法，只要尽好员工的职责，对得起公司的发的薪水，有足够的责任心就够了。 <!-- raw HTML omitted --></p>
<p>如果以后有好的职业发展机会，应该从自身发展的角度来考虑问题。 <!-- raw HTML omitted --></p>
<p>毕竟公司裁你没有考虑你是否刚结婚还是在还房贷，你离开公司自然也不需要考虑会对公司有什么影响。 <!-- raw HTML omitted --></p>
<p>换位思考，fair enough. <!-- raw HTML omitted --></p>
<h3 id="be-happy"><!-- raw HTML omitted -->4.5<!-- raw HTML omitted --> Be Happy</h3>
<p>因为最近到报税季，需要处理跨国税务的问题，公司给指派了一位 Deloitte 的会计师，上周在咨询完税务问题之后，就和会计师在会议软件上聊起天来。 <!-- raw HTML omitted --></p>
<p>看名字，听声音，还有不时爽朗的笑声，我以为会计师是位白人的小姐姐。 <!-- raw HTML omitted --></p>
<p>没想到聊下来才知道，原因这位声音年轻的小姐姐，年龄已经和我母亲相仿，女儿都已经大学毕业了。 <!-- raw HTML omitted --></p>
<p>这位大姐姐就和分享了她的背景，北美和亚洲各地多年的工作经历，我顺便聊起自己的经历，最近我面临各种 re-org, 还有我知道的各种tech company 的 layoff, 以及我的其他见闻。 <!-- raw HTML omitted --></p>
<p>大姐姐也对此也表示认同，并且分享了她的见解，并安慰起我来，后面还提起她的女儿也和在同一家公司工作，不过在西雅图。 <!-- raw HTML omitted --></p>
<p>就这样我们不知不觉地聊了大概45分钟左右，最后挂断之前，大姐姐和我说： <!-- raw HTML omitted --></p>
<blockquote>
<p>Just be happy and control what you can control. <!-- raw HTML omitted --></p>
</blockquote>
<p>如果感觉消沉，多和朋友或家人聊天。 <!-- raw HTML omitted --></p>
<p>也把她的话赠给大家, <strong>Be Happy</strong> <!-- raw HTML omitted --></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://layoffs.fyi">https://layoffs.fyi</a>  <!-- raw HTML omitted -->&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>100 Days of SwiftUI</title>
      <link>https://ramsayleung.github.io/zh/post/2024/100_days_of_swiftui/</link>
      <pubDate>Tue, 09 Apr 2024 19:04:00 -0700</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2024/100_days_of_swiftui/</guid>
      <description>1 缘起 我花了半年多的时间，在闲暇时间，学习了苹果的Swift语言和SwiftUI框架，想体验下IOS开发，再看下有没有机会通过写软件来做点副</description>
      <content:encoded><![CDATA[<h2 id="缘起"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> 缘起</h2>
<p>我花了半年多的时间，在闲暇时间，学习了苹果的Swift语言和SwiftUI框架，想体验下IOS开发，再看下有没有机会通过写软件来做点副业。 <!-- raw HTML omitted --></p>
<p>先花了大概3个月时间，通过阅读 <a href="https://docs.swift.org/swift-book/documentation/the-swift-programming-language/guidedtour/">The Swift Programming Language</a> 这本官方电子书<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>来学习Swift这门语言，又花了接近4个月的时候来学习 <a href="https://www.hackingwithswift.com/100/swiftui">100 Days of SwiftUI</a> 这门课程<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>，每天花费1到2小时来学习一课，总共100课，所以顾名思义叫 100 Days of SwiftUI, 课程非常新且好，讲师功力深厚，课讲得深入浅出，娓娓道来。 <!-- raw HTML omitted --></p>
<p>每完成一课，就在Twitter上发一条推文，今天刚好把第100天的推文发了. <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/tweet_day_100.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/tweet_day_99.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/tweet_day_96.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>今天是结课之日，我通过了结课的考试，总分100分，考了91分，喜提课程证书一枚. <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/100_days_of_swiftui_certificate.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>在整个课程中，我写了19个IOS App(虽说大部分是功能简单的App), 源码也基本放在<a href="https://github.com/ramsayleung?tab=repositories&amp;q=&amp;type=&amp;language=swift&amp;sort="> GitHub</a> <sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>上了，不过所有的App都没有上架App Store，因为我还没有给苹果交税(99美刀的开发者注册费). <!-- raw HTML omitted --></p>
<p>经过这100节课和19个APP的训练，我自觉已经掌握了使用Swift和SwiftUI的基础开发技能，算是个入门的IOS开发了, 现在我可以说自己是前端，后端，数据开发，IOS开发都搞过的全栈(<del>干</del>)工程师了（不是） <!-- raw HTML omitted --></p>
<p>但是在苹果对SwiftUI开发思路做出改变之前，我SwiftUI之旅可能就先到此为止了，原因下文再谈 <!-- raw HTML omitted --></p>
<h2 id="swift-初体验"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> Swift 初体验</h2>
<p>Swift 是由LLVM之父 <a href="https://en.wikipedia.org/wiki/Chris_Lattner">Chris Lattner</a> <sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>在2010开始开发，在2014年的WWDC苹果开发者大会正式推出的一门编程语言。 <!-- raw HTML omitted --></p>
<p>按照官方的说法，Swift从 Objective-C, Rust, Haskell, Ruby, Python, C#身上都有不同程度的借鉴和学习。 <!-- raw HTML omitted --></p>
<p>因为我对上面提到的语言多少有涉猎，所以学习Swift起来基本没有什么困难, <code>Optional</code>, <code>Error Handling</code>, <code>Result</code>, <code>Generic</code>, <code>Enumerations</code>, <code>Protocol</code> 这些概念都和Rust的大同小异。 <!-- raw HTML omitted --></p>
<p>又是由LLVM之父来操刀，所以语言本身也设计得很优雅. <!-- raw HTML omitted --></p>
<p>让我眼前一亮的可能是借鉴自 <a href="https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/extension-methods">C# Extension Methods</a> <sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>的 <code>extension</code> 功能 , 可以对已有的 class, enum 或者是 protocol 类型增加新的函数，也就是在不修改源码的情况下，扩展已有的功能. <!-- raw HTML omitted --></p>
<p>例如，以下的代码就可以扩展内置的 <code>Double</code> 类型, 实现以米为单位，进行千米, 厘米，毫米，公尺的转换: <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-swift" data-lang="swift"><span class="line"><span class="cl"><span class="kd">extension</span> <span class="nc">Double</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nv">km</span><span class="p">:</span> <span class="nb">Double</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">self</span> <span class="o">*</span> <span class="mf">1_000.0</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nv">m</span><span class="p">:</span> <span class="nb">Double</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">self</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nv">cm</span><span class="p">:</span> <span class="nb">Double</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">self</span> <span class="o">/</span> <span class="mf">100.0</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nv">mm</span><span class="p">:</span> <span class="nb">Double</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">self</span> <span class="o">/</span> <span class="mf">1_000.0</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nv">ft</span><span class="p">:</span> <span class="nb">Double</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">self</span> <span class="o">/</span> <span class="mf">3.28084</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nv">oneInch</span> <span class="p">=</span> <span class="mf">25.4</span><span class="p">.</span><span class="n">mm</span>
</span></span><span class="line"><span class="cl"><span class="bp">print</span><span class="p">(</span><span class="s">&#34;One inch is </span><span class="si">\(</span><span class="n">oneInch</span><span class="si">)</span><span class="s"> meters&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">// Prints &#34;One inch is 0.0254 meters&#34;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nv">threeFeet</span> <span class="p">=</span> <span class="mf">3.</span><span class="n">ft</span>
</span></span><span class="line"><span class="cl"><span class="bp">print</span><span class="p">(</span><span class="s">&#34;Three feet is </span><span class="si">\(</span><span class="n">threeFeet</span><span class="si">)</span><span class="s"> meters&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">// Prints &#34;Three feet is 0.914399970739201 meters&#34;</span>
</span></span></code></pre></div><p>总体而言, Swift是一门吸收了众多PL理论的现代编程语言, 官方说支持Linux，Windows，MacOS等多个平台，不过我估计大多是在MacOS上用来写IOS和Mac应用 <!-- raw HTML omitted --></p>
<h2 id="swiftui"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> SwiftUI</h2>
<p>SwiftUI 使用的声明式语法，让开发者写页面布局和效果变得简洁清晰, 例如通过 <code>VStack</code>, <code>HStack</code>, <code>ZStack</code> 就可以实现X轴，Y轴，和Z轴方向的布局 <!-- raw HTML omitted --></p>
<p>例如下面这个就是通过 <code>ZStack</code> 几行代码实现的叠加效果: <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-swift" data-lang="swift"><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nv">colors</span><span class="p">:</span> <span class="p">[</span><span class="n">Color</span><span class="p">]</span> <span class="p">=</span>
</span></span><span class="line"><span class="cl">    <span class="p">[.</span><span class="n">red</span><span class="p">,</span> <span class="p">.</span><span class="n">orange</span><span class="p">,</span> <span class="p">.</span><span class="n">yellow</span><span class="p">,</span> <span class="p">.</span><span class="n">green</span><span class="p">,</span> <span class="p">.</span><span class="n">blue</span><span class="p">,</span> <span class="p">.</span><span class="n">purple</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nv">body</span><span class="p">:</span> <span class="n">some</span> <span class="n">View</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">ZStack</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ForEach</span><span class="p">(</span><span class="mf">0.</span><span class="p">.&lt;</span><span class="n">colors</span><span class="p">.</span><span class="bp">count</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">Rectangle</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                <span class="p">.</span><span class="n">fill</span><span class="p">(</span><span class="n">colors</span><span class="p">[</span><span class="nv">$0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">                <span class="p">.</span><span class="n">frame</span><span class="p">(</span><span class="n">width</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span> <span class="n">height</span><span class="p">:</span> <span class="mi">100</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">CGFloat</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span> <span class="o">*</span> <span class="mf">10.0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="n">y</span><span class="p">:</span> <span class="n">CGFloat</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span> <span class="o">*</span> <span class="mf">10.0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><figure>
    <img loading="lazy" src="/ox-hugo/zstack_rectangle.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>除了声明式语法之外，SwiftUI让人赏心悦目的就是动画。好的动画在App里面绝对能起到画龙点睛的作用，而SwiftUI的内置动画已经非常强大了，下面就是使用内置动画实现的动画效果: <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-swift" data-lang="swift"><span class="line"><span class="cl"><span class="kd">struct</span> <span class="nc">ContentView</span><span class="p">:</span> <span class="n">View</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">@</span><span class="n">State</span> <span class="kd">private</span> <span class="kd">var</span> <span class="nv">dragAmount</span> <span class="p">=</span> <span class="n">CGSize</span><span class="p">.</span><span class="n">zero</span>
</span></span><span class="line"><span class="cl">    <span class="p">@</span><span class="n">State</span> <span class="kd">private</span> <span class="kd">var</span> <span class="nv">enable</span> <span class="p">=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nv">letters</span> <span class="p">=</span> <span class="s">&#34;Hello, World&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nv">body</span><span class="p">:</span> <span class="n">some</span> <span class="n">View</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">HStack</span><span class="p">(</span><span class="n">spacing</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">ForEach</span><span class="p">(</span><span class="mf">0.</span><span class="p">.&lt;</span><span class="n">letters</span><span class="p">.</span><span class="bp">count</span><span class="p">,</span> <span class="n">id</span><span class="p">:</span> <span class="err">\</span><span class="p">.</span><span class="kc">self</span><span class="p">)</span> <span class="p">{</span> <span class="n">index</span> <span class="k">in</span>
</span></span><span class="line"><span class="cl">                <span class="n">Text</span><span class="p">(</span><span class="nb">String</span><span class="p">(</span><span class="n">letters</span><span class="p">[</span><span class="n">letters</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="n">letters</span><span class="p">.</span><span class="n">startIndex</span><span class="p">,</span> <span class="n">offsetBy</span><span class="p">:</span> <span class="n">index</span><span class="p">)]))</span>
</span></span><span class="line"><span class="cl">                    <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="p">.</span><span class="n">font</span><span class="p">(.</span><span class="n">title</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">enable</span> <span class="p">?</span> <span class="p">.</span><span class="n">green</span> <span class="p">:</span> <span class="p">.</span><span class="n">blue</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="n">dragAmount</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="p">.</span><span class="n">animation</span><span class="p">(.</span><span class="n">linear</span><span class="p">.</span><span class="n">delay</span><span class="p">(</span><span class="nb">Double</span><span class="p">(</span><span class="n">index</span><span class="p">)</span> <span class="o">/</span> <span class="mi">20</span><span class="p">),</span> <span class="n">value</span><span class="p">:</span> <span class="n">dragAmount</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}.</span><span class="n">gesture</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">DragGesture</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                <span class="p">.</span><span class="n">onChanged</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">dragAmount</span> <span class="p">=</span> <span class="nv">$0</span><span class="p">.</span><span class="n">translation</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="p">.</span><span class="n">onEnded</span> <span class="p">{</span> <span class="kc">_</span> <span class="k">in</span>
</span></span><span class="line"><span class="cl">                    <span class="n">dragAmount</span> <span class="p">=</span> <span class="n">CGSize</span><span class="p">.</span><span class="n">zero</span>
</span></span><span class="line"><span class="cl">                    <span class="n">enable</span><span class="p">.</span><span class="n">toggle</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><figure>
    <img loading="lazy" src="/ox-hugo/drag_animation.gif"/> 
</figure>
 <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-swift" data-lang="swift"><span class="line"><span class="cl">  <span class="kd">struct</span> <span class="nc">HeartBeatView</span><span class="p">:</span> <span class="n">View</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">@</span><span class="n">State</span> <span class="kd">private</span> <span class="kd">var</span> <span class="nv">animationAmount</span> <span class="p">=</span> <span class="mf">1.0</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nv">body</span><span class="p">:</span> <span class="n">some</span> <span class="n">View</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Button</span><span class="p">(</span><span class="s">&#34;SOS&#34;</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">background</span><span class="p">(.</span><span class="n">red</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">foregroundColor</span><span class="p">(.</span><span class="n">white</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">clipShape</span><span class="p">(</span><span class="n">Circle</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">overlay</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">Circle</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                <span class="p">.</span><span class="n">stroke</span><span class="p">(.</span><span class="n">red</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="p">.</span><span class="n">scaleEffect</span><span class="p">(</span><span class="n">animationAmount</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="p">.</span><span class="n">opacity</span><span class="p">(</span><span class="mi">2</span> <span class="o">-</span> <span class="n">animationAmount</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="p">.</span><span class="n">animation</span><span class="p">(.</span><span class="n">easeOut</span><span class="p">(</span><span class="n">duration</span><span class="p">:</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="p">.</span><span class="n">repeatForever</span><span class="p">(</span><span class="n">autoreverses</span><span class="p">:</span> <span class="kc">false</span><span class="p">),</span> <span class="n">value</span><span class="p">:</span> <span class="n">animationAmount</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">onAppear</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">animationAmount</span> <span class="p">=</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><figure>
    <img loading="lazy" src="/ox-hugo/hearbeat.gif"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>而Xcode 15新增的预览功能也很好用，可以让开发者不需要启动iPhone模拟器就能预览页面效果，节省了非常多的等待时间。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/xcode_preview.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<h2 id="问题"><!-- raw HTML omitted -->4<!-- raw HTML omitted --> 问题</h2>
<p>听起来好像很美好: IDE新功能好用，编程语言优雅, UI框架简洁好用; 但是苹果的开发思路却有问题： 苹果开发的SwiftUI不向后兼容老版本的IOS。 <!-- raw HTML omitted --></p>
<p>SwiftUI大部分功能都是只支持IOS16及以后的版本，而苹果新出来的数据持久框架 <code>SwiftData</code> 甚至只支持IOS17, <!-- raw HTML omitted -->
更离谱的是，SwiftUI的 BugFix 也只支持高版本IOS, 这就意味着用户不升级IOS版本，甚至SwiftUI的bug开发者都没法修复。 <!-- raw HTML omitted --></p>
<p>我自己的手机也只更新到IOS16，所以我时常会遇到我自己写的App没法运行到我自己手机上的情况。 <!-- raw HTML omitted --></p>
<p>不支持旧版本的IOS就让一大批的开发者和公司都没有动力去使用SwiftUI: <!-- raw HTML omitted --></p>
<p>对于开发新应用的开发者而言，只支持IOS17就意味着会流失一大群使用IOS16及以下版本的用户， <!-- raw HTML omitted -->
而对于拥有存量用户的公司而言，更没有动力去使用SwiftUI，用了之后，旧版本IOS的用户可能直接无法打开应用。 <!-- raw HTML omitted --></p>
<p>因此SwiftUI就陷入了一个尴尬的境地，东西做得好，但是不会有人用; <!-- raw HTML omitted --></p>
<p>没有人自然就不用有人分享，宣传这门技术，自然就导致相关的学习资料非常匮乏, 进一步加深了初学者的学习难度; <!-- raw HTML omitted --></p>
<p>开发遇到问题连懂的人都不用，官方文档写了又约等于没有写, 直接劝退初学者，恶性循环。 <!-- raw HTML omitted --></p>
<p>又因为接受SwiftUI的开发者还不多，苹果版本迭代起来更加肆无忌惮，新版本又引入一堆的Breaking change，导致开发者更新版本非常痛苦. <!-- raw HTML omitted --></p>
<p>另外一个问题就是SwiftUI与苹果现有框架整合得不够好，如 <code>CoreImage</code> 框架，顾名思义是用来作图片处理. <!-- raw HTML omitted --></p>
<p>但之前是使用Objective-C写的，通过SwiftUI来调用，就会变成相当恶心，需要把Swift的数据结构传换成Objective-C来处理, 如： <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-swift" data-lang="swift"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">applyProcess</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">    <span class="k">guard</span> <span class="kd">let</span> <span class="nv">outputImage</span> <span class="p">=</span> <span class="n">currentFilter</span><span class="p">.</span><span class="n">outputImage</span> <span class="k">else</span> <span class="p">{</span><span class="k">return</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">guard</span> <span class="kd">let</span> <span class="nv">cgImage</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">createCGImage</span><span class="p">(</span><span class="n">outputImage</span><span class="p">,</span> <span class="n">from</span><span class="p">:</span> <span class="n">outputImage</span><span class="p">.</span><span class="n">extent</span><span class="p">)</span> <span class="k">else</span><span class="p">{</span><span class="k">return</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nv">uiImage</span> <span class="p">=</span> <span class="n">UIImage</span><span class="p">(</span><span class="n">cgImage</span><span class="p">:</span> <span class="n">cgImage</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">processedImage</span> <span class="p">=</span> <span class="n">Image</span><span class="p">(</span><span class="n">uiImage</span><span class="p">:</span> <span class="n">uiImage</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">loadImage</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Task</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">guard</span> <span class="kd">let</span> <span class="nv">imageData</span> <span class="p">=</span> <span class="k">try</span> <span class="n">await</span> <span class="n">selectedItem</span><span class="p">?.</span><span class="n">loadTransferable</span><span class="p">(</span><span class="n">type</span><span class="p">:</span> <span class="n">Data</span><span class="p">.</span><span class="kc">self</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span><span class="k">return</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">guard</span> <span class="kd">let</span> <span class="nv">inputImage</span> <span class="p">=</span> <span class="n">UIImage</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="n">imageData</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span><span class="k">return</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">let</span> <span class="nv">beginImage</span> <span class="p">=</span> <span class="n">CIImage</span><span class="p">(</span><span class="n">image</span><span class="p">:</span> <span class="n">inputImage</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">currentFilter</span><span class="p">.</span><span class="n">setValue</span><span class="p">(</span><span class="n">beginImage</span><span class="p">,</span> <span class="n">forKey</span><span class="p">:</span> <span class="n">kCIInputImageKey</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">applyProcess</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>把 <code>CoreImage</code> 框架的 <code>CIImage</code> 转成 <code>CoreGraphics</code> 框架的 <code>CGImage</code>, 然后再把 <code>CGImage</code> 转换成 <code>UIKit</code> 框架 <code>UIImage</code>, 然后再转换回SwiftUI 内置的 <code>Image</code> 类型, 可谓是相当麻烦了. <!-- raw HTML omitted --></p>
<p>但是对比SwiftUI只支持高版本的问题，Objective-C和Swift的互操作问题也只能算是恶心，但是起码有解决方法，对于前者，开发者是完全没法自行解决. <!-- raw HTML omitted --></p>
<h2 id="总结"><!-- raw HTML omitted -->5<!-- raw HTML omitted --> 总结</h2>
<p>过了一把野生IOS开发的瘾，但是除非是苹果愿意让SwiftUI支持低版本的IOS， <!-- raw HTML omitted -->
不然我是没有太大意愿继续使用SwiftUI来开发IOS了，受众比较有限了。 <!-- raw HTML omitted --></p>
<p>想要支持低版本的IOS，就只能走UIKit和Objective-C这条历史老路，我对此着实是望而生畏，有空还是学习点其他有趣的东西。 <!-- raw HTML omitted --></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://docs.swift.org/swift-book/documentation/the-swift-programming-language/guidedtour/">https://docs.swift.org/swift-book/documentation/the-swift-programming-language/guidedtour/</a> <!-- raw HTML omitted -->&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://www.hackingwithswift.com/100/swiftui">https://www.hackingwithswift.com/100/swiftui</a> <!-- raw HTML omitted -->&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="https://github.com/ramsayleung?tab=repositories&amp;q=&amp;type=&amp;language=swift&amp;sort">https://github.com/ramsayleung?tab=repositories&amp;q=&amp;type=&amp;language=swift&amp;sort</a>= <!-- raw HTML omitted -->&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p><a href="https://en.wikipedia.org/wiki/Chris_Lattner">https://en.wikipedia.org/wiki/Chris_Lattner</a>  <!-- raw HTML omitted -->&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p><a href="https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/extension-methods">https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/extension-methods</a>  <!-- raw HTML omitted -->&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>三月的樱花</title>
      <link>https://ramsayleung.github.io/zh/post/2024/%E4%B8%89%E6%9C%88%E7%9A%84%E6%A8%B1%E8%8A%B1/</link>
      <pubDate>Sun, 24 Mar 2024 22:00:00 -0700</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2024/%E4%B8%89%E6%9C%88%E7%9A%84%E6%A8%B1%E8%8A%B1/</guid>
      <description>2024的温哥华比2023来得温暖，年底的大雪没有持续多久就消融，去年三月还寒意深深，现在已春意浓浓. 温哥华的樱花也比去年提早了半个多月盛放</description>
      <content:encoded><![CDATA[<p>2024的温哥华比2023来得温暖，年底的大雪没有持续多久就消融，去年三月还寒意深深，现在已春意浓浓. <!-- raw HTML omitted --></p>
<p>温哥华的樱花也比去年提早了半个多月盛放。 <!-- raw HTML omitted --></p>
<p>​在春日的夕阳下，漫步在樱花树下，微风吹过，樱花落下, 着实有「落英缤纷」的感觉 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/sakura.39.jpeg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/sakura.05.jpeg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/sakura.11.jpeg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/sakura.14.jpeg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/sakura.16.jpeg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/sakura.18.jpeg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/sakura.23.jpeg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/sakura.33.jpeg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/sakura.37.jpeg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/sakura.42.jpeg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/sakura.43.jpeg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/sakura.46.jpeg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/sakura.53.jpeg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/sakura.56.jpeg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>看着眼前的樱花，想着她冬日的美貌，脑海浮起诗句： <!-- raw HTML omitted --></p>
<blockquote>
<p>昨日雪如花，今日花如雪 <!-- raw HTML omitted --></p>
</blockquote>
<p><figure>
    <img loading="lazy" src="/ox-hugo/sakura.49.jpeg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/sakura.52.jpeg"/> 
</figure>
 <!-- raw HTML omitted --></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>简明写作指南</title>
      <link>https://ramsayleung.github.io/zh/post/2024/%E7%AE%80%E6%98%8E%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/</link>
      <pubDate>Fri, 15 Mar 2024 20:27:00 -0700</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2024/%E7%AE%80%E6%98%8E%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/</guid>
      <description>1 前言 最近在阅读李笑来的《人人都能用英语》1，想要继续提升自己的英语能力。 李笑来是新东方出来的英语教学名师，此书由浅入深来介绍如何「用」好英</description>
      <content:encoded><![CDATA[<h2 id="前言"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> 前言</h2>
<p>最近在阅读李笑来的<a href="https://github.com/xiaolai/everyone-can-use-english/blob/main/book/README.md">《人人都能用英语》</a><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>，想要继续提升自己的英语能力。 <!-- raw HTML omitted -->
李笑来是新东方出来的英语教学名师，此书由浅入深来介绍如何「用」好英语，而不是像在学校那样「学」好英语。 <!-- raw HTML omitted --></p>
<p>在《口语篇》中，李笑来提到，比口语更重要的是思考能力，英文说不出口的原因，可能是脑子里面没有什么思考沉淀的东西可以说的，并藉此推荐了三本关于文风（Style）的必读书籍，其中一本就叫：<a href="https://www.sec.gov/pdf/handbook.pdf">A Plain English Handbook</a>(简明英文写作指南)<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>。 <!-- raw HTML omitted --></p>
<p>这本书竟然是美国的证券交易委员会(Securities and Exchange Commission)1998年编著的, 旨在指导投资机构和金融机构创建更清晰，更易理解的披露文件。 <!-- raw HTML omitted --></p>
<p>可能是投资机构写的东西，普通投资者根本看不懂，逼得证券交易委员会都要下场指导投资机构写作了。 <!-- raw HTML omitted --></p>
<p>这本小册子只有83页，内容却很详实，读完之后，觉得其中的许多技巧不只适用于英文写作， <!-- raw HTML omitted -->
因此就结合读后感和个人心得，分享下简明写作的心得。 <!-- raw HTML omitted --></p>
<h2 id="为什么写作"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> 为什么写作</h2>
<p>以我自己的工作为例，日常开发新项目，需要撰写文档来向同事和经理介绍项目背景， <!-- raw HTML omitted -->
动机和具体的实现细节，以寻求支持并推动项目的进展；技术交流时，需要撰写文档分享你的成果和经验；在晋升时，需要撰写文档，给自己找数据点来说服经理，为什么要给我晋升。 <!-- raw HTML omitted --></p>
<p>需要让别人「看见」我的时候，写文章就是一种非常好的手段，默默无闻的老黄牛，是很难被人看到的，酒香也怕巷子深。 <!-- raw HTML omitted --></p>
<p>你可能会认为自己工作用不到文档，但是你总归是要向同事或者上司阐述自己的观点， <!-- raw HTML omitted -->
无论是述职，晋升，演讲，甚至口头汇报，用文档作腹稿, 理清脉络，做到胸有成竹。 <!-- raw HTML omitted --></p>
<p>关于写作的动机和好处，我之前写过一篇文章专门来聊：<a href="https://ramsayleung.github.io/zh/post/2023/%E9%97%B2%E8%81%8A%E5%86%99%E4%BD%9C/">《闲聊写作的好处》</a>，这里就不赘述了。 <!-- raw HTML omitted --></p>
<h2 id="如何写"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> 如何写</h2>
<p>如果把文章比作一个人的话，那么文风就是人的血肉和皮囊，文章的结构就是人的骨架，只有当骨架先立了起来，才能在其上涂血肉，张皮囊。 <!-- raw HTML omitted --></p>
<p>A Plain English Handbook 主要介绍的是改善文风的技巧，那么如何立起文章的骨架呢？我推荐的是黄金圈法则和金字塔原理。 <!-- raw HTML omitted --></p>
<h3 id="结构"><!-- raw HTML omitted -->3.1<!-- raw HTML omitted --> 结构</h3>
<h4 id="黄金圈法则"><!-- raw HTML omitted -->3.1.1<!-- raw HTML omitted --> 黄金圈法则</h4>
<p>所谓的黄金圈法则，概括来说，就是思考问题的三个层面，分别是： <!-- raw HTML omitted --></p>
<ul>
<li>Why: 最内层, 为什么，做一件事的原因或者目的，也就是我们为什么做这样的事情，战略层面。 <!-- raw HTML omitted --></li>
<li>How: 中间层, 怎么做，我们如何实现我们想要做的事情, 战术层面的事 <!-- raw HTML omitted --></li>
<li>What: 最外层，事情的表象，我们具体做的每一件具体的事，执行层面的事 <!-- raw HTML omitted --></li>
</ul>
<p><figure>
    <img loading="lazy" src="/ox-hugo/%e9%bb%84%e9%87%91%e5%9c%88%e6%b3%95%e5%88%99.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>比如我要推动一个新项目，需要写项目文档，或者口头向老板阐述项目，如果不用黄金圈法则，可能会是这样表述的： <!-- raw HTML omitted --></p>
<ul>
<li>What: 我要做一个XX的服务，会有哪些新功能 <!-- raw HTML omitted --></li>
<li>How: 我是通过什么业界领先的XX技术实现的，用到了什么组件. <!-- raw HTML omitted --></li>
</ul>
<p>如果以黄金圈法则来重写项目文档，那么文章的结构应该是如何的： <!-- raw HTML omitted --></p>
<ul>
<li>Why: 我们为什么要做这个项目？这个项目能给我们带来什么好处，不做会有什么损失？ <!-- raw HTML omitted --></li>
<li>How: 大方向上应该怎么实施，大概会用到什么组件，架构如何？ <!-- raw HTML omitted --></li>
<li>What: 具体的底层实现是什么，每个组件是怎么实现的？ <!-- raw HTML omitted --></li>
</ul>
<p>大方向没有定好，再走下去也只是南辕北辙，于事无补。 <!-- raw HTML omitted --></p>
<p>其实这篇文章也使用了黄金圈法则，开篇就介绍为什么要写作，后续再介绍如何写作。 <!-- raw HTML omitted --></p>
<h4 id="金字塔原理"><!-- raw HTML omitted -->3.1.2<!-- raw HTML omitted --> 金字塔原理</h4>
<p>关于金字塔原理，我觉得冯唐的<a href="https://zhuanlan.zhihu.com/p/196733201">《老聃的金字塔原理》</a>一文<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>已经解释得非常清晰明了了： <!-- raw HTML omitted --></p>
<blockquote>
<p>用一句话说，金字塔原则就是，任何事情都可以归纳出一个中心论点，而此中心论点可由三至七个论据支持，这些一级论据本身也可以是个论点，被二级的三至七个论据支持，如此延伸，状如金字塔。 <!-- raw HTML omitted --></p>
</blockquote>
<p><figure>
    <img loading="lazy" src="/ox-hugo/%e9%87%91%e5%ad%97%e5%a1%94%e5%8e%9f%e7%90%86.png"/> 
</figure>
  <!-- raw HTML omitted --></p>
<p>如果用金字塔原理来分析「为什么小王是个好对象」的论点，那么论据就可以拆分成： <!-- raw HTML omitted --></p>
<ul>
<li>家境殷实 <!-- raw HTML omitted -->
<ul>
<li>年入百万 <!-- raw HTML omitted --></li>
<li>有车有房无贷 <!-- raw HTML omitted --></li>
<li>父母养老无忧 <!-- raw HTML omitted --></li>
</ul>
</li>
<li>前景光明 <!-- raw HTML omitted -->
<ul>
<li>名校毕业 <!-- raw HTML omitted --></li>
<li>年纪轻轻身居中层 <!-- raw HTML omitted --></li>
<li>领导赏识 <!-- raw HTML omitted --></li>
</ul>
</li>
<li>相处融洽 <!-- raw HTML omitted -->
<ul>
<li>提供情绪价值 <!-- raw HTML omitted --></li>
<li>共同话题多 <!-- raw HTML omitted --></li>
<li>情绪稳定 <!-- raw HTML omitted --></li>
</ul>
</li>
<li>颜值高 <!-- raw HTML omitted -->
<ul>
<li>皮肤白里透红 <!-- raw HTML omitted --></li>
<li>五官端正 <!-- raw HTML omitted --></li>
<li>身材修长 <!-- raw HTML omitted --></li>
<li>穿衣显瘦，脱衣有肉 <!-- raw HTML omitted --></li>
<li>基因好，后代获得先发优势 <!-- raw HTML omitted --></li>
</ul>
</li>
</ul>
<p>写作时，每个一级论据就是一个大的篇章，每个二级论据就是篇章下的章节，三级论据就是章节里面的小节， <!-- raw HTML omitted -->
依此类推，并给予最底层的论据适当的文字描述。 <!-- raw HTML omitted -->
如果还不够的话，还可以继续向下拆分论据。 <!-- raw HTML omitted --></p>
<p>有了黄金圈法则和金字塔原理，就很容易把一篇文章的结构给搭起来。 <!-- raw HTML omitted --></p>
<h3 id="文风"><!-- raw HTML omitted -->3.2<!-- raw HTML omitted --> 文风</h3>
<h4 id="明确你的观众"><!-- raw HTML omitted -->3.2.1<!-- raw HTML omitted --> 明确你的观众</h4>
<p>明确你的观众，是确保你写的文档能让人理解的最重要步骤。 <!-- raw HTML omitted --></p>
<p>不同的读者，有不同的背景，对你要传递的信息是有不同的理解难度。 <!-- raw HTML omitted --></p>
<p>以我自己为例，因为我在公众号写的文章大多都是与编程技术无关的， <!-- raw HTML omitted -->
那么吸引到的读者自然也不会是编程从业者，所以我在公众号里面写技术文章，基本不会有什么读者阅读。 <!-- raw HTML omitted --></p>
<p>兼之微信这个阅读平台本身的局限，大多数情况下只能是在手机上阅读， <!-- raw HTML omitted -->
读者无法投入大量时间「沉浸式」地主动阅读，可能是快速下拉翻页读完了。 <!-- raw HTML omitted -->
而图表和代码在手机屏幕上展示效果不佳，就进一步影响阅读体验了。 <!-- raw HTML omitted --></p>
<p>如果我把写满技术名词和代码的文档给一个完全没有技术背景的读者来阅读， <!-- raw HTML omitted -->
即使我的文档写得妙笔生花，对他也没有任何信息可言。 <!-- raw HTML omitted --></p>
<p>因此我基本不会在公众号写技术文章，技术文章都放在更适合在电脑阅读的博客上。 <!-- raw HTML omitted --></p>
<p>这里还有个小技巧，就是在明确你的观众的时候，可以设定到一个具体的人， <!-- raw HTML omitted -->
例如是你的女友/男友，你的同事，或者是你的经理。 <!-- raw HTML omitted --></p>
<p>具体的人比抽象的概念更深入人心。 <!-- raw HTML omitted --></p>
<h4 id="言简意赅"><!-- raw HTML omitted -->3.2.2<!-- raw HTML omitted --> 言简意赅</h4>
<p>能用简洁明了的段落表达全的信息，就不要长篇大论。 <!-- raw HTML omitted --></p>
<p>读者是有心智负担的，文章的内容越长，读者的负担越重，就越有可能在还没读完的情况下将文章关闭。 <!-- raw HTML omitted -->
另外一方面，如果要传递的信息量是固定的，你的文章内容越长，你文章的信息密度越低，通俗点来说，就是干货越少。 <!-- raw HTML omitted --></p>
<p>所以我对「万字长文，讲透xxx」,「爆肝x天，四万字长文带你解读xxx」之类的文章不感冒， <!-- raw HTML omitted -->
文字多也不能说明干货多，爆不爆肝和干货含量也没有逻辑关联。 <!-- raw HTML omitted --></p>
<p>现在写作不按字数算稿酬，不需要搞「文字灌水」。 <!-- raw HTML omitted --></p>
<p>《唐宋八家丛话》中有一说： <!-- raw HTML omitted --></p>
<blockquote>
<p>欧阳修在翰林院时，常常与同院他人出游。 <!-- raw HTML omitted --></p>
<p>一次，见有匹飞驰的马踩死了一只狗。 <!-- raw HTML omitted --></p>
<p>欧阳修说：“请你们尝试描述一下这事。” <!-- raw HTML omitted --></p>
<p>一人说：“有犬卧于通衢，逸马蹄而杀之。” <!-- raw HTML omitted --></p>
<p>另一人说：“有马逸于街衢，卧犬遭之而毙。” <!-- raw HTML omitted --></p>
<p>欧阳修笑说：“像你们这样修史，一万卷也写不完。”那二人说：“那你说呢？” <!-- raw HTML omitted --></p>
<p>欧阳修道：“逸马杀犬于道。” <!-- raw HTML omitted --></p>
<p>那二人相互笑了起来。 <!-- raw HTML omitted --></p>
</blockquote>
<h4 id="少说黑话"><!-- raw HTML omitted -->3.2.3<!-- raw HTML omitted --> 少说黑话</h4>
<p>少说黑话和行话，例如「组合拳」，「赋能」，「抓手」之类的，字我都认识，合起来就不明白是什么意思。 <!-- raw HTML omitted --></p>
<p>如果你明确了你的观众，你可能就会意识到你的观众大概率无法理解这些话语。 <!-- raw HTML omitted --></p>
<p>多用具体的，意思明确的词，会更让读者更容易理解。能用简单的话解释清楚一个复杂的概念，就说明你对这个概念的认识越到位。 <!-- raw HTML omitted --></p>
<p>黑话用多了，也是一种「文字腐败」。 <!-- raw HTML omitted --></p>
<h4 id="控制段落长度"><!-- raw HTML omitted -->3.2.4<!-- raw HTML omitted --> 控制段落长度</h4>
<p>上文提到，读者是有心智负担，负担越大，他们就越有可能在阅读你文章时「半途而弃」。 <!-- raw HTML omitted --></p>
<p>而一大片文字密密麻麻糊在一个段落，就会进一步加重他们的心智负担。 <!-- raw HTML omitted --></p>
<p>我一般推荐80到150个字一个段落，这样看上去不至于太吓到读者。 <!-- raw HTML omitted --></p>
<h5 id="使用空行"><!-- raw HTML omitted -->3.2.4.1<!-- raw HTML omitted --> 使用空行</h5>
<p>段落与段落之间，用 <strong><strong>空行</strong></strong> 分隔. 空行是个非常简单，但是却异常有效的技巧，既可以拆分段落，控制单个段落的长度，也可以表达不同段落逻辑上存在并列或者递进的关系，便于读者理解。 <!-- raw HTML omitted --></p>
<p>同样的文字，使用空行分隔段落的前后对比如下： <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/%e6%8e%a7%e5%88%b6%e6%ae%b5%e8%90%bd%e9%95%bf%e5%ba%a61.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/%e6%8e%a7%e5%88%b6%e6%ae%b5%e8%90%bd%e9%95%bf%e5%ba%a62.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<h5 id="使用列表"><!-- raw HTML omitted -->3.2.4.2<!-- raw HTML omitted --> 使用列表</h5>
<p>另外一个控制段落长度的有用技巧，是使用列表(bullet list)，可以表达列表中的每个点都是并列关系。 <!-- raw HTML omitted --></p>
<p>例如，分析跑步的好处： <!-- raw HTML omitted --></p>
<blockquote>
<p>跑步不仅可以增强免疫系统，帮助抵御病毒和细菌，降低患病风险； 还有助于心肺功能，降低心脏病和中风的风险； 更可以减脂、增强肌肉，改善体形； 甚至促进肠道蠕动，有助于消化。 <!-- raw HTML omitted --></p>
</blockquote>
<p>如果换成列表，那么跑步的好处就是： <!-- raw HTML omitted --></p>
<ul>
<li>提高免疫力：增强免疫系统，帮助抵御病毒和细菌，降低患病风险 <!-- raw HTML omitted --></li>
<li>改善心血管健康：有助于心肺功能，降低心脏病和中风的风险 <!-- raw HTML omitted --></li>
<li>塑造好身材：可以减脂、增强肌肉，改善体形 <!-- raw HTML omitted --></li>
<li>促进消化：促进肠道蠕动，有助于消化 <!-- raw HTML omitted --></li>
</ul>
<p>如果还有优点补充，只需要继续增加列表就好了。 <!-- raw HTML omitted --></p>
<h4 id="一图-表胜千言"><!-- raw HTML omitted -->3.2.5<!-- raw HTML omitted --> 一图/表胜千言</h4>
<p>人的大脑对图片远比文字和声音敏感。 <!-- raw HTML omitted --></p>
<p>图片比文字来说，更容易被大脑接受，大脑储存图片信息也不需要进行过多的转译，而文字进入大脑之后，还需要用“想象力”处理成画面进行记忆，这也就是为什么带生活实例的文字会比概念化的文字更容易让人记住，因为前者更容易让你想象具体的画面。 <!-- raw HTML omitted --></p>
<p>通俗地讲，就是一图胜千言。 <!-- raw HTML omitted --></p>
<p>所以要减少读者的心智负担，那么就应该多使用图表，因为它能更直观地传递更多信息。 <!-- raw HTML omitted --></p>
<p>以国家统计局发布的2月份居民消费价格分类同比涨跌幅为例，文字描述如下： <!-- raw HTML omitted --></p>
<blockquote>
<p>其中，教育文化娱乐、其他用品及服务、衣着价格分别上涨3.9%、3.0%和1.6%，医疗保健、生活用品及服务、居住价格分别上涨1.5%、0.5%和0.2%；交通通信价格下降0.4%。 <!-- raw HTML omitted --></p>
</blockquote>
<p>图表如下： <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/2%e6%9c%88%e4%bb%bd%e5%b1%85%e6%b0%91%e6%b6%88%e8%b4%b9%e4%bb%b7%e6%a0%bc%e5%88%86%e7%b1%bb%e5%90%8c%e6%af%94%e6%b6%a8%e8%b7%8c%e5%b9%85%e5%9b%be.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>关于如何画图，我之前也写过一篇文章来分享心得：《<a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E7%94%BB%E5%9B%BE%E6%B5%81/">我的画图流：画图工具与技巧分享</a>》 <!-- raw HTML omitted --></p>
<p>或者换成表格: <!-- raw HTML omitted --></p>
<table>
<thead>
<tr>
<th>类别</th>
<th>涨跌幅</th>
</tr>
</thead>
<tbody>
<tr>
<td>教育文化娱乐</td>
<td>+ 3.9%</td>
</tr>
<tr>
<td>其他用品及服务</td>
<td>+ 3.0%</td>
</tr>
<tr>
<td>衣着</td>
<td>+ 1.6%</td>
</tr>
<tr>
<td>医疗保健</td>
<td>+ 1.5%</td>
</tr>
<tr>
<td>生活用品及服务</td>
<td>+ 0.5%</td>
</tr>
<tr>
<td>居住</td>
<td>+ 0.2%</td>
</tr>
<tr>
<td>食品烟酒</td>
<td>- 0.1%</td>
</tr>
<tr>
<td>交通通信</td>
<td>- 0.4%</td>
</tr>
</tbody>
</table>
<h2 id="如何写好"><!-- raw HTML omitted -->4<!-- raw HTML omitted --> 如何写好</h2>
<h3 id="多读多思"><!-- raw HTML omitted -->4.1<!-- raw HTML omitted --> 多读多思</h3>
<p>杜甫说，读书破万卷，下笔如有神。诗圣的意思是如果你通读过万卷书，就好像ChatGPT一样，思如泉涌，下笔如有神 <!-- raw HTML omitted --></p>
<p>陆游又说，纸上得来终觉浅，绝知此事要躬行。陆放翁的意思是，你在书上的读到的东西，也只是信息，如果没有实践过，终究不能成为技能的。 <!-- raw HTML omitted --></p>
<p>总结两位老人家的话，也就是说，多读书是写好文章的必要条件，多读书不一定能写好文章，但是不多读书呢，就一定写不出好文章。 <!-- raw HTML omitted --></p>
<p>毕竟写出来的东西，不会凭空而来，还是你脑子思考好的结果。 <!-- raw HTML omitted --></p>
<h3 id="多写多改"><!-- raw HTML omitted -->4.2<!-- raw HTML omitted --> 多写多改</h3>
<p>与金庸并称香港四大才子的倪匡，一生写了300多部小说、400多部电影剧本。 <!-- raw HTML omitted --></p>
<p>他曾经自嘲没有谋生本能，所以看见人家写自己也写，自称是全世界写汉字最多和最快的人，自入文坛已写作三十年， <!-- raw HTML omitted -->
一个星期写足七天，每天写数万字。他在创作最高峰曾同时写作十二本科幻小说。 <!-- raw HTML omitted --></p>
<p>当被问及有何建议赠给写作的人，倪匡说只有一个「写」字，只有多写才能得到更多的灵感。 <!-- raw HTML omitted --></p>
<hr>
<p>苏轼的《东坡志林》写到，有人问欧阳修怎么写文章，他回答说： <!-- raw HTML omitted --></p>
<blockquote>
<p>无他术，唯勤读书而多为之，自工。 <!-- raw HTML omitted --></p>
<p>世人患作文字少，又懒读书，每一篇出，即求过人，如此少有至者。 <!-- raw HTML omitted --></p>
<p>疵病不必待人指摘，多做自能见之。” <!-- raw HTML omitted --></p>
</blockquote>
<p>世人文字写得少，又懒读书，写一篇文章就希望可以超越别人，像这样是难有写得好的人。 <!-- raw HTML omitted --></p>
<p>书读多了，落笔为文，文章写多了，自然就写好了。 <!-- raw HTML omitted --></p>
<p>写作的「捷径」就是老老实实多读书、多思考、勤写作。 <!-- raw HTML omitted --></p>
<p>多练多写多修改。 <!-- raw HTML omitted --></p>
<p>只有产量提上来了，工艺才会成熟，良品率才会提高。 <!-- raw HTML omitted --></p>
<h2 id="总结"><!-- raw HTML omitted -->5<!-- raw HTML omitted --> 总结</h2>
<p>写作并非是雄关漫道，遥不可及。 <!-- raw HTML omitted --></p>
<p>大家都写过作文，写作也只是一种交流方式，无非是把脑海中的想法以文字的形式付诸于纸上，比聊天更加正式而已。 <!-- raw HTML omitted --></p>
<p>千里之行始于足下，万巻之文始于笔下，开始写就好了。 <!-- raw HTML omitted --></p>
<hr>
<h3 id="历史文章推荐"><!-- raw HTML omitted -->5.1<!-- raw HTML omitted --> 历史文章推荐</h3>
<ul>
<li>旅加经历 <!-- raw HTML omitted -->
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E8%BF%99%E4%BA%9B%E5%B9%B4%E8%B5%B0%E8%BF%87%E7%9A%84%E8%B7%AF_%E4%BB%8E%E5%B9%BF%E5%B7%9E%E5%88%B0%E6%B8%A9%E5%93%A5%E5%8D%8E/">这些年走过的路：从广州到温哥华</a> <!-- raw HTML omitted --></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E5%8A%A0%E6%8B%BF%E5%A4%A7%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C/">加拿大之初体验</a> <!-- raw HTML omitted --></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E5%8A%A0%E6%8B%BF%E5%A4%A7%E8%80%83%E9%A9%BE%E7%85%A7%E7%9A%84%E7%BB%8F%E5%8E%86/">加拿大考驾照的经历</a> <!-- raw HTML omitted --></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E7%99%BB%E9%99%86%E5%8A%A0%E6%8B%BF%E5%A4%A7%E4%B8%80%E5%B9%B4%E7%9A%84%E4%BD%93%E4%BC%9A/">登陆加拿大一年后的体会</a> <!-- raw HTML omitted --></li>
</ul>
</li>
<li>历史与思考 <!-- raw HTML omitted -->
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E7%BD%AE%E8%BA%AB%E4%BA%8B%E5%86%85/">为什么梦想买不起，故乡回不去</a>(和谐版本, 原版本<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>) <!-- raw HTML omitted --></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%B6%A6%E5%90%91%E4%BD%95%E6%96%B9_%E4%B8%8D%E5%AE%8C%E5%85%A8%E8%82%89%E8%BA%AB%E7%BF%BB%E5%A2%99%E6%8C%87%E5%8C%97/">润向何方：不完全肉身翻墙指北</a> <!-- raw HTML omitted --></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E7%9A%87%E5%B8%9D%E4%B8%8E%E5%AE%98%E5%83%9A/">皇帝与官僚：「上面」与「下面」</a> <!-- raw HTML omitted --></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E9%97%B2%E8%81%8A%E5%86%99%E4%BD%9C/">闲聊写作的好处</a> <!-- raw HTML omitted --></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E9%87%91%E6%A6%9C%E9%A2%98%E5%90%8D%E4%B9%8B%E5%90%8E/">金榜题名之后</a> <!-- raw HTML omitted --></li>
</ul>
</li>
<li>工具与分享 <!-- raw HTML omitted -->
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E5%86%99%E4%BD%9C%E6%B5%81/">我的写作流</a> <!-- raw HTML omitted --></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E7%94%BB%E5%9B%BE%E6%B5%81/">我的画图流：画图工具与技巧分享</a> <!-- raw HTML omitted --></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E6%90%9C%E7%B4%A2%E6%B5%81/">我的搜索流：高效搜索经验分享</a> <!-- raw HTML omitted --></li>
<li><a href="https://ramsayleung.github.io/zh/post/2022/feynman_technique/">最好的学习方式：费曼学习法(Feynman Technique)</a> <!-- raw HTML omitted --></li>
<li><a href="https://ramsayleung.github.io/zh/post/2021/%E7%B3%BB%E7%BB%9F%E6%80%9D%E8%80%83/">系统思考：既见树木，又见森林</a> <!-- raw HTML omitted --></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/gmail%E5%9C%B0%E5%9D%80%E7%9A%84%E9%9A%90%E8%97%8F%E6%8A%80%E5%B7%A7/">两个鲜为人知的Gmail地址技巧</a> <!-- raw HTML omitted --></li>
</ul>
</li>
<li>职场与思考 <!-- raw HTML omitted -->
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E4%BB%8E%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E7%A6%BB%E7%BA%BF_%E6%88%91%E5%B8%A6%E8%B5%B0%E4%BA%86%E4%BB%80%E4%B9%88/">那些年，我从微信支付学到的东西</a> <!-- raw HTML omitted --></li>
</ul>
</li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://github.com/xiaolai/everyone-can-use-english/blob/main/book/README.md">https://github.com/xiaolai/everyone-can-use-english/blob/main/book/README.md</a> <!-- raw HTML omitted -->&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://www.sec.gov/pdf/handbook.pdf">https://www.sec.gov/pdf/handbook.pdf</a>  <!-- raw HTML omitted -->&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="https://zhuanlan.zhihu.com/p/196733201">https://zhuanlan.zhihu.com/p/196733201</a> <!-- raw HTML omitted -->&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p><a href="http://ramsayleung.github.io/zh/post/2023/%E7%BD%AE%E8%BA%AB%E4%BA%8B%E5%86%85/">http://ramsayleung.github.io/zh/post/2023/%E7%BD%AE%E8%BA%AB%E4%BA%8B%E5%86%85/</a> <!-- raw HTML omitted -->&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>金榜题名之后</title>
      <link>https://ramsayleung.github.io/zh/post/2024/%E9%87%91%E6%A6%9C%E9%A2%98%E5%90%8D%E4%B9%8B%E5%90%8E/</link>
      <pubDate>Sun, 25 Feb 2024 20:27:00 -0800</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2024/%E9%87%91%E6%A6%9C%E9%A2%98%E5%90%8D%E4%B9%8B%E5%90%8E/</guid>
      <description>1 前言 过年期间，趁着各种零碎的闲暇时间，将一本探究学生出身与毕业出路生涯前景的书看完，名为《金榜题名之后：大学生出路分化之迷》。 大约自科举取</description>
      <content:encoded><![CDATA[<h2 id="前言"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> 前言</h2>
<p>过年期间，趁着各种零碎的闲暇时间，将一本探究学生出身与毕业出路生涯前景的书看完，名为《金榜题名之后：大学生出路分化之迷》。 <!-- raw HTML omitted --></p>
<p>大约自科举取士以来，通过读书来改变自己乃至整个家族的命运，就已成为中国社会妇孺皆知的常识，”读书改变命运“。 <!-- raw HTML omitted --></p>
<p>古有《劝学诗》云：“男儿若遂平生志，六经勤向窗前读”；今有高悬在高中教室的励志标语：“辛苦三年，幸福一生”。 <!-- raw HTML omitted --></p>
<p>但是，进入好的大学，是否就意味着毕业时令人羡慕的工作呢？为什么社会出身劣势的学生即使进入了最好的大学，却仍然在毕业出路与生涯前景劣势明显？ <!-- raw HTML omitted --></p>
<p>对于寒窗苦读，从中国甘肃考入复旦大学的作者来说，她也有同样的疑问。 <!-- raw HTML omitted --></p>
<p>因此在研究生期间，就将学生家庭背景与教育结果之间的关联作为研究课题，并将研究生论文润色，扩展成书。 <!-- raw HTML omitted --></p>
<p>在读别人的书时，我总会想起自己的事，好比用别人的料理方式，来烹饪自己的食材，看能煮出什么样的【佳肴】。 <!-- raw HTML omitted --></p>
<p>虽然我未曾【金榜题名】，但也未妨我来分享下自己的所思所想。 <!-- raw HTML omitted --></p>
<h2 id="迷宫的游戏规则"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> 迷宫的游戏规则</h2>
<p>以前高中老师在我们向其抱怨各种学业压力和严苟的规章制度之后，总是会语重心长地解释一番，然后在对话的结尾补上一句，”上到大学你们就轻松啦“。 <!-- raw HTML omitted --></p>
<p>不同于高中只有成绩的单一的显式考核标准，只有一个方向和出口，大学更像是一个被精心布局的迷宫：并不存在一条”主干道“或者标准的走法，每一天的过法都有许多可能，每个人在路口处需要不断地做选择，每一条小路（社团，绩点，实习）都各有乾坤。 <!-- raw HTML omitted --></p>
<p>而大学生作为玩家，需要在小路之中穿行探索，一边选择自己路线，一边在路途收集有价值的筹码（成绩，经历，奖项等）。 <!-- raw HTML omitted --></p>
<p>当他们到达迷宫出口时，他们需要将口袋的筹码拿出来，用它们来兑换成下一个旅程的入场券。 <!-- raw HTML omitted --></p>
<p>只是，对于不同社会出身的探索者来说，这个迷宫的神秘程度是不同的。有人对里面的布局相当了解，有人半知半解，而有人只能通过道听途说略知一二。 <!-- raw HTML omitted --></p>
<p>尤其关键的是：并不是所有人都很清楚当中的游戏规则，譬如迷宫的尽头究竟有哪几个出口，而每个出口处有用的筹码又有什么不同。 <!-- raw HTML omitted --></p>
<p>而不同等级的大学，能提供的有价值的筹码数量和价值又是截然不同的。 <!-- raw HTML omitted --></p>
<p>为了区分在两种截然不同的驱动力下探索迷宫的玩家，作者将两者定义为： <!-- raw HTML omitted --></p>
<ul>
<li>目标掌控模式：了解大学及劳动力市场中的规则，因此能有意识地树立生涯目标，并且通过管理自身的行动来趋近目标。 <!-- raw HTML omitted --></li>
<li>直觉依赖模式：在陌生的大学场域中难以自我定位，从而无意识地陷入无目标状态，主要倚靠直觉和旧有习惯来组织大学生活。 <!-- raw HTML omitted --></li>
</ul>
<p>家境优越的学子，在父母的指导下，可以更早和清晰地认识到大学的游戏规则，进而策略性地计划大学生活；而寒门学子，因为眼界和自身经历的局限性， <!-- raw HTML omitted -->
并不了解大学的规则，又会发现高中沉淀的学习方式在大学并不完全适用，难免陷入迷茫。 <!-- raw HTML omitted --></p>
<p>优势阶层的父母基于对迷宫的洞悉，为孩子织就一张“安全网”，帮助孩子认清形势，定位自身，树立目标，顺利通关；而弱势学生则没有这张安全网，只得独自在这个陌生领域无助摸索前进，父母能提供的建议越来越少，往哪走全靠自己或对或错的直觉和过去的习惯。 <!-- raw HTML omitted --></p>
<p>但因为作者只调研了名校的优等生，如果把排名后50%的学子也纳入调研范围，可能会发现还有一种【躺平放纵模式】，以高中老师口中【轻松】的方式度过了大学生涯。 <!-- raw HTML omitted --></p>
<h2 id="非名校生的大学"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> 非名校生的大学</h2>
<p>近年来，红遍网络的“985废物”和“小镇做题家”的自嘲俯拾即是： <!-- raw HTML omitted --></p>
<blockquote>
<p>“从一个连电影院都没有的小县城，考到了全河北最好的高中，六年之后要来到国际大都市上海了，要来到倾尽我家所有小积蓄，才能勉强付个首付的上海了。我这才发现，光考了好大学也是没有用的。” &ndash; 《我上了985,211，才发现自己一无所有》 <!-- raw HTML omitted --></p>
</blockquote>
<p>如果考上985，211的“小镇做题家”都如此自嘲一无所有，那些没有考上211的小镇考生，又该如何自处呢？ <!-- raw HTML omitted --></p>
<p>当聊起大学和学历话题的时候，我时常和名校毕业的高中好友开玩笑，我不是“小镇做题家”，虽然我和你们一样来自小镇，但是我连题都做不好。 <!-- raw HTML omitted --></p>
<h3 id="直觉依赖者的探索之路"><!-- raw HTML omitted -->3.1<!-- raw HTML omitted --> 直觉依赖者的探索之路</h3>
<p>如果按照书中作者的分类标准，我属于来自农村的，第一代大学生（父母都不是大学生）的直觉依赖模式学子。 <!-- raw HTML omitted --></p>
<p>是那种最需要靠教育改变命运的学生，并不真的知道该在大学里如何做才能改变命运。 <!-- raw HTML omitted --></p>
<p>对于升学，出国，就业这三个出路，我一开始就把【出国】这个选项给排除了，小镇来的我，家里并没有足够的财力支撑我出国，何况我的学校也不容易申请到好学校（现在看来，这个理由略为牵强）。 <!-- raw HTML omitted --></p>
<p>升学读研也不是我的目标，我对走学术路线没有兴趣，读完研也终究要工作，计算机相关行业，研究生学历与本科学历相比，并没有跃迁式差距。 <!-- raw HTML omitted --></p>
<p>所以我一开始就选定了【就业】的路线，我也希望可以早点赚钱为父母分担。 <!-- raw HTML omitted --></p>
<p>因为没有人指导，又不清楚迷宫的规则，我并不清楚要如何做才能取得【就业】的优势，或者做好就业的准备。 <!-- raw HTML omitted --></p>
<p>大一开始时，还是按照高中的【勤学苦读】模式，晚上没有课的时候去课室学习，解高数的练习题，再预习专业课。 <!-- raw HTML omitted --></p>
<p>这样的学习模式持续了两个月，觉得相当别扭和迷茫，看到周围宿舍的大神们已经开始编写代码，甚至其中还有中学就开始自学编程的大神，我解高数题又有什么用呢。 <!-- raw HTML omitted --></p>
<p>恰好赶上学校的社团招新，我就加入一个校级社团的【网络部】，希望可以借机学习到计算机相关的知识，学习怎么修电脑或者装操作系统。 <!-- raw HTML omitted --></p>
<p>社团生活的确让我学习到基础的电脑维修知识，更重要的是，让我认识到同系的学长们，对于我想学习修电脑的兴趣，他们纠偏道，单纯的硬件组装其实没有太大的潜力，还是做软件开发更有前途。 <!-- raw HTML omitted --></p>
<p>在学长们的指导下，我开始到<a href="imooc.com/">慕课网</a>和<a href="https://www.w3schools.com/">W3School</a>学习Html，CSS，Javascript这三剑客，开始学习前端开发，而后我又了解【前端开发】，【后端开发】，【移动端开发】的职业路径。 <!-- raw HTML omitted --></p>
<p>浅尝【前端开发】之后，发现自己对此并没有太多兴趣，又开始尝试【后端开发】的路线。 <!-- raw HTML omitted --></p>
<p>因为慕课网有把【后端开发】的课程列出来，我就知道【后端开发】需要学习什么样的技术，如Java/C++，数据库，计算机网络，我就可以有的放矢地去豆瓣上搜索对应的高分书籍来自学。 <!-- raw HTML omitted --></p>
<p>我的迷宫有了【地图】，我自然是要加速前行，我在大二的时候，就用豆瓣上列出来的经典教科书，把相关的必修专业课给自学完了，效果虽不如老师亲授，但终究有所获。 <!-- raw HTML omitted --></p>
<p>就如我在<a href="https://ramsayleung.github.io/zh/post/2023/%E8%BF%99%E4%BA%9B%E5%B9%B4%E8%B5%B0%E8%BF%87%E7%9A%84%E8%B7%AF_%E4%BB%8E%E5%B9%BF%E5%B7%9E%E5%88%B0%E6%B8%A9%E5%93%A5%E5%8D%8E/">《那些年走过的路，从广州到温哥华》</a>介绍过，而后就走上做项目和实习之路。 <!-- raw HTML omitted --></p>
<p>对于【直觉依赖模式】的学子来说，我觉得了解迷宫游戏规则最好的方式是和同系的学长学姐交流，因为他们曾处在和你同样的境况，又就读于相同的院校和专业，并且他们先于我们两到三年去探索这个迷宫，所以他们能提供最切实可行，并且可复制的路径。 <!-- raw HTML omitted --></p>
<h3 id="答案并不唯一"><!-- raw HTML omitted -->3.2<!-- raw HTML omitted --> 答案并不唯一</h3>
<p>正如作者所言，这个迷宫会有不同的出口，在大学过的每一天会将学子领入不同的小路。 <!-- raw HTML omitted --></p>
<p>二十岁的我可能希望可以从自己愿景的出口走出来，三十岁的我却有了不一样的看法，能找到自己的迷宫出口固然可贵，但是探索迷宫的过程也相当珍贵，大可不必那么功利，迷茫也是人生常态。 <!-- raw HTML omitted --></p>
<p>【就业】，【升学】，【考研】只是社会的评判标准，做个有趣的人也未尝不可。 <!-- raw HTML omitted --></p>
<h2 id="大学之后"><!-- raw HTML omitted -->4<!-- raw HTML omitted --> 大学之后</h2>
<p>在大学的时候，受学长们的影响，觉得能去BAT（Baidu，Alibaba，Tencent）的大厂，就算是个很好的出路了。 <!-- raw HTML omitted --></p>
<p>所以当时一心把去大厂当作毕业的目标，当拿到个A厂Offer之后，就没有面试其他公司，自然也没有offer来compete。 <!-- raw HTML omitted --></p>
<p>但是我从来没有想过，拿到Offer，入职之后，又该如何？ <!-- raw HTML omitted --></p>
<p>再追求升职加薪，面向晋升编程？ <!-- raw HTML omitted --></p>
<p>以前是把高考结束，考上大学当作是马拉松的终点，上大学之后又把拿Offer当作迷宫的出口？ <!-- raw HTML omitted --></p>
<p>如果人生是个没有出口的迷宫呢。 <!-- raw HTML omitted --></p>
<h3 id="迷宫并没有出口"><!-- raw HTML omitted -->4.1<!-- raw HTML omitted --> 迷宫并没有出口</h3>
<p>作者说大学是个有多个出口的迷宫，如果把迷宫的概念延伸出来，每个人的人生从大学之后就都是迷宫了（如果不上大学，那么出路就更早分化），高中之后，就不再是以成绩作为唯一的标准。 <!-- raw HTML omitted --></p>
<p>当标准都不一样，就更没有办法衡量什么是【最好】的路，只有最适合自己的路。 <!-- raw HTML omitted --></p>
<p>享受探索迷宫的过程也可成为乐趣。 <!-- raw HTML omitted --></p>
<h3 id="路要怎么走"><!-- raw HTML omitted -->4.2<!-- raw HTML omitted --> 路要怎么走</h3>
<p>过年前和发小喝茶聊天，聊到了他为人夫，为人父的事情，他提到当初他在产房等待女儿出生的时候，护士和他聊天的事： <!-- raw HTML omitted --></p>
<p>护士问，他是否是95后，他说是。 <!-- raw HTML omitted --></p>
<p>护士说，95后现在都不想生孩子了，觉得压力很大。 <!-- raw HTML omitted --></p>
<blockquote>
<p>我：那你有同样的感觉么？ <!-- raw HTML omitted --></p>
<p>发小：有阿，也觉得压力很大。 <!-- raw HTML omitted --></p>
<p>我笑道：那你还生？ <!-- raw HTML omitted --></p>
<p>发小笑回：世界上只有一种英雄主义，那就是认清生活的真想之后，继续热爱生活。 <!-- raw HTML omitted --></p>
</blockquote>
<p>在两个人的笑声中，听到发小说出罗曼罗兰的名句，觉得发小已经活出这句话的精髓了。 <!-- raw HTML omitted --></p>
<p>写在最后，鸡汤一下： <!-- raw HTML omitted --></p>
<p>路要怎么走，每个人都会有自己的选择，但了解迷宫的规则的【学子】，路可以走得更加自在。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/v2-470dc54d213bb4ae958c9adda21b961b_1440w.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<h2 id="参考"><!-- raw HTML omitted -->5<!-- raw HTML omitted --> 参考</h2>
<ul>
<li><a href="https://book.douban.com/subject/36190074">《金榜题名之后：大学生出路分化之迷》</a> <!-- raw HTML omitted --></li>
<li><a href="https://www.lifeweek.com.cn/article/33584">《我上了985，211，才发现自己一无所有》</a> <!-- raw HTML omitted --></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>登陆加拿大一年后的体会</title>
      <link>https://ramsayleung.github.io/zh/post/2024/%E7%99%BB%E9%99%86%E5%8A%A0%E6%8B%BF%E5%A4%A7%E4%B8%80%E5%B9%B4%E7%9A%84%E4%BD%93%E4%BC%9A/</link>
      <pubDate>Sun, 25 Feb 2024 19:46:00 -0800</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2024/%E7%99%BB%E9%99%86%E5%8A%A0%E6%8B%BF%E5%A4%A7%E4%B8%80%E5%B9%B4%E7%9A%84%E4%BD%93%E4%BC%9A/</guid>
      <description>1 前言 不知不觉，落地加拿大已经快一年，套用句老话，真的是光阴似箭。 想来蜜月期已过，可以去掉刚落地时【兴奋】和【新奇】的滤镜，从道听途说，到雾</description>
      <content:encoded><![CDATA[<h2 id="前言"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> 前言</h2>
<p>不知不觉，落地加拿大已经快一年，套用句老话，真的是光阴似箭。 <!-- raw HTML omitted --></p>
<p>想来蜜月期已过，可以去掉刚落地时【兴奋】和【新奇】的滤镜，从道听途说，到雾里看花，再分享自己在加拿大的亲身经历 <!-- raw HTML omitted --></p>
<p>本文算是<a href="https://ramsayleung.github.io/zh/post/2023/%E8%BF%99%E4%BA%9B%E5%B9%B4%E8%B5%B0%E8%BF%87%E7%9A%84%E8%B7%AF_%E4%BB%8E%E5%B9%BF%E5%B7%9E%E5%88%B0%E6%B8%A9%E5%93%A5%E5%8D%8E/">《那些年走过的路，从广州到温哥华》</a>和<a href="https://ramsayleung.github.io/zh/post/2023/%E5%8A%A0%E6%8B%BF%E5%A4%A7%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C/">《温哥华的初体验》</a>的后续。 <!-- raw HTML omitted --></p>
<h2 id="work-life-balance"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> Work Life Balance</h2>
<p>自我工作以来，基本就是在体验995的工作节奏，我曾经无数次【幻想】过，如果我能每天5点下班，我的生活会是怎么样的？ <!-- raw HTML omitted --></p>
<p>我会有接近6-7个小时的空闲时间，我会把这些时间用来干什么呢？ <!-- raw HTML omitted --></p>
<p>当我不曾拥有时，我总是在不断地想象。 <!-- raw HTML omitted --></p>
<p>但当我真的可以5点，甚至4点多下班的时候，我并没有我自己想象的那般激动，欣喜若狂，而是当作理所当然，很平淡地接受。 <!-- raw HTML omitted --></p>
<p>毕竟我所在的BC省，法定工作时间都只是7.5个小时，我朝九晚五，甚至有点高于本地平均水平，尤其是我在北美著名的【血汗工厂】打工，需要Oncall，甚至比本地公司还要卷，所以我开始觉得朝九晚五工作时间有点长。 <!-- raw HTML omitted --></p>
<p><strong><strong>人阿，就是贪婪，总是会得寸进尺，得陇望蜀。</strong></strong> <!-- raw HTML omitted --></p>
<p>我5点下班之后，我可以【奢侈】地花一个小时去做晚餐，然后吃完晚餐和舍友一起看个把小时的电视，一边撸着猫一边吐槽今天的工作内容；或者在天气放晴的时候，和舍友在附近的公园饭后溜圈，再考虑下明天要学习哪个视频，做点什么新菜。 <!-- raw HTML omitted --></p>
<p>饭后到睡前的时间，花一到两小时，学习一下新的技术，Swift或者Ruby on Rails，或者读读新书，又或者和家人亲友视频聊个天，互诉衷肠。 <!-- raw HTML omitted --></p>
<p><strong><strong>原来那些失去的，用于加班的时间，重新获得后，也只是把它还给生活本身。</strong></strong> <!-- raw HTML omitted --></p>
<h2 id="英语"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> 英语</h2>
<p>未落地加拿大时，最最忧心的问题就是自己的英语不过关，无法正常地与人沟通交流，也无法正常工作。 <!-- raw HTML omitted --></p>
<p>毕竟我此前没有考过雅思，也没有在纯英文的环境中生活过，不知道自己英语水平如何。 <!-- raw HTML omitted --></p>
<p>落地之后，强迫自己开口对话，虽然难免会出现词不达意和【执笔忘字】的情况，但终究是敢开口说话了， <!-- raw HTML omitted -->
难免会遇到不认识的词不标准的发音，但是快速纠错之后，情况就慢慢在好转，脸皮厚一些就好了。 <!-- raw HTML omitted --></p>
<p>后来还花了两周时间准备了雅思考试，顺便测试下自己的英语能力，然后考了个7分，好像还行。 <!-- raw HTML omitted --></p>
<p>刚开始产品经理们开会，他们都是美国人，是真能扯，语速也真的快，好像高中时候的英语听力一样，只看到两个人不停地在张嘴说话，大脑一片空白。 <!-- raw HTML omitted --></p>
<p>到后面熟悉公司的黑话之后，情况也在慢慢变好，也听懂他们在说什么了，的确也是在扯。 <!-- raw HTML omitted --></p>
<p>从以前非常紧张与同事1:1开会，当现在已经能主动和同事拉会1:1，我可以感觉到自己的听力和口语能力也在不断地提高。 <!-- raw HTML omitted --></p>
<p>说到底，外语也不是什么特别的秘技，也只是种用进废退技能而已。 <!-- raw HTML omitted --></p>
<h2 id="惊喜"><!-- raw HTML omitted -->4<!-- raw HTML omitted --> 惊喜</h2>
<p>人言洛阳花似锦，偏我来时不逢春。 <!-- raw HTML omitted --></p>
<p>想来入行前，都是听说互联网公司的各种红利，但是当然真正来到这个行业时，才发现自己啥红利都没有吃上，来了都是当人矿的，起了个大早，赶了个晚集，还碰上各种【奇遇】。 <!-- raw HTML omitted --></p>
<p>想我22年中面试的时候，那时还在北美【大放水】，通货膨胀的期间，各种大包满天飞，我却因为 international hire的原因，只赶上个low ball 包，因为我此前已经遇过很多次，已经可以泰然处之。 <!-- raw HTML omitted --></p>
<p>但是到23年初，受美国加息降通涨的影响，Meta和Twitter开了个坏头，北美的互联网都开始裁员，我司也不例外，不仅是裁员，连发出去的Offer开始撤回或者延期，然后我的Offer 也被影响了，原来面的组岗位被取消了。 <!-- raw HTML omitted --></p>
<p>我当时的心情不算是五雷轰顶，也算得上是晴天霹雳。 <!-- raw HTML omitted --></p>
<p>还好找到新的组接收，然后岗位被搬到另外一个新组，无论如何，先干着吧，不至于还没入职就失业，起码干的事情是新的，一切都是从0开始。 <!-- raw HTML omitted --></p>
<h2 id="什么tm的叫惊喜"><!-- raw HTML omitted -->5<!-- raw HTML omitted --> 什么TM的叫惊喜</h2>
<p>在新组，我是组里的第一个SDE（软件工程师），之前的两位组员都是DE（数据工程师），manager也是刚升任成经理的，甚至我入职时，他的 title都还没有变成 manager。 <!-- raw HTML omitted --></p>
<p>马上我发现，组里是新人，新组，老代码，人是新的，但是代码却是历史代码，我们需要去维护这些历史代码，但是没有人能解释其中的逻辑为什么要这么写？ <!-- raw HTML omitted --></p>
<p>紧接着，我发现，代码主体都是SQL，项目的逻辑隐藏在数以万行计的SQL代码中，因为SQL的抽象程度高，就更难以理解业务逻辑了。 <!-- raw HTML omitted --></p>
<p>4月底，在我入职不到3周，我就被安排成为一个新项目的 owner，然后被告知要在半年后的 Re:Invent发布，当时我甚至不知道什么是 Re:Invent. <!-- raw HTML omitted --></p>
<p>后来才被告知，Re:Invent之于我司，犹如【WWDC】之于Apple，【微信公开课】之于微信，都是用来发布新产品的全球大会。 <!-- raw HTML omitted --></p>
<p>我当时心想，老板还真的看得起我嘛。 <!-- raw HTML omitted --></p>
<p>本着【能力越大，责任越大】的自嘲心理，我就这样接手了这个项目，成为了Owner。 <!-- raw HTML omitted --></p>
<p>和我的直属manager，总监以及产品沟通之后发现，他们似乎只要求要做这样一个产品，但是这个产品是什么， <!-- raw HTML omitted -->
应该怎么做，都是完全没有概念，也没有文档。 <!-- raw HTML omitted --></p>
<p>在我的认知中，一个项目从提出到上线的完整生命周期应该包括以下的部分： <!-- raw HTML omitted --></p>
<ol>
<li>某位领导或者产品经理提出新产品的想法 <!-- raw HTML omitted --></li>
<li>完善 use case, 细化想法 <!-- raw HTML omitted --></li>
<li>产品的各个利益方（stakeholders），或者叫涉众达成共识，领导层面获批 <!-- raw HTML omitted --></li>
<li>产品出需求文档，明确要做什么，具体的业务规则是什么 <!-- raw HTML omitted --></li>
<li>技术评估需求可行性 <!-- raw HTML omitted --></li>
<li>技术出设计文档 <!-- raw HTML omitted --></li>
<li>技术根据设计方案给出排期 <!-- raw HTML omitted --></li>
<li>技术开发需求，自测，内部上线 <!-- raw HTML omitted --></li>
<li>产品及涉众验收产品 <!-- raw HTML omitted --></li>
<li>内测及公测上线 <!-- raw HTML omitted --></li>
</ol>
<p>然而，我现在拿到手的只是一个模糊的需求概念和上线的日期，没有详细的需求文档，口头描述了大概要做什么。 <!-- raw HTML omitted --></p>
<p>我只能不停地追着产品经理和manager问他们我要做什么，能否先给我个需求文档，对于需求文档，产品经理也不会直说没有， <!-- raw HTML omitted -->
只是会说解释一通后，让你意会到没有，我只能当练习英语听力。 <!-- raw HTML omitted --></p>
<p>最后我被告知，先把senior data engineer写的一大段SQL转成服务代码，把End-to-End的结果跑出来再说。 <!-- raw HTML omitted --></p>
<p>我就不懂，既然SQL都能跑了，还要我写个服务来跑SQL呢？ <!-- raw HTML omitted --></p>
<p>咨询了一番，我还是没得出个所以然，最后只能是按照这段SQL来写设计文档，并根据设计方案开发服务。 <!-- raw HTML omitted --></p>
<p>心里第一次浮起疑问：【贵司的做事方式就是这样的么？它是怎么做到这种规模的？】 <!-- raw HTML omitted --></p>
<p>7月初，美国转来了一位L6的 senior SDE还有一位L5的SDE也加入到项目里面，以缓解资源不足的问题。 <!-- raw HTML omitted --></p>
<p>加入后不久，这两位工程师也问起了需求文档的事，得到的回复也是言不及没有需求文档，意含没有需求文档。 <!-- raw HTML omitted --></p>
<p>没有需求文档实在是没法干活，最后是我们三个技术开发溱一起，每个人把自己对需求的理解一人一句写下来，也算是人生新经历了。 <!-- raw HTML omitted --></p>
<p>7月底，服务End-to-End 跑通，将结果呈给总监与产品经理，然后总监和产品经理反馈这不是他们要的，要求修改需求。 <!-- raw HTML omitted --></p>
<p>8月，根据修改后的需求重新设计服务，分成三个模块，三个工程师每人负责一个模块。 <!-- raw HTML omitted -->
总监和产品经理再修改需求，并要求开发进行建模，但是新需求的模型不具备可行性，产品经理无法给出具体的业务规则，最后开发无法建模，导致新需求被搁置。 <!-- raw HTML omitted --></p>
<p>9月，主力产品经理突然宣布离职，此时离Re:Invent 不到两个月。 <!-- raw HTML omitted --></p>
<p>10月初，开发按照变更后的需求完成服务开发，然后发现服务使用的源数据全部是脏数据，服务结果不可用，团队已有使用该数据源的服务也是错的，开发紧急调研，再切换到新数据源。 <!-- raw HTML omitted --></p>
<p>11月初，所有服务组件万事具备，只待Re:Invent东风，然后被产品经理告知，我们的项目不能发布，因为没有在领导层面获得批准。 <!-- raw HTML omitted --></p>
<p>所以让开发紧赶慢赶，干了半年的大项目，连审批都还没有通过。 <!-- raw HTML omitted --></p>
<hr>
<p>开发项目期间不停地浮起疑问，【按照这种做事方式，这家公司是怎么做到这种规模的？】 <!-- raw HTML omitted --></p>
<p>但做人不能半途而废，过河抽桥，所以即使心中百般疑问和不解，我依旧是尽心尽力把这个项目做完。 <!-- raw HTML omitted --></p>
<p>在做完这个项目之后，我就谋求转组了，这样的做事方式着实不是我的风格，我主观认为也非长久之计。 <!-- raw HTML omitted --></p>
<hr>
<p>1月，GM（老板的老板的老板）离职。 <!-- raw HTML omitted --></p>
<p>2月，总监也离开了这个部门。 <!-- raw HTML omitted --></p>
<h2 id="裁员阴云"><!-- raw HTML omitted -->6<!-- raw HTML omitted --> 裁员阴云</h2>
<p>自从2022年起，中美的互联网行业都笼罩在裁员的阴云之下，只是两者背后的原因各种不同。 <!-- raw HTML omitted --></p>
<p>朋友们在我登陆加拿大之后也和跟我吐槽国内环境变差，红利期已过，我只是个臭写代码的，也分析不出其背后的原因。 <!-- raw HTML omitted --></p>
<p>但是我知道的，大洋彼岸的北美大厂也在持续裁员，首当其冲的就是Google等大厂， <!-- raw HTML omitted -->
在人们2024年不要再有裁员的期待中，1月Google就以裁员来开年，真是【合家富贵】。 <!-- raw HTML omitted --></p>
<p>疫情时期的【大放水】，导致大厂们都用大包疯狂扩张，为了抑制通胀而采取的加息措施让企业们紧缩信贷， <!-- raw HTML omitted -->
压减成本，而人力成本在互联网大厂中可谓是占大头，然后在Meta和Twitter的带头下，开始挥刀裁员。 <!-- raw HTML omitted --></p>
<p>开始时，各大厂裁起员来还有些扭捏，裁完人公司高层还会写信安慰员工，说就裁这一波，高层还会出来道歉背锅。 <!-- raw HTML omitted --></p>
<p>然而裁到现在，已经变得明目张胆，和肆无忌惮，像Google这种， <!-- raw HTML omitted -->
都宣布2024年会持续裁员，还有其他大厂，就没有正式宣布裁员和什么时候结束裁员，就这么裁着。 <!-- raw HTML omitted --></p>
<p>毕竟在缺乏增长点情况下，裁员能缩减开支，让财报好看。 <!-- raw HTML omitted --></p>
<p>至于打工人们的看法，从来就不会有人在乎的。 <!-- raw HTML omitted --></p>
<p>所以「工作」也回归到它本身的意义上，这也只是份工作而已，It&rsquo;s just a job，不要赋予工作过多的意义。 <!-- raw HTML omitted --></p>
<p>「得益于」裁员，我现在对工作的看法已经很佛系了，以前那种拼命卷，想拿到好绩效证明自己的想法已经不复存在了，也难怪朋友会说我现在心态变好了。 <!-- raw HTML omitted --></p>
<h2 id="万税之国"><!-- raw HTML omitted -->7<!-- raw HTML omitted --> 万税之国</h2>
<p>虽然在来加拿大之前听说过加拿大的税非常高和多，但是只有从我的钱包把钱拿走，才能切实体会到什么叫【万税之国】。 <!-- raw HTML omitted --></p>
<p>除了薪资收入30+%的个人所得税外，还有日常消费12%的消费税，15%的酒税， <!-- raw HTML omitted -->
以及超过50%的资本所得税（比如银行存款利息，基金，股票收益等等），各种五花八门，名目繁多的税种。 <!-- raw HTML omitted --></p>
<p>虽然知道【死亡和缴税无可避免】，但是死亡是一次性的，缴税却是持续性的。 <!-- raw HTML omitted --></p>
<p>更何况，交税后的许多社会福利却是和收入挂钩的，你的收入越低，能享受到的福利就越多，而富人又有非常多的避税手段。 <!-- raw HTML omitted --></p>
<p>像 daycare, 牛奶金，低保这些，都是和每个人的收入挂钩，低就有，高就没有。 <!-- raw HTML omitted --></p>
<p>所以说下来，而低收入者可以少交税，却问政府要钱要福利；富人又可以避税，只有老实打工的中产是被收割的，福利又少。 <!-- raw HTML omitted --></p>
<p>难怪人们总说，加拿大适合躺平吃福利，不适合来挣钱，带资来加拿大的可以靠吃政府福利过得非常滋润。 <!-- raw HTML omitted --></p>
<h2 id="医疗"><!-- raw HTML omitted -->8<!-- raw HTML omitted --> 医疗</h2>
<p>加拿大的医疗体系是吃全民大锅饭，免费医疗。 <!-- raw HTML omitted --></p>
<p>免费的饭一般都不会很好吃，也不会很容易吃到。 <!-- raw HTML omitted --></p>
<p>加拿大的医疗体系我还没有机会亲身体验过，但是舍友有过几次的问诊纪录，原来抽个血化验排队等个两-三个小时着实是件很稀松平常的事。 <!-- raw HTML omitted --></p>
<h2 id="此处并非天堂"><!-- raw HTML omitted -->9<!-- raw HTML omitted --> 此处并非天堂</h2>
<p>世界上不存在天堂，所以如果抱着前往天堂的愿景来加拿大，难免会失望，加拿大也有自身的问题。 <!-- raw HTML omitted --></p>
<p>疫情期间为了保消费实行的【大放水】政策导致持续的高通涨， <!-- raw HTML omitted -->
高企的物价，为了抑制通涨而实行的加息政策而导致高企的利率，7-8%的房贷车贷利率。 <!-- raw HTML omitted --></p>
<p>飙升的房价，虽然待过深圳的我觉得温哥华房价还赶不上深圳， <!-- raw HTML omitted -->
但是对比温哥华本地的中位数收入，温哥华的房价已经远远高于居民的中位数收入，一般人都负担不起了。 <!-- raw HTML omitted --></p>
<p>以房租举例，我现在与舍友合租，房租以人民币计价，大概是我之前在深圳的四倍。 <!-- raw HTML omitted --></p>
<p>增加的移民人口与减少的工作机会，各种【苛捐杂税】让带资过来的移民和本地的金主都不需要创办企业， <!-- raw HTML omitted -->
资本没法流动起来，自然不能创造就业岗位，随着移民人数的增加，以及激进的难民接收政策，就进一步加剧【僧多粥少】的问题。 <!-- raw HTML omitted --></p>
<p>而加息导致的企业的信贷紧缩，也抑制企业扩张，甚至导致企业缩减规模，进行裁员，又推进了失业的严重程度。 <!-- raw HTML omitted --></p>
<p>而政府对失业人数增多的应对措施竟然是【头痛治脚】地增加失业保险的缴纳基数，而非想办法重启经济活力，进一步扩大就业市场。 <!-- raw HTML omitted --></p>
<p>持续增多的各种税收与各种层出不穷的问题，也难怪认识的加拿大人都对现在的政府相当不满。 <!-- raw HTML omitted --></p>
<h2 id="好山好水好寂寞"><!-- raw HTML omitted -->10<!-- raw HTML omitted --> 好山好水好寂寞</h2>
<p>温哥华的自然风光的确很美，依山望海。 <!-- raw HTML omitted --></p>
<p>经历过加拿大的冬天之后，我能理解为什么当地人在夏天都一股脑地出去玩，因为夏天不玩，冬天真的没得玩。 <!-- raw HTML omitted --></p>
<p>温哥华的冬天，只有雪和雨，阴冷潮湿，早上八点半日出，下午3点半日落，日照时间也只有7-8个小时。 <!-- raw HTML omitted --></p>
<p>冬天除了滑雪和滑冰外，基本没有太多其他种类的户外活动。 <!-- raw HTML omitted --></p>
<p>而温哥华的夏天要到接近7月份才来临，那时候大家可以露营，划船，登山。 <!-- raw HTML omitted --></p>
<p>很多店铺晚上6-7点就会关门，邮递员周末也不会送信，更不会有广州那种深夜大排档的盛况。 <!-- raw HTML omitted --></p>
<p>可能是因为温哥华相对国内人少，各种活动和玩法也没有国内花，也难怪有人评价其为【好山好水好寂寞】 <!-- raw HTML omitted --></p>
<h2 id="好脏好乱好热闹"><!-- raw HTML omitted -->11<!-- raw HTML omitted --> 好脏好乱好热闹</h2>
<p>回到国内时的第一感受是，好多人，真的好久没有看到过这么多人。 <!-- raw HTML omitted --></p>
<p>得益于国内相对廉价的人力以及世界工厂的地位，以致于国内相对加拿大拥有价格更便宜，品质更好的产品与服务。 <!-- raw HTML omitted --></p>
<p>即使是深夜，到处也是人头攒动，可以很轻易地朋友玩通宵，到处都是人气和烟火气。 <!-- raw HTML omitted --></p>
<p>所以总会有朋友问我，【后面你会回国么？】 <!-- raw HTML omitted --></p>
<p>我只能说，未来的事无法计划，我也没有一个确切的答案。 <!-- raw HTML omitted --></p>
<p>当初想要出来只是某些契机因缘际会的结果，未来的事谁也不知道，只能拭目以待。 <!-- raw HTML omitted --></p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>

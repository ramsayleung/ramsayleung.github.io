<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on 自由庄园</title>
    <link>https://ramsayleung.github.io/zh/post/</link>
    <description>Recent content in Posts on 自由庄园</description>
    <image>
      <title>自由庄园</title>
      <url>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>See this site&#39;s source code [here](https://github.com/ramsayleung/ramsayleung.github.io), licensed under GPLv3 ·</copyright>
    <lastBuildDate>Sun, 17 Sep 2023 17:23:00 -0700</lastBuildDate><atom:link href="https://ramsayleung.github.io/zh/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>加拿大考驾照的经历</title>
      <link>https://ramsayleung.github.io/zh/post/2023/%E5%8A%A0%E6%8B%BF%E5%A4%A7%E8%80%83%E9%A9%BE%E7%85%A7%E7%9A%84%E7%BB%8F%E5%8E%86/</link>
      <pubDate>Sun, 17 Sep 2023 17:23:00 -0700</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2023/%E5%8A%A0%E6%8B%BF%E5%A4%A7%E8%80%83%E9%A9%BE%E7%85%A7%E7%9A%84%E7%BB%8F%E5%8E%86/</guid>
      <description>1 前言 1.1 「老司机」 在高考之后，未上大学的那段时间，我就在父母的建议之下去考了驾照。 虽然持有驾照已经7-8年的时间，期间甚至驾照过期，都换过一</description>
      <content:encoded><![CDATA[<h2 id="前言"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> 前言</h2>
<h3 id="老司机"><!-- raw HTML omitted -->1.1<!-- raw HTML omitted --> 「老司机」</h3>
<p>在高考之后，未上大学的那段时间，我就在父母的建议之下去考了驾照。 <!-- raw HTML omitted --></p>
<p>虽然持有驾照已经7-8年的时间，期间甚至驾照过期，都换过一次证件了。 <!-- raw HTML omitted --></p>
<p>所以，以驾龄论，可谓是「老司机」了，但以里程论，还是「新手」，不足一万公里。 <!-- raw HTML omitted --></p>
<p>毕竟在国内上班，可以搭乘公共交通工具，地铁，小电驴或者共享单车都可以组合使用，车不算是必需品。 <!-- raw HTML omitted --></p>
<p>尤其是在还没有买房的情况下，找地方停车都是个问题。 <!-- raw HTML omitted --></p>
<h3 id="北美的车"><!-- raw HTML omitted -->1.2<!-- raw HTML omitted --> 北美的车</h3>
<p>但来到北美之后，发现车的确是必需品。 <!-- raw HTML omitted --></p>
<p>去美国玩的时候，发现美国真的是大农村，地广人稀，生活设施遍布在不同的地方，买个菜都要去几公里之外的超市，没有车真的是寸步难行。 <!-- raw HTML omitted --></p>
<p>相比之下，我所处的温哥华还算是方便，还有地铁和对应的接驳巴士，能满足基本的生活需要，但也仅限于生活需要。 <!-- raw HTML omitted --></p>
<p>例如想去个附近的山登高游玩，地图显示距离17公里，开车30分钟，公交2小时。 <!-- raw HTML omitted --></p>
<p>兼之冬天将近，如果下雪的话，再用两条腿，可以活动的范围就相当有限。 <!-- raw HTML omitted --></p>
<p>诸事安顿下来之后，车的优先级就提上来了；而考虑车的前提条件，就是先有驾照 <!-- raw HTML omitted --></p>
<h3 id="驾考难度"><!-- raw HTML omitted -->1.3<!-- raw HTML omitted --> 驾考难度</h3>
<p>因为中国与加拿大没有驾照互认协议，所以中国的驾照不能直接换成加拿大驾照，所以就能人工去考。 <!-- raw HTML omitted --></p>
<p>前面提到，北美的车是生活必需品，兼之从不同的好友的经历来看，考驾照似乎并不难，何况我又不是不会开车。 <!-- raw HTML omitted --></p>
<p>按照朋友们的描述，在美国，能把车开出去，再安全开回来，就能过了。 <!-- raw HTML omitted --></p>
<p>后面发现，的确如此，但是仅适用于美国，加拿大（或者说温哥华）除外。 <!-- raw HTML omitted --></p>
<p>温哥华20世纪初建城的时候，汽车还不是普遍，设计的路主要是以马车通行为主，所以老城区的路基本都很狭窄。 <!-- raw HTML omitted --></p>
<p>等到20世纪40-50年代，汽车大量普及的时候，最初的城市规划设计师就给出了面向汽车道路的城市规划， <!-- raw HTML omitted -->
但没有被政府接受，重新规划的蓝图就没有实现，所以温哥华城区的路都相当「紧凑」。 <!-- raw HTML omitted --></p>
<p>像BC 99这条去温哥华市中心，每天上下班必塞的高速公路，双向只有中间的一条黄线分隔，车头偏一下就被对面车道的来车给撞了： <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/highway-99-south-sign-bc.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>虽然路规划得不怎么样，但是政府还是希望交通尽量高效运行，减少阻塞， <!-- raw HTML omitted -->
而其中的一个手段就是提高司机准入的门槛，让司机在理想条件，尽量以最高限速速度通行。 <!-- raw HTML omitted --></p>
<p>以至于刚从美国转过来的同事说，怎么感觉温哥华的人开车，都那么匆忙呢(rush). <!-- raw HTML omitted --></p>
<p>用舍友的话来说就是， <!-- raw HTML omitted -->
「驾照考试难度，一般与马路杀手数量成正比；马路杀手多的地方，一般都考试难度都比较高。温哥华路况不好，容易培养马路杀手」 <!-- raw HTML omitted --></p>
<p>导致的结果就是，温哥华的驾照考试难度相对较高。 <!-- raw HTML omitted --></p>
<p>但考试难度这个东西很难量化的，每个人驾驶经验也不一样，但以我知道的例子，一位朋友，考了4次才通过，花费了4个月；还有同事的舍友，也考了4次。 <!-- raw HTML omitted --></p>
<h2 id="回炉再造"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> 回炉再造</h2>
<p>虽然我在国内也开过车，但是鉴于温哥华的考试难度，兼之想一次通过考试，所以就找了位朋友推荐的教练来重新学车。 <!-- raw HTML omitted --></p>
<p>要考试通过，主要是做好这三部分的内容： <!-- raw HTML omitted --></p>
<ol>
<li>道路意识 <!-- raw HTML omitted --></li>
<li>驾驶技术 <!-- raw HTML omitted --></li>
<li>考点的熟悉程度 <!-- raw HTML omitted --></li>
</ol>
<p>我本以为是我要关注的主要是第3点，没想到第3点优先级是最低的。 <!-- raw HTML omitted --></p>
<p>前面几次课程，我都是在修正国内的驾驶习惯，比如驾车时，开在最右车道时，习惯偏向左边，而不是开在车道中间。这个叫 lane position(车道位置)问题 <!-- raw HTML omitted --></p>
<p>教练说，这个很正常，因为国内经常会有行人或者自行车从非机动车道，开到了机动车道上，为了不碰到他们，就习惯向左边开一些。 <!-- raw HTML omitted --></p>
<p>还有右转的时候，习惯向外再带一些再转弯，因为又担心转弯的时候会有行人或者障碍物，所以预留出空间，这个叫 steering wheel position(转弯位置)问题。 <!-- raw HTML omitted --></p>
<p>诸如此类的问题，都是会扣分，甚至会挂掉的. <!-- raw HTML omitted --></p>
<p>道路意识方面，教练首先纠正我的就是速度问题，限速50km/h的意思，不是说开50 km/h 以下都可以，而是说在理想情况下，要开到50 km/h, 太慢就会阻塞交通了。 <!-- raw HTML omitted --></p>
<p>比如限速50，开到40以下可以就扣分了，开到35，可能就挂了，当有车在你后面排队，就要注意了; 超速也不行，超过55可能就会挂掉。（当然，只是考试，平时超速，只要不超太多，一般不会有警察抓你的） <!-- raw HTML omitted --></p>
<p>还有道路优先权的意识，在没有红绿灯的情况下，多车交互，什么时候，谁应该先走；对公交，行人的礼让意识。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/icbc_4_ways_stop.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>对于消防车和救护车的紧急车辆出现在路上，双向两车道的车都要停下来， <!-- raw HTML omitted -->
以便紧急车辆快速通过，所以就会有路上就听到警笛声，路上所有的车都就近停下来的场景。 <!-- raw HTML omitted --></p>
<p>加拿大的基础设施真的不行，路灯都是20-30年前的款式，让我非常不习惯的是，在大多数情况，直行和左转灯是合并在一起的。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/icbc_q94.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>意味着当你要左转，灯变绿的时候，不一定就能转，对面直行车道的车有更高的优先权，你需要把车探出去，等待对面的直行车通行完，并且在自己这边的绿灯变黄前走掉，需要对交通变化快速反应。 <!-- raw HTML omitted --></p>
<p>因为这种种限制，就对司机的驾驶技术有较高要求，具体体现就是要快速过弯。 <!-- raw HTML omitted --></p>
<p>而温哥华的交通要求司机快速通行，路上交通状况变化很快，如果转弯太慢，灯可能就变， <!-- raw HTML omitted -->
行人或者其他方向的车就马上要来了，就比较容易出现危险的状况，就要求在可以通行的情况下，快速过弯。 <!-- raw HTML omitted --></p>
<p>北美这边的过弯标准是，右转绿灯，减速，shoulder check, 平稳快速转弯，加速，过程要流畅一气呵成，不能有颠簸，滞涩的感觉，让乘客紧张。 <!-- raw HTML omitted --></p>
<p>所谓的 shoulder check 就是转弯的时候，不能只看镜子，要把头转90度，转过肩膀，观察转向的盲区，避免撞上行人或者单车，这也是国内没有的要求。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/icbc_shoudler_check.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>所以快速转弯就要求手，脚，头协调并用。 <!-- raw HTML omitted --></p>
<p>就这样，每周一次，练了10次，花费了近三个月来练习。 <!-- raw HTML omitted --></p>
<h2 id="考试"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> 考试</h2>
<p>考试内容分为笔试和路试，笔试就是针对交通规则的做题，问题不大，通过之后就会拿到实习驾照，在有19岁以上的驾照持有者陪同下就能开车了。 <!-- raw HTML omitted --></p>
<p>路试就是载着考官，按照考官的指示，开25-30分钟的车。 <!-- raw HTML omitted --></p>
<p>笔试与路试都与驾校无关，也不需要有驾校这样的机构介入，考试用车可以是任意符合规定的车，比如轿车，SUV, 越野车，或者是皮卡，只要功能正常即可。 <!-- raw HTML omitted --></p>
<p>在考点区域，按照随机考官的指示开车，考察内容大概包括红绿灯右转，左转，随机临时停车， <!-- raw HTML omitted -->
随机地点2分钟内完成侧方停车，考官观察考生的表现，并进行打分。 <!-- raw HTML omitted --></p>
<p>视考点不同，还可能需要开一段高速，考察如何加速并入，高速超车与换道，及离开高速等等。（考官估计也会紧张，要和连驾照都没有「马路杀手」上高速） <!-- raw HTML omitted --></p>
<p>因为练的时间比较长，兼之在考试之前去美国有过一次公路之旅，开了有600-700公里，所以一次就通过了。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/road_test_result_redacted.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>考官评语： <!-- raw HTML omitted --></p>
<blockquote>
<p>A1 Missed right turn shoulder check/lane change <!-- raw HTML omitted --></p>
<p>Good speed control <!-- raw HTML omitted --></p>
</blockquote>
<p>shoulder check 部分还是被扣分了，做得不标准，习惯着实很难一下子养成。 <!-- raw HTML omitted --></p>
<p>这样就通过驾照考试，「又」成为一名「马路杀手」了。 <!-- raw HTML omitted --></p>
<p>整个考试的费用: <!-- raw HTML omitted --></p>
<ol>
<li>笔试: 31加元(约160人民币) <!-- raw HTML omitted --></li>
<li>路试: 50加元(约270人民币) <!-- raw HTML omitted --></li>
<li>驾照制作及邮寄费用: 31加元(约160人民币). <!-- raw HTML omitted --></li>
</ol>
<h2 id="对比"><!-- raw HTML omitted -->4<!-- raw HTML omitted --> 对比</h2>
<p>因为在中国和加拿大都考过驾照，所以很自然地会对比两个国家的驾照考试。 <!-- raw HTML omitted --></p>
<p>加拿大考试的最大感觉就是真的要求你考完之后，是可以马上上路开车的，毕竟考试都需要在马路上真枪实弹开车的，甚至上高速。 <!-- raw HTML omitted --></p>
<p>但是你是怎么学的，他是不管的，所以也难怪北美很多人都是父母教开车，然后开自己家的车去考试。 <!-- raw HTML omitted --></p>
<p>相比之下，中国的驾照考试是相对比较「教条」和「形式化」的，以大部分人花费最多时间的科目二而言，主要是考察倒车入库，侧方停车，直角转弯，半坡起步等技能，而其中花费最多时间的是倒车入库，要求一次就能倒进去。 <!-- raw HTML omitted --></p>
<p>科目三就是加减档位，加减速，路边停车等等，我当初考试的时候，科目三还有长途，我需要和教练还有同车的考生，驱车到另外一个城市。 <!-- raw HTML omitted --></p>
<p>但是考试要求与实际开车的诉求并不契合，没有见过谁开车主要是处理倒车入库的，何况是要求一次就能停进去。 <!-- raw HTML omitted --></p>
<p>为什么要考这么机械的内容，就不能以实际开车的内容来考么？ <!-- raw HTML omitted --></p>
<p>比如让考生开个20-30分钟，然后让考官评判开得是否符合标准。 <!-- raw HTML omitted --></p>
<p>回忆起发生在我自己身上的一件事，我意识到，在当前环境下, 这个是很难落实的。 <!-- raw HTML omitted --></p>
<h3 id="科目三经历"><!-- raw HTML omitted -->4.1<!-- raw HTML omitted --> 科目三经历</h3>
<p>当时考科目三的前，我就只练习了一次，驾校教练把我们拉到一条未启用的高速公路上，给我们讲怎么起步，加减档，超车，路边停车， <!-- raw HTML omitted -->
向我们介绍，考试的时候，会有个考官坐在副驾驶上，然后对我们进行打分。 <!-- raw HTML omitted --></p>
<p>让我们每人开一段路，第二天就约考试了。 <!-- raw HTML omitted --></p>
<p>考试前，另外一位驾校教练，也是驾校老板单独叫我出了办公室，对我说了一番话，但原话已经记不大清了： <!-- raw HTML omitted --></p>
<blockquote>
<p>教练：你准备了么？ <!-- raw HTML omitted --></p>
<p>我：准备什么？考试内容么？ <!-- raw HTML omitted --></p>
<p>教练：红包阿 <!-- raw HTML omitted --></p>
<p>我：什么红包？ <!-- raw HTML omitted --></p>
<p>教练：给考官的红包 <!-- raw HTML omitted --></p>
</blockquote>
<p>当时高中毕业的我，还不懂这人情世故，陷入了短暂的沉默。教练并没有给我太多思考的时间，继续了对话（这次的原话我倒是还记得很清楚） <!-- raw HTML omitted --></p>
<blockquote>
<p>教练：这红包不是给我的 <!-- raw HTML omitted --></p>
<p>教练：每个人都给考官准备了红包 <!-- raw HTML omitted --></p>
<p>教练：同车考试的人里，是有人要挂的 <!-- raw HTML omitted --></p>
</blockquote>
<p>读懂潜台词的我意识到，相当于我被陷于了囚徒困境了，如果别人给了我没给，挂的就是我。 <!-- raw HTML omitted --></p>
<p>那我也只能给红包了，但教练的话却没有就此停下来。 <!-- raw HTML omitted --></p>
<blockquote>
<p>教练：你知道给多少么？ <!-- raw HTML omitted --></p>
<p>我：&hellip; <!-- raw HTML omitted --></p>
<p>教练：给个500吧。 <!-- raw HTML omitted --></p>
</blockquote>
<p>我高中毕业的时候，移动支付还不是非常普及，所以还是现金支付为主。 <!-- raw HTML omitted --></p>
<p>我当时报驾校的费用是3300元，我记得很清楚，是因为我父亲带我去镇上的驾校，从他的裤袋里面，抽出了一捆现金，放到桌上给驾校老板。 <!-- raw HTML omitted --></p>
<p>没想到，给个红包就要驾校费用的1/6. <!-- raw HTML omitted --></p>
<p>驾校老板不为自己谋利益，还这么热心地帮考官张罗，真的难得的好人。 <!-- raw HTML omitted --></p>
<h3 id="实用与教条"><!-- raw HTML omitted -->4.2<!-- raw HTML omitted --> 实用与教条</h3>
<p>换个角度想，可能开过车的人都能意识到，耗费最多时间的科目二真的对驾驶技术的提高不大，那为什么不能使用更实用的考察方式。 <!-- raw HTML omitted --></p>
<p>因为科目二这样教条，机械的考察方式，可以通过仪器进行量化考察，仪器在大部分情况下，作假难度会高很多。 <!-- raw HTML omitted --></p>
<p>但如果使用实用的考察方式，只能使用人来主观考察，如何避免以权谋私呢？避免出现在我身上的事，发生在其他人身上。 <!-- raw HTML omitted --></p>
<p>考生能否检举这样的行为呢？ <!-- raw HTML omitted --></p>
<p>如何避免考生得到保护，不受到来自驾校和考官的打压呢？ <!-- raw HTML omitted --></p>
<p>我只知道，在加拿大，驾照考试是不需要驾校的，你有选择的自由和权利，但是考试本身不与驾校挂钩。 <!-- raw HTML omitted --></p>
<p>考试费用也是固定的。 <!-- raw HTML omitted --></p>
<p>如果有考官向我提这样的要求，我可以去驾考机构投诉，他有大概率会丢失工作。 <!-- raw HTML omitted --></p>
<p>而我既有权力选择更换考官，也可以自由更换考点。 <!-- raw HTML omitted --></p>
<h2 id="后话"><!-- raw HTML omitted -->5<!-- raw HTML omitted --> 后话</h2>
<p>虽然花费3个月重新考个驾照相当费时间，但是期间的过程还是很有收获的，我也思考过规则背后的设计思路。 <!-- raw HTML omitted --></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>TamperMonkey userscript在 Single Page Application 跳转链接后不运行问题分析</title>
      <link>https://ramsayleung.github.io/zh/post/2023/tampermonkey_userscript_not_invokved_in_spa/</link>
      <pubDate>Sat, 26 Aug 2023 09:29:00 -0700</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2023/tampermonkey_userscript_not_invokved_in_spa/</guid>
      <description>1 背景 我习惯使用浏览器匿名模式来打开 Youtube 视频，避免 Youtube 的推荐算法给我总是推荐同一类的视频。 但有个问题: 匿名模式下，Youtube的播放器是默认自</description>
      <content:encoded><![CDATA[<h2 id="背景"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> 背景</h2>
<p>我习惯使用浏览器匿名模式来打开 Youtube 视频，避免 Youtube 的推荐算法给我总是推荐同一类的视频。 <!-- raw HTML omitted --></p>
<p>但有个问题: 匿名模式下，Youtube的播放器是默认自动播放的。 <!-- raw HTML omitted --></p>
<p>虽然我可以登录 Google 账号并关闭自动播放，但是每次我使用匿名模式来浏览，关闭窗口之后，所有的操作记录都会被清除了，自动播放设置也不会被保存。 <!-- raw HTML omitted --></p>
<p>所以我使用 TamperMonkey 给 Youtube写了一个关闭自动播放的脚本，打开 Youtube 播放器时，把自动播放按钮给关闭掉，避免我使用浏览器的匿名窗口打开 Youtube 之后，Youtube自动播放导致一直有声音。 <!-- raw HTML omitted --></p>
<p>脚本逻辑很简单： <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// ==UserScript==
</span></span></span><span class="line"><span class="cl"><span class="c1">// @name         Disable YouTube Autoplay
</span></span></span><span class="line"><span class="cl"><span class="c1">// @namespace    http://tampermonkey.net/
</span></span></span><span class="line"><span class="cl"><span class="c1">// @version      0.1
</span></span></span><span class="line"><span class="cl"><span class="c1">// @description  Automatically turn off YouTube autoplay
</span></span></span><span class="line"><span class="cl"><span class="c1">// @author       ramsayliang
</span></span></span><span class="line"><span class="cl"><span class="c1">// @match        https://*.youtube.com/*
</span></span></span><span class="line"><span class="cl"><span class="c1">// @grant        none
</span></span></span><span class="line"><span class="cl"><span class="c1">// @icon         https://www.youtube.com/favicon.ico
</span></span></span><span class="line"><span class="cl"><span class="c1">// ==/UserScript==
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Function to disable autoplay
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">function</span> <span class="nx">disableAutoplay</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;disableAutoplay&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="kr">const</span> <span class="nx">autoplayToggle</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;div[class=&#34;ytp-autonav-toggle-button&#34;]&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nx">autoplayToggle</span> <span class="o">&amp;&amp;</span> <span class="nx">autoplayToggle</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s1">&#39;aria-checked&#39;</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;true&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">autoplayToggle</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Disable YouTube Autoplay&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Before loading&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Run the function when the page loads
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;load&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Wait for a short delay to ensure the page fully loads
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// setTimeout(disableAutoplay, 8000);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Loading page..&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nx">disableAutoplay</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span> <span class="kc">false</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})();</span>
</span></span></code></pre></div><h2 id="问题"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> 问题</h2>
<p>但是我发现这个脚本时灵不灵，甚至有一天晚上，睡着之后被自动播放的声音吵醒了。 <!-- raw HTML omitted --></p>
<p>我就在找能稳定复现这个问题的场景，花费半个小时，终于能稳定复现问题了。 <!-- raw HTML omitted --></p>
<ol>
<li>打开 Chrome 的匿名模式 <!-- raw HTML omitted --></li>
<li>打开 Youtube 首页, 地址是: youtube.com, 脚本运行. <!-- raw HTML omitted --></li>
<li>随意点击一个视频，进行播放：<a href="https://www.youtube.com/watch?v=-pKGaxoVhok">https://www.youtube.com/watch?v=-pKGaxoVhok</a> ，脚本就不会运行了。 <!-- raw HTML omitted --></li>
<li>如果我在视频播放页刷新，脚本又会重新运行。 <!-- raw HTML omitted --></li>
</ol>
<p>但分析了1个小时，都没有找到原因，我甚至怀疑是 Tampermonkey 有Bug(虽然主观感觉这个可能性较小) <!-- raw HTML omitted --></p>
<h2 id="分析"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> 分析</h2>
<p>结合 Tampermonkey 的表现，我觉得可能是 Tampermonkey 的执行机制有问题，可能是判断 youtube.com 和 youtube.com/watch?v=xxxx 是同一个页面，就不会运行两次。 <!-- raw HTML omitted --></p>
<p>在Stackoverflow上搜索了一下，发现果然如此： <!-- raw HTML omitted --></p>
<ul>
<li><a href="https://stackoverflow.com/questions/65017670/tampermonkey-match-not-working-when-visit-target-link-through-redirection">https://stackoverflow.com/questions/65017670/tampermonkey-match-not-working-when-visit-target-link-through-redirection</a> <!-- raw HTML omitted --></li>
</ul>
<p>原来这个是feature, 不是bug. <!-- raw HTML omitted --></p>
<p>对于 Single Page Application, Tampermonkey 无法判断页面的 DOM 是否发生变化，是否访问到新的页面了，所以不会重复执行。 <!-- raw HTML omitted --></p>
<p>分析下来，之前脚本能直接生效的原因是, 我在Chrome正常模式下打开 Youtube 首页, 右键对想要看的视频，点击&quot;Open link in incognito window&quot;, 因为页面是首次打开，所以就能正常运行。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/youtube_open_link_in_incognito_window.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>但当通过Chrome 匿名模式打开 Youtube 首页，然后再点击视频播放，无法运行脚本。 <!-- raw HTML omitted --></p>
<p>因为在打开首页的时候，脚本已经运行过了，当点击跳转到指定的视频时，且 Youtube 是个 Single Page Application, 对脚本来说，页面就没有发生过变化，所以不会再运行。 <!-- raw HTML omitted --></p>
<p>如果手动刷新，页面重新加载，脚本就又会被加载。 <!-- raw HTML omitted --></p>
<h2 id="解决方案"><!-- raw HTML omitted -->4<!-- raw HTML omitted --> 解决方案</h2>
<p>最后通过 <a href="https://stackoverflow.com/a/39508954">Stackoverflow</a> 的建议，增加一个对 DOM 事件变化的监听来解决： <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">// https://stackoverflow.com/questions/2844565/is-there-a-javascript-jquery-dom-change-listener/39508954#39508954
</span></span></span><span class="line"><span class="cl"><span class="c1">// Detect the url change for programmatic navigation
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">lastUrl</span> <span class="o">=</span> <span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">new</span> <span class="nx">MutationObserver</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">url</span> <span class="o">!==</span> <span class="nx">lastUrl</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">lastUrl</span> <span class="o">=</span> <span class="nx">url</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">onUrlChange</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}).</span><span class="nx">observe</span><span class="p">(</span><span class="nb">document</span><span class="p">,</span> <span class="p">{</span><span class="nx">subtree</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">childList</span><span class="o">:</span> <span class="kc">true</span><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// callback when url change
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">function</span> <span class="nx">onUrlChange</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;URL changed!&#39;</span><span class="p">,</span> <span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="nx">isYouTubeVideoURL</span><span class="p">(</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">)){</span>
</span></span><span class="line"><span class="cl">        <span class="nx">disableAutoplay</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>这样就可以正常运行了。 <!-- raw HTML omitted --></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>闲话罗马：国王是选举出来的</title>
      <link>https://ramsayleung.github.io/zh/post/2023/%E5%9B%BD%E7%8E%8B%E6%98%AF%E9%80%89%E4%B8%BE%E5%87%BA%E6%9D%A5%E7%9A%84/</link>
      <pubDate>Fri, 21 Jul 2023 21:38:00 -0700</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2023/%E5%9B%BD%E7%8E%8B%E6%98%AF%E9%80%89%E4%B8%BE%E5%87%BA%E6%9D%A5%E7%9A%84/</guid>
      <description>1 引子 年少的时候，很喜欢看历史书，倒不是因为「以史为鉴，可以明得失」发人深省的思考，单纯是因为手头没有太多打发时间的活动（那时还没有太多的电</description>
      <content:encoded><![CDATA[<h2 id="引子"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> 引子</h2>
<p>年少的时候，很喜欢看历史书，倒不是因为「以史为鉴，可以明得失」发人深省的思考，单纯是因为手头没有太多打发时间的活动（那时还没有太多的电脑游戏和视频），而少年人最多的就是时间。 <!-- raw HTML omitted --></p>
<p>历史书里面有光怪陆离，跌宕起伏的故事，那时的我自然很容易被吸引进去。 <!-- raw HTML omitted --></p>
<p>上中学的时候，特别喜欢看三国，喜欢武将决斗，谋士运筹的故事。 <!-- raw HTML omitted --></p>
<p>再后来，随着网络小说的兴起，兼之三国的历史已经烂熟于心，没有太多的新意，就开始看各种的架空，穿越三国的网络小说。 <!-- raw HTML omitted --></p>
<p>比如：《重生三国之xx》，《xx三国》等等，后来又因为《明朝那些事儿》的爆红，开始看明史。 <!-- raw HTML omitted --></p>
<p>工作之后，出于历史的兴趣，就开始摆脱通史类的故事书，阅读一些偏学术类的历史著作。 <!-- raw HTML omitted --></p>
<p>只是在截止到这个时候，阅读的都是中国历朝历代的历史，毕竟外国人的历史有什么好读的，地名和人名这么难记。 <!-- raw HTML omitted --></p>
<p>大概在三年多前，阅读一本英语学习书籍(《Word Power Made Easy》，这也是本神书，后面我一定要好好聊聊)的时候， <!-- raw HTML omitted --></p>
<p>该书中提到，古希腊和古罗马是现代欧美文明的精神来源，相关的传统，法律或者是宗教， <!-- raw HTML omitted -->
都可以从这两个古代文明找到参照物，约70%的英语单词就是衍生自古希腊语或者罗马人用的拉丁语。 <!-- raw HTML omitted --></p>
<p>何况古罗马历经共和国及帝国时代，历经1300年不倒。 <!-- raw HTML omitted --></p>
<p>对比之下，中国的朝代大多是三百年，为什么古罗马就能走出这样的历史周期律，延续千年呢？ <!-- raw HTML omitted --></p>
<p>巅峰时期，甚至将地中海变成罗马人「自己的内海」，成为一个横跨欧亚非的帝国。 <!-- raw HTML omitted --></p>
<p>想必自有其独到之处。 <!-- raw HTML omitted --></p>
<p>吃了那么久的中国菜，去尝试下西餐也不错嘛，说不定还能吃出新意呢。 <!-- raw HTML omitted --></p>
<h2 id="罗马建国"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> 罗马建国</h2>
<p>公元前八世纪，传说罗马第一任国王罗穆路斯和双胞胎弟弟瑞摩斯出生后即被装到一个桶里，和唐僧一样，被投到河里遗弃。 <!-- raw HTML omitted --></p>
<p>木桶顺流而下，婴儿在桶里大声哭闹，引来了附近正在徘徊的一匹母狼。 <!-- raw HTML omitted --></p>
<p>这匹母狼没有把这两个婴儿当作午餐，反而将乳头塞进了两个婴儿的嘴里，把他们从死亡线上拉了回来。 <!-- raw HTML omitted --></p>
<p>婴儿由母狼抚养长大的故事显然过于玄幻，所以母狼在喂抱两个幼儿之后就离开了，是一个羊倌发现他们并把他们带回家了。 <!-- raw HTML omitted --></p>
<p>所以在罗马，都有各种各样母狼喂养罗穆路斯和瑞摩斯的塑像： <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/Capitoline_she-wolf_Musei_Capitolini_MC1181.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>甚至意甲球队罗马（就是现在穆里尼奥执教的那支球队）的队徽也是母狼喂养罗穆路斯和瑞摩斯图: <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/AS_Roma_logo.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>在罗穆路斯18岁的时候，他和3000名追随他的拉丁人，以他自己的名字(Romulus)，在台伯河下游平原的七座小山丘上建立了罗马国（Roma，或者叫罗马城）： <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/300px-Die_sieben_H%c3%bcgel_Roms.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>为什么3000人就能建国？，这个没有什么硬性标准的嘛，只要实力够，自然可以自封为王。 <!-- raw HTML omitted --></p>
<p>所以也难怪曹操会说，设使天下无有孤，不知当有几人称王，几人称帝（串台了） <!-- raw HTML omitted --></p>
<h2 id="国政"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> 国政</h2>
<p>罗穆路斯建国之后，作为开国之王，却没有独揽大权，他把国政分成三个机构，分别是国王，元老院和市民大会。 <!-- raw HTML omitted --></p>
<p>国王作为宗教祭祀，军事和政治的最高领导人，由市民大会投票选举产生。 <!-- raw HTML omitted --></p>
<p>罗穆路斯认为，如果没有市民大会选举，自封的王不具有执政基础。 <!-- raw HTML omitted --></p>
<p>（只能说东西方的执政想法真的不一样，尧舜禹禅让，都被儒家夸了两千年。而罗马的权力竟然不是世袭的） <!-- raw HTML omitted --></p>
<p>罗穆路斯召集100位部族长老，设立元老院，他们的职责是为国王提忠告和建议，所以不需要通过市民大会的选举。 <!-- raw HTML omitted --></p>
<p>元老院的拉丁语是：Senātus，也是众多英语单词的词根，比如年长者(senior), 或者美国的参议院(senate), 都是元老院的衍生词。 <!-- raw HTML omitted --></p>
<p>市民大会由全体罗马市民组成，它的任务是选出以国王为首的各级政府官员。 <!-- raw HTML omitted --></p>
<p>（政府官员究竟不是国王或者上级官员指派的，无知的我又吃了一惊。） <!-- raw HTML omitted --></p>
<p>市民大会没有制定政策的权力，但是对国王听取元老院的建议后制定出来的政策有赞成或反对的表决权。 <!-- raw HTML omitted --></p>
<p>此外，在对外关系上，是战是和，也必须征得他们的同意才可实施。 <!-- raw HTML omitted --></p>
<p>当时的罗马国规模还不大，所以还能由全体罗马市民组成市民大会，不知道市民人数多了之后，市民大会又会如何发展呢？ <!-- raw HTML omitted --></p>
<h2 id="总结"><!-- raw HTML omitted -->4<!-- raw HTML omitted --> 总结</h2>
<p>原来十八世纪法国启蒙思想家孟德斯鸠的三权分立理念，在公元前八世纪的罗马城就能找到雏形。 <!-- raw HTML omitted --></p>
<p>这顿西餐，看来是越来越有趣了。 <!-- raw HTML omitted --></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>黑客列传：强得抠脚的教主RMS</title>
      <link>https://ramsayleung.github.io/zh/post/2023/%E5%BC%BA%E5%BE%97%E6%8A%A0%E8%84%9A%E7%9A%84%E6%95%99%E4%B8%BBrms/</link>
      <pubDate>Sun, 16 Jul 2023 22:58:00 -0700</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2023/%E5%BC%BA%E5%BE%97%E6%8A%A0%E8%84%9A%E7%9A%84%E6%95%99%E4%B8%BBrms/</guid>
      <description>1 前言 前段时间流行一种关于程序员效率的说法，叫「10x程序员」，即一个好的程序员的工作效率是普通程序员的10倍。 但是，在编程界，有这么一群人</description>
      <content:encoded><![CDATA[<h2 id="前言"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> 前言</h2>
<p>前段时间流行一种关于程序员效率的说法，叫「10x程序员」，即一个好的程序员的工作效率是普通程序员的10倍。 <!-- raw HTML omitted --></p>
<p>但是，在编程界，有这么一群人，他们的工作效率，可以说是百倍，甚至千倍于普通程序员； <!-- raw HTML omitted --></p>
<p>更令人叹服的是，他们创造了普通程序员即使百倍努力也无法写出的作品。 <!-- raw HTML omitted --></p>
<p>使用「程序员」这个职业来称呼他们，未免流于平凡，无法展现出他们竖立起的丰碑；而使用「计算机科学家」，又未免过于学术，不接地气； <!-- raw HTML omitted --></p>
<p>那么，就回到最初，用「黑客(hacker)」这个称谓来称呼他们吧。 <!-- raw HTML omitted --></p>
<h2 id="关于黑客"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> 关于黑客</h2>
<p>可能大家对「黑客 (hacker)」的印象多来自于电影，比如《黑客帝国》，就是那种在电脑面前，使用各种看不懂的工具入侵别人电脑的人。 <!-- raw HTML omitted --></p>
<p>但是这种看法大多是对于「黑客」的误解，称之为「骇客(cracker)」可能更加合适，即恶意入侵他人电脑的人。 <!-- raw HTML omitted --></p>
<p><code>hacker</code> 一词又是从 <code>hacking</code> 衍生而来的，将 <code>hacking</code> 翻译成成中文网络语中的「整，搞，开干」可能会更贴切，  而最初的「黑客」指的就是一群富有创造力和兴趣的爱好者，只是比较具有代表性的是在计算机领域。 <!-- raw HTML omitted --></p>
<p>国外有个很有名的科技相关的聚合网站，叫做「Hacker News」, 其中的「Hacker」, 也是沿用黑客最初的含义。 <!-- raw HTML omitted --></p>
<p>既然提到黑客，那么有一个无法绕过去的人物，那就是今天的主角，黑客文化的领军人物：Richard Stallman <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/rms_avatar.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<h2 id="unix"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> UNIX</h2>
<h3 id="分时系统"><!-- raw HTML omitted -->3.1<!-- raw HTML omitted --> 分时系统</h3>
<p>相信今天的我们，对操作系统这个概念不会陌生，在电脑上有 Windows 10, Windows 11, Windows 7 或者苹果的 MacOS操作系统，在手机上有 Android 和 IOS操作系统。 <!-- raw HTML omitted --></p>
<p>所谓的操作系统，即是一套管理硬件，发挥硬件性能的软件，避免应用程序直接和硬件打交道，省去普通程序员大量的开发成本和心智。 <!-- raw HTML omitted --></p>
<p>与今天直接在手机操作系统上，一边聊微信，一边放音乐不同，远古时候(二十世纪六十年代)的操作系统只支持批处理模式： <!-- raw HTML omitted --></p>
<p>即用户同时提交多个任务，任务1运行完才能运行任务2，相当于你只能把音乐听完，然后关掉音乐软件，然后才能打开微信，发送聊天消息。 <!-- raw HTML omitted -->
（请忽略远古时代还没有微信这个问题） <!-- raw HTML omitted --></p>
<p>你可能会想，这也太挫了吧。 <!-- raw HTML omitted --></p>
<p>没错，当时的计算机科学家也这么认为的。 <!-- raw HTML omitted --></p>
<p>因此1964年，通用电气和麻省理工大学就打算合作开发一个多任务操作系统，支持多个用户，运行多个任务，名为 <code>MULTICS</code> <!-- raw HTML omitted --></p>
<p>后来，AT&amp;T公司的贝尔实验室也加入到这个操作系统的研发中，但是项目目标过于庞大，特性太多，性能又很低, AT&amp;T见项目前景不妙，就把资源都撤了，退出了这个项目。 <!-- raw HTML omitted --></p>
<h3 id="玩游戏玩出来的unix"><!-- raw HTML omitted -->3.2<!-- raw HTML omitted --> 玩游戏玩出来的UNIX</h3>
<p>贝尔实验室的一位工程师，名叫Ken Thompson, 刚加入 MULTICS 项目不久，公司就准备退出了，但是通用公司为了项目而准备的机器 GE-645 就还保留在贝尔实验室，Ken 就打算用这些机器写个太空旅行的游戏。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/ge-645.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>然而，Ken 写出来的游戏跑得很慢，每次运行还要75美刀，更难受的是，GE-645 这批机器，不久后就被搬回去通用公司了。 <!-- raw HTML omitted --></p>
<p>所以Ken 只好在实验室角落找了几台没人用的PDP-7, 在同事 Dennis Ritchie 的帮助下，再重写了一次游戏。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/pdp-7.jpeg"/> 
</figure>
  <!-- raw HTML omitted --></p>
<p>这次的游戏开发经历，加上之前的 MULTICS 项目经验，让Ken 开始研究如何使用 PDP-7 开发一个分时多任务操作系统。 <!-- raw HTML omitted --></p>
<p>然后他花费了一年的时间，和 Dennis 一起，在PDP-7上开发了一个分时多任务系统，名为UnICS，这就是第一版的 UNIX。 <!-- raw HTML omitted --></p>
<p>因为PDP-7的性能不佳，最多支持两个用户, Ken 和 Dennis 又把第一版的 UNIX迁移到 PDP-11上，为了方便迁移，还顺便发明了一门编程语言，名为 C语言，并将UnICS 改名为 UNIX. <!-- raw HTML omitted --></p>
<p>(这两位也是神) <!-- raw HTML omitted --></p>
<p>影响后世无数操作系统的 UNIX 操作系统就此诞生，并迅速风靡各大研究机构，政府机关，企业与大学，成为70-80年代，操作系统事实上的标准 <!-- raw HTML omitted --></p>
<h3 id="商业版本与闭源"><!-- raw HTML omitted -->3.3<!-- raw HTML omitted --> 商业版本与闭源</h3>
<p>原来的软件只是买硬件时的赠品，到七十年代未，人们开始发现，原来软件也可以卖钱，很快，制作与销售商业软件成为一门热门生意。 <!-- raw HTML omitted --></p>
<p>最开始的UNIX 版本是开放源代码供使用者的，也就是使用者不但可以安装 UNIX 系统，还可以阅读，并修改UNIX 系统的源代码。 <!-- raw HTML omitted --></p>
<p>但是贝尔实验室的母公司 AT&amp;T毕竟是商业公司，把自己的源代码授权出去，后面还怎么赚钱呢？ <!-- raw HTML omitted --></p>
<p>所以在20世纪80年代相继发布的UNIX 商业版本，只发行二进制，不再包含源代码。 <!-- raw HTML omitted --></p>
<p>对于黑客来说，就是你能看到这个操作系统是怎么跑的，但是你再也无法知道他是怎么实现的了。 <!-- raw HTML omitted --></p>
<h2 id="rms"><!-- raw HTML omitted -->4<!-- raw HTML omitted --> RMS</h2>
<p>Richard Matthew Stallman, 1953年出生于纽约的一个犹太家庭, 1974年毕业于哈佛大学，1975年在 MIT 攻读博士，后来退学在 MIT AI 实验室写代码。 <!-- raw HTML omitted --></p>
<p>他的名字首字母为 RMS, 早期在黑客社区混的时候，以 RMS为用户名，所以大家都叫他 RMS(后面就以RMS来称呼他了). <!-- raw HTML omitted --></p>
<p>当时的「黑客文化」崇尚开放，分享与交流，认为分享才能促进社会进步，在这样的文化熏陶下，RMS 自然对闭源软件痛恨不已。 <!-- raw HTML omitted --></p>
<p>1980年，还在 MIT AI 实验室工作的时候，因为激光打印机和大部分工作人员都不在同一层楼，总是跑上跑下去查看打印结果和进度就很麻烦。 <!-- raw HTML omitted --></p>
<p>RMS 就给实验室的激光打印机写了一个程序： <!-- raw HTML omitted --></p>
<p>可以在打印任务完成时，发消息通知用户；或者当打印任务卡住的时候，也发消息通知用户； <!-- raw HTML omitted --></p>
<p>然而，因为最新版本的打印机源码不再开放，RMS写的程序就无法再适配，让他相当恼火。 <!-- raw HTML omitted --></p>
<p>以小见大，整个软件行业都在发生变化，甚至连UNIX 这样的基石软件都开始不再开放源代码授权，RMS感觉，他要站出来做些什么了。 <!-- raw HTML omitted --></p>
<h2 id="gnu"><!-- raw HTML omitted -->5<!-- raw HTML omitted --> GNU</h2>
<h3 id="荜路蓝缕"><!-- raw HTML omitted -->5.1<!-- raw HTML omitted --> 荜路蓝缕</h3>
<p>在1983年, RMS 宣布了GNU 操作系统计划，计划开发出一个兼容 Unix的源码开放的操作系统，让 Unix用户可以无缝切换到 GNU 操作系统上. <!-- raw HTML omitted --></p>
<p>GNU 就是 &ldquo;GNU is Not Unix&quot;的缩写(那开头的GNU又是什么意思呢? 按照程序员的行话来说，这个叫递归) <!-- raw HTML omitted --></p>
<p>经过十多年的发展，Unix 已经成为操作系统事实上的标准，重新开发一个新的操作系统几近天方夜谭。 <!-- raw HTML omitted --></p>
<p>想象一下，有人跟你说要开发一个 Android 操作系统，用来替换掉 Google 的Android 系统，这工作量和难度可想而知，这就是现实中的想要移山的愚公，大战风车的堂吉诃德。 <!-- raw HTML omitted --></p>
<p>但是 RMS 并未被眼前的困难所吓退，而是一步一步，从0开始构建他心中的类Unix操作系统. <!-- raw HTML omitted --></p>
<p>1984年, RMS 开发并发布GNU Emacs 这个著名的文本编辑器, 方便程序员进行代码开发; <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/gnu_emacs.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>1986年, RMS 开发并发布GNU Debugger(gdb) 调试器, 方便程序员来调试程序; Emacs + gdb 就是他那个时代的IDE <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/gdb_screenshot.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>1987年, RMS 开发并发布GNU Compiler Collection(gcc) 编译器套件; 所谓的编译器，即将人写的代码，转换成机器可以运行的二进制代码。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/gcc_logo.svg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>开发出一个这样的软件就足以在计算机史上留名，RMS 在这3年间，还一口气开发出了3个，这样的技术水平和生产效率，只能让人叹服，影响力堪比盗火的普罗米修斯。 <!-- raw HTML omitted --></p>
<p>何况这些软件至今仍在迭代，被无数程序员所依赖，所使用。 <!-- raw HTML omitted --></p>
<p>比如微信的所有后台代码，都是使用GCC 编译出来的，也就是你现在也在间接使用着 RMS 当初编写的软件。 <!-- raw HTML omitted --></p>
<p>近40年过去了，市面上被广泛使用的C/C++编译器就只有三个: 微软家的 MSVC, 苹果支持开发的 Clang, 还有GNU 项目的 GCC. <!-- raw HTML omitted --></p>
<p>除此之外，GNU 项目还开发了许多的基础设施，如GNU make, GNU grep, bash，以及志在替换掉 PS的 GIMP 等等. <!-- raw HTML omitted --></p>
<p>除了基础设施外，GNU项目还希望类似通过美国宪法保证言论自由一样，通过法律和版权，确保软件开放源代码。 <!-- raw HTML omitted --></p>
<p>因此, 在1989年, RMS 发布了 GNU General Public License(GPL)授权, 主要内容是: 用户可以自由使用，复制，修改GPL软件, 派生的软件也必须使用GPL, 不能转换成闭源软件. <!-- raw HTML omitted --></p>
<p>从法律层面保证了GPL软件不会被有心人直接拿去闭源赚钱。 <!-- raw HTML omitted --></p>
<p>此外, RMS 还将自由软件发展成社会运动，将软件开发这个程序员小圈子的活动，成为扩展到整个社会的思想运动。 <!-- raw HTML omitted --></p>
<p>在人类没有进化到「无私」的精神境界前（可能永远都达不到），通过GPL法律条款来保证「自由」的权利， <!-- raw HTML omitted -->
不得不说是一种创举，从而让世界上每个人都有机会享受到软件发展所带来的好处。 <!-- raw HTML omitted --></p>
<h3 id="开花结果"><!-- raw HTML omitted -->5.2<!-- raw HTML omitted --> 开花结果</h3>
<p>时间来到90年代, 经过近10年的耕耘, 在基础组件和配套设施相继完善之后，GNU 项目终于来到最关键的节点，开发出可以替换Unix 系统的内核(kernel). <!-- raw HTML omitted --></p>
<p>如果电脑硬件来比喻操作系统的话，就是内存，硬盘，主板，显示器，电源全部都就绪，就差最后的CPU, 画龙最后的点睛. <!-- raw HTML omitted --></p>
<p>但是GNU 的内核 Hurd 却迟迟未能发布, 而天下可谓苦闭源 Unix 久矣。 <!-- raw HTML omitted --></p>
<p>在1991年, 一个叫Linus的芬兰学生在社区上发布了他自己的业余项目：一个类Unix 的操作系统内核。 <!-- raw HTML omitted --></p>
<p>他把GNU 项目的相关组件(bash和gcc)移植到这个系统，也能正常运行起来了, 这个系统就是Linux(完整的名称应该是 GNU/Linux) <!-- raw HTML omitted --></p>
<p>自此, GNU 项目的最后一块拼图完整了, 十年磨一剑, GNU的基础组件加 Linus 的Linux内核, 一个志在替换 Unix 的操作系统终于完成了, 这就是 GNU/Linux. <!-- raw HTML omitted --></p>
<p>苦Unix久矣的社区的开发者云集而来，为 GNU/Linux 添砖加瓦, 让GNU/Linux 成为今天的参天大树(连微软家的服务器也在运行 Linux) <!-- raw HTML omitted --></p>
<p>&mdash; <!-- raw HTML omitted --></p>
<p>只见新人笑，哪闻旧人哭. <!-- raw HTML omitted --></p>
<p>有点离谱的是, GNU Hurd 已经开发超过30年了，还没有发布1.0(稳定可用版本). <!-- raw HTML omitted --></p>
<p>更离谱的是，最近还有更新: <!-- raw HTML omitted --></p>
<p>2023年6月份，还发布了2023年 <a href="https://lists.gnu.org/archive/html/bug-hurd/2023-06/msg00038.html">版本更新</a>: <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/gnu_hurd_2023_release.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<h2 id="轶事"><!-- raw HTML omitted -->6<!-- raw HTML omitted --> 轶事</h2>
<h3 id="教主"><!-- raw HTML omitted -->6.1<!-- raw HTML omitted --> 教主</h3>
<p>为什么称RMS 为教主呢？ <!-- raw HTML omitted --></p>
<p>因为RMS 创建了 Emacs 这个神的编辑器，自其诞生以来，与编辑器之神 Vi/Vim 的圣战就从未停息。 <!-- raw HTML omitted --></p>
<p>使用Emacs 的程序员与使用Vi/Vim 的程序员，一直在争论，究竟哪个才是更好的编辑器？ <!-- raw HTML omitted --></p>
<p>既然 RMS 是Emacs 的创始人，自然被使用 Emacs的人尊称为「教主」。 <!-- raw HTML omitted --></p>
<p>而这场争论已经持续近四十年，依旧没有分出胜负。 <!-- raw HTML omitted --></p>
<p>像 Google 这样浓眉大眼的家伙，还在不时地给这场战争拱火: <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/google_emacs.png"/> 
</figure>
  <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/google_vi.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<h3 id="教主与教主"><!-- raw HTML omitted -->6.2<!-- raw HTML omitted --> 教主与教主</h3>
<p>乔布斯被「果迷」尊称为「教主」，大家可能不知道的是，这两位「教主」曾经有过一场交锋。 <!-- raw HTML omitted --></p>
<p>1993年, 当时乔布斯还在 NeXT公司, 买下了 <code>Objective-C</code> 语言来开发应用程序(后来的IOS用的也是 <code>Objective-C</code>), 使用的编译器也是 GCC. <!-- raw HTML omitted --></p>
<p>NeXT 修改了 GCC的源码，以便增加对 <code>Objective-C</code> 的支持，而GCC 使用的又是GPL 授权，而根据GPL 的授权，任何对GPL软件的修改，也必须要开放源代码。 <!-- raw HTML omitted --></p>
<p>所以乔布斯就问RMS, 他能否把 GCC 拆分成两部分，一部分是原来GCC, 继续开放源代码；另外一部分是增加 <code>Objective-C</code> 的GCC 编译器前端，闭源收费商用。 <!-- raw HTML omitted --></p>
<p>RMS 回复，当然是不可以。我估计老爷子心想，防的就是你这种人。 <!-- raw HTML omitted --></p>
<p>乔布斯只好将 <code>Objective-C</code> 编译器的前端也以GPL 授权开放出源代码。 <!-- raw HTML omitted --></p>
<p>&mdash; <!-- raw HTML omitted --></p>
<p>若干年后，苹果计划开发自己的编译器，因为设计以及授权的原因，在谋求与 GCC的合作未果后，转而支持 LLVM 的clang, 那也是后话了. <!-- raw HTML omitted --></p>
<h3 id="中国芯"><!-- raw HTML omitted -->6.3<!-- raw HTML omitted --> 中国芯</h3>
<p>根据 RMS <a href="https://usesthis.com/interviews/richard.stallman/">自述</a>, 他之前用的一直是中国科学院设计的龙芯处理器的龙梦电脑, 虽然这台电脑的性能，显示尺寸(只有9英寸)都无法让RMS 满意，但是这台电脑的是完全自由的，包括硬件, bios, 软件: <!-- raw HTML omitted --></p>
<blockquote>
<p>What hardware do you use? <!-- raw HTML omitted --></p>
<p>I am using a Lemote Yeelong, a netbook with a Loongson chip and a 9-inch display. This is my only computer, and I use it all the time. I chose it because I can run it with 100% free software even at the BIOS level. <!-- raw HTML omitted --></p>
</blockquote>
<p>在性能和自由之间，他一如既往地选择了「自由」 <!-- raw HTML omitted --></p>
<p>根据RMS <a href="https://stallman.org/intel.html">官网的描述</a>, 他不用intel 或者 amd 的芯片，是因为他们都有后门: <!-- raw HTML omitted --></p>
<blockquote>
<p>Reasons not to use Intel <!-- raw HTML omitted --></p>
<p>Don&rsquo;t use Intel processors newer than Core2, because they have the &ldquo;management engine&rdquo; back door. <!-- raw HTML omitted --></p>
<p>Recent AMD processors have a similar problem, but we do not yet have an article about it. <!-- raw HTML omitted --></p>
</blockquote>
<p>不过，据闻他的龙梦电脑被偷了之后，他也就换到 <a href="https://stallman.org/stallman-computing.html">ThinkPad 上了</a>: <!-- raw HTML omitted --></p>
<blockquote>
<p>As of 2022 I use a Thinkpad x200 computer, which has a free initialization program (Libreboot) and a free operating system (Trisquel GNU/Linux). <!-- raw HTML omitted --></p>
</blockquote>
<h3 id="抠脚"><!-- raw HTML omitted -->6.4<!-- raw HTML omitted --> 抠脚</h3>
<p>菜的抠脚就听说过，强得抠脚又是什么呢？ <!-- raw HTML omitted --></p>
<p>因为他真的抠脚（字面意思），还吃回去了。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/koujiao_1.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/koujiao2.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<h2 id="总结"><!-- raw HTML omitted -->7<!-- raw HTML omitted --> 总结</h2>
<p>他是天才黑客，是自由软件的精神领袖，是知行合一的孤勇者，更是个凡人堆里的理想主义者. <!-- raw HTML omitted --></p>
<p>当然，还是我大 Emacs 神教的教主. <!-- raw HTML omitted --></p>
<h2 id="参考"><!-- raw HTML omitted -->8<!-- raw HTML omitted --> 参考</h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/GNU_Compiler_Collection">https://en.wikipedia.org/wiki/GNU_Compiler_Collection</a> <!-- raw HTML omitted --></li>
<li><a href="https://en.wikipedia.org/wiki/Richard_Stallman">https://en.wikipedia.org/wiki/Richard_Stallman</a> <!-- raw HTML omitted --></li>
<li><a href="https://en.wikipedia.org/wiki/GNU_Emacs">https://en.wikipedia.org/wiki/GNU_Emacs</a> <!-- raw HTML omitted --></li>
<li><a href="https://en.wikipedia.org/wiki/GNU_Debugger">https://en.wikipedia.org/wiki/GNU_Debugger</a> <!-- raw HTML omitted --></li>
<li><a href="https://stallman.org/">https://stallman.org/</a> <!-- raw HTML omitted --></li>
<li><a href="https://usesthis.com/interviews/richard.stallman/">https://usesthis.com/interviews/richard.stallman/</a> <!-- raw HTML omitted --></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>产品的快速试错与及早反馈</title>
      <link>https://ramsayleung.github.io/zh/post/2023/%E4%BA%A7%E5%93%81%E7%9A%84%E5%BF%AB%E9%80%9F%E8%AF%95%E9%94%99%E4%B8%8E%E5%8F%8A%E6%97%A9%E5%8F%8D%E9%A6%88/</link>
      <pubDate>Fri, 07 Jul 2023 15:06:00 -0700</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2023/%E4%BA%A7%E5%93%81%E7%9A%84%E5%BF%AB%E9%80%9F%E8%AF%95%E9%94%99%E4%B8%8E%E5%8F%8A%E6%97%A9%E5%8F%8D%E9%A6%88/</guid>
      <description>1 关于 Demo 昨天下班路上，和朋友闲聊的时候，想起了当年大学时候看过的《李开复自传》的一个故事。 当年李开复在卡内基梅隆大学的研究方向是语音识别，即</description>
      <content:encoded><![CDATA[<h2 id="关于-demo"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> 关于 Demo</h2>
<p>昨天下班路上，和朋友闲聊的时候，想起了当年大学时候看过的《李开复自传》的一个故事。 <!-- raw HTML omitted --></p>
<p>当年李开复在卡内基梅隆大学的研究方向是语音识别，即如何将人说的声音，转变成计算机可以识别的文字内容。 <!-- raw HTML omitted --></p>
<p>他的语音识别的研究成果还被《商业周刊》评选为「1988年最重要科学创新奖」。 <!-- raw HTML omitted --></p>
<p>但是令我印象深刻的并非是语音识别的成果，而是他导师教他的，如何向世人展示他的成果的市场营销手段： <!-- raw HTML omitted --></p>
<blockquote>
<p>1988 年 4 月，我受邀到纽约参加一年一度的世界语音学术会议，发表学术论 <!-- raw HTML omitted -->
文。赴会的一个月前，我的导师瑞迪教授又给我上了一课，但是不是学术方面，而 <!-- raw HTML omitted -->
是市场方面的。 <!-- raw HTML omitted --></p>
<p>他对我说：“学术演讲的 30 分钟，你只要讲 25 分钟就行了，最后 5 分钟你拿 <!-- raw HTML omitted -->
一个话筒传给观众，让他们自己试试，这个系统是不是真的。” <!-- raw HTML omitted --></p>
<p>我说：“但是，会场噪音很大，一定会打折扣，达不到 96％成功率，而且那么多日本 <!-- raw HTML omitted -->
学者，他们的口音我的系统可没听过。” <!-- raw HTML omitted --></p>
<p>老师说：“实际上你的识别率是 90％还是 96％，没有什么差别。我们这么做的 <!-- raw HTML omitted -->
目的，不是要监测你的识别率，而是要造成一个效果，让每个学者终生都会记得， <!-- raw HTML omitted -->
第一次接触不指定语者系统就是在纽约，在李开复的演讲上。” <!-- raw HTML omitted --></p>
</blockquote>
<p>在学术结果和演示效果的交互相映之下，李开复的研究成果撼动了整个学术领域，认为他的研究成果，建立起了人机沟通的桥梁。 <!-- raw HTML omitted --></p>
<p>纵然演示者的PPT美轮美奂，演讲舌灿莲花，带来的冲击，远不如用户亲身体验来得强烈。 <!-- raw HTML omitted --></p>
<h2 id="mvp与及早反馈"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> MVP与及早反馈</h2>
<p>无论是所谓的敏捷和精益迭代开发，都强调快速试错，快速反馈，开发最小可用的产品(minimial viable product, MVP)。 <!-- raw HTML omitted --></p>
<p>所谓的快速试错，及早反馈，就是把产品原型做出来，然后让用户进行体验，收集用户反馈，再根据用户的评价，进行后续的优化和调整。 <!-- raw HTML omitted --></p>
<p>这样的理念无缝是非常有价值的，可以避免花了好几年，大量人力物力，做了一个过时或者不受市场青睐的产品。 <!-- raw HTML omitted --></p>
<p>而其中的「用户」，并不一定指的是最终使用你产品的「用户」，你的产品经理，组长，总监都是你的用户。 <!-- raw HTML omitted --></p>
<p>他们才是能决定你的产品方向的人，所以在做完产品原型之后，应该尽快让他们尝试产品原型，可以及早得到反馈和修改建议。 <!-- raw HTML omitted --></p>
<p>在展示 Demo 的时候，也应该由他们亲身去尝试产品，观察他们作为新用户的使用习惯； <!-- raw HTML omitted -->
以此得到的反馈和惊喜，也会比工程师亲身演示来得更真实和贴切。 <!-- raw HTML omitted --></p>
<p>此外，正如《动物庄园》里面说「所有动物生而平等，但有些动物比其他动物更平等」。 <!-- raw HTML omitted --></p>
<p>每个用户的反馈和建议都应该被平等对待的，只是他们的意见比普通用户的更平等。 <!-- raw HTML omitted --></p>
<p>而从管理者的角度来说，管理者对员工抱有高信任度的终究在少数，即使每位员工起早贪黑地干活，写周报，日报；开晨会，周会汇报进度； <!-- raw HTML omitted --></p>
<p>管理者难免会有疑问，项目什么时候才能做完，他们是否有在认真干活？ <!-- raw HTML omitted --></p>
<p>可能会有管理者跳出来说，「哪有这样的想法？」。 <!-- raw HTML omitted --></p>
<p>但事实就是许多的管理措施，都体现出这种不信任。 <!-- raw HTML omitted --></p>
<p>而提供MVP供管理者体验就是不断地告知管理者项目的进度： <!-- raw HTML omitted --></p>
<p><strong><strong>项目正在从蓝图，变为现实。</strong></strong> <!-- raw HTML omitted --></p>
<h2 id="后话"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> 后话</h2>
<p>但，尽早反馈，快速试错，从来都不应该成为加班的借口或理由。 <!-- raw HTML omitted --></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>闲聊写作的好处</title>
      <link>https://ramsayleung.github.io/zh/post/2023/%E9%97%B2%E8%81%8A%E5%86%99%E4%BD%9C/</link>
      <pubDate>Sat, 01 Jul 2023 10:28:00 -0700</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2023/%E9%97%B2%E8%81%8A%E5%86%99%E4%BD%9C/</guid>
      <description>1 前言 之前写《软件工程师的软技能指北》系列的时候，就有个挺想聊的话题的，就是写作。 其实不只是对软件工程师而言，我觉得对于所有人而言，都应该尝</description>
      <content:encoded><![CDATA[<h2 id="前言"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> 前言</h2>
<p>之前写《<a href="https://ramsayleung.github.io/zh/post/2023/%E6%80%BB%E8%A7%88%E7%AF%87/">软件工程师的软技能指北</a>》系列的时候，就有个挺想聊的话题的，就是写作。 <!-- raw HTML omitted --></p>
<p>其实不只是对软件工程师而言，我觉得对于所有人而言，都应该尝试下写作。 <!-- raw HTML omitted --></p>
<p>所以今天就来闲聊下写作的好处。 <!-- raw HTML omitted --></p>
<h2 id="提升表达能力"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> 提升表达能力</h2>
<p>社会上，或者是网络上，都会有对软件工程师（俗称码农）的刻板印象：加班多，情商低，表达能力不行，不修边幅。 <!-- raw HTML omitted --></p>
<p>国内国外，基本如此。 <!-- raw HTML omitted --></p>
<p>我去办信用卡的时候，负责帮我办卡的银行工作人员就两次问我，你们是否就只需要一天对着电脑，敲键盘就可以了？ <!-- raw HTML omitted --></p>
<p>虽说这只是刻板印象，但是的确切中了部分要点（起码对于我个人而言）。 <!-- raw HTML omitted --></p>
<p>以表达能力为例，我理解的表达能力好，就是能简洁明了，逻辑清晰地把一件复杂的事情描述清楚。 <!-- raw HTML omitted --></p>
<p>逻辑太跳跃，或者思路不流畅，就很容易让人听得云里雾里。 <!-- raw HTML omitted --></p>
<p>而表达能力本身又非常重要，无论与家人沟通，同事合作或者晋升答辩，良好的表达能力都能事半功倍。 <!-- raw HTML omitted --></p>
<p>而写作就要求你把自己脑海中以网状交织的知识，以结构清晰的方式，呈现给读者，做到「娓娓道来」。 <!-- raw HTML omitted --></p>
<p>在这个过程中，你的文字表达能力能得到提升，口头表达能力也会得到提升。 <!-- raw HTML omitted --></p>
<p>因为两者是相通的，都要求头脑对需要表达的内容具有层次性和条理性，只是最终的输出手段有差别。 <!-- raw HTML omitted --></p>
<h2 id="加深理解"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> 加深理解</h2>
<p>在写作时，我总有种奇怪的感觉「这个东西我懂，但是我写不出来」。 <!-- raw HTML omitted --></p>
<p>其内在原因是，对于该领域的内容，「我懂，但不是完全理解，无法做到信手拈来。」 <!-- raw HTML omitted --></p>
<p>因为要给写一篇让人能读懂的文章，势必要从基本的概念开始讲起，然后层层递进， <!-- raw HTML omitted -->
如果你对该领域的知识体系理解不到位，就会出现卡壳，写不出来的情况。 <!-- raw HTML omitted --></p>
<p>写作过程就促使你回头重新学习，弥补薄弱之处，进而加深对整个体系的理解。 <!-- raw HTML omitted --></p>
<p>所以写作本身就是在践行最好的学习方法：《<a href="https://ramsayleung.github.io/zh/post/2022/feynman_technique/">费曼学习法</a>》。 <!-- raw HTML omitted --></p>
<p>只是从给小朋友讲解，变成了写作，向所有读者分享。 <!-- raw HTML omitted --></p>
<h2 id="促进内容传播"><!-- raw HTML omitted -->4<!-- raw HTML omitted --> 促进内容传播</h2>
<p>对比常见的沟通（如微信聊天，面对面交流等）和信息交流方式（音频，视频），文章拥有更好的传播优势。 <!-- raw HTML omitted --></p>
<p>如果你是面对面与人交流，或者微信聊天，你的交流方式是点对点的，只限于对面的人，你无法将信息广播给其他人； <!-- raw HTML omitted -->
而文章传播是点对面的，文章可以被复制，粘贴以及转发，自然拥有更广的受众。 <!-- raw HTML omitted --></p>
<p>又因为面对面交流，或者微信聊天是点对点的，所以你回答A的问题，可能也会被B问到，但是你却无法「复用」你的答案； <!-- raw HTML omitted -->
而文章是可被复用的，如果A和B看完文章，疑问自消。 <!-- raw HTML omitted --></p>
<p>而对比音频，视频等多媒体内容，文章的传播成本更低，可以直接被转发； <!-- raw HTML omitted -->
此外文章的阅读成本也比音频，视频更低，你可以检读，跳读，搜索文章内容，而视频只能从头看完，才能知道其究竟介绍了什么内容。 <!-- raw HTML omitted --></p>
<h2 id="建立影响力"><!-- raw HTML omitted -->5<!-- raw HTML omitted --> 建立影响力</h2>
<p>无论是有意还是无意，当你写的文章被阅读，被传播之后，你就在建立影响力。 <!-- raw HTML omitted --></p>
<p>如果需要建立影响力，可以通过演讲，制作B站或Youtube视频，或者写作来实现。所以会有这样的话： <!-- raw HTML omitted --></p>
<blockquote>
<p>如果你是个外向的人，你就去演讲和拍视频。 <!-- raw HTML omitted --></p>
<p>如果你是个内向的人，你就去写作。 <!-- raw HTML omitted --></p>
</blockquote>
<p>但从传播学的角度来说，演讲和视频的传播优势都不如文章。 <!-- raw HTML omitted --></p>
<p>而建立个人影响力，都可能会对你的事业和心理健康起到促进作用。 <!-- raw HTML omitted --></p>
<p>从事业的角度来分析，建立影响力可以建立个人品牌，积累个人的影响力，助力职业发展和提升。 <!-- raw HTML omitted --></p>
<p>更多的人知道你，你才会有更多的机会，毕竟有人的地方才会有机会。 <!-- raw HTML omitted --></p>
<p>从自我实现的角度来分析，你的影响力越大，你的读者越多，你传播的知识可以影响和帮助到读者就越多，你就越能满足心理学家马斯洛所说的「自我实现」需求。 <!-- raw HTML omitted --></p>
<h2 id="碰撞交流的火花"><!-- raw HTML omitted -->6<!-- raw HTML omitted --> 碰撞交流的火花</h2>
<p>写文章本质就是在分享观点，当文章被传播，有了读者之后，自然会有人对你的观点持赞同态度，有人持保留意见。 <!-- raw HTML omitted --></p>
<p>读者就有可能向你阐述他们自己的想法： <!-- raw HTML omitted --></p>
<blockquote>
<p>当你有一个苹果，我也有一个苹果，我们交换了苹果，也只有一个苹果； <!-- raw HTML omitted --></p>
<p>但当你有一个想法，我也有一个想法之后，我们交换想法，我们就有了两个想法。 <!-- raw HTML omitted --></p>
</blockquote>
<p>要做到闻过则喜非常难，但是不同的观点就相当于一面镜子，可以让我们审视自己原来的观点是否合理。 <!-- raw HTML omitted --></p>
<p>他人的观点也给我们提供了换位思考的机会，从他人的观点切入，了解别人是如何思考的，避免「同温层效应」，只听到自己想听到的观点。 <!-- raw HTML omitted --></p>
<h2 id="记录思考与成长"><!-- raw HTML omitted -->7<!-- raw HTML omitted --> 记录思考与成长</h2>
<p>所谓「雁过留声」，又所谓「雁去无痕」。 <!-- raw HTML omitted --></p>
<p>横向对比，每个人都是独立的个体；纵向对比，每个人在不同的时期又会有不同的思考和感悟。 <!-- raw HTML omitted --></p>
<p>中学时候，语文老师总是会鼓励大家写日记，或者周记，说可以提高自己的作文水平。 <!-- raw HTML omitted --></p>
<p>所以我当时「轻信」老师的建议，尝试写了近1年的日记和周记，希望可以借此提高下自己的作文成绩。 <!-- raw HTML omitted --></p>
<p>但是即使我写了一年的笔记，也没有见语文老师多给我的作文一些分，感觉用处着实不大，然后就放弃了。 <!-- raw HTML omitted --></p>
<p>前段时间，在家里的柜子发现我这些用稚嫩笔迹写下的日记，翻看着有些泛黄的，写着的各种生活小事或者心情的纸张，忍不住笑了起来。 <!-- raw HTML omitted --></p>
<p>又或者翻开自己大二大三写的博客，记录着自己当初学习的一些笔记，稚嫩的思考，都会有种翻看旧照片的感觉。 <!-- raw HTML omitted --></p>
<p>写作，大概就相当于是用笔触作胶卷，给当下自己的思考和感悟拍下一幅幅「游客照」，以待日后再聆听昔日「雁行」时所留下过的声音。 <!-- raw HTML omitted --></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>我的搜索流：高效搜索经验分享</title>
      <link>https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E6%90%9C%E7%B4%A2%E6%B5%81/</link>
      <pubDate>Sun, 25 Jun 2023 13:55:00 -0700</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E6%90%9C%E7%B4%A2%E6%B5%81/</guid>
      <description>1 前言 人并非全知全能，工作和生活难免会有各种的疑问，有问题自然可以询问有经验的同事或朋友。 但为了避免一有问题就去问人，给别人造成困扰，更推荐</description>
      <content:encoded><![CDATA[<h2 id="前言"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> 前言</h2>
<p>人并非全知全能，工作和生活难免会有各种的疑问，有问题自然可以询问有经验的同事或朋友。 <!-- raw HTML omitted --></p>
<p>但为了避免一有问题就去问人，给别人造成困扰，更推荐的就是: 自己先搜索，然后再去问人(Do a search before you ask a question) <!-- raw HTML omitted --></p>
<p>当然，如果你不想打扰他人，直接问ChatGPT也未尝不可，只是答案的准确性不一定有保证。 <!-- raw HTML omitted --></p>
<p>如何高效地搜索，缩小搜索的范围，如何快速地检索到答案呢？ <!-- raw HTML omitted --></p>
<p>那么我来分享一下自己的个人经验： <!-- raw HTML omitted --></p>
<h2 id="google-search"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> Google Search</h2>
<p>虽然我认为「搜索并不仅限于使用搜索引擎」，但是「搜索引擎」却是搜索并不可少的一部分。 <!-- raw HTML omitted --></p>
<p>虽然搜索引擎有很多，但是我基本只用 Google；如果没法使用 Google, 那么推荐使用Bing, 反正百度不在我的推荐之列. <!-- raw HTML omitted --></p>
<p>Google 搜索的界面很简单，只有一个搜索框，用户只需要把想要搜索的内容输入进去并回车即可。 <!-- raw HTML omitted --></p>
<p>比如搜索：「cpp modules」，返回了 7,320,000条结果。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/google_search_result.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>搜索结果太多，我想对搜索内容进行筛选，google 就提供了相当多的搜索指令(search operator) <!-- raw HTML omitted --></p>
<h3 id="时间"><!-- raw HTML omitted -->2.1<!-- raw HTML omitted --> 时间</h3>
<p>cpp modules是c++20 才新增的特性，如果我想按时间搜索下相关的内容，可以使用 <code>:before</code>, <code>:after</code> 指令，后面跟着一个日期: <!-- raw HTML omitted --></p>
<pre tabindex="0"><code class="language-nil" data-lang="nil">cpp modules :before 2020
</code></pre><p><figure>
    <img loading="lazy" src="/ox-hugo/google_search_before.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>可以看到搜索结果变成了185,000条，并且返回的搜索结果都是在 2020 年以前的纪录，这个在查看历史新闻时特别有用，比如看历史合订本。 <!-- raw HTML omitted --></p>
<h3 id="站点"><!-- raw HTML omitted -->2.2<!-- raw HTML omitted --> 站点</h3>
<p>如果你只想搜索某个站点，但是这个站点没有提供搜索功能（比如学校或者公司官网），或者搜索质量不够好，那么就可以加上 <code>site:</code> 的关键词, 要求 Google 只返回某个网站的检索结果: <!-- raw HTML omitted --></p>
<p>比如我想看下 jetbrains家的IDE 对 c++ 20 Modules的支持程度: <!-- raw HTML omitted --></p>
<pre tabindex="0"><code class="language-nil" data-lang="nil">cpp modules site:jetbrains.com
</code></pre><p><figure>
    <img loading="lazy" src="/ox-hugo/google_search_site.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>又或者，我搜索网站的时候，想把某个网站排除掉, 比如使用中文搜索编程相关关键词的时候，经常会被CSDN 的垃圾内容污染，那么就可以使用 <code>-</code>, 来排除掉某些内容. <!-- raw HTML omitted --></p>
<pre tabindex="0"><code class="language-nil" data-lang="nil">cpp modules -microsoft
</code></pre><p><figure>
    <img loading="lazy" src="/ox-hugo/google_search_exclude.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>原来排名第二的 Miscrosft 就被过滤掉了. <!-- raw HTML omitted --></p>
<h3 id="社交媒体"><!-- raw HTML omitted -->2.3<!-- raw HTML omitted --> 社交媒体</h3>
<p>如果你想在社交媒体上搜索某个关键词，那么可以使用 <code>@</code> 后跟社交媒体的名字来进行搜索，例如 &ldquo;cpp modules @twitter&rdquo; 或者 &ldquo;cpp modules @reddit&rdquo;, 可以把 <code>@</code> 理解成是 <code>:site</code> 指令的简化版本. <!-- raw HTML omitted --></p>
<p>只是社交媒体(social media)的定义比较含糊, Google没有给出具体的说明，但是比较有名的社交媒体都是支持的. <!-- raw HTML omitted --></p>
<pre tabindex="0"><code class="language-nil" data-lang="nil">cpp modules @reddit
</code></pre><p><figure>
    <img loading="lazy" src="/ox-hugo/google_search_reddit.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<pre tabindex="0"><code class="language-nil" data-lang="nil">cpp modules @zhihu
</code></pre><p><figure>
    <img loading="lazy" src="/ox-hugo/google_search_zhihu.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<h3 id="文件类型"><!-- raw HTML omitted -->2.4<!-- raw HTML omitted --> 文件类型</h3>
<p>可以通过 <code>filetype</code> 来指定想要搜索的文件类型，比如想搜索 pdf 相关的内容: <!-- raw HTML omitted --></p>
<pre tabindex="0"><code class="language-nil" data-lang="nil">cpp modules filetype:pdf
</code></pre><p><figure>
    <img loading="lazy" src="/ox-hugo/google_search_pdf.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>这个在知道书名，想要搜索电子书的时候特别有用. <!-- raw HTML omitted --></p>
<h3 id="关键字匹配"><!-- raw HTML omitted -->2.5<!-- raw HTML omitted --> 关键字匹配</h3>
<p>Google 支持若干个关键字匹配的指令: <!-- raw HTML omitted --></p>
<p>双引号: &ldquo;cpp modules&rdquo;, 精确匹配，只匹配包含&quot;cpp modules&quot;的内容 <!-- raw HTML omitted --></p>
<pre tabindex="0"><code class="language-nil" data-lang="nil">&#34;cpp modules&#34;
</code></pre><p><figure>
    <img loading="lazy" src="/ox-hugo/google_search_precise_match.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>搜索结果变成 3530 条纪录了. <!-- raw HTML omitted --></p>
<ul>
<li>星号: &ldquo;* modules&rdquo;, 通配符，所有包含 &ldquo;modules&quot;的内容都会被检索出来。个人觉得用处不大，只会让搜索结果膨胀. <!-- raw HTML omitted --></li>
<li>OR: &ldquo;cpp or module&rdquo;, 匹配包含 &ldquo;cpp&rdquo; 或者&quot;module&rdquo; 的内容, <code>or</code> 可以使用竖线代替 <code>|</code> 个人觉得用处不大，也只会让搜索结果膨胀 <!-- raw HTML omitted --></li>
<li>AND: &ldquo;cpp and module&rdquo;, 匹配包含 &ldquo;cpp&rdquo; 与&quot;module&quot; 的内容, <code>and</code> 可以使用与符号代替 <code>&amp;</code> <!-- raw HTML omitted --></li>
</ul>
<p><figure>
    <img loading="lazy" src="/ox-hugo/google_search_and.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<h2 id="custome-search"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> Custome Search</h2>
<p>前面提到「搜索并不仅限于使用搜索引擎」，是因为有很多内容，搜索引擎检索不到。 <!-- raw HTML omitted --></p>
<p>比如在公司内网的信息，Google 再强大，也不可能会检索得到的，因为不公开。 <!-- raw HTML omitted --></p>
<p>这个时候就可以借助浏览器的 Custom Search能力（Chrome 叫 Site Search, Firefox叫 Keyword Search）。 <!-- raw HTML omitted --></p>
<p>举个例子，我的老东家用的是代码搜索工具是 <a href="https://oracle.github.io/opengrok/">OpenGrok</a>, 可以搜索整个事业群的代码，支持多种语言，可以搜索代码的定义，引用，历史记录等。 <!-- raw HTML omitted --></p>
<p>（下文以同样使用 OpenGrok 部署的开源项目 <code>LibreOffice</code> 的代码为例子） <!-- raw HTML omitted --></p>
<p>因为在日常开发的时候，遇到陌生的函数名或者枚举定义，就需要看下他们的定义与实现，看下有没有问题： <!-- raw HTML omitted --></p>
<p>比如想看下 <code>contains</code> 这个函数的实现： <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/libre_office_definition.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>或者想看下 <code>Intersection</code> 这个函数的引用，看下其他人是怎么用这个函数的，我也顺便抄下。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/libre_office_symbol.png"/> 
</figure>
  <!-- raw HTML omitted --></p>
<p>一般的步骤是: <!-- raw HTML omitted --></p>
<ol>
<li>打开或切换到浏览器(Chrome/Firefox) <!-- raw HTML omitted --></li>
<li>打开内网网站链接, 在例子中就是 <a href="https://opengrok.libreoffice.org">https://opengrok.libreoffice.org</a> <!-- raw HTML omitted --></li>
<li>点击 <code>Definition</code> 或者 <code>Symbol</code> <!-- raw HTML omitted --></li>
<li>输入或者粘贴想要查询的内容，比如 <code>contains</code> <!-- raw HTML omitted --></li>
</ol>
<p>一套流程下来，大概需要30-40秒，不能说很慢吧，但是起码算不上快。 <!-- raw HTML omitted --></p>
<p>但是如果使用 Custom Search, 大概可以缩短至 7-8秒, 并且适用于绝对大部分的网站. <!-- raw HTML omitted --></p>
<p>首先把查询函数引用的url 复制下来, 观察： <!-- raw HTML omitted --></p>
<pre tabindex="0"><code class="language-log" data-lang="log">https://opengrok.libreoffice.org/search?full=&amp;defs=&amp;refs=Intersection&amp;path=&amp;hist=&amp;type=cxx&amp;xrd=&amp;nn=19&amp;si=refs&amp;searchall=true&amp;si=refs
</code></pre><p><code>refs</code> 后面跟着的就是需要查询的内容, 即 <code>Intersection</code>, 将 <code>Intersection</code> 替换成 <code>%s</code> : <!-- raw HTML omitted --></p>
<pre tabindex="0"><code class="language-log" data-lang="log">https://opengrok.libreoffice.org/search?full=&amp;defs=&amp;refs=%s&amp;path=&amp;hist=&amp;type=cxx&amp;xrd=&amp;nn=19&amp;si=refs&amp;searchall=true&amp;si=refs
</code></pre><h3 id="chrome-chromium-site-search"><!-- raw HTML omitted -->3.1<!-- raw HTML omitted --> Chrome/Chromium Site Search</h3>
<p>打开Chrome/Chromium -&gt; 点击设置(Setting) -&gt; 点击搜索引擎（Search Engine） -&gt; Manage search engines and site search -&gt; Site search [Add] <!-- raw HTML omitted --></p>
<ul>
<li>Search Engine: OpenGrok Code Search Find Reference(取个有意义的名字) <!-- raw HTML omitted --></li>
<li>Keyword: csr <!-- raw HTML omitted --></li>
<li>URL: <code>https://opengrok.libreoffice.org/search?full=&amp;defs=&amp;refs=%s&amp;path=&amp;hist=&amp;type=cxx&amp;xrd=&amp;nn=19&amp;si=refs&amp;searchall=true&amp;si=refs</code> <!-- raw HTML omitted --></li>
</ul>
<p><figure>
    <img loading="lazy" src="/ox-hugo/google_site_search_ref.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>然后，在Chrome 的浏览器地址，输入 <code>csr</code>, 空格, 再搜索 <code>Intersection</code>, 回车。就可以直接在Chrome 地址栏里面搜索指定网页的代码. <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/google_site_search_csr.gif"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>而搜索代码定义，URL 如下: <!-- raw HTML omitted --></p>
<pre tabindex="0"><code class="language-log" data-lang="log">https://opengrok.libreoffice.org/search?full=&amp;defs=Intersection&amp;refs=&amp;path=&amp;hist=&amp;type=cxx&amp;xrd=&amp;nn=19&amp;si=defs&amp;searchall=true&amp;si=defs
</code></pre><p>只需要将 <code>defs</code> 后面的内容修改成 <code>%s</code>, 再建一个新的site search, 名为 <code>Opengrok Code Search Find Definition</code>, keyword 为 <code>csd</code>, 就可以快速搜索代码定义. <!-- raw HTML omitted --></p>
<p>如果想要搜索其他网站，比如公司内网: <a href="https://search.xxoa.com/query=Foobar">https://search.xxoa.com/query=Foobar</a>, <!-- raw HTML omitted -->
只需要把查询内容修改为 %s, 再新建个Site Search 即可。 <!-- raw HTML omitted --></p>
<p>在老东家，搜索错误码，或者是搜索内网上的文章，我都是这么干的；所以到新东家之后，我也是这么搞的。 <!-- raw HTML omitted --></p>
<h3 id="firefox"><!-- raw HTML omitted -->3.2<!-- raw HTML omitted --> Firefox</h3>
<p>Firefox 也提供类似的功能，叫 Keyword Search, 添加起来甚至更方便: <!-- raw HTML omitted --></p>
<ol>
<li>打开想要搜索的网站 <!-- raw HTML omitted --></li>
<li>在搜索框点击鼠标右键，然后会看到一个「Add a Keyword for this Search&hellip;」 <!-- raw HTML omitted --></li>
<li>修改名字与 keyword <!-- raw HTML omitted --></li>
</ol>
<p><figure>
    <img loading="lazy" src="/ox-hugo/firefox_add_key_word_search.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/firefox_add_key_word_search_bookmark.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>然后，在 Firefox 的浏览器地址，输入 <code>csd</code>, 空格, 再搜索 <code>Intersection</code>, 回车。就可以直接在 Firefox 地址栏里面搜索指定网页的代码. <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/firefox_keyword_search.gif"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>如果没有右键时没有找到 「Add a Keyword for this Search&hellip;」的选项，也可以使用添加书签的方式，手动添加一个 keyword search: <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/firefox_add_bookmark.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<h2 id="alfred-web-search"><!-- raw HTML omitted -->4<!-- raw HTML omitted --> Alfred Web Search</h2>
<p>如果使用的是 Mac OS, 那么通过Alfred 插件的 Web Search功能，甚至可以不用手动切换到浏览器，直接就可以进行搜索，可以把搜索流的耗时进一步缩短到1-3秒。 <!-- raw HTML omitted --></p>
<p>Alfred -&gt; Preference -&gt; Web Search -&gt; Add custome Search <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/alfred_web_seasch.jpg"/> 
</figure>
  <!-- raw HTML omitted --></p>
<p>除了要将 <code>%s</code> 换成 <code>{query}</code> 之外, 其他添加的步骤与 Site Search 一致： <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/alfred_code_search.gif"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>录制 Gif 只花了1.5 秒. <!-- raw HTML omitted --></p>
<h2 id="总结"><!-- raw HTML omitted -->5<!-- raw HTML omitted --> 总结</h2>
<p>Perl语言之父Larry Wall 有句广为人知的名言：「程序员要有三大美德：急躁，懒惰，自大」。 <!-- raw HTML omitted --></p>
<ul>
<li>急躁意味着不愿意花时间等待缓慢的程序，会想办法优化程序； <!-- raw HTML omitted --></li>
<li>自大意味着不愿让人指谪，对自身要求强，要写出高质量的代码； <!-- raw HTML omitted --></li>
<li>懒惰意味着不想花精心做重复无用的事情，会想办法自动化，让电脑帮忙处理。 <!-- raw HTML omitted --></li>
</ul>
<blockquote>
<p>&ldquo;We will encourage you to develop the three great virtues of a programmer: laziness, impatience, and hubris.&rdquo; &ndash; LarryWall <!-- raw HTML omitted --></p>
</blockquote>
<p>而我对搜索流的优化，就是在培养「急躁」与「懒惰」的美德。 <!-- raw HTML omitted --></p>
<h2 id="延伸阅读"><!-- raw HTML omitted -->6<!-- raw HTML omitted --> 延伸阅读</h2>
<p>我的各种「流」： <!-- raw HTML omitted --></p>
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E5%86%99%E4%BD%9C%E6%B5%81/">我的写作流：写作工具与平台分享</a> <!-- raw HTML omitted --></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E7%94%BB%E5%9B%BE%E6%B5%81/">我的画图流：画图工具与技巧分享</a> <!-- raw HTML omitted --></li>
</ul>
<h2 id="参考"><!-- raw HTML omitted -->7<!-- raw HTML omitted --> 参考</h2>
<ul>
<li><a href="https://support.mozilla.org/en-US/kb/how-search-from-address-bar">Mozilla Support: How to search IMDB, Wikipedia and more from the address bar</a> <!-- raw HTML omitted --></li>
<li><a href="https://support.google.com/websearch/answer/2466433">Google Document: Refine web searches</a> <!-- raw HTML omitted --></li>
<li><a href="https://support.google.com/websearch/answer/35890">Google Document: Do an Advanced Search on Google</a> <!-- raw HTML omitted --></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>两个鲜为人知的Gmail地址技巧</title>
      <link>https://ramsayleung.github.io/zh/post/2023/gmail%E5%9C%B0%E5%9D%80%E7%9A%84%E9%9A%90%E8%97%8F%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Sat, 24 Jun 2023 20:15:00 -0700</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2023/gmail%E5%9C%B0%E5%9D%80%E7%9A%84%E9%9A%90%E8%97%8F%E6%8A%80%E5%B7%A7/</guid>
      <description>1 前言 分享两个鲜为人知，但是却相当有用的 Gmail 地址技巧。「鲜为人知」并非是标题党，而是引用Gmail 博客原话： I recently discovered some little-known ways to use your Gmail address that can give you greater control</description>
      <content:encoded><![CDATA[<h2 id="前言"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> 前言</h2>
<p>分享两个鲜为人知，但是却相当有用的 Gmail 地址技巧。「鲜为人知」并非是标题党，而是引用Gmail 博客原话： <!-- raw HTML omitted --></p>
<blockquote>
<p>I recently discovered some <strong><strong>little-known</strong></strong> ways to use your Gmail address that can give you greater control over your inbox and save you some time and headache. <!-- raw HTML omitted --></p>
</blockquote>
<h2 id="技巧"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> 技巧</h2>
<p>假设你的Gmail 地址是 <code>xiaoming@gmail.com</code>: <!-- raw HTML omitted --></p>
<h3 id="加号"><!-- raw HTML omitted -->2.1<!-- raw HTML omitted --> 加号</h3>
<p>你可以将在用户名后面增加一个加号 <code>+</code>, 并在加号后面增加任意数量的字符，比如 <code>xiaoming+happy@gmail.com</code>, <code>xiaoming+upset@gmail.com</code>, Gmail 都会把这些地址当作成 <code>xiaoming@gmail.com</code>, 发送到你的地址邮箱中。 <!-- raw HTML omitted --></p>
<h3 id="点号"><!-- raw HTML omitted -->2.2<!-- raw HTML omitted --> 点号</h3>
<p>你也可以在地址的任意地方插入任意数量的点号: <code>.</code>, 比如 <code>x.i.a..o.ming@gmail.com</code>, <code>xiao...mi..ng@gmail.com</code>, Gmail 都会把点号忽略掉，解析成 <code>xiaoming@gmail.com</code> <!-- raw HTML omitted --></p>
<h2 id="用途"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> 用途</h2>
<p>技巧比较简单，寥寥数语就说完了，好像也没有什么大不了，有什么用处么？ <!-- raw HTML omitted --></p>
<p>这个就要发挥想象力了。 <!-- raw HTML omitted --></p>
<h3 id="用途一-重复注册用户"><!-- raw HTML omitted -->3.1<!-- raw HTML omitted --> 用途一：重复注册用户</h3>
<p>这个主要是针对能使用邮箱注册的网站，可能大多数是国外网站。 <!-- raw HTML omitted --></p>
<p>如果网站的邮箱地址校验正则写得不好，允许加号和点号，不知道Gmail的这两个规则，那么 <code>xiaoming+user1@gmail.com</code>, <code>xiaoming+user2@gmail.com</code>, <code>xi..aoming@gmail.com</code> 就会被认为是三个不同的邮箱地址，就可以重复注册。 <!-- raw HTML omitted --></p>
<p>在薅羊毛等需要重复注册用户的场景就比较有用了。 <!-- raw HTML omitted --></p>
<h3 id="用途二-溯源"><!-- raw HTML omitted -->3.2<!-- raw HTML omitted --> 用途二：溯源</h3>
<p>个人邮箱难免会收到一些奇怪的邮件，例如：猎头的招聘邮件，钓鱼邮件等等。 <!-- raw HTML omitted --></p>
<p>收到这些邮件的第一反应肯定是把邮件删掉，之后就会思考，究竟是哪里泄漏了个人邮箱。 <!-- raw HTML omitted --></p>
<p>而通过 Gmail 加号的技巧，我就可以做到垃圾邮件溯源. <!-- raw HTML omitted --></p>
<p>首先，在注册每个网站的时候，都给他们加上一个tag, 例如注册Twitter, 那就用 <code>xiaoming+twitter@gmail.com</code>, 如果注册Github, 那就用 <code>xiaoming+github@gmail.com</code>, 依此类推。 <!-- raw HTML omitted --></p>
<p>只要有垃圾邮件，我就能通过加号的后缀，知道是哪个浓眉大眼的网站把我的信息给泄漏出去了。 <!-- raw HTML omitted --></p>
<p>比如下面这个垃圾邮件，我就知道它是通过爬虫爬取我Github 公开邮件群发的. <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/gmail_plus_sign_example.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>我就可以选择不公开 Github 邮箱，来避免后续收到类似的邮件。 <!-- raw HTML omitted --></p>
<h2 id="参考"><!-- raw HTML omitted -->4<!-- raw HTML omitted --> 参考</h2>
<ul>
<li><a href="https://gmail.googleblog.com/2008/03/2-hidden-ways-to-get-more-from-your.html">Google Gmail Blog: 2 hidden ways to get more from your Gmail address</a> <!-- raw HTML omitted --></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>英语听力学习工具分享</title>
      <link>https://ramsayleung.github.io/zh/post/2023/%E8%8B%B1%E8%AF%AD%E5%90%AC%E5%8A%9B%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7%E5%88%86%E4%BA%AB/</link>
      <pubDate>Thu, 15 Jun 2023 20:49:00 -0700</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2023/%E8%8B%B1%E8%AF%AD%E5%90%AC%E5%8A%9B%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7%E5%88%86%E4%BA%AB/</guid>
      <description>1 前言 学习一门语言和学习手艺，过程差不多，没有太多的捷径可走，除了练习，还是练习。 无论是以前，还是现在，去公司上班，都需要接近一个小时的时间</description>
      <content:encoded><![CDATA[<h2 id="前言"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> 前言</h2>
<p>学习一门语言和学习手艺，过程差不多，没有太多的捷径可走，除了练习，还是练习。 <!-- raw HTML omitted --></p>
<p>无论是以前，还是现在，去公司上班，都需要接近一个小时的时间通勤。 <!-- raw HTML omitted --></p>
<p>为了不浪费通勤的一小时，我大多会在路上收听英文播客来练习英语听力。 <!-- raw HTML omitted --></p>
<h2 id="工具"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> 工具</h2>
<p>以前是坐班车上班，经常是听着听着英语听力就睡着了，毕竟播客的对话有深有浅，听不懂就容易睡着，英语练习就变成班车补觉。 <!-- raw HTML omitted --></p>
<p>虽然各种英语学习心得都强调多听的重要性，但是架不住着实听不懂，Podcasts App又没有办法展示字幕，你只知道你听不懂这个单词，但是却不知道这个单词究竟是什么？ <!-- raw HTML omitted --></p>
<p>不会的内容就不会有机会改善。 <!-- raw HTML omitted --></p>
<p>最近接触到一个很优秀的 Podcasts APP, 名为 Snipd, 可以通过AI自动把播客内容翻译成字幕。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/snipd_appstore.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/snipd_transcript1.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>说来有趣，这个Podcasts 软件的产品初衷并不是为了英语学习，而是类似视频截图，将播客的精彩瞬间和金句分享出来。 <!-- raw HTML omitted --></p>
<p>但是声音是很难以视觉化的方式来进行分享，转发的，所以他们就直接将当前播放进度前后80秒的内容以字幕形式呈现。 <!-- raw HTML omitted --></p>
<p>如果想要记录生词，可以直接点击创建「Create snip」，将句子保存下来，相当于保存了生词的上下文。 <!-- raw HTML omitted --></p>
<p>对于字幕生成，我现在发现，Snipd是采用离线缓存+在线生成的方式的： <!-- raw HTML omitted --></p>
<p>如果是热门播客，可能就有用户已经提交了生成字幕请求，其他用户直接点开播客就可以直接展示； <!-- raw HTML omitted -->
对于冷门播客，需要我点击生成字幕，等待个10分钟，他们后台生成完成后会再通知我。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/snip1.jpg"/> 
</figure>
  <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/snip2.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>使用这个App还有一个附带的好处：可以收听非常多的海外播客。 <!-- raw HTML omitted --></p>
<p>因为中国什么都会有特供版本，播客也不例外。 <!-- raw HTML omitted --></p>
<p>如果使用的是国区的 Apple Id, 那么使用Iphone 自带的Podcasts App, 有非常多优秀的海外播客都无法搜索到（毕竟「收听敌对电台」） <!-- raw HTML omitted --></p>
<p>而这个Snipd App可以搜索到非常多的海外播客，而大部分的英文播客都是海外播客。 <!-- raw HTML omitted --></p>
<h2 id="播客"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> 播客</h2>
<p>推荐几个我经常收听的英文播客： <!-- raw HTML omitted --></p>
<h3 id="healthy-hacker"><!-- raw HTML omitted -->3.1<!-- raw HTML omitted --> Healthy hacker</h3>
<p>网站链接：<a href="https://www.healthyhacker.com/">https://www.healthyhacker.com/</a> <!-- raw HTML omitted --></p>
<p>一个从苹果天才吧电脑维修员工，成长为Github 工程师的小哥Chris Hunt主持的播客，我个人的最爱，主要是分享一些 Chris 自己觉得有趣的东西。 <!-- raw HTML omitted --></p>
<p>Chris 声音热情洋溢，可惜播客在2019年之后就没有更新了。 <!-- raw HTML omitted --></p>
<p>从天才吧员工成长为Github 工程师的那一期: <a href="https://www.healthyhacker.com/2014/10/06/growing-as-a-programmer/">《11: Growing as a programmer》</a> <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/healthy_hacker.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<h3 id="the-changelog"><!-- raw HTML omitted -->3.2<!-- raw HTML omitted --> THE CHANGELOG</h3>
<p>网站链接：<a href="https://changelog.com/podcast">https://changelog.com/podcast</a> <!-- raw HTML omitted -->
主要是分享软件工程，极客和行业创新，也有不少大咖上过播客，比如： <!-- raw HTML omitted --></p>
<p>Ruby On Rail之父 DHH, Sqlite 作者 D. Richard Hipp, Ruby之父，以及K&amp;R 中的K( Brian Kernighan) . <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/the_changelog.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<h3 id="daily-easy-english-expression"><!-- raw HTML omitted -->3.3<!-- raw HTML omitted --> Daily Easy English Expression</h3>
<p>网站地址: <a href="https://dailyeasyenglish.libsyn.com/">https://dailyeasyenglish.libsyn.com/</a> <!-- raw HTML omitted --></p>
<p>一个美国老师每期分享的地道英语词句的表达，每期只有几分钟。因为主持人是专业的英语外教，所以语速较慢，难度较低，非常好懂。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/daily_easy_english_expression.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>我在好几年前就在Youtube关注这个老师的口语教程，叫做 <a href="https://www.youtube.com/watch?v=32T-nyka0dM">Daily English Dictation</a>, 深入浅出，娓娓道来。 <!-- raw HTML omitted --></p>
<p>B 站上也有搬运Youtube的教程：每日英语听写 <a href="https://www.bilibili.com/video/BV1U7411a7xG/">Daily English Dictation 1-400</a> <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/daily_english_dictation.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>翻开2020年的笔记，当时一天学习一课 Daily English Dictation，我学习到142课然后就放弃了。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/ddd_practice.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<h3 id="the-hanselminutes-podcast"><!-- raw HTML omitted -->3.4<!-- raw HTML omitted --> THE HANSELMINUTES PODCAST</h3>
<p>网站链接：<a href="https://www.hanselminutes.com/">https://www.hanselminutes.com/</a> <!-- raw HTML omitted --></p>
<p>微软的 Scott Hanselman 主持的播客，类似技术杂谈，在英文技术类播客中也非常有名，他的角色类似个布道师。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/hanselminutes.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<h3 id="lex-fridman-podcast"><!-- raw HTML omitted -->3.5<!-- raw HTML omitted --> Lex Fridman Podcast</h3>
<p>网站：<a href="https://www.hanselminutes.com/">https://www.hanselminutes.com/</a> <!-- raw HTML omitted --></p>
<p>Lex Fridman 是俄裔计算机科学家，在MIT任职，他说话的方式很真诚，口音很好听. 他的访谈对象通常都非常大牌，比如是 Facebook 创始人 Mark Zuckerberg, 特斯拉的Elon Musk, 还有计算机的殿堂大神Donald Knuth等等. <!-- raw HTML omitted --></p>
<p>只是他的访谈一般都很长，2-3个小时，我一般需要用一周的通勤时间来听完一期节目。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/lex_fridman.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<h3 id="bbc-6-minute-english"><!-- raw HTML omitted -->3.6<!-- raw HTML omitted --> BBC 6 Minute English</h3>
<p>网站: <a href="https://www.bbc.co.uk/learningenglish/english/features/6-minute-english">https://www.bbc.co.uk/learningenglish/english/features/6-minute-english</a> <!-- raw HTML omitted --></p>
<p>BBC 主持的英语学习播客，顾名思义，每期6分钟，都是纯正的英音，女主持的英音尤其悦耳。 <!-- raw HTML omitted --></p>
<p>每期都截取一小道报道或者对话，然后学习一些新词，以练带学。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/6_minute_english.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<h2 id="总结"><!-- raw HTML omitted -->4<!-- raw HTML omitted --> 总结</h2>
<p>突然意识到，收听播客和小时候通过收音机收听各种电台节目，如「评书讲古」似乎是异曲同工。 <!-- raw HTML omitted --></p>
<p>虽然媒介在改变，但是对好内容的需求却是一直不变的。 <!-- raw HTML omitted --></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>软件工程师的软技能指北（四）：简历篇</title>
      <link>https://ramsayleung.github.io/zh/post/2023/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%BD%AF%E6%8A%80%E8%83%BD%E6%8C%87%E5%8C%97_%E7%AE%80%E5%8E%86%E7%AF%87/</link>
      <pubDate>Sat, 20 May 2023 13:40:00 -0700</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2023/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%BD%AF%E6%8A%80%E8%83%BD%E6%8C%87%E5%8C%97_%E7%AE%80%E5%8E%86%E7%AF%87/</guid>
      <description>1 前情提要 软件工程师的软技能指北（一）：总览篇 软件工程师的软技能指北（二）：事业篇 软件工程师的软技能指北（三）：高效交流篇 2 前言 我在高三的时</description>
      <content:encoded><![CDATA[<h2 id="前情提要"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> 前情提要</h2>
<ol>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%80%BB%E8%A7%88%E7%AF%87/">软件工程师的软技能指北（一）：总览篇</a> <!-- raw HTML omitted --></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%BD%AF%E6%8A%80%E8%83%BD%E6%8C%87%E5%8C%97_%E4%BA%8B%E4%B8%9A%E7%AF%872/">软件工程师的软技能指北（二）：事业篇</a> <!-- raw HTML omitted --></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%BD%AF%E6%8A%80%E8%83%BD%E6%8C%87%E5%8C%97_%E9%AB%98%E6%95%88%E4%BA%A4%E6%B5%81%E7%AF%873/">软件工程师的软技能指北（三）：高效交流篇</a> <!-- raw HTML omitted --></li>
</ol>
<h2 id="前言"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> 前言</h2>
<p>我在高三的时候，每周有五节的语文课，我的语文老师陆老师总是会拿一节语文课，当作书法课，让我们练字。 <!-- raw HTML omitted --></p>
<p>陆老师认为，写作文能言之有物，切中要点很重要，但是答卷的字体也很重要。 <!-- raw HTML omitted --></p>
<p>可能同样的答案内容，字体写得好的试卷会比字体一般的试卷高5到10分。 <!-- raw HTML omitted --></p>
<p>而陆老师自身的软硬笔书法水平都很过硬，黑板板书相当漂亮。 <!-- raw HTML omitted --></p>
<p>明清两朝，有专门用于科举考试的通用字体，特点是：以乌黑、方正、光洁而大小齐平。 <!-- raw HTML omitted --></p>
<p>明朝称之为「台阁体」，清朝称之为「馆阁体」： <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/%e9%a6%86%e9%98%81%e4%bd%93.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>人终归是视觉动物，内涵固然重要，门面也不可或缺。 <!-- raw HTML omitted --></p>
<p>如果把工程师的职业当作事业的话，那么简历就是门面和敲门砖。 <!-- raw HTML omitted --></p>
<p>如果有足够的亮点的经历的话，再配上优秀的简历，可谓如虎添翼； <!-- raw HTML omitted -->
纵然经历不够亮点，一份得体的简历就如考试时的一手好字，同样可以让人眼前一亮。 <!-- raw HTML omitted --></p>
<h2 id="要点"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> 要点</h2>
<p>所谓的简历，本质上和街边的宣传单，以及电视上的广告没有什么区别，都是希望可以引起潜在客户的注意，把「商品」销售出去。 <!-- raw HTML omitted --></p>
<p>只是他们销售的是商品，你销售的是自己的「劳动力」。 <!-- raw HTML omitted --></p>
<p>而你的目标是在诸多的同行竞争中脱颖而出，你需要做的是「扬长避短」，把自己的长处和优势展示给潜在客户。 <!-- raw HTML omitted --></p>
<p>根据社会心理学的研究，人总是会对先看到的词产生先入为主的认知。 <!-- raw HTML omitted --></p>
<p>如果形容一个人： <!-- raw HTML omitted --></p>
<p>勤劳，勇敢，善良，温柔，俊美，卑鄙，下流，肮脏，贪婪，邋遢。 <!-- raw HTML omitted --></p>
<p>你对他的印象是好是坏呢？ <!-- raw HTML omitted --></p>
<p>那下面这个人呢？ <!-- raw HTML omitted --></p>
<p>卑鄙，下流，肮脏，贪婪，邋遢，勤劳，勇敢，善良，温柔，俊美。 <!-- raw HTML omitted --></p>
<p>你对他的印象是坏是好呢？ <!-- raw HTML omitted --></p>
<p>同样的内容，调换了顺序，给人的认知就完全不一样了。 <!-- raw HTML omitted --></p>
<p>所以你需要做的，就是把你最引以为傲的内容（比如你的经历，学历），放在简历的前面； <!-- raw HTML omitted -->
再把你觉得弱势的内容（比如学历，经历），放到简历的后面。 <!-- raw HTML omitted --></p>
<h2 id="结构"><!-- raw HTML omitted -->4<!-- raw HTML omitted --> 结构</h2>
<p>我个人习惯是会在简历中呈现五部分内容：「联系方式(Contact)」, 「职业经历(Employment)」, 「项目(Project)」, 「教育(Education)」, 「总结(Summary)」。 <!-- raw HTML omitted --></p>
<p>放在最前方的，毫无疑问是「联系方式」，不然潜在客户对你再感兴趣，找不到你的联系方式，也是抓瞎。 <!-- raw HTML omitted --></p>
<p>其次就是「教育」，「职业经历」，「总结」的顺序。 <!-- raw HTML omitted --></p>
<p>我个人的学历不占优势，只有本科学历，又非名校，根据「扬长避短」原则，「教育」就被我放最后了。 <!-- raw HTML omitted --></p>
<p>因为我自己在两家所谓的「大厂」打过工，所以「职业经历」更有优势，所以「职业经历」放在前面。 <!-- raw HTML omitted --></p>
<p>而「项目」大多时候与「职业经历」挂钩，逻辑顺序上，在「职业经历」之后，所以结构就变成： <!-- raw HTML omitted --></p>
<p>「联系方式」 <!-- raw HTML omitted --></p>
<p>「职业经历」 <!-- raw HTML omitted --></p>
<p>「项目」 <!-- raw HTML omitted --></p>
<p>「总结」 <!-- raw HTML omitted --></p>
<p>「教育」 <!-- raw HTML omitted --></p>
<p>结构推荐是这五项，顺序就根据个人自身情况进行调整了。 <!-- raw HTML omitted --></p>
<h2 id="格式"><!-- raw HTML omitted -->5<!-- raw HTML omitted --> 格式</h2>
<p>「联系方式」与「教育」没有太多值得说道的点，可谓千篇一律。 <!-- raw HTML omitted --></p>
<p>主要聚焦点还是在「项目」和「职业经历」上。 <!-- raw HTML omitted --></p>
<h3 id="职业经历"><!-- raw HTML omitted -->5.1<!-- raw HTML omitted --> 职业经历</h3>
<p>职业经历的格式也相对固定： <!-- raw HTML omitted --></p>
<blockquote>
<p>「公司」，「地点」，「担任的角色」，「工作时间」 <!-- raw HTML omitted --></p>
<p>「在公司中负责或参与过的项目，一句话概括」： <!-- raw HTML omitted --></p>
<ol>
<li>参与xxx 项目，负责xxx 的开发，达成了什么成果 <!-- raw HTML omitted --></li>
<li>负责xxx 项目, 设计，开发xxx, 取得了什么项目成果 <!-- raw HTML omitted --></li>
<li>负责xxx 项目，&hellip; <!-- raw HTML omitted --></li>
</ol>
</blockquote>
<p>在职业经历中一句带过项目经历，进而引出下文提到的「项目经历」，相当于承上启下。 <!-- raw HTML omitted --></p>
<p>当然，如果项目太多，也需要作相应的增减。 <!-- raw HTML omitted --></p>
<h3 id="项目"><!-- raw HTML omitted -->5.2<!-- raw HTML omitted --> 项目</h3>
<p>可能会有朋友觉得项目和经历着实没有什么好写的，或者写出来的内容类似： <!-- raw HTML omitted --></p>
<blockquote>
<p>服务编码，前后端对接，测试 <!-- raw HTML omitted --></p>
<p>功能开发并上线 <!-- raw HTML omitted --></p>
</blockquote>
<p>每个项目和经历总是有东西可以写的，成功的项目有可写的内容，失败的项目也有可写的内容，只要有思考，总是有输出的。 <!-- raw HTML omitted --></p>
<p>那么思考的方式是什么呢？ <!-- raw HTML omitted --></p>
<h4 id="star-method"><!-- raw HTML omitted -->5.2.1<!-- raw HTML omitted --> STAR method</h4>
<p>就是之前在「 <a href="https://ramsayleung.github.io/zh/post/2023/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%BD%AF%E6%8A%80%E8%83%BD%E6%8C%87%E5%8C%97_%E9%AB%98%E6%95%88%E4%BA%A4%E6%B5%81%E7%AF%873/">软件工程师的软技能指北（三）：高效交流篇</a>」提到的「STAR method」这种结构化的思考和沟通方式。 <!-- raw HTML omitted --></p>
<p>所谓的STAR method, 是四个单词的首字母缩写，分别是: Situation(场景), Task(任务), Action(行动)，Result(结果)。即： <!-- raw HTML omitted --></p>
<ul>
<li>situation: 描述问题的背景，这个问题是什么，以及你为什么需要做这个事情 <!-- raw HTML omitted --></li>
<li>task: 你具体的任务是什么，你需要做什么，你的角色是什么？ <!-- raw HTML omitted --></li>
<li>action: 你做了什么事情？你的行动是什么? <!-- raw HTML omitted --></li>
<li>result: 项目结果如何？最好用可量化的指标来呈现? <!-- raw HTML omitted --></li>
</ul>
<p>通过STAR method, 以结构化的方式来思考，并呈现你的项目，描述你的职责与成果。 <!-- raw HTML omitted --></p>
<blockquote>
<p>xx 公司/xx 项目, 时间: 2020.03-2020.xx <!-- raw HTML omitted --></p>
<ol>
<li>项目背景一句话、 <!-- raw HTML omitted --></li>
<li>自己在项目里负责的工作 <!-- raw HTML omitted --></li>
<li>用到的技能/思考的过程或者难点攻克的过程 <!-- raw HTML omitted --></li>
<li>项目的结果或者我的成绩 <!-- raw HTML omitted --></li>
</ol>
</blockquote>
<p>例如： <!-- raw HTML omitted --></p>
<blockquote>
<p>服务编码，前后端对接，测试 <!-- raw HTML omitted --></p>
</blockquote>
<p>就可以修改成: <!-- raw HTML omitted --></p>
<blockquote>
<p>负责xxx项目开发与设计，主导前后端契约设计，前后端并行解耦开发工作，项目用时1个半月成功上线，日访问用户20w, 页面浏览量100w, 峰值访问1000/秒，服务平稳无故障。 <!-- raw HTML omitted --></p>
</blockquote>
<p>这不比平铺直述更有感染力嘛。 <!-- raw HTML omitted --></p>
<h4 id="量化指标"><!-- raw HTML omitted -->5.2.2<!-- raw HTML omitted --> 量化指标</h4>
<p>量化的数字让人更有印象，会让你的经历更有说服力，也更能突出你自己的成绩： <!-- raw HTML omitted --></p>
<p>如非量化的指标表述： <!-- raw HTML omitted --></p>
<blockquote>
<p>项目重构之后，服务性能与可用性都得到了显著提高 <!-- raw HTML omitted --></p>
</blockquote>
<p>难免让人觉得说明力不足 <!-- raw HTML omitted --></p>
<blockquote>
<p>项目重构之后，压测TPS从100/秒增长到1000/秒，系统的不可用总时长从上线前的2小时下降到20分钟，系统可用性从99.9% 增长到99.99% <!-- raw HTML omitted --></p>
</blockquote>
<p>这个又可以呼应「软技能指北（三）：高效交流篇」的「云雨伞」模型，通过数据来表述「云」，增加说明力。 <!-- raw HTML omitted --></p>
<h2 id="排版"><!-- raw HTML omitted -->6<!-- raw HTML omitted --> 排版</h2>
<p>所谓亮眼的简历，无非是「优秀的内容」+ 「简洁耐看的排版」。 <!-- raw HTML omitted --></p>
<p>「内容」值得每个工程师花心思去构思，但花时间去「排版」却大可不必。 <!-- raw HTML omitted --></p>
<p>所以写简历，我只推荐使用 LaTex, Word 还是算了吧。 <!-- raw HTML omitted --></p>
<p>有朋友可能不熟悉 LaTex, LaTex 是美国计算机科学家Leslie Lamport(没错，就是那个发明 Paxos 共识算法的大神) 在20世纪80年代开发的排版系统，遵循「展示与内容分离（separating presentation from content）的原则」。 <!-- raw HTML omitted --></p>
<p>即使用户没有排版和写代码的经验，只需要根据模板填入内容，就可以生成精美的出版刊物。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/wikipedia_latex.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>本地安装和使用LaTex 相对麻烦，所以建议使用网页版本的LaTex 服务，如 <a href="https://www.overleaf.com/">Overleaf:</a> <a href="https://www.overleaf.com/">https://www.overleaf.com/</a>. <!-- raw HTML omitted --></p>
<p>至于简历模板, Overleaf 本身有很多的简历模板分享，Github上也有许多类似的项目，如 <a href="https://github.com/billryan/resume">https://github.com/billryan/resume</a>, 只要把在 Overleaf 上把内容填入到模板中，即可生成一份好看的简历： <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/overleaf_resume.png"/> 
</figure>
  <!-- raw HTML omitted --></p>
<h3 id="照片"><!-- raw HTML omitted -->6.1<!-- raw HTML omitted --> 照片</h3>
<p>是否要放照片，这个取决于行业和自身特点，遵循「扬长避短」原则即可，如果形象得体，大可把照片也放在简历中。 <!-- raw HTML omitted --></p>
<h3 id="文件格式"><!-- raw HTML omitted -->6.2<!-- raw HTML omitted --> 文件格式</h3>
<p>只推荐pdf，因为这是一种通用的文件格式，相当多的工具都能打开pdf. <!-- raw HTML omitted --></p>
<p>我既不推荐使用word 写简历，更不推荐发送word 格式的简历。 <!-- raw HTML omitted --></p>
<p>因为并非人人电脑都有装office 办公软件，不一定能打开；此外，版本不正确，或者相应字体没有安装，可能就会导致精心排版的简历乱掉了。 <!-- raw HTML omitted --></p>
<p>简历文件命名: 姓名_[公司/学校]_联系方式.pdf, 如果公司是优势项，那么文件命名就把公司带上，学历同理。 <!-- raw HTML omitted --></p>
<p>切记不要以「简历.pdf」这样的文件来命名，HR可能一天收到几百封简历， <!-- raw HTML omitted -->
她完全有可能不记得自己是否打开过「简历.pdf」这个没有辨识度的文件. <!-- raw HTML omitted --></p>
<h2 id="投递渠道"><!-- raw HTML omitted -->7<!-- raw HTML omitted --> 投递渠道</h2>
<p>写完简历之后，免不了要向潜在客户推销简历，就我个人所知的几个渠道「内推」，「官网」，「第三方招聘网站」，「猎头」，优先级分别是： <!-- raw HTML omitted --></p>
<p>「内推」&gt;&gt;「官网」&gt;「猎头」&gt;&gt;&gt;「第三方招聘网站」。 <!-- raw HTML omitted --></p>
<p>无论是找相熟或者不认识的朋友，「内推」总是投递简历的最优推荐，因为有人可以帮忙跟进处理进度。 <!-- raw HTML omitted --></p>
<p>无论「过」与「不过」，都可以马上知道结果，可以最大限度地避免「石沉大海」 <!-- raw HTML omitted --></p>
<p>如果「心仪公司」没有相熟朋友，也可以在「脉脉」或者「Linkedin」上找人内推。 <!-- raw HTML omitted --></p>
<p>别人一般都很乐意的，部分公司还对「内推」有奖励。 <!-- raw HTML omitted --></p>
<p>如果实在是找不到人内推，「官网」也是一个备选项，一般公司的简历系统都会对处理时间有规定，简历起码都会被处理到，但有可能「渺无音讯」。 <!-- raw HTML omitted --></p>
<p>之前去 Indeed 官网投递，几天后直接收到拒信了. <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/indeed_refuse.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>像「Boss某聘」这类的第三方招聘网站，一般是投递没有「官网」或者内部招聘系统的公司的选择。 <!-- raw HTML omitted --></p>
<p>毕竟HR连官网的简历都有可能处理不过来，着实不大可能去第三方网站上捞简历，只有在要应付指标的时候，才会上去捞一下。 <!-- raw HTML omitted --></p>
<p>当然，把简历直接给到「Linkedin」,「脉脉」之类的三方招聘网站的HR, 那就是属于选项一的「内推」。 <!-- raw HTML omitted --></p>
<p>最后才聊到「猎头」，「猎头」本质上是把你的职业当作商品，你自己的「职业」规划和未来与他们关系着实不大，所以他们给你推的不一定是满足你规划和兴趣的公司。 <!-- raw HTML omitted --></p>
<p>何况「猎头」水平和态度参差不齐，只能作为一个备选项。 <!-- raw HTML omitted --></p>
<p>我在「Linkedin」上，把我的First Name 设为「啤酒的Emoji」，Last Name 才是「我的姓与名」。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/linkedin_basic_info.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>所以那些没有看过我信息，直接私聊发送招聘信息的，就会变成这个样子： <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/hi_beer2.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/hi_beer3.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>连我名字都没有写对的人，还能指望什么呢。 <!-- raw HTML omitted --></p>
<h2 id="示例"><!-- raw HTML omitted -->8<!-- raw HTML omitted --> 示例</h2>
<p>我按照上文提到的要点，结构与格式来整理了一下自己的简历： <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/ramsay_resume1.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/ramsay_resume2.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<h2 id="趣事"><!-- raw HTML omitted -->9<!-- raw HTML omitted --> 趣事</h2>
<p>我在三周前，在博客和公众号上发了一个内网看到的 Amazon的<a href="https://ramsayleung.github.io/zh/post/2023/amazon_canada_hiring_event/">国内专场招聘</a>，给有兴趣去加国血汗工厂打工的朋友分享了这个信息。 <!-- raw HTML omitted --></p>
<p>然后，过了一周后，我的个人邮箱收到了这个专场招聘的另外一位recruiter 的邮件，推荐我去参加这个专场招聘，因为我曾经用自己的个人邮箱给 Amazon 投递过简历。 <!-- raw HTML omitted --></p>
<p>只是这位recruiter 不知道我入职，并且与她同组的另外一位同事沟通过这个专场招聘的事。 <!-- raw HTML omitted --></p>
<p>就变成了我这个帮忙发专场招聘信息的人，最后究竟也收到了这个专场招聘的邀请。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/relocation_opportunity.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<h2 id="总结"><!-- raw HTML omitted -->10<!-- raw HTML omitted --> 总结</h2>
<p>一份优秀的简历就好比一份宣传册子，可以更好地向我们的潜在客户推销自己。 <!-- raw HTML omitted --></p>
<p>但功夫在平时，简历的内容最终也是日常积累的呈现。 <!-- raw HTML omitted --></p>
<p>扎实做好日常工作，成为一个「靠谱（reliable）」的人 <!-- raw HTML omitted --></p>
<p>「金玉其外」固然好，「内有乾坤」两相宜。 <!-- raw HTML omitted --></p>
<h2 id="参考"><!-- raw HTML omitted -->11<!-- raw HTML omitted --> 参考</h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/LaTeX">https://en.wikipedia.org/wiki/LaTeX</a> <!-- raw HTML omitted --></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>

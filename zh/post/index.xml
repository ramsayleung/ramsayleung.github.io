<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on 花生地</title>
    <link>https://ramsayleung.github.io/zh/post/</link>
    <description>Recent content in Posts on 花生地</description>
    <image>
      <title>花生地</title>
      <url>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.120.4</generator>
    <language>zh</language>
    <copyright>See this site&amp;rsquo;s source code here, licensed under GPLv3 ·</copyright>
    <lastBuildDate>Tue, 18 Feb 2025 21:25:57 -0800</lastBuildDate>
    <atom:link href="https://ramsayleung.github.io/zh/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>软件工程师的软技能指北（六）：谈薪篇</title>
      <link>https://ramsayleung.github.io/zh/post/2025/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%BD%AF%E6%8A%80%E8%83%BD%E6%8C%87%E5%8C%97_%E8%B0%88%E8%96%AA%E7%AF%87/</link>
      <pubDate>Mon, 17 Feb 2025 15:06:00 -0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2025/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%BD%AF%E6%8A%80%E8%83%BD%E6%8C%87%E5%8C%97_%E8%B0%88%E8%96%AA%E7%AF%87/</guid>
      <description>1 目录 软件工程师的软技能指北（一）：总览篇 软件工程师的软技能指北（二）：事业篇 软件工程师的软技能指北（三）：高效交流篇 软件工程师的软技能指北</description>
      <content:encoded><![CDATA[<h2 id="目录"><span class="section-num">1</span> 目录</h2>
<ol>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%80%BB%E8%A7%88%E7%AF%87/">软件工程师的软技能指北（一）：总览篇</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%BD%AF%E6%8A%80%E8%83%BD%E6%8C%87%E5%8C%97_%E4%BA%8B%E4%B8%9A%E7%AF%872/">软件工程师的软技能指北（二）：事业篇</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%BD%AF%E6%8A%80%E8%83%BD%E6%8C%87%E5%8C%97_%E9%AB%98%E6%95%88%E4%BA%A4%E6%B5%81%E7%AF%873/">软件工程师的软技能指北（三）：高效交流篇</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%BD%AF%E6%8A%80%E8%83%BD%E6%8C%87%E5%8C%97_%E7%AE%80%E5%8E%86%E7%AF%87/">软件工程师的软技能指北（四）：简历篇</a></li>
<li>软件工程师的软技能指北（五）：面试篇(暂时跳过, 后面再填)</li>
<li><a href="https://ramsayleung.github.io/zh/post/2025/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%BD%AF%E6%8A%80%E8%83%BD%E6%8C%87%E5%8C%97_%E8%B0%88%E8%96%AA%E7%AF%87/">软件工程师的软技能指北（六）：谈薪篇</a></li>
</ol>
<h2 id="前言"><span class="section-num">2</span> 前言</h2>
<p>打了这么多年工，要说最后悔和最遗憾的是什么，「拿到 Offer 之后没有好好和 HR 谈薪资绝对算是（甚至没有之一）」。</p>
<p>如果说面试前的简历准备，刷题，面试中应付面试官的各种提问以及面试之外的学习与积累是一场马拉松比赛的话，那么拿到 Offer 就意味着你已经成功完成征程的前九十九步了，而商谈薪资待遇就是最后一步，亦是最关键的一步。</p>
<p>如果这一步没有做好，前面的九十九步无论多完美都等于白费了，可谓是令人痛惜。</p>
<p>谈得成功的话，可能一年工资就多了一辆车了（至于是五菱MINI 还是保时捷911就看实力了）。</p>
<h2 id="认知"><span class="section-num">3</span> 认知</h2>
<p>回想我之前曾经关于「谈薪资」的错误认知，可谓是非常经典，可惜当初没有师长可以为我指正。</p>
<h3 id="学生思维"><span class="section-num">3.1</span> 学生思维</h3>
<p>刚毕业时的「这是家大公司，我是来学东西的，开什么薪资都可以」, 这个可以算是典型的「学生思维」，甚至出发点就是错的。</p>
<p>工作的根本目的就是「为了赚钱养活自己，过上更好的生活」，而不是去企业里面学习，「学习新本领」也只是「打工赚钱」的副产品而已。</p>
<p>经历过各种残酷的「末位淘汰」后我就发现，企业招「应届生」进去也不是因为看中你潜力大啥的，而是需要你这个年龄段的员工，
企业也有各种政府下达的就业指标，而招你进去也不是让你学东西的，而是让你干活的。</p>
<p>最明显的佐证就是，我所经历过的大公司每年的「末位淘汰」会有很多的应届生被打低绩效，
毕竟刚出校门的学生在能力，经验等方面是肯定是不如老员工的。</p>
<p>「末位淘汰」从来都不是激励你学习的，而是让你多干活的。</p>
<p>既然公司招聘员工是为了公司利益的最大化，员工自然就要最大化自己的利益。</p>
<h3 id="心理负担"><span class="section-num">3.2</span> 心理负担</h3>
<p>不要把公司 <strong>拟人化</strong> ，不要觉得和公司「谈判」不好，因此产生心理负担，公司只是众多利益相关的人组成的共同体而已。</p>
<h3 id="不愿意承担风险"><span class="section-num">3.3</span> 不愿意承担风险</h3>
<p>诚然, 现在整体就业大环境肯定不如2010-2020年的黄金十年，各种裁员降薪的消息层出不穷, 但如果持有「能找到个工作就不错了，还谈什么薪资」的认知，可能很难去HR谈薪资, 毕竟你潜意识就已经选择接受 Offer, 除非是 HR 的报价是远低于你的底线.</p>
<p>须知，收益永远是风险挂钩的，你永远不可能有高收益，零风险的投资标的。</p>
<h3 id="默认公平幻想"><span class="section-num">3.4</span> 默认公平幻想</h3>
<p>「工资由能力决定，相信公司会公平对待，肯定可以拿到对应的薪资，不需要自己去谈」</p>
<p>我曾经也持有种这样的「幻想」，以为凭借面试的表现折服了面试官，他自己会帮我争取, 甚至给我一个好的薪资.</p>
<p>首先，在较大的公司，面试官都是无法决定或者甚至知道薪资的，会有专门的 HR 团队来和你的谈判薪资的；</p>
<p>其次，你也很难期望面试官能把技术面试的结果如实呈现给非技术出身的 HR.</p>
<p>总而言之，「有枣子没枣子打一棒就好了」，争取了不一定要有，但是不争取绝对不会有人给你加工资的.</p>
<h2 id="风险收益分析"><span class="section-num">4</span> 风险收益分析</h2>
<p>我用博弈论模型来简单分析下分析公司和求职者的策略互动过程中风险与收益, 用收益矩阵来表示双方的选择和收益。</p>
<p>假设公司有三种策略:</p>
<ol>
<li>接受谈薪（给更高薪资）</li>
<li>拒绝谈薪（维持原 Offer）</li>
<li>撤回 Offer</li>
</ol>
<p>求职者也有三种策略:</p>
<ol>
<li>不谈</li>
<li>温和谈判</li>
<li>强硬谈判</li>
</ol>
<p>分析策略:</p>
<ul>
<li>不谈薪（保守策略）
<ul>
<li>公司不会撤回 Offer，但求职者没有额外收益。</li>
</ul>
</li>
<li>温和谈判（合理博弈）
<ul>
<li>60% 机会加薪 5W，40% 机会薪资不变，公司很少会撤回 Offer（5%）。</li>
</ul>
</li>
<li>强硬谈判（高风险高回报）
<ul>
<li>50% 机会加薪 10W，30% 机会薪资不变，但 20% 可能失去 Offer。</li>
</ul>
</li>
</ul>
<p>收益矩阵:</p>
<table>
<thead>
<tr>
<th></th>
<th>公司接受 (+5W)</th>
<th>公司拒绝 (0W)</th>
<th>公司撤回 (-5W)</th>
</tr>
</thead>
<tbody>
<tr>
<td>不谈 (30W)</td>
<td>30W</td>
<td>30W</td>
<td>30W</td>
</tr>
<tr>
<td>温和谈判 (35W)</td>
<td>35W(60%)</td>
<td>30W(40%)</td>
<td>30W(5%)</td>
</tr>
<tr>
<td>强硬谈判 (40W)</td>
<td>40W (50%)</td>
<td>30W (30%)</td>
<td>5W (20%)</td>
</tr>
</tbody>
</table>
<p>纳什均衡:</p>
<ul>
<li>如果求职者选择温和谈判，公司最优策略是接受或拒绝，而非撤回 Offer，因为撤回 Offer 也意味着公司损失招聘成本。</li>
<li>如果求职者选择强硬谈判，公司可能更倾向于撤回 Offer，因为不愿承担过高的薪资成本。</li>
<li>温和谈判是最优策略，因为它在风险和收益之间达到了较好的平衡, 既有提升空间，又降低 Offer 撤回风险.</li>
</ul>
<p>也就是对于求职者来说，如果你选择谈判，谈判失败，你的结果大概率也是接受原 Offer而已，而一旦谈判成功，你将会获得额外的收益。</p>
<p>可以说在接 Offer 谈判时 <strong>风险低, 收益中, 甚至高</strong> , 而不谈薪是最保守的策略，但也是收益最低的.</p>
<h2 id="公司的策略"><span class="section-num">5</span> 公司的策略</h2>
<p>公司的终极目的肯定是为了创造营收，而在招聘中直接目的是希望可以招到想要的，能干活的员工。</p>
<p>每个职位肯定都是有级别，不同级别有不同的工资范围，但是级别只是定义了上下限，拿到上限和下限之间可谓有天渊之别。
而且，绝大部分职位，都不会给上限工资，人人都给上限，工资预算肯定超标了。</p>
<p>HR 给你 offer 数字之前，要考虑几个因素:</p>
<ol>
<li>公司招人有预算，能用低价招到的，就肯定不会出高价</li>
<li>你可能会讨价还价，所以不能直接给上限，要留有提价的余地</li>
<li>如果工资太低，你可能一怒之下就拒了。</li>
</ol>
<h2 id="求职者的手牌"><span class="section-num">6</span> 求职者的手牌</h2>
<p>虽然求职者与公司谈判过程中处于相对弱势地位，但是这并不意味着我们完全没有牌可打，所以我们要利用好手上的牌。</p>
<h3 id="公司内部的助力"><span class="section-num">6.1</span> 公司内部的助力</h3>
<p>说起来可能难以置信，虽然求职者可能与公司的人还毫无联系，但是求职者会在公司内有相当的助力，因为基本上你接触到的公司每个人都是想你接 offer 的.</p>
<p>对于公司来说，在你身上已经花费了相当的成本，HR 筛选简历，安排面试官面试，2-4轮的面试，都要花费面试官与HR时间的，公司付给员工工资，这些时间都是要算钱的。</p>
<p>而一旦你拒绝，这些花费的时间成本都会成为沉没成本。</p>
<p>对于 HR 来说，她们也是有考核指标的，招聘人数也是她们的考核指标，所以她们也有强烈的动机尽快招到人。</p>
<p>而对于招聘你的团队老板来说，肯定是希望赶紧招到人来干活的，工资多少他不关心，反正出的又不是他的钱。</p>
<p>所以这些人都是希望你能接 offer 的潜在助力。</p>
<h3 id="多拿offer"><span class="section-num">6.2</span> 多拿Offer</h3>
<p>拿到多个的 offer，这个会成为你和 HR 谈判的最大底气，你就不会担心谈崩了，这家给不了，了不起去下家；如果多个公司愿意相互竞价，你就能渔翁得利，利益最大化。</p>
<p>对于公司来说，肯定是希望招到能力强，能干活的候选人，但是怎么去量化能力强呢，即便候选人通过了面试，也不能说明他们能力一定能胜任。</p>
<p>但是如果你能通过多个公司的面试，对于HR来说，相当你额外再通过了十几二十轮的面试，
从概率来说，你是没能力的候选人的机率大大降低，既然大家都说你好，那么他们就有更强烈的意愿与你洽谈。</p>
<h3 id="薪资是底牌"><span class="section-num">6.3</span> 薪资是底牌</h3>
<p>上文提到，公司的策略是希望以尽量低的薪资来招到人，那么两个非常重要的参考标准：</p>
<p>一个就是别的公司给你开的工资，另外一个就是你现在的工资,</p>
<p>假如你现在的工资是20W 一年, 那我就只给你加个20%, 最多给加个30%, 既然你20W都愿意干，为什么我要开高价.</p>
<p>所以你现在的薪资就是你的底牌, 千万不要给人看到, 不然就定死上限了。</p>
<p>不然你拿了一次低工资，后面次次跳槽都要拿低工资，凭什么呢？真的是闻者伤心。</p>
<p>所以HR问你的时候，不要正面回答，尽量模糊化，以此争取最大利益。</p>
<p>比如HR换个问法，问你的预期薪资是多少？</p>
<p>这个问题非常坑，相当于给自己划定上限，如果你回答30W, 她就绝对不可能给你40W, 你可以回答说：我心里没个具体数字，但我对任何有竞争力的 offer 持开放态度.</p>
<p>一定要给的话，就给个模糊的范围, 比如阿里P7的水平吧。</p>
<h2 id="谈判的手段"><span class="section-num">7</span> 谈判的手段</h2>
<h3 id="表达强烈的兴趣"><span class="section-num">7.1</span> 表达强烈的兴趣</h3>
<p>&ldquo;你想加入这家公司&quot;这个前提是一切谈判的基础。</p>
<p>如果你表现出对加入这家公司兴趣寥廖, 那么即使你强如 Linus Torvalds, 也不会有HR会想和你谈薪资的，因为这个注定是不会有结果，她们当然也不会浪费时间。</p>
<p>所以你需要表示出对这家公司有强烈兴趣，无论是文化，工作方式，业务或者技术栈都与你非常契合，而你加入公司目前唯一的障碍就是没有拿到满意的薪资，这样HR才会非常乐意来为你争取。</p>
<p>你总要创造些条件给 HR, 她们才能为你争取更多。</p>
<p>所以无论你是否对这家公司感兴趣，起码你在谈薪资阶段都要表现出强烈的兴趣。</p>
<h3 id="少说多听"><span class="section-num">7.2</span> 少说多听</h3>
<p>求职者在谈薪资过程中是处于相对弱势的地位的，所以在谈判过程中要多听少说，
因为你的底牌不能被她们套出来，说得越多，不经意间漏出来的可能就越大。</p>
<p>而在电话中，当对方HR 试探性给出一个报价后，你都不要太快回应或者表达出来，因为对面的大概率也是谈判的老手，如果你表现得很欣喜, 那么她们就知道这个已经比你的底线要高了.</p>
<p>所以当听到报价之后，你可以适当地保持沉默，表示犹豫，然后让她们进一步加码, 即使她们不加码，你也用沉默表达了对报价的不满意.</p>
<h3 id="多个公司竞价"><span class="section-num">7.3</span> 多个公司竞价</h3>
<p>如果只向一个公司谈 offer, 最多两轮，可能就到了摊牌的时刻了。</p>
<p>只有能让多个公司竞价，你才能让你的「未来雇主们」卷起来，实现利益最大化, 另外其他公司的报价也可以成为的谈薪资的底价.</p>
<p>比如你工资是20W, 你想要30W, 公司的HR就会挑战你，说你这30W 太高了，他们给不来, 其实也是换种说法说你不值30W.</p>
<p>但是如果A公司给了你30W, 那么你就有底气问 B 公司要高于30W 的薪资, 毕竟这是市场对你的认可.</p>
<p>假设B 公司给了你35W, 那么你就可以回头向A 公司说，你拿到个35W 的offer, 让A公司提高下标准, A 公司可能给到个37W,</p>
<p>然后你再回到 B 公司说:</p>
<blockquote>
<p>我真的很想加入贵公司，和你们一起工作，只是A公司给了37W, 着实很为难，我真的很加入你们, 你们可以再匹配一下嘛?</p>
</blockquote>
<p>B 如果能给到40W, 再把同样的话和A 说一次, 两家公司工作竞价两次, 就相当于谈了4次了.</p>
<p>如果手握两家以上公司的 offer, 那么这个可以再用到其他公司身上，所以这个就要求你要在差不多的时间拿到全部的 offer.</p>
<h3 id="不要当场答应"><span class="section-num">7.4</span> 不要当场答应</h3>
<p>无论 HR 给你的报价多么诱人，又或者这个是你梦寐以求的公司，都不要当场答应下来，
万一其他公司给你更好的报价呢，当场答应而后又反悔给人的印象太不好了, 要给自己留有余地。</p>
<p>如果 HR 要你马上给出答案，你也可以这样回应:</p>
<blockquote>
<p>我非常珍惜贵公司提供的这个机会，我也非常希望加入贵公司，但是我意识到这个机会会对我的职业生涯产生重大影响，
我希望可以和家人商量之后再下决定。</p>
</blockquote>
<h2 id="总结"><span class="section-num">8</span> 总结</h2>
<p>几轮谈薪之后, 你可能拿到满意或者仍然不满意的报价，你就可以根据自己的诉求选择公司了。</p>
<p>你不一定会选钱最多的，可能你还会考虑公司前景，职业前景，工作强度等因素，但是起码选择之后你不会因没有为争取更高的收入进行谈判而后悔。</p>
<p>此外，这个可能是你在这家公司最容易调薪的一次了。</p>
<p>一旦你加入公司之后，你就会受限于绩效，级别，部门业绩等各种限制，再也不会有打几通电话, 发几封邮件就能涨薪的美事了。</p>
<p>所以，从这个角度来说，谈薪资的电话可能是你最应该打，且性价比最高的电话(大概率也没有之一)</p>
<h2 id="参考"><span class="section-num">9</span> 参考</h2>
<ul>
<li><a href="https://www.healthyhacker.com/2019/07/13/more-money-please/">https://www.healthyhacker.com/2019/07/13/more-money-please/</a> (一个我很喜欢的播客的主持人分享他自己谈薪资的过程)</li>
<li><a href="https://www.1point3acres.com/bbs/thread-286214-1-1.html">https://www.1point3acres.com/bbs/thread-286214-1-1.html</a> (一亩三分地版主分享求职如何跟公司讨价还价)</li>
<li><a href="https://podcasts.apple.com/us/podcast/no-477-%E6%88%91%E8%AE%A4%E8%AF%86%E7%9A%84%E6%9C%80%E5%8E%89%E5%AE%B3%E7%9A%84%E5%88%9D%E4%B8%AD%E6%AF%95%E4%B8%9A%E7%94%9F-%E5%8A%AA%E5%8A%9B%E5%B7%A5%E4%BD%9C-%E5%AD%98%E9%92%B1-%E7%95%99%E5%AD%A6-%E8%AF%BB%E4%B9%A6-%E7%BB%A7%E7%BB%AD%E5%8A%AA%E5%8A%9B%E5%B7%A5%E4%BD%9C/id1147186605?i=1000676154793">https://podcasts.apple.com/us/podcast/no-477-%E6%88%91%E8%AE%A4%E8%AF%86%E7%9A%84%E6%9C%80%E5%8E%89%E5%AE%B3%E7%9A%84%E5%88%9D%E4%B8%AD%E6%AF%95%E4%B8%9A%E7%94%9F-%E5%8A%AA%E5%8A%9B%E5%B7%A5%E4%BD%9C-%E5%AD%98%E9%92%B1-%E7%95%99%E5%AD%A6-%E8%AF%BB%E4%B9%A6-%E7%BB%A7%E7%BB%AD%E5%8A%AA%E5%8A%9B%E5%B7%A5%E4%BD%9C/id1147186605?i=1000676154793</a>(忽软忽硬电台采访，这位同行在下家要求出具薪资证明的时候，请财务吃饭，直接将工资x2再打印出来，叹为观止)</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>重新造轮子系列(一)：从0开发单元测试框架</title>
      <link>https://ramsayleung.github.io/zh/post/2025/reinvent_unit_test/</link>
      <pubDate>Sun, 16 Feb 2025 22:27:00 -0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2025/reinvent_unit_test/</guid>
      <description>1 前言 单元测试的重要性无须多言，它是保证项目质量的基石. 如果没有单元测试，根本没有信心说自己开发的功能是符合要求的，更没法在没有测试的保证进</description>
      <content:encoded><![CDATA[<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>单元测试的重要性无须多言，它是保证项目质量的基石.</p>
<p>如果没有单元测试，根本没有信心说自己开发的功能是符合要求的，更没法在没有测试的保证进行项目的重构。</p>
<p>既然单元测试如此重要，今天就用Typescript来写一个简单但五脏俱全的单元测试框架。</p>
<h2 id="历史"><span class="section-num">2</span> 历史</h2>
<p>Javascript 比较流行的测试框架是 <a href="https://mochajs.org/">Mocha</a> 和 <a href="https://jestjs.io/">Jest</a> , Java 具有统治地位的单元测试框架就是 <a href="https://junit.org/junit5/">JUnit</a>, 现在做单元测试的框架, 一般称为 xUnit 家族, 而 xUnit 家族最早的成员, 不是 JUnit, 而是 SUnit(Smalltalk Unit), SUnit 的历史比 Junit 悠久得多, 大约在1994年的时候, <a href="https://en.wikipedia.org/wiki/Kent_Beck">Kent Beck</a>, 也就是 Junit 的作者之一, 写了 <a href="https://sunit.sourceforge.net/">SUnit</a>, 而后才有了 JUnit (1998).</p>
<p>所以, 在 <a href="https://sunit.sourceforge.net/">SUnit</a> 的网站上, 极其显摆的写着”一切单元测试框架之母” (The mother of all unit testing frameworks).</p>
<p>事实上这是大实话 — 所有单元测试框架里面的名词术语, 都从 Sunit 来的, 如 TestCase, Fixture 等等.</p>
<h2 id="实现"><span class="section-num">3</span> 实现</h2>
<h3 id="需求"><span class="section-num">3.1</span> 需求</h3>
<p>先定义需求, 一个单元测试框架应该可以做到下面的事:</p>
<ol>
<li>找到包含测试的文件</li>
<li>找到上述文件的测试 case</li>
<li>运行测试case</li>
<li>捕获测试运行结果，并输出所有的测试的运行总结</li>
</ol>
<h3 id="原型"><span class="section-num">3.2</span> 原型</h3>
<p>一条 <code>assert</code> 语句就可以看作是最简单的测试 case, 对于测试case, 我们会有以下三种结果：</p>
<ul>
<li>Pass: 运行成功, 测试结果与预期一致</li>
<li>Fail: 运行失败, 测试结果与预期不一致</li>
<li>Error: 运行测试过程中出现错误，我们不确定测试结果是否与预期一致</li>
</ul>
<p>我们用以下的状态机来判断测试的结果:</p>
<figure>
    <img loading="lazy" src="/ox-hugo/unit_test_result_state.png"/> 
</figure>

<p>我们把要实现的单元测试框架命名为 <code>Hope</code>, 根据上面的状态机，我们很快就可以写出一个原型：</p>
<p>单元测试用例接收一个函数作为参数，然后又集中运行所有的测试用例，并根据是否抛出异常以及异常的类型来判断结果:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">assert</span> <span class="nx">from</span> <span class="s1">&#39;assert&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">HopeTests</span><span class="o">:</span> <span class="p">[</span><span class="nx">string</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="k">void</span><span class="p">][]</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">HopePass</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">HopeFail</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">HopeError</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Record a single test for running later.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">hopeThat</span> <span class="o">=</span> <span class="p">(</span><span class="nx">message</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">callback</span><span class="o">:</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="k">void</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">HopeTests</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="nx">message</span><span class="p">,</span> <span class="nx">callback</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">HopeTests</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(([</span><span class="nx">message</span><span class="p">,</span> <span class="nx">test</span><span class="p">])</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">test</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="nx">HopePass</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">assert</span><span class="p">.</span><span class="nx">AssertionError</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">HopeFail</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">HopeError</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`pass </span><span class="si">${</span><span class="nx">HopePass</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`fail </span><span class="si">${</span><span class="nx">HopeFail</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`error </span><span class="si">${</span><span class="nx">HopeError</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>让我们编写点代码来测试下我们的「单元测试框架」:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">// Something to test(doesn&#39;t handle zero properly)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">sign</span> <span class="o">=</span> <span class="p">(</span><span class="nx">value</span><span class="o">:</span> <span class="nx">number</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">value</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// These two should pass
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">hopeThat</span><span class="p">(</span><span class="s1">&#39;Sign of negative is -1&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">assert</span><span class="p">(</span><span class="nx">sign</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">)</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="nx">hopeThat</span><span class="p">(</span><span class="s1">&#39;Sign of positive is 1&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">assert</span><span class="p">(</span><span class="nx">sign</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="o">===</span> <span class="mi">1</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// This one should fail.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">hopeThat</span><span class="p">(</span><span class="s1">&#39;Sign of zero is 0&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">assert</span><span class="p">(</span><span class="nx">sign</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">===</span> <span class="mi">0</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// This one is an error.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">hopeThat</span><span class="p">(</span><span class="s1">&#39;Sign mispelled is erorr&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">assert</span><span class="p">(</span><span class="nx">sign</span><span class="p">(</span><span class="nx">sgn</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Call the main driver
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">main</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>输出的结果是:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">-&gt; npx tsx dry_run.ts
</span></span><span class="line"><span class="cl">pass <span class="m">2</span>
</span></span><span class="line"><span class="cl">fail <span class="m">1</span>
</span></span><span class="line"><span class="cl">error <span class="m">1</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们的第一版单元测试框架 <code>Hope</code> 能正常运行了，不过它有几个问题：</p>
<ol>
<li>它只是输出结果，但没有告诉我们是哪个单元测试成功了，哪个失败了，哪个报错，没法 debug</li>
<li>可变全局变量通常是有很大副作用的，我们应该把它封装起来</li>
<li>如果我们要测的函数里面，预期是要抛出 <code>assert.AssertionError</code>, 那么这个函数对应的测试用例就会被识别成失败的测试用例，也就是意味着我们不应该依赖 <code>assert.AssertError</code> 来作运行结果判断。</li>
</ol>
<h3 id="单例版本"><span class="section-num">3.3</span> 单例版本</h3>
<p>我们可以将上面的测试代码地址封装在一个类里，然后通过单例设计模式(<a href="https://refactoring.guru/design-patterns/singleton">Singleton pattern</a>)来确保只初始化出一个实例，这样就可以模拟出全局变量的效果，以此来解决前面的两个问题。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">assert</span> <span class="nx">from</span> <span class="s2">&#34;assert&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">caller</span> <span class="nx">from</span> <span class="s1">&#39;caller&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">Hope</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">private</span> <span class="nx">todo</span><span class="o">:</span> <span class="p">[</span><span class="nx">string</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="k">void</span><span class="p">][]</span> <span class="o">=</span> <span class="p">[];</span> <span class="c1">// 记录所有需要运行的测试case.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kr">private</span> <span class="nx">passes</span><span class="o">:</span> <span class="nx">string</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">  <span class="kr">private</span> <span class="nx">fails</span><span class="o">:</span> <span class="nx">string</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">  <span class="kr">private</span> <span class="nx">errors</span><span class="o">:</span> <span class="nx">string</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">  <span class="nx">constructor</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">todo</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">passes</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">fails</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">errors</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">test</span><span class="p">(</span><span class="nx">comment</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">callback</span><span class="o">:</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="k">void</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 通过caller 获取单元测试用例对应的文件名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="nx">todo</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="sb">`</span><span class="si">${</span><span class="nx">caller</span><span class="p">()</span><span class="si">}</span><span class="sb">::</span><span class="si">${</span><span class="nx">comment</span><span class="si">}</span><span class="sb">`</span><span class="p">,</span> <span class="nx">callback</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">run</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">todo</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(([</span><span class="nx">comment</span><span class="p">,</span> <span class="nx">test</span><span class="p">])</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">test</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">passes</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">comment</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">assert</span><span class="p">.</span><span class="nx">AssertionError</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="k">this</span><span class="p">.</span><span class="nx">fails</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">comment</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="k">this</span><span class="p">.</span><span class="nx">errors</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">comment</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="k">new</span> <span class="nx">Hope</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>上面的代码又是如何实现单例模式的呢？依靠的是 Node 的两个运行机制:</p>
<ol>
<li>在加载一个 <code>module</code> 的时候, 它就会解释并执行 <code>module</code> 的代码，这意味着它会运行 <code>new Hope()</code> 并且导出新创建的实例</li>
<li>那么是否意味着，每个 <code>import</code> 语句都会运行一下 <code>new Hope()</code> 呢? 并不是，Node会缓存导入的 <code>module</code> ，也就是说无论一个 <code>module</code> 被导入多少次, 它也只会执行一次代码。</li>
</ol>
<p>只要导入 <code>hope.ts</code> 之后, 就可以使用 <code>hope.test()</code> 会注册单元测试用例，以便后续执行:</p>
<figure>
    <img loading="lazy" src="/ox-hugo/unit_test_hope_structure.svg"/> 
</figure>

<p>最后， 我们只需要再实现下输出测试结果的功能，既支持输出一行的简短结果，又可以支持详尽的输出. 如果需要的话，后续还可以支持输出JSON, CSV, 或者HTML 格式的结果:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">terse</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">cases</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="nx">map</span><span class="p">(([</span><span class="nx">title</span><span class="p">,</span> <span class="nx">results</span><span class="p">])</span> <span class="p">=&gt;</span> <span class="sb">`</span><span class="si">${</span><span class="nx">title</span><span class="si">}</span><span class="sb">: </span><span class="si">${</span><span class="nx">results</span><span class="p">.</span><span class="nx">length</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">verbose</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">report</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">prefix</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="p">[</span><span class="nx">title</span><span class="p">,</span> <span class="nx">results</span><span class="p">]</span> <span class="k">of</span> <span class="k">this</span><span class="p">.</span><span class="nx">cases</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">report</span> <span class="o">+=</span> <span class="sb">`</span><span class="si">${</span><span class="nx">prefix</span><span class="si">}${</span><span class="nx">title</span><span class="si">}</span><span class="sb">:`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">prefix</span> <span class="o">=</span> <span class="s1">&#39;\n&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="nx">r</span> <span class="k">of</span> <span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">report</span> <span class="o">+=</span> <span class="sb">`</span><span class="si">${</span><span class="nx">prefix</span><span class="si">}</span><span class="sb"> </span><span class="si">${</span><span class="nx">r</span><span class="si">}</span><span class="sb">`</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">report</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">cases</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="s1">&#39;passes&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">passes</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="s1">&#39;fails&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">fails</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="s1">&#39;errors&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">errors</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>万事具备，接下来就让我们写个函数验证下 <code>Hope</code> 框架:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">assert</span> <span class="nx">from</span> <span class="s2">&#34;assert&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">hope</span> <span class="nx">from</span> <span class="s2">&#34;./hope&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">hope</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;Sum of 1 and 2&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">assert</span><span class="p">((</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="o">===</span> <span class="mi">3</span><span class="p">));</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>看起来挺不错，但是要怎么运行这个测试case 呢? 总不能每个测试文件都调用下 <code>hope.run()</code> 嘛? 人家 <code>Jest</code> 都可以自动扫描并运行测试用例。</p>
<p>让我们参考 Jest, 实现一个 <code>Runner</code>, 也实现动态加载测试文件.</p>
<p><code>import</code> 不仅可以用来导入其他的模块，它可以当作是一个 async 函数，加载指定路径的文件, 如:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">await</span> <span class="kr">import</span><span class="p">(</span><span class="nx">module_path</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>为了更好地控制我们的单元测试, 我们可以给 <code>Hope</code> 框架增加上一些命令行参数以控制其行为, CLI + Runner 的实现如下:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">minimist</span> <span class="nx">from</span> <span class="s1">&#39;minimist&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">glob</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;glob&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">hope</span> <span class="nx">from</span> <span class="s1">&#39;./hope&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">fileURLToPath</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;url&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">parse</span> <span class="o">=</span> <span class="p">(</span><span class="nx">args</span><span class="o">:</span> <span class="nx">string</span><span class="p">[])</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">parsed</span> <span class="o">=</span> <span class="nx">minimist</span><span class="p">(</span><span class="nx">args</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Default root directory is current directory if not specified
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">root</span><span class="o">:</span> <span class="nx">parsed</span><span class="p">.</span><span class="nx">root</span> <span class="o">||</span> <span class="s1">&#39;.&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Output format can be &#39;terse&#39; or &#39;verbose&#39; (default)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">output</span><span class="o">:</span> <span class="nx">parsed</span><span class="p">.</span><span class="nx">output</span> <span class="o">||</span> <span class="s1">&#39;verbose&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Array of test filenames if explicitly provided
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">filenames</span><span class="o">:</span> <span class="nx">parsed</span><span class="p">.</span><span class="nx">_</span> <span class="o">||</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="kr">async</span> <span class="p">(</span><span class="nx">args</span><span class="o">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">options</span> <span class="o">=</span> <span class="nx">parse</span><span class="p">(</span><span class="nx">args</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">filenames</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">options</span><span class="p">.</span><span class="nx">filenames</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">glob</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">options</span><span class="p">.</span><span class="nx">root</span><span class="si">}</span><span class="sb">/**/test*.{ts,js}`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="nx">f</span> <span class="k">of</span> <span class="nx">options</span><span class="p">.</span><span class="nx">filenames</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">absolutePath</span> <span class="o">=</span> <span class="nx">fileURLToPath</span><span class="p">(</span><span class="k">new</span> <span class="nx">URL</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span> <span class="kr">import</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">url</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="kr">await</span> <span class="kr">import</span><span class="p">(</span><span class="nx">absolutePath</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">hope</span><span class="p">.</span><span class="nx">run</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">output</span> <span class="o">===</span> <span class="s1">&#39;terse&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="nx">hope</span><span class="p">.</span><span class="nx">terse</span><span class="p">()</span> <span class="o">:</span> <span class="nx">hope</span><span class="p">.</span><span class="nx">verbose</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">main</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们默认会匹配所有以 <code>test</code> 为前缀的 ts 和 js 文件, 然后通过 <code>import</code> 导入, 因为 <code>hope</code> 是单例模式，所以所有的测试文件用的都是同一个实例, <code>hope.run</code> 就将注册的所有单元测试运行.</p>
<p>整个框架的工作流程如下:</p>
<figure>
    <img loading="lazy" src="/ox-hugo/unit_test_workflow.png"/> 
</figure>

<p>大功告成，现在就来运行下我们的单元测试:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">&gt; npx tsx pray.ts
</span></span><span class="line"><span class="cl">passes:
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_add.ts::Sum of <span class="m">1</span> and <span class="m">2</span>
</span></span><span class="line"><span class="cl">fails:
</span></span><span class="line"><span class="cl">errors:
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="优化"><span class="section-num">3.4</span> 优化</h3>
<h4 id="增加运行时间"><span class="section-num">3.4.1</span> 增加运行时间</h4>
<p>我们还可以记录每个测试用例的运行时间, 纳秒有点太小了，就精确到微秒即可:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">run</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">this</span><span class="p">.</span><span class="nx">todo</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(([</span><span class="nx">comment</span><span class="p">,</span> <span class="nx">test</span><span class="p">])</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="kr">const</span> <span class="nx">now</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">hrtime</span><span class="p">.</span><span class="nx">bigint</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">      <span class="nx">test</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">      <span class="kr">const</span> <span class="nx">elapsedInMicro</span> <span class="o">=</span> <span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">hrtime</span><span class="p">.</span><span class="nx">bigint</span><span class="p">()</span> <span class="o">-</span> <span class="nx">now</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="nx">BigInt</span><span class="p">(</span><span class="mi">1000</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">passes</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">comment</span> <span class="o">+</span> <span class="sb">`, execution time: </span><span class="si">${</span><span class="nx">elapsedInMicro</span><span class="si">}</span><span class="sb">us`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">assert</span><span class="p">.</span><span class="nx">AssertionError</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">fails</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">comment</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">errors</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">comment</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">&gt; npx tsx pray.ts
</span></span><span class="line"><span class="cl">passes:
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_add.ts::Sum of <span class="m">1</span> and 2, execution time: 5us
</span></span><span class="line"><span class="cl">fails:
</span></span><span class="line"><span class="cl">errors:
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="增加-assert-函数"><span class="section-num">3.4.2</span> 增加 assert 函数</h4>
<p>内置的 <code>assert</code> 函数只支持比较输入值是否为 True, 现代的测试框架都有很多的 <code>helper</code> 函数来简化 <code>assert</code> 语句，就让我们来实现下 <code>assertEqual</code>, <code>assertThrows</code>, <code>assertMapEqual</code>, <code>assertSetEqual</code>, <code>assertArraySame</code> 这几个函数:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * assert 抛出指定的异常
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kd">function</span> <span class="nx">assertThrows</span><span class="o">&lt;</span><span class="nx">T</span> <span class="kr">extends</span> <span class="nb">Error</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">expectedType</span><span class="o">:</span> <span class="k">new</span> <span class="p">(...</span><span class="nx">args</span><span class="o">:</span> <span class="nx">any</span><span class="p">[])</span> <span class="p">=&gt;</span> <span class="nx">T</span><span class="p">,</span> <span class="nx">func</span><span class="o">:</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="k">void</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// expected to throw exception
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">func</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// unreachable
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">assert</span><span class="p">(</span><span class="kc">false</span><span class="p">,</span> <span class="sb">`Expected function to throw </span><span class="si">${</span><span class="nx">expectedType</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span><span class="sb"> but it did not throw`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">assert</span><span class="p">(</span><span class="nx">error</span> <span class="k">instanceof</span> <span class="nx">expectedType</span><span class="p">,</span> <span class="sb">`Expected function to throw </span><span class="si">${</span><span class="nx">expectedType</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span><span class="sb"> but it threw </span><span class="si">${</span><span class="nx">error</span> <span class="k">instanceof</span> <span class="nb">Error</span> <span class="o">?</span> <span class="nx">error</span><span class="p">.</span><span class="nx">constructor</span><span class="p">.</span><span class="nx">name</span> <span class="o">:</span> <span class="k">typeof</span> <span class="nx">error</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * assert 两个元素相等
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kd">function</span> <span class="nx">assertEqual</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">actual</span><span class="o">:</span> <span class="nx">T</span><span class="p">,</span> <span class="nx">expected</span><span class="o">:</span> <span class="nx">T</span><span class="p">,</span> <span class="nx">message</span><span class="o">:</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">assert</span><span class="p">(</span><span class="nx">actual</span> <span class="o">===</span> <span class="nx">expected</span><span class="p">,</span> <span class="nx">message</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * assert 两个 Set 相同
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kd">function</span> <span class="nx">assertSetEqual</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">actual</span><span class="o">:</span> <span class="nx">Set</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">,</span> <span class="nx">expected</span><span class="o">:</span> <span class="nx">Set</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">,</span> <span class="nx">message</span><span class="o">:</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">assert</span><span class="p">(</span><span class="nx">actual</span><span class="p">.</span><span class="nx">size</span> <span class="o">==</span> <span class="nx">expected</span><span class="p">.</span><span class="nx">size</span><span class="p">,</span> <span class="nx">message</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="nx">element</span> <span class="k">of</span> <span class="nx">actual</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">assert</span><span class="p">(</span><span class="nx">expected</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">element</span><span class="p">),</span> <span class="nx">message</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * assert 两个 Map 相同
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kd">function</span> <span class="nx">assertMapEqual</span><span class="o">&lt;</span><span class="nx">K</span> <span class="kr">extends</span> <span class="nx">string</span> <span class="o">|</span> <span class="nx">number</span> <span class="o">|</span> <span class="nx">symbol</span><span class="p">,</span> <span class="nx">V</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">actual</span><span class="o">:</span> <span class="nx">Record</span><span class="o">&lt;</span><span class="nx">K</span><span class="p">,</span> <span class="nx">V</span><span class="o">&gt;</span><span class="p">,</span> <span class="nx">expected</span><span class="o">:</span> <span class="nx">Record</span><span class="o">&lt;</span><span class="nx">K</span><span class="p">,</span> <span class="nx">V</span><span class="o">&gt;</span><span class="p">,</span> <span class="nx">message</span><span class="o">:</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">actualKeys</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">actual</span><span class="p">)</span> <span class="nx">as</span> <span class="nx">K</span><span class="p">[];</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">expectedKeys</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">expected</span><span class="p">)</span> <span class="nx">as</span> <span class="nx">K</span><span class="p">[];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">assert</span><span class="p">(</span><span class="nx">actualKeys</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="nx">expectedKeys</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="nx">message</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="nx">actualKey</span> <span class="k">of</span> <span class="nx">actualKeys</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">assert</span><span class="p">(</span><span class="nx">expected</span><span class="p">[</span><span class="nx">actualKey</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="nx">actual</span><span class="p">[</span><span class="nx">actualKey</span><span class="p">]</span> <span class="o">==</span> <span class="nx">expected</span><span class="p">[</span><span class="nx">actualKey</span><span class="p">],</span> <span class="nx">message</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * assert两个列举的值相等，如元素相等，但是顺序不同也被视为相同
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kd">function</span> <span class="nx">assertArraySame</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">actual</span><span class="o">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">,</span> <span class="nx">expected</span><span class="o">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">,</span> <span class="nx">message</span><span class="o">:</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">assert</span><span class="p">(</span><span class="nx">actual</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="nx">expected</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="nx">message</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">assertSetEqual</span><span class="p">(</span><span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="nx">actual</span><span class="p">),</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="nx">expected</span><span class="p">),</span> <span class="nx">message</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>针对上述函数的测试:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">assert</span> <span class="nx">from</span> <span class="s2">&#34;assert&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">hope</span><span class="p">,</span> <span class="p">{</span> <span class="nx">assertArraySame</span><span class="p">,</span> <span class="nx">assertMapEqual</span><span class="p">,</span> <span class="nx">assertSetEqual</span><span class="p">,</span> <span class="nx">assertThrows</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&#34;./hope&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">hope</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;test assertSetEqual happy path&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">setA</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">setB</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">([</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assertSetEqual</span><span class="p">(</span><span class="nx">setA</span><span class="p">,</span> <span class="nx">setB</span><span class="p">,</span> <span class="s1">&#39;Set supposed to be equal&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">assertSetEqual</span><span class="p">(</span><span class="k">new</span> <span class="nx">Set</span><span class="p">([]),</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">([]),</span> <span class="s1">&#39;Empty Set&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">hope</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;test assertMapEqual unhappy path&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assertThrows</span><span class="p">(</span><span class="nx">assert</span><span class="p">.</span><span class="nx">AssertionError</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">setA</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">setB</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">assertSetEqual</span><span class="p">(</span><span class="nx">setA</span><span class="p">,</span> <span class="nx">setB</span><span class="p">,</span> <span class="s1">&#39;Set supposed to be equal&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">hope</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;test assertMapEqual happy path&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">mapA</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;a&#39;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;b&#39;</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">mapB</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;b&#39;</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;a&#39;</span><span class="o">:</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assertMapEqual</span><span class="p">(</span><span class="nx">mapA</span><span class="p">,</span> <span class="nx">mapB</span><span class="p">,</span> <span class="s1">&#39;Map supposed to be map&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">hope</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;test assertMapEqual unhappy path&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">mapA</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;a&#39;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;b&#39;</span><span class="o">:</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">mapB</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;b&#39;</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;a&#39;</span><span class="o">:</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assertThrows</span><span class="p">(</span><span class="nx">assert</span><span class="p">.</span><span class="nx">AssertionError</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">assertMapEqual</span><span class="p">(</span><span class="nx">mapA</span><span class="p">,</span> <span class="nx">mapB</span><span class="p">,</span> <span class="s1">&#39;Map supposed to be map&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">hope</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;test assertArraySame happy path&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assertArraySame</span><span class="p">(</span><span class="nx">arr1</span><span class="p">,</span> <span class="nx">arr2</span><span class="p">,</span> <span class="s2">&#34;Arrays should have same elements&#34;</span><span class="p">);</span> <span class="c1">// Passe
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">hope</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;test assertArraySame unhappy path&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">assertThrows</span><span class="p">(</span><span class="nx">assert</span><span class="p">.</span><span class="nx">AssertionError</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">assertArraySame</span><span class="p">(</span><span class="nx">arr1</span><span class="p">,</span> <span class="nx">arr2</span><span class="p">,</span> <span class="s2">&#34;Arrays should have same elements&#34;</span><span class="p">);</span> <span class="c1">// Passe
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="增加-s-select-参数指定测试文件"><span class="section-num">3.4.3</span> 增加 -s/&ndash;select 参数指定测试文件</h4>
<p>我们的 <code>Runner</code> 默认匹配的是以 <code>test</code> 为前缀的测试文件, 我们可以增加一个 <code>-s/--select</code> 参数，用来指定需要匹配的测试文件名：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">parse</span> <span class="o">=</span> <span class="p">(</span><span class="nx">args</span><span class="o">:</span> <span class="nx">string</span><span class="p">[])</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">parsed</span> <span class="o">=</span> <span class="nx">minimist</span><span class="p">(</span><span class="nx">args</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">...</span>
</span></span><span class="line"><span class="cl">    <span class="nx">select</span><span class="o">:</span> <span class="nx">parsed</span><span class="p">.</span><span class="nx">select</span> <span class="o">||</span> <span class="nx">parsed</span><span class="p">.</span><span class="nx">s</span> <span class="c1">// 增加select 参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="kr">async</span> <span class="p">(</span><span class="nx">args</span><span class="o">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">options</span> <span class="o">=</span> <span class="nx">parse</span><span class="p">(</span><span class="nx">args</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">filenames</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">namePattern</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">select</span> <span class="o">??</span> <span class="s1">&#39;test*&#39;</span><span class="p">;</span> <span class="c1">// 使用传入的模式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">options</span><span class="p">.</span><span class="nx">filenames</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">glob</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">options</span><span class="p">.</span><span class="nx">root</span><span class="si">}</span><span class="sb">/**/</span><span class="si">${</span><span class="nx">namePattern</span><span class="si">}</span><span class="sb">.{ts,js}`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>运行结果:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">&gt; ls -al test*
</span></span><span class="line"><span class="cl">-rw-r--r--@ <span class="m">1</span> ramsayleung  wheel   <span class="m">115</span> <span class="m">17</span> Feb 10:01 test_add.ts
</span></span><span class="line"><span class="cl">-rw-r--r--@ <span class="m">1</span> ramsayleung  wheel   <span class="m">762</span> <span class="m">17</span> Feb 10:01 test_approx_equal.ts
</span></span><span class="line"><span class="cl">-rw-r--r--@ <span class="m">1</span> ramsayleung  wheel  <span class="m">1536</span> <span class="m">17</span> Feb 10:38 test_assert.ts
</span></span><span class="line"><span class="cl">-rw-r--r--@ <span class="m">1</span> ramsayleung  wheel   <span class="m">187</span> <span class="m">17</span> Feb 10:38 test_async.ts
</span></span><span class="line"><span class="cl">-rw-r--r--@ <span class="m">1</span> ramsayleung  wheel   <span class="m">275</span> <span class="m">17</span> Feb 10:38 test_setup_teardown.ts
</span></span><span class="line"><span class="cl">-rw-r--r--@ <span class="m">1</span> ramsayleung  wheel   <span class="m">140</span> <span class="m">17</span> Feb 10:38 test_tag.ts
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt; npx tsx pray.ts -s <span class="s2">&#34;test_a*&#34;</span>
</span></span><span class="line"><span class="cl">passes:
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_async.ts::delayed test, execution time: 412us
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_assert.ts::test assertSetEqual happy path, execution time: 31us
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_assert.ts::test assertMapEqual unhappy path, execution time: 1175us
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_assert.ts::test assertMapEqual happy path, execution time: 32us
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_assert.ts::test assertMapEqual unhappy path, execution time: 85us
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_assert.ts::test assertArraySame happy path, execution time: 17us
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_assert.ts::test assertArraySame unhappy path, execution time: 54us
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_approx_equal.ts::Default margin throws exception, execution time: 111us
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_approx_equal.ts::Large margin not throws exception, execution time: 6us
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_approx_equal.ts::Relative error throw exception, execution time: 51us
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_approx_equal.ts::Default Relative error not throw exception: , execution time: 5us
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_add.ts::Sum of <span class="m">1</span> and 2, execution time: 4us
</span></span><span class="line"><span class="cl">fails:
</span></span><span class="line"><span class="cl">errors:
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="增加-t-tag-参数按标签运行测试case"><span class="section-num">3.4.4</span> 增加 -t/&ndash;tag 参数按标签运行测试case</h4>
<p>对于 <code>hope.test</code> 函数，我们还可以提供一个额外的参数，用于给这个test case 打标签:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">hope</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;Difference of 1 and 2&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">assert</span><span class="p">((</span><span class="mi">1</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">          <span class="p">[</span><span class="s1">&#39;math&#39;</span><span class="p">,</span> <span class="s1">&#39;fast&#39;</span><span class="p">])</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后通过 <code>-t/--tag</code> 按指定的tag来运行测试用例, 实现起来很容易:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">test</span><span class="p">(</span><span class="nx">comment</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">callback</span><span class="o">:</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="k">void</span><span class="p">,</span> <span class="nx">tags</span><span class="o">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">[])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">todo</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="sb">`</span><span class="si">${</span><span class="nx">caller</span><span class="p">()</span><span class="si">}</span><span class="sb">::</span><span class="si">${</span><span class="nx">comment</span><span class="si">}</span><span class="sb">`</span><span class="p">,</span> <span class="nx">callback</span><span class="p">,</span> <span class="nx">tags</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">run</span><span class="p">(</span><span class="nx">tag</span><span class="o">:</span> <span class="nx">string</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">todo</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="nx">filter</span><span class="p">(([</span><span class="nx">comment</span><span class="p">,</span> <span class="nx">test</span><span class="p">,</span> <span class="nx">tags</span><span class="p">])</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="nx">tag</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">true</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="nx">tags</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">tag</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">})</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="nx">forEach</span><span class="p">(([</span><span class="nx">comment</span><span class="p">,</span> <span class="nx">test</span><span class="p">,</span> <span class="nx">tags</span><span class="p">])</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// run the test, nothing change
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">parse</span> <span class="o">=</span> <span class="p">(</span><span class="nx">args</span><span class="o">:</span> <span class="nx">string</span><span class="p">[])</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">parsed</span> <span class="o">=</span> <span class="nx">minimist</span><span class="p">(</span><span class="nx">args</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="p">...</span>
</span></span><span class="line"><span class="cl">            <span class="nx">tag</span><span class="o">:</span> <span class="nx">parsed</span><span class="p">.</span><span class="nx">tag</span> <span class="o">||</span> <span class="nx">parsed</span><span class="p">.</span><span class="nx">t</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="kr">async</span> <span class="p">(</span><span class="nx">args</span><span class="o">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="p">...</span>
</span></span><span class="line"><span class="cl">            <span class="nx">hope</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">tag</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">...</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>test_tag.ts</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">assert</span> <span class="nx">from</span> <span class="s2">&#34;assert&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">hope</span> <span class="nx">from</span> <span class="s2">&#34;./hope&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">hope</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;Differene of 1 and 2&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">assert</span><span class="p">((</span><span class="mi">1</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="p">[</span><span class="s1">&#39;math&#39;</span><span class="p">,</span> <span class="s1">&#39;fast&#39;</span><span class="p">]);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">&gt; npx tsx pray.ts -t <span class="s2">&#34;math&#34;</span>
</span></span><span class="line"><span class="cl">passes:
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_tag.ts::Differene of <span class="m">1</span> and 2, execution time: 5us
</span></span><span class="line"><span class="cl">fails:
</span></span><span class="line"><span class="cl">errors:
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="setup与teardown"><span class="section-num">3.4.5</span> setup与teardown</h4>
<p>正常的测试框架都是有 <code>setup</code> 与 <code>teardown</code> 函数的，可以指定在每个测试case 运行之前或之后的函数，比如运行测试case 前的数据准备，以为运行结束时的数据清理，我们的测试框架也可以支持这个功能：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">type</span> <span class="nx">CallbackType</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="k">void</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">Hope</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">...</span>
</span></span><span class="line"><span class="cl">  <span class="kr">private</span> <span class="nx">setupFn</span><span class="o">:</span> <span class="nx">CallbackType</span> <span class="o">|</span> <span class="kc">null</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kr">private</span> <span class="nx">teardownFn</span><span class="o">:</span> <span class="nx">CallbackType</span> <span class="o">|</span> <span class="kc">null</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">setup</span><span class="p">(</span><span class="nx">setupFn</span><span class="o">:</span> <span class="nx">CallbackType</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">setupFn</span> <span class="o">=</span> <span class="nx">setupFn</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">teardown</span><span class="p">(</span><span class="nx">teardownFn</span><span class="o">:</span> <span class="nx">CallbackType</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">teardownFn</span> <span class="o">=</span> <span class="nx">teardownFn</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">run</span><span class="p">(</span><span class="nx">tag</span><span class="o">:</span> <span class="nx">string</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">todo</span>
</span></span><span class="line"><span class="cl">      <span class="p">.</span><span class="nx">filter</span><span class="p">(([</span><span class="nx">comment</span><span class="p">,</span> <span class="nx">test</span><span class="p">,</span> <span class="nx">tags</span><span class="p">])</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nx">tag</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">true</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">tags</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">tag</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">})</span>
</span></span><span class="line"><span class="cl">      <span class="p">.</span><span class="nx">forEach</span><span class="p">(([</span><span class="nx">comment</span><span class="p">,</span> <span class="nx">test</span><span class="p">,</span> <span class="nx">tags</span><span class="p">])</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">setupFn</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="p">.</span><span class="nx">setupFn</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">          <span class="kr">const</span> <span class="nx">now</span> <span class="o">=</span> <span class="nx">microtime</span><span class="p">.</span><span class="nx">now</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">          <span class="nx">test</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">          <span class="kr">const</span> <span class="nx">elapsedInMicro</span> <span class="o">=</span> <span class="nx">microtime</span><span class="p">.</span><span class="nx">now</span><span class="p">()</span> <span class="o">-</span> <span class="nx">now</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="k">this</span><span class="p">.</span><span class="nx">passes</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">comment</span> <span class="o">+</span> <span class="sb">`, execution time: </span><span class="si">${</span><span class="nx">elapsedInMicro</span><span class="si">}</span><span class="sb">us`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">          <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">teardownFn</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="p">.</span><span class="nx">teardownFn</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="k">if</span> <span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">assert</span><span class="p">.</span><span class="nx">AssertionError</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="p">.</span><span class="nx">fails</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">comment</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="p">.</span><span class="nx">errors</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">comment</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>针对上述函数的测试:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">hope</span><span class="p">,</span> <span class="p">{</span> <span class="nx">assertEqual</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&#34;./hope&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">createFixtures</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">hope</span><span class="p">.</span><span class="nx">setup</span><span class="p">(</span><span class="nx">createFixtures</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">hope</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;Validate x should be 1&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assertEqual</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;X should be 1&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">cleanUp</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">hope</span><span class="p">.</span><span class="nx">teardown</span><span class="p">(</span><span class="nx">cleanUp</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="增加对-async-测试case-的支持"><span class="section-num">3.4.6</span> 增加对 async 测试case 的支持</h4>
<p>目前我们的test case 都只支持同步的函数, 我们可以增加上对 <code>Promise</code> 的支持, 这样我们可以使用以下的语法:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">hope</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;delayed test&#39;</span><span class="p">,</span> <span class="kr">async</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{...})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>实现方式也很直接: 一种就是判断传入函数的类型, 如果是同步函数则直接调用，如果是 async 函数, 那么就加上 <code>await</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">type</span> <span class="nx">SyncCallbackType</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="k">void</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">type</span> <span class="nx">AsyncCallbackType</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="k">void</span><span class="o">&gt;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">type</span> <span class="nx">CallbackType</span> <span class="o">=</span> <span class="nx">SyncCallbackType</span> <span class="o">|</span> <span class="nx">AsyncCallbackType</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">Hope</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">private</span> <span class="nx">todo</span><span class="o">:</span> <span class="p">[</span><span class="nx">string</span><span class="p">,</span> <span class="nx">CallbackType</span><span class="p">,</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span><span class="p">][]</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">    <span class="kr">private</span> <span class="nx">setupFn</span><span class="o">:</span> <span class="nx">CallbackType</span> <span class="o">|</span> <span class="kc">null</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kr">private</span> <span class="nx">teardownFn</span><span class="o">:</span> <span class="nx">CallbackType</span> <span class="o">|</span> <span class="kc">null</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">setup</span><span class="p">(</span><span class="nx">setupFn</span><span class="o">:</span> <span class="nx">CallbackType</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">setupFn</span> <span class="o">=</span> <span class="nx">setupFn</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">teardown</span><span class="p">(</span><span class="nx">teardownFn</span><span class="o">:</span> <span class="nx">CallbackType</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">teardownFn</span> <span class="o">=</span> <span class="nx">teardownFn</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">test</span><span class="p">(</span><span class="nx">comment</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">callback</span><span class="o">:</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="k">void</span><span class="p">,</span> <span class="nx">tags</span><span class="o">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">[])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">todo</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="sb">`</span><span class="si">${</span><span class="nx">caller</span><span class="p">()</span><span class="si">}</span><span class="sb">::</span><span class="si">${</span><span class="nx">comment</span><span class="si">}</span><span class="sb">`</span><span class="p">,</span> <span class="nx">callback</span><span class="p">,</span> <span class="nx">tags</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kr">private</span> <span class="kr">async</span> <span class="nx">runTest</span><span class="p">(</span><span class="nx">comment</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">test</span><span class="o">:</span> <span class="nx">CallbackType</span><span class="p">,</span> <span class="nx">tags</span><span class="o">:</span> <span class="nx">string</span><span class="p">[])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">setupFn</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">isAsync</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">setupFn</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="kr">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">setupFn</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="k">this</span><span class="p">.</span><span class="nx">setupFn</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="kr">const</span> <span class="nx">now</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">hrtime</span><span class="p">.</span><span class="nx">bigint</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">isAsync</span><span class="p">(</span><span class="nx">test</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="kr">await</span> <span class="nx">test</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">test</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="kr">const</span> <span class="nx">elapsedInMicro</span> <span class="o">=</span> <span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">hrtime</span><span class="p">.</span><span class="nx">bigint</span><span class="p">()</span> <span class="o">-</span> <span class="nx">now</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="nx">BigInt</span><span class="p">(</span><span class="mi">1000</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="p">.</span><span class="nx">passes</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">comment</span> <span class="o">+</span> <span class="sb">`, execution time: </span><span class="si">${</span><span class="nx">elapsedInMicro</span><span class="si">}</span><span class="sb">us`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">teardownFn</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">isAsync</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">teardownFn</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="kr">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">teardownFn</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="k">this</span><span class="p">.</span><span class="nx">teardownFn</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">assert</span><span class="p">.</span><span class="nx">AssertionError</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">this</span><span class="p">.</span><span class="nx">fails</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">comment</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">this</span><span class="p">.</span><span class="nx">errors</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">comment</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kr">async</span> <span class="nx">run</span><span class="p">(</span><span class="nx">tag</span><span class="o">:</span> <span class="nx">string</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kr">const</span> <span class="nx">tests</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">todo</span>
</span></span><span class="line"><span class="cl">              <span class="p">.</span><span class="nx">filter</span><span class="p">(([</span><span class="nx">comment</span><span class="p">,</span> <span class="nx">test</span><span class="p">,</span> <span class="nx">tags</span><span class="p">])</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="k">if</span> <span class="p">(</span><span class="nx">tag</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">true</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">                  <span class="k">return</span> <span class="nx">tags</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">tag</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">              <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="p">[</span><span class="nx">comment</span><span class="p">,</span> <span class="nx">test</span><span class="p">,</span> <span class="nx">tags</span><span class="p">]</span> <span class="k">of</span> <span class="nx">tests</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="kr">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">runTest</span><span class="p">(</span><span class="nx">comment</span><span class="p">,</span> <span class="nx">test</span><span class="p">,</span> <span class="nx">tags</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kr">private</span> <span class="nx">isAsync</span><span class="p">(</span><span class="nx">fn</span><span class="o">:</span> <span class="nx">CallbackType</span><span class="p">)</span><span class="o">:</span> <span class="nx">fn</span> <span class="nx">is</span> <span class="nx">AsyncCallbackType</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">constructor</span><span class="p">.</span><span class="nx">name</span> <span class="o">===</span> <span class="s1">&#39;AsyncFunction&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>pray.ts</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="kr">async</span> <span class="p">(</span><span class="nx">args</span><span class="o">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">options</span> <span class="o">=</span> <span class="nx">parse</span><span class="p">(</span><span class="nx">args</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">filenames</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">namePattern</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">select</span> <span class="o">??</span> <span class="s1">&#39;test*&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">options</span><span class="p">.</span><span class="nx">filenames</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">glob</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">options</span><span class="p">.</span><span class="nx">root</span><span class="si">}</span><span class="sb">/**/</span><span class="si">${</span><span class="nx">namePattern</span><span class="si">}</span><span class="sb">.{ts,js}`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="nx">f</span> <span class="k">of</span> <span class="nx">options</span><span class="p">.</span><span class="nx">filenames</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">absolutePath</span> <span class="o">=</span> <span class="nx">fileURLToPath</span><span class="p">(</span><span class="k">new</span> <span class="nx">URL</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span> <span class="kr">import</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">url</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="kr">await</span> <span class="kr">import</span><span class="p">(</span><span class="nx">absolutePath</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">await</span> <span class="nx">hope</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">tag</span><span class="p">);</span> <span class="c1">// 增加上await
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">output</span> <span class="o">===</span> <span class="s1">&#39;terse&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="nx">hope</span><span class="p">.</span><span class="nx">terse</span><span class="p">()</span> <span class="o">:</span> <span class="nx">hope</span><span class="p">.</span><span class="nx">verbose</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span><span class="kr">await</span> <span class="nx">hope</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">tag</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="参考"><span class="section-num">4</span> 参考</h2>
<ul>
<li><a href="https://third-bit.com/sdxjs/unit-test/">https://third-bit.com/sdxjs/unit-test/</a></li>
<li><a href="https://blog.youxu.info/2008/11/30/pearl-in-smalltal/">https://blog.youxu.info/2008/11/30/pearl-in-smalltal/</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>ReInvent: 重新造轮子系列(序言)</title>
      <link>https://ramsayleung.github.io/zh/post/2025/reinvent_project/</link>
      <pubDate>Sun, 16 Feb 2025 22:10:00 -0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2025/reinvent_project/</guid>
      <description>1 起因与动机 最近在看 System Design By Example 这本书，主旨是通过设计和实现各种日常开发中常见的软件，以理解和提高系统设计(System Design)的能力。 每</description>
      <content:encoded><![CDATA[<h2 id="起因与动机"><span class="section-num">1</span> 起因与动机</h2>
<p>最近在看 <a href="https://third-bit.com/sdxjs/unit-test/">System Design By Example</a> 这本书，主旨是通过设计和实现各种日常开发中常见的软件，以理解和提高系统设计(System Design)的能力。</p>
<p>每个章节都会实现一个软件，然后还会有大量的习题来完善这个软件，以练带学。</p>
<p>而我最推崇，并且认为最好的学习方法就是：<a href="https://ramsayleung.github.io/zh/post/2022/feynman_technique/">费曼学习法(Feynman Technique)</a>, 其核心理念就是:</p>
<p><strong>学习一种新事物最好的方法是，用你的话讲给别人听。</strong></p>
<p><strong>通过向别人清楚的解说某一事物，来确认自己是否真的弄懂了这件事。</strong></p>
<p>所以说，学习最好的方式，是把你学到的东西教给别人。</p>
<p>因此，这个项目就是我在学习和理解 System Design By Example 这本书后，结合参考的论文和个人经验内化出来的学习成果。</p>
<p>也希望其他人也可以从中受益。</p>
<h2 id="项目"><span class="section-num">2</span> 项目</h2>
<p>GitHub: <a href="https://github.com/ramsayleung/reinvent">https://github.com/ramsayleung/reinvent</a></p>
<p>原书是用 node + Javascript 编写的，部分代码因API变更而变得不可用，因此本项目也做了对应修改，并将 Javascript 替换成 Typescript, 通过类型系统来降低维护成本。</p>
<ol>
<li><a href="/zh/post/2025/reinvent_unit_test/">单元测试框架</a></li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>杂谈AI取代程序员</title>
      <link>https://ramsayleung.github.io/zh/post/2025/%E6%9D%82%E8%B0%88ai%E5%8F%96%E4%BB%A3%E7%A8%8B%E5%BA%8F%E5%91%98/</link>
      <pubDate>Fri, 14 Feb 2025 21:15:00 -0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2025/%E6%9D%82%E8%B0%88ai%E5%8F%96%E4%BB%A3%E7%A8%8B%E5%BA%8F%E5%91%98/</guid>
      <description>1 前言 最近国产的DeepSeek 模型的爆火，让「AI取代程序员」的说法又甚嚣尘上, 比如在国内著名的程序员社区 V2ex 搜索「AI取代程序员」1，可以</description>
      <content:encoded><![CDATA[<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>最近国产的DeepSeek 模型的爆火，让「AI取代程序员」的说法又甚嚣尘上, 比如在国内著名的程序员社区 V2ex 搜索「<a href="https://www.sov2ex.com/?q=AI%E5%8F%96%E4%BB%A3%E7%A8%8B%E5%BA%8F%E5%91%98">AI取代程序员</a>」<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>，可以搜索出 69627 条结果(截止2025-02-15):</p>
<figure>
    <img loading="lazy" src="/ox-hugo/v2ex_ai_replace_programmer.jpg"/> 
</figure>

<p>以至于我的一位非程序员朋友都来关心我，问我是否有被取代的担忧。</p>
<p>在感谢朋友的关心之后，我也开始静下心来思考这个问题，以及形成这种想法背后可能的原因，然后就有了这篇文章。</p>
<h2 id="ai取代程序员"><span class="section-num">2</span> AI取代程序员</h2>
<p>在谈论AI能否真的取代程序员之前，我想先聊一下程序员的工作是什么, 毕竟定义好了问题才会分析.</p>
<h3 id="研发流程"><span class="section-num">2.1</span> 研发流程</h3>
<p>既然是程序员，那工作肯定是写代码嘛, 但是就我个人经验来说，我真正花费在写代码的时间可能连我工作时间30%都占不到.</p>
<p>一个新功能大体的研发流程如下：
当产品经理或者老板提出一个新需求的时候，程序员需要评估需求的可行性，然后撰写设计文档，评审设计方案，而后编码，测试再灰度上线功能，最后对新功能增加新监控告警，提供各项数据指标。</p>
<p>由此可知, 产品经理只会跟你说他/她想要什么(what), 但是产品经理肯定不知道如何实现这个功能的(how), 需要程序员把模糊又朦胧的问题具体化和细致化，然后再根据方案来编码。</p>
<p>遇到不合理的需求时，还需要告知产品经理，你的想法是不切实际的，比如经典的「根据手机壳颜色切换壁纸」需求</p>
<p>但是我们在使用AI的时候，更多是一个具体而明确的任务，并且是我们针对的需求已经拆分好的任务，
所以AI在做的只是将具体的设计方案翻译成代码的步骤。</p>
<p>这不禁让我想起自己当年在微信支付7级晋升8级的答辩项目：一个研发提效的代码生成框架。</p>
<p>我当时可谓信心满满，我的项目可以根据模板直接生成代码，不再需要手写CRUD的代码，以此来给工程师提效。</p>
<p>评委就询问我：</p>
<blockquote>
<p>你有对项目开发的各个环节的耗时和阻塞时间做量化分析么？</p>
<p>编码是整个研发流程效能最低的部分么？</p>
<p>从拿到需求到开发上线，只有编码可以提效么?</p>
</blockquote>
<p>评委这么一顿批头盖脸的输出，直接把我的信心给浇没了。</p>
<p>虽然我写的代码生成工具远不如大模型加持的AI强大，但看起来都只局限于解决编码问题，研发流程的其他问题并没有解决。</p>
<h3 id="功能性与非功能性需求"><span class="section-num">2.2</span> 功能性与非功能性需求</h3>
<p>在程序开发中，除了有功能性需求，还需要非功能性需求.</p>
<p>而功能性需求恰恰是其中最简单直接的，是满足「又不是不能用」的最基本要求。</p>
<p>比如我需要实现加法，这个就是功能性需求，AI就需要帮我把加法实现出来。</p>
<p>而所谓的非功能性需求，比较常见的是可扩展性(scalability)，可维护性(maintainability) 和性能(performance).</p>
<p>还是以加法为例, 我可能需要后面扩展到乘法和除法, 或者扩展到复数或者矩阵加法，要怎么易于扩展呢？</p>
<p>这些都是AI生成代码是没有考虑到的因素，AI比较擅长的可能是给它一个需求，它生成一段代码给我们。</p>
<p>但是在软件研发的生命周期中，有大概80%的时间，都是维护已有的系统，谁家没有个已经在跑的系统呢。</p>
<p>而给已有的系统上增加功能，就需要考虑各种奇怪的兼容性，相当于带着锁链来跳舞，并不能像从无到有，什么都不用考虑的那般洒脱。</p>
<p>而这样的限制，又是AI生成代码时未曾考虑的。所以从零开始的日抛型，不需要考虑维护成本的项目，很适合由AI来生成.</p>
<p>但即使功能性的需求，有时候AI也会做不好。</p>
<p>我之前在工作中需要根据已有的Schema, 使用Rust 写入Parquet数据，Rust本来就新，加之操作Parquet的库就更少了, 所以ChatGPT, Claude或者Gemini 都没有给出我满意能跑的结果，最后还是靠自己去读 Parquet库的源码找出的解决办法。</p>
<p>无论模型怎么变，AI现阶段还需要预训练数据的投喂，所以没有相关的预处理数据，AI也只能胡扯。</p>
<p>所以总结下来，在真实项目中，AI还没有办法取代程序员。</p>
<h3 id="ai取代论背后的动机"><span class="section-num">2.3</span> AI取代论背后的动机</h3>
<p>既然你说AI现阶段还没有办法取代程序员，为什么我看到各种各样程序员要被AI取代的新闻，甚至有公司用AI来替代员工了？</p>
<p>除去真的担心自己被AI取代的从业者外，我觉得看到两种扯着AI大旗的人。</p>
<p>一种就是懂程序开发，装不懂程序开发，然后贩卖焦虑的人，最近非常火的就是，「我用Cursor从0 xx 天开发了一个App」 (Cursor是最近一个很火的AI编辑器，可以通过输入的指令生成代码).</p>
<p>大体都是说自己完全不懂程序开发，借助AI/Cursor, xx天内开发出了一个App, 并且冲到了苹果App Store热门榜第一.</p>
<p>普通程序员看到这种说法，一个小白从无到有都能开发出一个App, 难免会焦虑,不得不说，这种反向装弱再变强真的令人防不胜防， 想着不能被落下，就斥资加入各种付费群或者购买各种课程。</p>
<p>神智清明的你可能在心平气和下很难做出这样的决定嘛。</p>
<p>另外一种就是要用AI来取代程序的公司，说要通过AI来增效，裁撤工程师，比如国外的 <a href="https://apnews.com/article/workday-layoffs-job-cuts-ai-investments-437581ad79d6e1cef2de7b300015dfbb?utm_source=t.me/mtfront">Workday 裁员说要再招人做 AI 的新闻</a> <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, 还有2023年 <a href="https://www.bwpeople.in/article/google-contemplates-30000-layoffs-due-to-ai-job-impact-503670">Google 因为AI裁员而30000 名员工的新闻 </a><sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></p>
<p>怎么说呢，AI这块牌子太好用了, 什么都可以往里面套，裁撤工程师降本是真，AI增效大概是假。</p>
<p>裁员就裁员呗，为什么还要说是用AI来取代程序员呢？</p>
<p>因为说是AI取代了程序员，被毕业的员工们和待毕业的员工们都只会把裁员的原因归罪到AI上，
管理层的无所作为，墨守成规，决策失误，无序扩张这些失误都不需要承诺后果了，反正背锅有AI。</p>
<p>苦一苦员工，骂名AI来担。
<img loading="lazy" src="/ox-hugo/ai_bear_the_infamy.jpg" alt=""  />
</p>
<h2 id="ai一无用处"><span class="section-num">3</span> AI一无用处</h2>
<p>当然凡事都有例外，有人觉得AI会取代程序员，也有人觉得AI一无用处，不值一提。</p>
<p>我对此也是持反对态度了，虽然AI无法取代程序员，但是它的确在很多方面可以给我提升相当大的效率，其效率跃升堪比计算机连上互联网。</p>
<p>所以我也藉此来分享下我的AI用法</p>
<h2 id="我的ai用法"><span class="section-num">4</span> 我的AI用法</h2>
<p>我使用对AI的定位把它当作一位非常耐心，能力全面的助理，所以我给它分配的都是明确而繁琐的任务，并且我有能力对其输出进行评判的情景。
(也就是让它干脏活累活)</p>
<p>先声明一下我使用的AI 模型，日常事务我会使用ChatGPT, 响应速度快，量大够饱； 编码我会使用Claude 3.5 Sonnet，目前是我使用过效果最好的; 中文相关会使用DeepSeek, 但是经常服务器繁忙，体验不好。</p>
<h3 id="生成测试用例"><span class="section-num">4.1</span> 生成测试用例</h3>
<p>测试用例太适合让AI来写了，毕竟任务是非常明确的，需要被测的函数也是非常明确的，你只需要使用把测试的场景说清楚。</p>
<p>我觉得都可以把这个内容扩展写成 <a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%B8%80_%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E8%AE%A4%E7%9F%A5/">测试技能进阶系列</a> 的第四篇了</p>
<p>假设我需要测试一个计算字符串中元音数量的函数 <code>count_vowels(s: str) -&gt; int</code>, 我的指示是:</p>
<blockquote>
<p>请为以下函数 `count_vowels(s: str) -&gt; int` 生成pytest测试用例：</p>
<ol>
<li>正常输入包含大小写元音的情况</li>
<li>空字符串边界条件</li>
<li>全元音字符的特殊情况</li>
<li>不含元音的字符串</li>
<li>非法输入类型校验</li>
</ol>
</blockquote>
<p>AI生成结果：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pytest</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">test_count_vowels_normal_cases</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 混合大小写元音测试</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">count_vowels</span><span class="p">(</span><span class="s2">&#34;Hello World&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">count_vowels</span><span class="p">(</span><span class="s2">&#34;AEiou&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">5</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">test_count_vowels_edge_cases</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 空字符串/全元音测试</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">count_vowels</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">count_vowels</span><span class="p">(</span><span class="s2">&#34;aei&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">test_count_vowels_special_cases</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 无元音字符串测试</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">count_vowels</span><span class="p">(</span><span class="s2">&#34;rhythm&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">count_vowels</span><span class="p">(</span><span class="s2">&#34;12345!@#&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">test_count_vowels_invalid_input</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 类型校验测试</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="n">pytest</span><span class="o">.</span><span class="n">raises</span><span class="p">(</span><span class="ne">TypeError</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">count_vowels</span><span class="p">(</span><span class="mi">123</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="n">pytest</span><span class="o">.</span><span class="n">raises</span><span class="p">(</span><span class="ne">TypeError</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">count_vowels</span><span class="p">([</span><span class="s2">&#34;hello&#34;</span><span class="p">])</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="语言学习"><span class="section-num">4.2</span> 语言学习</h3>
<p>AI的多语言翻译功能对比其他传统基于单词的翻译软件简直是降维打击bb，毕竟Google的科学家最初做 Transform 模型就是为了做翻译的。</p>
<p>记得我之前考雅思的时候，口语和写作考前复习就是把题库的复制给AI，然后让他来给我答题，我就把思路背下来，做题这方面，AI实在是太擅长了。</p>
<blockquote>
<p>Given the following IELTS Speaking Part1, you are an examinee, could you give me some band 9 answer:</p>
<p>Ielts Speaking 3 Practice 5 (Change)</p>
<ol>
<li>Do you think change is good?</li>
<li>What are some of the major changes that occur to people throughout their lives?</li>
<li>Is your country changing rapidly?</li>
<li>In what ways have changes in technology changed people&rsquo;s lives?</li>
<li>Why do old people not accept change?</li>
</ol>
</blockquote>
<!--quoteend-->
<blockquote>
<p>Here are some Band 9 answers for the IELTS Speaking Part 1 topic &ldquo;Change&rdquo;, with a natural, fluent style and advanced vocabulary.</p>
<ol>
<li>Do you think change is good?</li>
</ol>
<p>Absolutely. Change is an inevitable part of life, and in most cases, it drives progress and personal growth. While change can be daunting at first, it often leads to new opportunities and valuable experiences. Without change, we would stagnate, both individually and as a society.
&hellip;</p>
</blockquote>
<p>让AI做词典, 帮我解释和翻译我不懂的单词，或者做中译英方便交流:</p>
<blockquote>
<p>You are a professional translator. Translate all input Chinese paragraphs into English and all input English into Chinese, and help me explain its meaning</p>
</blockquote>
<p>而后我输入中文，它就会给我英文翻译；输入英文，它会给我中文翻译:</p>
<blockquote>
<p>&ldquo;爱哭的孩子有奶喝&rdquo;</p>
<hr>
<p>&ldquo;The crying baby gets the milk.&rdquo;
Meaning:</p>
<p>This Chinese proverb &ldquo;爱哭的孩子有奶喝&rdquo; (ài kū de háizi yǒu nǎi hē) means that those who complain, express their needs, or fight for their interests are more likely to get attention and benefits. It suggests that speaking up and advocating for oneself can lead to better outcomes, similar to how a baby who cries gets fed first.</p>
</blockquote>
<!--quoteend-->
<blockquote>
<p>illiterate</p>
<hr>
<p>&ldquo;Illiterate&rdquo; 的中文翻译是 “文盲” 或 “不识字”。
含义：</p>
<ol>
<li>
<p>基本含义：指一个人 不识字或无法阅读和书写。</p>
<ul>
<li>例如：Many people in the past were illiterate because they had no access to education.（过去，许多人因为无法接受教育而是文盲。）</li>
</ul>
</li>
<li>
<p>引申含义：在某个领域缺乏基本知识或技能。</p>
<ul>
<li>例如：&ldquo;He is financially illiterate.&quot;（他在财务方面一窍不通。）</li>
<li>在科技、法律、文化等方面，也可以用 illiterate 来形容缺乏基础知识的人，例如 &ldquo;technologically illiterate&rdquo;（科技文盲）。</li>
</ul>
</li>
</ol>
</blockquote>
<p>还有一个就是让AI 给我写的内容纠错，这个也比传统的语法工具类如 Grammarly 好用.</p>
<blockquote>
<p>You are a professional and seasoned translator, correct me if I am wrong.</p>
</blockquote>
<h3 id="代码审计"><span class="section-num">4.3</span> 代码审计</h3>
<p>有时候我会查看一些智能合约的代码或者TG bot的代码，在实际交互前，我一般会把代码丢给AI，让它检查一下是否有可疑的代码片段，类如窃取用户的私钥，把资金转到可疑账户等等。</p>
<p>或者把我自己写的代码丢给AI，让它看下是否有安全漏洞:</p>
<blockquote>
<p>Given the following code, help me spot if there is any vulnerability here:</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nd">@app.route</span><span class="p">(</span><span class="s1">&#39;/search&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">search</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">query</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;q&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;SELECT * FROM products WHERE name LIKE &#39;%</span><span class="si">{</span><span class="n">query</span><span class="si">}</span><span class="s2">%&#39;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s1">&#39;results.html&#39;</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">cursor</span><span class="o">.</span><span class="n">fetchall</span><span class="p">())</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Yes, there are several serious security vulnerabilities in this code. Let me break them down:</p>
<ul>
<li>SQL Injection Vulnerability (Critical):</li>
</ul>
<p>The most severe issue is that the code uses string formatting (f-string) to directly insert user input into the SQL query. This allows SQL injection attacks. For example, a malicious user could input:</p>
<p>Here&rsquo;s a secure version of the code:</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nd">@app.route</span><span class="p">(</span><span class="s1">&#39;/search&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">search</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">query</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;q&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">query</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s1">&#39;results.html&#39;</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="p">[])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Using parameterized query with placeholders</span>
</span></span><span class="line"><span class="cl">    <span class="n">cursor</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;SELECT * FROM products WHERE name LIKE ?&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="s1">&#39;%&#39;</span> <span class="o">+</span> <span class="n">query</span> <span class="o">+</span> <span class="s1">&#39;%&#39;</span><span class="p">,)</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s1">&#39;results.html&#39;</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">cursor</span><span class="o">.</span><span class="n">fetchall</span><span class="p">())</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="反编译"><span class="section-num">4.4</span> 反编译</h3>
<p>现代前端基本都会使用类似webpack 的打包工具进行打包压缩, 甚至还会进行代码混淆，所以F12 查看源码，并不能查出端倪.</p>
<p>因此我一般都是让AI 来帮我反编译和还原, 这样就免去了复杂的人工转译的过程:</p>
<blockquote>
<p>Given the obfuscated and compressed code, could you reverse it back to the original source code?</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">_0x3f2a</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;\x48\x65\x6c\x6c\x6f&#39;</span><span class="p">,</span> <span class="s1">&#39;\x6c\x6f\x67&#39;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">_0x12d3f0</span><span class="p">,</span> <span class="nx">_0x3f2a8c</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">_0x553e8f</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">_0x5e7a28</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="p">(</span><span class="o">--</span><span class="nx">_0x5e7a28</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">_0x12d3f0</span><span class="p">[</span><span class="s1">&#39;push&#39;</span><span class="p">](</span><span class="nx">_0x12d3f0</span><span class="p">[</span><span class="s1">&#39;shift&#39;</span><span class="p">]());</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="nx">_0x553e8f</span><span class="p">(</span><span class="o">++</span><span class="nx">_0x3f2a8c</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}(</span><span class="nx">_0x3f2a</span><span class="p">,</span> <span class="mh">0x1a4</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">_0x553e</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">_0x12d3f0</span><span class="p">,</span> <span class="nx">_0x3f2a8c</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">_0x12d3f0</span> <span class="o">=</span> <span class="nx">_0x12d3f0</span> <span class="o">-</span> <span class="mh">0x0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">_0x553e8f</span> <span class="o">=</span> <span class="nx">_0x3f2a</span><span class="p">[</span><span class="nx">_0x12d3f0</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">_0x553e8f</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">_ax342</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">_0x5e7a28</span> <span class="o">=</span> <span class="nx">_0x553e</span><span class="p">(</span><span class="s1">&#39;0x0&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">[</span><span class="nx">_0x553e</span><span class="p">(</span><span class="s1">&#39;0x1&#39;</span><span class="p">)](</span><span class="nx">_0x5e7a28</span> <span class="o">+</span> <span class="s1">&#39; World!&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">_ax342</span><span class="p">();</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Let me help you deobfuscate this code. Based on the patterns and structure, this appears to be JavaScript code that has been obfuscated using common techniques like array-based string storage and variable name mangling.
The original source code would be:</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">greet</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Hello World!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">greet</span><span class="p">();</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>着实有点东西</p>
<h3 id="排查问题"><span class="section-num">4.5</span> 排查问题</h3>
<p>在出现大模型AI之前，当遇到某个工具或者库的错误信息时，我一般的做法是：</p>
<ol>
<li>复制错误信息</li>
<li>粘贴到Google</li>
<li>点击排名最靠前的Stackoverflow 链接</li>
<li>扫一下是否是我想问的问题，如果不是就再回到2</li>
<li>按照最高赞的解决方案尝试下</li>
<li>如果还不行，再回到2</li>
</ol>
<p>有了AI之后，我一般的做法是:</p>
<ol>
<li>复制错误信息</li>
<li>问AI &ldquo;How to fix this erro&rdquo;, 粘贴上错误信息</li>
<li>按照AI的建议一步步尝试</li>
<li>如果不行，把最新的错误信息复制粘贴给AI, 告诉它这不管用.</li>
</ol>
<p>与Google 的方案相比，我现在有了个再反馈的过程, 可以把最新的结果再告知AI, 这样更方便AI基于上下文做出解答.</p>
<h3 id="数据处理"><span class="section-num">4.6</span> 数据处理</h3>
<p>非结构化数据转换成结构化数据，如JSON, 相当于让AI做了数据清洗的脏活:</p>
<blockquote>
<p>Given the following output of ls command, could you convert it to JSON?</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">-&gt; % ls -alrt
</span></span><span class="line"><span class="cl">total <span class="m">828</span>
</span></span><span class="line"><span class="cl">-rw-rw----+   <span class="m">1</span> ramsay ramsay   <span class="m">4672</span> Mar <span class="m">21</span>  <span class="m">2019</span> abbrev_defs
</span></span><span class="line"><span class="cl">-rw-rw----+   <span class="m">1</span> ramsay ramsay  <span class="m">10079</span> Mar <span class="m">21</span>  <span class="m">2019</span> recentf~
</span></span><span class="line"><span class="cl">drwxr-xr-x    <span class="m">2</span> ramsay ramsay   <span class="m">4096</span> Apr <span class="m">16</span>  <span class="m">2021</span> images
</span></span><span class="line"><span class="cl">drwxrw----+  <span class="m">44</span> ramsay ramsay   <span class="m">4096</span> Apr <span class="m">16</span>  <span class="m">2021</span> snippets
</span></span><span class="line"><span class="cl">-rw-rw----+   <span class="m">1</span> ramsay ramsay   <span class="m">3740</span> Dec <span class="m">10</span>  <span class="m">2021</span> projectile-bookmarks.eld
</span></span><span class="line"><span class="cl">-rw-rw----+   <span class="m">1</span> ramsay ramsay <span class="m">241501</span> May <span class="m">27</span>  <span class="m">2022</span> company-statistics-cache.el
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Here is the JSON representation of the given ls -alrt output:
Explanation:</p>
<ul>
<li>Each file/directory is represented as an object inside the &ldquo;files&rdquo; array.</li>
<li>&ldquo;name&rdquo; is the file/directory name.</li>
<li>&ldquo;permissions&rdquo; is the file permissions.</li>
<li>&ldquo;links&rdquo; is the number of hard links.</li>
<li>&ldquo;owner&rdquo; is the owner of the file.</li>
<li>&ldquo;group&rdquo; is the group the file belongs to.</li>
<li>&ldquo;size&rdquo; is the size of the file in bytes.</li>
<li>&ldquo;modified&rdquo; is the date of the last modification.</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl">     <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;files&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;abbrev_defs&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;permissions&#34;</span><span class="p">:</span> <span class="s2">&#34;-rw-rw----+&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;links&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;owner&#34;</span><span class="p">:</span> <span class="s2">&#34;ramsay&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;group&#34;</span><span class="p">:</span> <span class="s2">&#34;ramsay&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">4672</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;modified&#34;</span><span class="p">:</span> <span class="s2">&#34;Mar 21 2019&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;recentf~&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;permissions&#34;</span><span class="p">:</span> <span class="s2">&#34;-rw-rw----+&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;links&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;owner&#34;</span><span class="p">:</span> <span class="s2">&#34;ramsay&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;group&#34;</span><span class="p">:</span> <span class="s2">&#34;ramsay&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">10079</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;modified&#34;</span><span class="p">:</span> <span class="s2">&#34;Mar 21 2019&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;images&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;permissions&#34;</span><span class="p">:</span> <span class="s2">&#34;drwxr-xr-x&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;links&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;owner&#34;</span><span class="p">:</span> <span class="s2">&#34;ramsay&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;group&#34;</span><span class="p">:</span> <span class="s2">&#34;ramsay&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">4096</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;modified&#34;</span><span class="p">:</span> <span class="s2">&#34;Apr 16 2021&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;snippets&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;permissions&#34;</span><span class="p">:</span> <span class="s2">&#34;drwxrw----+&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;links&#34;</span><span class="p">:</span> <span class="mi">44</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;owner&#34;</span><span class="p">:</span> <span class="s2">&#34;ramsay&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;group&#34;</span><span class="p">:</span> <span class="s2">&#34;ramsay&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">4096</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;modified&#34;</span><span class="p">:</span> <span class="s2">&#34;Apr 16 2021&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;projectile-bookmarks.eld&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;permissions&#34;</span><span class="p">:</span> <span class="s2">&#34;-rw-rw----+&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;links&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;owner&#34;</span><span class="p">:</span> <span class="s2">&#34;ramsay&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;group&#34;</span><span class="p">:</span> <span class="s2">&#34;ramsay&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">3740</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;modified&#34;</span><span class="p">:</span> <span class="s2">&#34;Dec 10 2021&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;company-statistics-cache.el&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;permissions&#34;</span><span class="p">:</span> <span class="s2">&#34;-rw-rw----+&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;links&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;owner&#34;</span><span class="p">:</span> <span class="s2">&#34;ramsay&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;group&#34;</span><span class="p">:</span> <span class="s2">&#34;ramsay&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">241501</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;modified&#34;</span><span class="p">:</span> <span class="s2">&#34;May 27 2022&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>对于非结构化的数据，或者缺失格式的数据, AI都能处理.</p>
<h2 id="总结"><span class="section-num">5</span> 总结</h2>
<p>这是我用即梦AI生成的一张街舞海报，我注明了地址，联系电话，以及价格，生成出来的结果是这样的</p>
<figure>
    <img loading="lazy" src="/ox-hugo/genai_cover_image.jpg"/> 
</figure>

<p>远看是那么一回事！细看是什么回事?</p>
<p>AI现阶段还是无法取代程序员的，未来AI我也觉得很难取代程序员(当然，取代把需求翻译成代码的人肉翻译器还是有可能的)，因为程序员虽然是和机器打交道，但是本质上还是解决人的问题。</p>
<p>担忧程序员被AI取代的人可能只看到了测试场景里面的 happy path, 也就是AI能生成老板们想要的代码，没有看到unhappy path, 也就是老板们想要的代码, AI生成不出来要怎么办?</p>
<p>毕竟人可以根据已有的经验进行归纳总结，把已有的经验应用在未踏足的领域，且持续学习，但是AI还是受限于预训练数据，做不出来就是做不出来。</p>
<p>但是对程序员而言，AI不失为一个好用且提效的工具，好用的工具就应该多学多用多玩，而不是担忧被其取代。</p>
<p>AI无法取代持续精进者, 傲慢自满方为淘汰之源</p>
<p>(什么，你问我当初的答辩结果？自然是</p>
<hr>
<p>挂了)</p>
<h3 id="推荐阅读">推荐阅读</h3>
<ul>
<li>旅加经历
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E8%BF%99%E4%BA%9B%E5%B9%B4%E8%B5%B0%E8%BF%87%E7%9A%84%E8%B7%AF_%E4%BB%8E%E5%B9%BF%E5%B7%9E%E5%88%B0%E6%B8%A9%E5%93%A5%E5%8D%8E/">这些年走过的路：从广州到温哥华</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E5%8A%A0%E6%8B%BF%E5%A4%A7%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C/">加拿大之初体验</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E7%99%BB%E9%99%86%E5%8A%A0%E6%8B%BF%E5%A4%A7%E4%B8%80%E5%B9%B4%E7%9A%84%E4%BD%93%E4%BC%9A/">登陆加拿大一年后的体会</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E5%A4%8F%E6%97%A5%E6%8D%95%E8%9F%B9%E8%AE%B0/">夏日捕蟹记</a></li>
</ul>
</li>
<li>历史思考
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E7%BD%AE%E8%BA%AB%E4%BA%8B%E5%86%85/">为什么梦想买不起，故乡回不去</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E9%97%B2%E8%81%8A%E5%86%99%E4%BD%9C/">闲聊写作的好处</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E9%87%91%E6%A6%9C%E9%A2%98%E5%90%8D%E4%B9%8B%E5%90%8E/">金榜题名之后</a></li>
</ul>
</li>
<li>工具流分享
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E7%AE%80%E6%98%8E%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/">简明写作指南</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E5%86%99%E4%BD%9C%E6%B5%81/">我的写作流</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E7%94%BB%E5%9B%BE%E6%B5%81/">我的画图流：画图工具与技巧分享</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E6%90%9C%E7%B4%A2%E6%B5%81/">我的搜索流：高效搜索经验分享</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2022/feynman_technique/">最好的学习方式：费曼学习法(Feynman Technique)</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2021/%E7%B3%BB%E7%BB%9F%E6%80%9D%E8%80%83/">系统思考：既见树木，又见森林</a></li>
</ul>
</li>
<li>职场思考
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E7%BC%96%E7%A8%8B%E5%8D%81%E5%B9%B4%E7%9A%84%E6%84%9F%E6%82%9F/">编程十年的感悟</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E4%BB%8E%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E7%A6%BB%E7%BA%BF_%E6%88%91%E5%B8%A6%E8%B5%B0%E4%BA%86%E4%BB%80%E4%B9%88/">那些年，我从微信支付学到的东西</a></li>
</ul>
</li>
<li>软件工程
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%B8%80_%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E8%AE%A4%E7%9F%A5/">测试技能进阶(一): 软件质量认知</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%BA%8C_parameterized_tests/">测试技能进阶(二): Parameterized Tests</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%B8%89_property_based_testing/">测试技能进阶(三): Property Based Testing</a></li>
</ul>
</li>
</ul>
<div center class="qr-container">
<img src="/ox-hugo/qrcode_gh_e06d750e626f_1.jpg" alt="qrcode_gh_e06d750e626f_1.jpg" width="160px" height="160px" center="t" class="qr-container" />
公号同步更新，欢迎关注👻
</div>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://www.sov2ex.com/?q=AI%E5%8F%96%E4%BB%A3%E7%A8%8B%E5%BA%8F%E5%91%98">https://www.sov2ex.com/?q=AI%E5%8F%96%E4%BB%A3%E7%A8%8B%E5%BA%8F%E5%91%98</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://apnews.com/article/workday-layoffs-job-cuts-ai-investments-437581ad79d6e1cef2de7b300015dfbb?utm_source=t.me/mtfront">https://apnews.com/article/workday-layoffs-job-cuts-ai-investments-437581ad79d6e1cef2de7b300015dfbb?utm_source=t.me/mtfront</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="https://www.bwpeople.in/article/google-contemplates-30000-layoffs-due-to-ai-job-impact-503670">https://www.bwpeople.in/article/google-contemplates-30000-layoffs-due-to-ai-job-impact-503670</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>编程十年的感悟</title>
      <link>https://ramsayleung.github.io/zh/post/2024/%E7%BC%96%E7%A8%8B%E5%8D%81%E5%B9%B4%E7%9A%84%E6%84%9F%E6%82%9F/</link>
      <pubDate>Sun, 15 Dec 2024 21:09:00 -0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2024/%E7%BC%96%E7%A8%8B%E5%8D%81%E5%B9%B4%E7%9A%84%E6%84%9F%E6%82%9F/</guid>
      <description>1 前言 马尔科姆·格拉德威尔的“一万小时定律”指出，持续投入一万小时的努力，足以使人在某个领域达到专家水平。 按照每周20小时的练习量计算，每天</description>
      <content:encoded><![CDATA[<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>马尔科姆·格拉德威尔的“一万小时定律”指出，持续投入一万小时的努力，足以使人在某个领域达到专家水平。
按照每周20小时的练习量计算，每天大约需要投入3小时，十年左右才能达成这一目标。</p>
<p>从我写下第一行C代码算起，至今已超过十年。
期间，我编写了超过三十万行代码，其中一部分在微信编写的代码，曾服务过超过一亿的用户。</p>
<p>尽管写了这么多代码，我仍不敢自诩为专家。
但多年的“打工”生涯，日复一日地敲代码，也让我积累了不少感悟。
“工多艺熟”，这些感悟既是对编程技术的思考，更是对职场人生的体味。
毕竟，除了最初在学校学习的几年，我的编程生涯几乎都伴随着“打工”的酸甜苦辣(多是苦辣)。</p>
<h2 id="持续学习"><span class="section-num">2</span> 持续学习</h2>
<p>虽然大学是从C语言入门编程的，但是我在大学时主修的语言是Java
，毕竟Java是门非常成熟的工业语言，有非常丰富的框架，在国内的企业非常受欢迎，工作岗位也多。</p>
<p>我当时从Java Servlets入门Web开发，再学习了非常流行的JavaEE 企业开发框架SSH, 即 <a href="https://struts.apache.org/">Structs2</a> <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>+ <a href="https://spring.io/projects/spring-framework">Spring</a> <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>+ <a href="https://hibernate.org/">Hibernate</a> <sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>, Struct2 负责控制逻辑关系，Spring 负责解耦, Hibernate 负责操作数据库.</p>
<p>而到我开始找工作时，SSH的概念就变了, Struct2 被<a href="https://docs.spring.io/spring-framework/reference/web/webmvc.html">SpringMVC</a> <sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>所取代, SSH 变成了 SpringMVC + Spring + Hibernate.</p>
<p>到我实习入职蚂蚁金服的时候，发现组里代码库操作数据库的ORM框架用的并不是Hibernate，而是 <a href="https://ibatis.apache.org/">Ibatis</a> <sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>, 后面又切换成了新的 <a href="https://mybatis.org/mybatis-3/">MyBatis</a> <sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup></p>
<p>而蚂蚁金服内部使用的也并不是Spring/SpringMVC, 而是自主研发出发的 <a href="https://github.com/sofastack/sofa-rpc">Sofa框架</a> <sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup>, Spring 社区后来觉得Spring框架过于重量级，不利于快速开发，又开发了更轻量级的 <a href="https://spring.io/projects/spring-boot">SpringBoot </a><sup id="fnref:8"><a href="#fn:8" class="footnote-ref" role="doc-noteref">8</a></sup>, 而蚂蚁内部又推出了Sofa版本的 <a href="https://github.com/sofastack/sofa-boot">Sofaboot</a> <sup id="fnref:9"><a href="#fn:9" class="footnote-ref" role="doc-noteref">9</a></sup></p>
<p>去了微信支付后，前期都是在写C++, 使用微信内部自研的svrkit 框架，到后期因为负责数据治理相关项目的缘故，开始使用 Spark + Python + Hive SQL</p>
<p>现在在AWS S3, 因为业务对性能和资源使用有非常高的要求，又开始使用Rust, 而历史业务又是使用Java, 兜兜转转之后，又回到Java的路子上。</p>
<p>细数下来, 这些年来，我写过Java,C++,Python,Rust,Javascript/Typescript 这些语言的生产代码.</p>
<p>除去工作之外, 我还因为学习SICP 学习了Scheme, 因为使用Emacs 而学习了Emacs Lisp, 想做独立开发赚钱学习了Swift, 想感受Ruby on Rails的魅力而学习的Ruby, 还有以前为了压测写的Golang, 还有各种语言对应的框架和库.</p>
<p>自我学习编程以来，学过的编程语言没有10种也有半打了.</p>
<p>我也从来不会把自己定义为某门语言的程序员，如Java程序员,C++程序员等等, 我只叫自己做Software Development Engineer. 语言从来只是工具，只要你持续学习，遇到新的场景，自然就会学习新的编程语言了.</p>
<p>计算机的世界日新月异，可能几个月就会出个新框架，几年又会流行一门新语言，只有持续学习，才能持续保持自己的竞争力。</p>
<h2 id="学好英语"><span class="section-num">3</span> 学好英语</h2>
<p>领袖常说，「东升西降」，虽然不知道此种变化何时才能实现，但起码说明，目前是「西尚在上，东尚在下」，在计算机领域，尤其如此。</p>
<p>最前沿的技术都是英文资料，英语又是世界通行的语言，来自不同国家的开发者又会不约而同地使用英语来交流，
因此学好英语既可以了解最新的技术潮流，又可以融入社区，建立自己的影响力。</p>
<p>疫情之后，越来越多的公司都开始推行远程办公，从全世界招聘开发者.
这就意味着如果你英文过硬，甚至可以离开一线城市，避免高额的生活开销，在老家工作，陪伴在父母身边，同时赚取外汇；这对于饱受996困扰的程序员来说，未尝不是一条出路.</p>
<p>于我个人而言，坚持学习英语可能是我收获最大的投资之一。</p>
<p>熟悉我的朋友，尤其是我的高中同学可能知道，十年以前，我的英文可以说着实挺烂的:
满分150分的英语，只考个及格的90分可谓是家常便饭，后来也只会笨学英语，到高三的时候能考个120分已经是巅峰水平。</p>
<p>但上大学之后，我也没有就此懈怠放下英语，大一还每天去晨读英语。</p>
<p>没有口语交流的条件，就自己创造，去网上找人聊天, 当时还在一个叫 <a href="https://www.interpals.net/">Interpals</a> <sup id="fnref:10"><a href="#fn:10" class="footnote-ref" role="doc-noteref">10</a></sup> 聊天网站认识了全世界好多的人, 其中还有一个是年龄相仿的土耳其女孩，我们还加了Facebook, 经常用Skype 视频聊天.</p>
<p>大学毕业后就没有那么多的时间闲聊后就断了联系, 最近看Facebook的动态，看她也穿上婚纱了.</p>
<p>工作后也一直阅读英文的技术文章，用英文搜索内容，在Stackoverflow 和 GitHub 用英文回答问题，在Discord 的英语学习频道找人聊天, 把电脑和手机系统语言都换成英文的，从学习英语变成用英语。</p>
<p>后来在<a href="https://ramsayleung.github.io/zh/post/2023/%E8%BF%99%E4%BA%9B%E5%B9%B4%E8%B5%B0%E8%BF%87%E7%9A%84%E8%B7%AF_%E4%BB%8E%E5%B9%BF%E5%B7%9E%E5%88%B0%E6%B8%A9%E5%93%A5%E5%8D%8E/">机缘巧合之下</a>，从国内找到了加拿大AWS的工作，幸而有机会来加.</p>
<p>人们常说，路应该要越走越宽，而不是越走越窄；</p>
<p>而在我看来，英语就是夜里走路时手上拿着的手电筒，可以让我们走自己的路的同时，
扫一下旁边那条道的情况，需要时及时转向，不至于一条路走到黑.</p>
<h2 id="独立思考"><span class="section-num">4</span> 独立思考</h2>
<p>微信以前一直有发最新iPhone手机的传统，但是那已经是4年前的美好时光了。</p>
<p>记得2021年是小龙明确年会不会发手机的第一年，他当时透露，那一年会发个铝片。</p>
<p>当时同事之间还在讨论，iPhone也是一块铝片冲压而成的嘛，那发的是否还是iPhone呢，不发手机只是烟雾弹?</p>
<p>拆开年会礼物之后发现，的确是一块铝片，上面写着「2022保持独立思考」.</p>
<figure>
    <img loading="lazy" src="/ox-hugo/think_independently.jpg"/> 
</figure>

<p>小龙一直强调「独立思考」对微信的重要性，认为如果要选择一个最重要的品质，他会选择「独立思考」。</p>
<p>上级说的不一定是对的，老师说的不一定是对，学术机构说的也不一定是对，媒体说的也不一定是对，声音大的更不一定是对，毕竟有理不在言高。</p>
<p>比如微服务架构非常流行，许多公司都在搞微服务，那么单体架构是否就应该不使用？</p>
<p>作为初创公司或小团队，新业务是否要上微服务架构呢？还是先使用单体架构，业务发展起来再迁移到服务呢？</p>
<p>开发过程免不了要做各种决策，比如技术选型，针对你的需求，你可能会找到一打「看似」符合要求的组件，
可能还会去网上找找对各个组件的评价，会发现众说纷纭，就需要自己独立对每个组件做出分析，找出其优劣，再结合自身团队的特点，做出决策.</p>
<p>关于独立思考，我最喜欢的是一句话是HBO出品短剧《切尔诺贝利》里面，
科学家瓦列里·列加索夫希望克格勃释放调查真相同事乌拉娜·霍缪克的要求，说可以保证她是没问题的，克格勃头子回答的那句话:</p>
<blockquote>
<p>Trust, but verify.(相信，但要核实)</p>
</blockquote>
<h2 id="先跑起来再说"><span class="section-num">5</span> 先跑起来再说</h2>
<p>这句话还有一个广为人知的变种：「又不是不能用」</p>
<p>很多的程序员都是完美主义者，尤其是读过《重构》和《设计模式》的程序员，会倾向于把很多时间来优化代码，做重构。</p>
<p>以前的我也会有类似的冲动，总会想时间去优化代码, 但是项目肝多了之后，有种强烈的感觉，还是先把MVP上线，及早让用户体验。</p>
<p>如果没有用户使用，再好再漂亮的代码也没有任何意义了。</p>
<p>所以经常看到社区有人问做副业的时候，应该用什么语言和框架，PHP/Python/Ruby 会不会太慢，我的观点一直都是，先做个原型跑起来，先找到第一个用户再说。</p>
<p>当运行速度成为瓶颈时, 你的业务已经非常大，肯定有足够的钱可以招一打的程序员把你的项目换成Golang/Java了。</p>
<p>对此，我很赞同坐我旁边大佬关于代码质量的说法：</p>
<blockquote>
<p>make it run, make it fast, make it beautiful.</p>
</blockquote>
<p>最近在做副业的尝试，有个深刻的体会，技术可能是商业里面最不重要的。</p>
<p>从零把产品做出来，推广给用户，用户只会关注你的产品是否好用，能否解决他们的问题.</p>
<p>他们既不会关注你是用C++/Java还是Javascript 写的,也不会关注你代码写得是否优雅，与其执着于技术选型，不如先把产品干出来让用户试用。</p>
<h2 id="顺手的才是最好的"><span class="section-num">6</span> 顺手的才是最好的</h2>
<p>经常会看到有人在社区提问，什么语言最好，什么框架最好，什么编辑器最好，什么操作系统最好。</p>
<p>「最好」是个相当主观的结论，也并没有针对所有场景的「最好」的解决方案, 但是经常能看到社区有人因为哪个语言更好而吵起来.</p>
<p>或者有人在分享A的时候，有人会在下面回复B/C/D更好, 然后又争吵起来.</p>
<p>让不禁让我想起《社会性动物》这本著名的社会心理学著作里面提到的团队认同现象，
当球迷与某支球队产生强烈的认同感后，会将球队视为自我认同的一部分，这里他们会：</p>
<ol>
<li>用「我们」而不是「他们」来称呼球队</li>
<li>将球队的成功视为个人的成功</li>
<li>对批评球队的言论产生防御性反应，将这些批评视为对自我的攻击</li>
</ol>
<p>如果有人问我这个问题，我会回答「你顺手熟悉的工具的最好」。</p>
<p>即使是出于乐趣，编程的目的还是利用计算机解决问题，而解决问题最好的工具就是你最熟悉的工具。</p>
<p>除非你了解的工具不适用于你的问题，那么自然就需要一个新工具，也不要削足适履，矫枉过正。</p>
<p>当然，如果是为了满足求知欲而想去学习一个新的语言，那选择你感兴趣的就可以了。</p>
<p>当初在2017年学习Rust, 也只是因为大四没有课，时间充裕, 想学点有趣的新东西，那时候Rust1.0才发布2年, 可没指望能靠Rust找到工作</p>
<p>记不清在哪里看过的一段话：</p>
<blockquote>
<p>我也曾问过自己类似的问题:</p>
<ol>
<li>是不是好的东西就能流行？不一定</li>
<li>是不是我喜欢的东西就是好的东西？不一定</li>
<li>我会不会花时间精力在一个不一定会流行但是我喜欢的东西上？会</li>
</ol>
</blockquote>
<h2 id="多与人交流"><span class="section-num">7</span> 多与人交流</h2>
<p>程序员固然是和机器打交道，但是本质解决的还是人的问题.</p>
<p>当初学习编程的时候，曾经有个误区，认为自己只要把技术搞好，就可以不去关心什么「人情世故」。</p>
<p>因此初入职场之后，我既是这么持有这样的想法，又是这样行动的，虽然不至于对其他人冷脸相对，但是难免会如好友形容那般：「孤傲」</p>
<p>但是被毒打时间久了才会发现，无论是在国内或国外，都难免会有「人情世故」，用英文来说，那叫 network and connection.</p>
<p>即使我技术能力过硬，也需要被人见到才行，和同事领导相处关系好，才可以在做出成绩的时候，「花花轿子被众人抬」。</p>
<p>所以我现在都是有事没事都和同事们聊天，既可以提升下熟悉度，也可以了解到许多部门八卦，
还可以从同事们抱怨中找到潜在优化点，践行自己「Work hard and be nice to people」的理念.</p>
<p>这行做久了，会发现软件工程其实说到底，就是人的系统工程。</p>
<h2 id="代码不是万能的"><span class="section-num">8</span> 代码不是万能的</h2>
<p>程序写多了之后就会有种幻觉，就是觉得什么事情都可以用代码来解决。</p>
<p>手里拿着锤子的时候，把什么都当成钉子来砸。</p>
<p>被毒打多才认清的事实就是，有很多事情是无法用代码来解决，代码只是个工具，只能在个合适的场景使用, 避免路径依赖.</p>
<p>酒香也怕巷子深，只会写代码没啥用，还要写文章，在公司内部做分享，让别人能「看到你」。</p>
<p>编程肝项目的专业能力固然重要，但是也要有营销自己的软实力，就像一位长者说的那样: 两手抓，两手都要硬.</p>
<p>不知道是中国人讲究谦虚内敛的品质，还是程序员「木讷呆板」的刻板印象，导致大家都不怎么营销自己。</p>
<p>有事没事和老板聊下天，增进下交流，经常露个脸，可能比肝十个项目还有用。</p>
<h2 id="与优秀的人共事"><span class="section-num">9</span> 与优秀的人共事</h2>
<p>从业多年，去过蚂蚁金服，微信支付和AWS 搬砖, 和各种各样的同事都共事过，有个越发强烈的感悟：</p>
<p><strong><strong>要与优秀的人共事</strong></strong></p>
<p>不仅能从他们身上学到非常到的优点，提升技术能力，可以学到最佳实践和工程经验，在Code Review 的时候可以学到更好的编程方式，遇到问题时又有靠谱的队友帮忙和指导。</p>
<p>由优秀的程序员开发出来的系统的独特之处，知道什么叫简单好用的系统，形成自己的技术品味。</p>
<p>品味与美感这个词是很抽象，但是用过了好用的系统，自然就不会对那些粗制滥造，还靠老板背书强行推广的系统感兴趣。</p>
<p>而提高技术品味在提高我们的技术认知的前提下，又能反过来帮我们提高设计能力.</p>
<p>和优秀的同事共事的另外一个好处是可以建立高质量的人脉网络，利于职业发展，跳槽换赛道也多个选择。</p>
<p>虽然初始公司也有优秀的开发者，但是平均而言，大公司优秀程序员的比例会更高，毕竟他们更有竞争力的薪资福利，自然也有更高的招聘门槛。</p>
<p>比如微信就有所谓的面试委员会，除了招聘部门的面试官之外，还要通过面委面试官的考核，避免为了快速招人而降低标准。</p>
<p>所以个人建议应届毕业生，有机会还是去大公司，见识下。</p>
<p>虽然离职微信快两年了，我仍然想念当初同组共事的同事们，他们真的是技术过硬，人又超nice, 还乐于帮忙.</p>
<p>正如孔子所言：与善人居，如入兰芷之室，久而不闻其香，则与之化矣；与恶人居，如入鲍鱼之肆，久而不闻其臭，亦与之化矣</p>
<h2 id="身体是一切的本钱"><span class="section-num">10</span> 身体是一切的本钱</h2>
<p>编程这么多年，落下一堆的职业病。</p>
<p>大学时候就有的鼠标手(腱鞘炎), 工作几年之后「喜提」腰椎间盘突出，久坐下半身会麻痹，还有我曾经浓密黝黑的头发，现在也日渐凋零。</p>
<p>因为腾讯总部有免费的健身房，所以我基本工作日都会去健身房薅公司羊毛，2天有氧慢跑，2天无氧器械，坚持了快3年。
也开始注意自己的饮食，尽量少油少糖不喝酒。</p>
<p>健身虽然不是包治百病，但是起码人显得有精神了，也有精力应付高强度的工作了。</p>
<p>只有失去才会懂得珍惜，也真的只有在开始吃药，去医院复诊，才会开始注意身体。</p>
<p>虽然编程很有趣，虽然养家很重要，但是还是要注意身体，毕竟身体是一切的本钱，垮就没有其他的精彩故事了。</p>
<h2 id="总结"><span class="section-num">11</span> 总结</h2>
<p>无论是编程，还是其他的技能，我感觉都是「马太效应」，你学得越多，你懂得越多，再学新的东西，你就会学得越快。</p>
<p>代码写多了才意识到，程序员的竞争力并不是写代码，也并不是哪门语言或者框架，
其核心竞争力是通过技术解决问题的能力，又何必再去拘泥于哪门具体的编程语言或技术呢。</p>
<p>希望编程十年只是个起点，十年后可以再写一篇「编程二十年的感悟」</p>
<h3 id="推荐阅读">推荐阅读</h3>
<ul>
<li>旅加经历
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E8%BF%99%E4%BA%9B%E5%B9%B4%E8%B5%B0%E8%BF%87%E7%9A%84%E8%B7%AF_%E4%BB%8E%E5%B9%BF%E5%B7%9E%E5%88%B0%E6%B8%A9%E5%93%A5%E5%8D%8E/">这些年走过的路：从广州到温哥华</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E5%8A%A0%E6%8B%BF%E5%A4%A7%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C/">加拿大之初体验</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E5%8A%A0%E6%8B%BF%E5%A4%A7%E8%80%83%E9%A9%BE%E7%85%A7%E7%9A%84%E7%BB%8F%E5%8E%86/">加拿大考驾照的经历</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E7%99%BB%E9%99%86%E5%8A%A0%E6%8B%BF%E5%A4%A7%E4%B8%80%E5%B9%B4%E7%9A%84%E4%BD%93%E4%BC%9A/">登陆加拿大一年后的体会</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%97%81%E8%A7%82%E8%80%85%E7%9C%BC%E4%B8%AD%E7%9A%84%E5%8A%A0%E6%8B%BF%E5%A4%A7%E7%9C%81%E8%AE%AE%E4%BC%9A%E9%80%89%E4%B8%BE/">旁观者眼中的加拿大省议会选举</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E5%A4%8F%E6%97%A5%E6%8D%95%E8%9F%B9%E8%AE%B0/">夏日捕蟹记</a></li>
</ul>
</li>
<li>历史思考
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E7%BD%AE%E8%BA%AB%E4%BA%8B%E5%86%85/">为什么梦想买不起，故乡回不去</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%B6%A6%E5%90%91%E4%BD%95%E6%96%B9_%E4%B8%8D%E5%AE%8C%E5%85%A8%E8%82%89%E8%BA%AB%E7%BF%BB%E5%A2%99%E6%8C%87%E5%8C%97/">润向何方：不完全肉身翻墙指北</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E7%9A%87%E5%B8%9D%E4%B8%8E%E5%AE%98%E5%83%9A/">皇帝与官僚：「上面」与「下面」</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E9%97%B2%E8%81%8A%E5%86%99%E4%BD%9C/">闲聊写作的好处</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E9%87%91%E6%A6%9C%E9%A2%98%E5%90%8D%E4%B9%8B%E5%90%8E/">金榜题名之后</a></li>
</ul>
</li>
<li>工具流分享
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E7%AE%80%E6%98%8E%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/">简明写作指南</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E5%86%99%E4%BD%9C%E6%B5%81/">我的写作流</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E7%94%BB%E5%9B%BE%E6%B5%81/">我的画图流：画图工具与技巧分享</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E6%90%9C%E7%B4%A2%E6%B5%81/">我的搜索流：高效搜索经验分享</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2022/feynman_technique/">最好的学习方式：费曼学习法(Feynman Technique)</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2021/%E7%B3%BB%E7%BB%9F%E6%80%9D%E8%80%83/">系统思考：既见树木，又见森林</a></li>
</ul>
</li>
<li>职场思考
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E4%BB%8E%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E7%A6%BB%E7%BA%BF_%E6%88%91%E5%B8%A6%E8%B5%B0%E4%BA%86%E4%BB%80%E4%B9%88/">那些年，我从微信支付学到的东西</a></li>
</ul>
</li>
<li>软件工程
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%B8%80_%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E8%AE%A4%E7%9F%A5/">测试技能进阶(一): 软件质量认知</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%BA%8C_parameterized_tests/">测试技能进阶(二): Parameterized Tests</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%B8%89_property_based_testing/">测试技能进阶(三): Property Based Testing</a></li>
</ul>
</li>
</ul>
<div center class="qr-container">
<img src="/ox-hugo/qrcode_gh_e06d750e626f_1.jpg" alt="qrcode_gh_e06d750e626f_1.jpg" width="160px" height="160px" center="t" class="qr-container" />
公号同步更新，欢迎关注👻
</div>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://struts.apache.org/">https://struts.apache.org/</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://spring.io/projects/spring-framework">https://spring.io/projects/spring-framework</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="https://hibernate.org/">https://hibernate.org/</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p><a href="https://docs.spring.io/spring-framework/reference/web/webmvc.html">https://docs.spring.io/spring-framework/reference/web/webmvc.html</a>&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p><a href="https://ibatis.apache.org/">https://ibatis.apache.org/</a>&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p><a href="https://mybatis.org/mybatis-3/">https://mybatis.org/mybatis-3/</a>&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7">
<p><a href="https://github.com/sofastack/sofa-rpc">https://github.com/sofastack/sofa-rpc</a>&#160;<a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:8">
<p><a href="https://spring.io/projects/spring-boot">https://spring.io/projects/spring-boot</a>&#160;<a href="#fnref:8" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:9">
<p><a href="https://github.com/sofastack/sofa-boot">https://github.com/sofastack/sofa-boot</a>&#160;<a href="#fnref:9" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:10">
<p><a href="https://www.interpals.net/">https://www.interpals.net/</a>&#160;<a href="#fnref:10" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>单独使用Emacs的Magit插件</title>
      <link>https://ramsayleung.github.io/zh/post/2024/%E5%8D%95%E7%8B%AC%E4%BD%BF%E7%94%A8emacs%E7%9A%84magit%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Wed, 11 Dec 2024 16:00:00 -0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2024/%E5%8D%95%E7%8B%AC%E4%BD%BF%E7%94%A8emacs%E7%9A%84magit%E6%8F%92%E4%BB%B6/</guid>
      <description>1 Emacs 与 Magit 不知不觉，我已经使用Emacs 快10年了，在我使用过的编辑器中，Emacs是扩展性最强的编辑器，毕竟Emacs是个披着编辑器外衣的L</description>
      <content:encoded><![CDATA[<h2 id="emacs-与-magit"><span class="section-num">1</span> Emacs 与 Magit</h2>
<p>不知不觉，我已经使用Emacs 快10年了，在我使用过的编辑器中，Emacs是扩展性最强的编辑器，毕竟Emacs是个披着编辑器外衣的Lisp虚拟机。</p>
<p>在Emacs无所不能的扩展性之下，诞生了非常多强大的插件，
也让Emacs有了「伪装成操作系统的编辑器」的美名，而Emacs公认的杀手锏插件有两个，一个是 <a href="https://orgmode.org/">org-mode</a>，另一个是 <a href="https://magit.vc/">magit</a>. (我个人觉得还有个 <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html">dired</a>)</p>
<p>Orgmode是类似Markdown，与Emacs深度绑定优化的标记语言，使用Emacs来编写org-mode 文档就有下笔有神，文思泉涌，如丝般顺滑(这篇文章也是用org-mode写的)。</p>
<p>因为org-mode 与Emacs 深度结合，自然无法脱离Emacs单独使用，而其他编辑器模仿org-mode 开发的插件，如 <a href="https://github.com/jceb/vim-orgmode">vim-orgmode</a>, <a href="https://github.com/nvim-orgmode/orgmode">nvim-orgmode</a> 和 <a href="https://github.com/vscode-org-mode/vscode-org-mode">vscode-orgmode</a>, 难免只得其形，未得其神，还不如用Markdown.</p>
<p>而 Magit 是 Git的Emacs图形化客户端, 也是我用过的最好用的Git 客户端软件，既直观又易用(看看Emacs 道友们夸 Magit 的<a href="https://emacs-china.org/t/magit/22521/5">帖子</a>):</p>
<figure>
    <img loading="lazy" src="/ox-hugo/magit_dashboard.jpg"/> 
</figure>

<p>虽然我已经用了Emacs很多年，但是已经过了Live with Emacs的境界, 不会用Emacs处理所有事情, 比如用VSCode 写Rust, 用Intellij Idea写Java, 既然 Magit 那么好用，有没可能独立于Emacs使用呢?</p>
<h2 id="emacs-daemon"><span class="section-num">2</span> Emacs daemon</h2>
<p>作为无所不能的「操作系统」, Emacs 作为<a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html">server</a> 一直在后台运行，然后再使用 <code>emacsclient</code> 连接 server:</p>
<p>前文提到, Emacs 是批着编辑器外衣的Lisp VM, 而 Magit 本质也只是一个 lisp function, 只要在启动emacsclient的时候，再调用 magit的函数, 那么就可以启动 Magit:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">magit</span><span class="o">=</span><span class="s2">&#34;emacsclient -nw -eval &#39;(magit-status)&#39;&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure>
    <img loading="lazy" src="/ox-hugo/magit.gif"/> 
</figure>

<p>这样就可以在VSCode和Idea里面愉快地使用 magit了.</p>
<h2 id="总结"><span class="section-num">3</span> 总结</h2>
<p>在Emacs-China 论坛搜索Magit的时候, 发现了也有一个帖子讨论把 <a href="https://emacs-china.org/t/magit/25527/6">magit当作的单独的工具</a>, 没想到有个回复的思路和我一样，使用Emacs作为daemon 来启用.</p>
<p>只是没有想到他更evil, 在Nvim 里面使用Magit, 我也学习一下 Nvim+Emacs 的组合 :)</p>
<h2 id="参考"><span class="section-num">4</span> 参考</h2>
<ul>
<li><a href="https://orgmode.org/">https://orgmode.org/</a></li>
<li><a href="https://magit.vc/">https://magit.vc/</a></li>
<li><a href="https://emacs-china.org/t/magit/22521/5">https://emacs-china.org/t/magit/22521/5</a></li>
<li><a href="https://emacs-china.org/t/magit/25527/6">https://emacs-china.org/t/magit/25527/6</a></li>
<li><a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html">https://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html</a></li>
<li><a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html">https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html</a></li>
</ul>
<div center class="qr-container">
<img src="/ox-hugo/qrcode_gh_e06d750e626f_1.jpg" alt="qrcode_gh_e06d750e626f_1.jpg" width="160px" height="160px" center="t" class="qr-container" />
公号同步更新，欢迎关注👻
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Rust通过Trait扩展已有类型</title>
      <link>https://ramsayleung.github.io/zh/post/2024/rust%E9%80%9A%E8%BF%87trait%E6%89%A9%E5%B1%95%E5%B7%B2%E6%9C%89%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Wed, 04 Dec 2024 18:04:00 -0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2024/rust%E9%80%9A%E8%BF%87trait%E6%89%A9%E5%B1%95%E5%B7%B2%E6%9C%89%E7%B1%BB%E5%9E%8B/</guid>
      <description>1 Swift extension 可扩展性是一个语言非常关键的特性，以Swift 为例，它有一个相当好用的特性，名为 extension, 它可以非常便利地扩展已有的类型, 例如给已有类型增加 computed</description>
      <content:encoded><![CDATA[<h2 id="swift-extension"><span class="section-num">1</span> Swift extension</h2>
<p>可扩展性是一个语言非常关键的特性，以Swift 为例，它有一个相当好用的特性，名为 <a href="https://docs.swift.org/swift-book/documentation/the-swift-programming-language/extensions/">extension</a>, 它可以非常便利地扩展已有的类型, 例如给已有类型增加 computed property, 实例方法, 新增构造器又或是实现新的 Protocol.</p>
<p>已有的类型既可以是你自己的代码，或者是第三方的代码，甚至是标准库的代码, 以标准库的 <code>String</code> 类型为例:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-swift" data-lang="swift"><span class="line"><span class="cl"><span class="kd">extension</span> <span class="nc">String</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nv">isPalindrome</span><span class="p">:</span> <span class="nb">Bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">let</span> <span class="nv">reversed</span> <span class="p">=</span> <span class="nb">String</span><span class="p">(</span><span class="kc">self</span><span class="p">.</span><span class="n">reversed</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">self</span> <span class="p">==</span> <span class="n">reversed</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">func</span> <span class="nf">greet</span><span class="p">()</span> <span class="p">-&gt;</span> <span class="nb">Void</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="bp">print</span><span class="p">(</span><span class="s">&#34;Hello </span><span class="si">\(</span><span class="kc">self</span><span class="si">)</span><span class="s">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nv">word</span> <span class="p">=</span> <span class="s">&#34;racecar&#34;</span>
</span></span><span class="line"><span class="cl"><span class="bp">print</span><span class="p">(</span><span class="n">word</span><span class="p">.</span><span class="n">isPalindrome</span><span class="p">)</span> <span class="c1">// Outputs: true</span>
</span></span><span class="line"><span class="cl"><span class="n">word</span><span class="p">.</span><span class="n">greet</span><span class="p">()</span> <span class="c1">// Outputs: Hello racecar</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>又或者让 <code>String</code> 实现新的 Protocol, 如:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-swift" data-lang="swift"><span class="line"><span class="cl"><span class="kd">extension</span> <span class="nc">String</span><span class="p">:</span> <span class="n">YourOwnProtocol</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>换言之，如果你对已有的类型不满意，你可以直接扩展已有的类型，添加上你想要的属性，方法或者实现你期望的接口。</p>
<h2 id="rust-的扩展能力"><span class="section-num">2</span> Rust 的扩展能力</h2>
<p>Rust 也部分支持Swift extension 特性，如让已有的类型实现新的Trait.</p>
<p>还是以 <code>String</code> 为例子, 我们希望给 <code>String</code> 实现一个 <code>Greet</code> 的接口:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="c1">// Define a trait with the desired functionality
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">trait</span><span class="w"> </span><span class="n">Greet</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">greet</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">String</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// Implement the trait for an existing type
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">impl</span><span class="w"> </span><span class="n">Greet</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="nb">String</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">greet</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">String</span> <span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="fm">format!</span><span class="p">(</span><span class="s">&#34;Hello, </span><span class="si">{}</span><span class="s">!&#34;</span><span class="p">,</span><span class="w"> </span><span class="bp">self</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">String</span>::<span class="n">from</span><span class="p">(</span><span class="s">&#34;Rust&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;</span><span class="si">{}</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">name</span><span class="p">.</span><span class="n">greet</span><span class="p">());</span><span class="w"> </span><span class="c1">// Outputs: &#34;Hello, Rust!&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这样我们就给 <code>String</code> 添加上 <code>greet</code> 方法，不足之处在于，需要定义一个额外的 <code>trait=，没有像 Swift 那样的 =extension</code> 语法糖可以用.</p>
<h3 id="实际例子"><span class="section-num">2.1</span> 实际例子</h3>
<p>上面的 <code>Greet</code> 接口可能过于简单，让我们来看下实际项目的例子, 在<a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%B8%89_property_based_testing/">测试技能进阶(三): Property Based Testing</a> 一文中，我提到了使用 <a href="https://github.com/BurntSushi/quickcheck">Quickcheck</a> 库在Rust实现 Property Based Testing.</p>
<p>假如有 Book struct, 我们只要实现 quickcheck 的 Arbitrary 接口，quickcheck 就会按照我们指定的规则来生成随机测试数据:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">quickcheck</span>::<span class="p">{</span><span class="n">Arbitrary</span><span class="p">,</span><span class="w"> </span><span class="n">Gen</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="cp">#[derive(Debug, Clone, PartialEq)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">struct</span> <span class="nc">Book</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">isbn</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">title</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">author</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">publication_year</span>: <span class="kt">u16</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Arbitrary</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Book</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">arbitrary</span><span class="p">(</span><span class="n">g</span>: <span class="kp">&amp;</span><span class="nc">mut</span><span class="w"> </span><span class="n">Gen</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">Book</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c1">// isbn必须以`ISBN` 开头，后接任意的大于等于0，小于uint32.max_value
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="c1">// 的整型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="n">isbn</span>: <span class="nc">format</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;ISBN-{}&#34;</span><span class="p">,</span><span class="w"> </span><span class="kt">u32</span>::<span class="n">arbitrary</span><span class="p">(</span><span class="n">g</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">title</span>: <span class="nb">String</span>::<span class="n">arbitrary</span><span class="p">(</span><span class="n">g</span><span class="p">),</span><span class="w"> </span><span class="c1">// 任意的字符串
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="n">author</span>: <span class="nb">String</span>::<span class="n">arbitrary</span><span class="p">(</span><span class="n">g</span><span class="p">),</span><span class="w"> </span><span class="c1">// 任意的字符串
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="n">publication_year</span>: <span class="o">*</span><span class="n">g</span><span class="p">.</span><span class="n">choose</span><span class="p">(</span><span class="o">&amp;</span><span class="p">[</span><span class="mi">2014_</span><span class="k">u16</span><span class="p">,</span><span class="w"> </span><span class="mi">2022_</span><span class="k">u16</span><span class="p">,</span><span class="w"> </span><span class="mi">2025_</span><span class="k">u16</span><span class="p">]).</span><span class="n">unwrap</span><span class="p">(),</span><span class="w"> </span><span class="c1">// 2014,2022或2025年出版的书
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>quickcheck 的 <code>Gen</code> 结构体有一个非常顺手的函数 <code>gen_range</code> ，用于生成指定的范围的数据, 但是作者在<a href="https://github.com/BurntSushi/quickcheck/blob/aa968a94650b5d4d572c4ef581a7f5eb259aa0d2/src/arbitrary.rs#L72">1.0</a>之后，就不向外暴露这个接口了，不然我们就可以通过 <code>g.gen_range(b'a'...b'z') as char)</code> 来指定我们想要的数据.</p>
<p>既然这么好用的函数没有了，我们可以通过 <code>Trait</code> 的扩展能力，把这个 <code>gen_range</code> 函数带回来.</p>
<p>思路很简单，就是定义一个 <code>GenRange</code> Trait, 然后再让 <code>Gen</code> 实现这个 <code>Trait</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">core</span>::<span class="n">ops</span>::<span class="n">Range</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">num_traits</span>::<span class="n">sign</span>::<span class="n">Unsigned</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">use</span><span class="w"> </span><span class="n">quickcheck</span>::<span class="o">*</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="n">GenRange</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">gen_range</span><span class="o">&lt;</span><span class="n">T</span>: <span class="nc">Unsigned</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">Arbitrary</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">Copy</span><span class="o">&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">_range</span>: <span class="nc">Range</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">T</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">GenRange</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Gen</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">gen_range</span><span class="o">&lt;</span><span class="n">T</span>: <span class="nc">Unsigned</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">Arbitrary</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">Copy</span><span class="o">&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">range</span>: <span class="nc">Range</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">T</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="o">&lt;</span><span class="n">T</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">Arbitrary</span><span class="o">&gt;</span>::<span class="n">arbitrary</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="p">(</span><span class="n">range</span><span class="p">.</span><span class="n">end</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">range</span><span class="p">.</span><span class="n">start</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">range</span><span class="p">.</span><span class="n">start</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>通过上面的代码, 我们就可以在 <code>Book</code> 的 <code>arbitrary</code> 函数中使用 <code>gen_range</code> 了:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">impl</span><span class="w"> </span><span class="n">Arbitrary</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Book</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">arbitrary</span><span class="p">(</span><span class="n">g</span>: <span class="kp">&amp;</span><span class="nc">mut</span><span class="w"> </span><span class="n">Gen</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">Book</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c1">// isbn必须以`ISBN` 开头，后接任意的大于等于0，小于uint32.max_value
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="c1">// 的整型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="n">isbn</span>: <span class="nc">format</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;ISBN-{}&#34;</span><span class="p">,</span><span class="w"> </span><span class="kt">u32</span>::<span class="n">arbitrary</span><span class="p">(</span><span class="n">g</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">title</span>: <span class="nb">String</span>::<span class="n">arbitrary</span><span class="p">(</span><span class="n">g</span><span class="p">),</span><span class="w"> </span><span class="c1">// 任意的字符串
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="n">author</span>: <span class="nb">String</span>::<span class="n">arbitrary</span><span class="p">(</span><span class="n">g</span><span class="p">),</span><span class="w"> </span><span class="c1">// 任意的字符串
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="n">publication_year</span>: <span class="nc">g</span><span class="p">.</span><span class="n">gen_range</span><span class="p">(</span><span class="mi">2014</span><span class="o">..</span><span class="p">.</span><span class="mi">2026</span><span class="p">),</span><span class="w"> </span><span class="c1">// 2014-2025年出版的书
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="使用已有trait扩展已有类型"><span class="section-num">2.2</span> 使用已有Trait扩展已有类型</h3>
<p>上面提到的例子都是通过定义一个新的 <code>Trait</code>, 然后让已有类型实现这个新Trait, 那么是否可以让已有类型实现已有的Trait 呢?</p>
<p>事实上, 由于Orphan Rule的限制, Rust 并不允许已有类型实现已有接口, 以下的代码是无法编译通过的:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">fmt</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// Implement the external trait for the wrapper
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">impl</span><span class="w"> </span><span class="n">fmt</span>::<span class="n">Display</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="nb">String</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">fmt</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">f</span>: <span class="kp">&amp;</span><span class="nc">mut</span><span class="w"> </span><span class="n">fmt</span>::<span class="n">Formatter</span><span class="o">&lt;</span><span class="nb">&#39;_</span><span class="o">&gt;</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">fmt</span>::<span class="nb">Result</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="fm">write!</span><span class="p">(</span><span class="n">f</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;String: {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="bp">self</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>所谓的 <code>Orphan Rule</code> 限制指的是，如果允许已有类型实现已有接口, 那么 <code>lib1</code> 和 <code>lib2</code> 都实现了 <code>impl fmt::Display for String</code>, 编译器并不知道应该使用哪个lib的实现.</p>
<p>对此，Rust 官方也提供了<a href="https://doc.rust-lang.org/book/ch19-03-advanced-traits.html#using-the-newtype-pattern-to-implement-external-traits-on-external-types">指引</a>，我们可以通过定义一个 <code>Wrapper</code> 类来实现我们的诉求：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">fmt</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// Define a newtype wrapper
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">struct</span> <span class="nc">MyString</span><span class="p">(</span><span class="nb">String</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// Implement the external trait for the wrapper
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">impl</span><span class="w"> </span><span class="n">fmt</span>::<span class="n">Display</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">MyString</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">fmt</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">f</span>: <span class="kp">&amp;</span><span class="nc">mut</span><span class="w"> </span><span class="n">fmt</span>::<span class="n">Formatter</span><span class="o">&lt;</span><span class="nb">&#39;_</span><span class="o">&gt;</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">fmt</span>::<span class="nb">Result</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="fm">write!</span><span class="p">(</span><span class="n">f</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;MyString: {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="mi">0</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">s</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">MyString</span><span class="p">(</span><span class="s">&#34;Hello&#34;</span><span class="p">.</span><span class="n">to_string</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;</span><span class="si">{}</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">s</span><span class="p">);</span><span class="w"> </span><span class="c1">// Outputs: MyString: Hello
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="参考"><span class="section-num">3</span> 参考</h2>
<ul>
<li><a href="https://doc.rust-lang.org/book/ch19-03-advanced-traits.html#using-the-newtype-pattern-to-implement-external-traits-on-external-types">Using the Newtype Pattern to Implement External Traits on External Types</a></li>
<li><a href="//github.com/BurntSushi/quickcheck/issues/267">add back a way to put a bound on numbers generated</a></li>
</ul>
<div center class="qr-container">
<img src="/ox-hugo/qrcode_gh_e06d750e626f_1.jpg" alt="qrcode_gh_e06d750e626f_1.jpg" width="160px" height="160px" center="t" class="qr-container" />
公号同步更新，欢迎关注👻
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Hugo评论系统自适应博客主题: 支持dark与light theme</title>
      <link>https://ramsayleung.github.io/zh/post/2024/hugo%E8%AF%84%E8%AE%BA%E7%BB%84%E4%BB%B6%E8%87%AA%E9%80%82%E5%BA%94%E5%8D%9A%E5%AE%A2%E6%9A%97%E9%BB%91%E4%B8%BB%E9%A2%98/</link>
      <pubDate>Wed, 04 Dec 2024 13:25:00 -0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2024/hugo%E8%AF%84%E8%AE%BA%E7%BB%84%E4%BB%B6%E8%87%AA%E9%80%82%E5%BA%94%E5%8D%9A%E5%AE%A2%E6%9A%97%E9%BB%91%E4%B8%BB%E9%A2%98/</guid>
      <description>1 问题 评论系统是博客的关键组件，Hugo 支持若干个评论系统，包括流行的 Disqus, 基于 GitHub 的 Giscus 和 Utteranc, 以及其他评论系统 我博客使用的评论系统是 Utteranc, 主题是 PaperMod, PaperMod 支持</description>
      <content:encoded><![CDATA[<h2 id="问题"><span class="section-num">1</span> 问题</h2>
<p>评论系统是博客的关键组件，Hugo 支持若干个评论系统，包括流行的 <a href="https://disqus.com/">Disqus</a>, 基于 GitHub 的 <a href="https://giscus.app">Giscus</a> 和 <a href="https://utteranc.es/">Utteranc</a>, 以及其他<a href="https://gohugo.io/content-management/comments/">评论系统</a></p>
<p>我<a href="https://ramsayleung.github.io/">博客</a>使用的评论系统是 Utteranc, 主题是 <a href="https://github.com/adityatelange/hugo-PaperMod/">PaperMod</a>, PaperMod 支持 dark 和 light 两种主题, 在初始化 Utteranc 时可以指定 theme, 如 <code>Github-Light</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://utteranc.es/client.js&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">repo</span><span class="o">=</span><span class="s">&#34;ramsayleung/comment&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">issue-term</span><span class="o">=</span><span class="s">&#34;title&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">theme</span><span class="o">=</span><span class="s">&#34;github-light&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">crossorigin</span><span class="o">=</span><span class="s">&#34;anonymous&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">async</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>但是 theme 在初始化时就指定好了，那么在博客切换到 dark theme 的时候， Utteranc 也不会自适应 dark theme，博客的theme与评论theme就不一致：</p>
<figure>
    <img loading="lazy" src="/ox-hugo/responsive_comment_theme.jpg"/> 
</figure>

<h2 id="解决思路"><span class="section-num">2</span> 解决思路</h2>
<p>解决思路其实很简单，就获取当前的 theme, 然后再初始化 Utteranc 对应的 theme; 再在用户切换 theme 之后，再重新初始化 <code>Utteranc</code>.</p>
<h3 id="获取当前theme"><span class="section-num">2.1</span> 获取当前Theme</h3>
<p>Hugo 并没有提供标准接口来获取当前主题， 虽然可以通过以下的方式来获取的 theme:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">isDarkMode</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">matchMedia</span><span class="p">(</span><span class="s1">&#39;(prefers-color-scheme: dark)&#39;</span><span class="p">).</span><span class="nx">matches</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">isDarkMode</span> <span class="o">?</span> <span class="s1">&#39;dark&#39;</span> <span class="o">:</span> <span class="s1">&#39;light&#39;</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>但是这个是通过编译出来的CSS来判断当前theme，用户一旦手动切换了 theme, 上面的代码就无法生效了.</p>
<p>每个Hugo主题定义的方式可能还不一样, 以 PaperMod 为例，观察之后发现，light theme的时候body的html 为:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="o">&lt;</span><span class="nt">body</span> <span class="nt">id</span> <span class="o">=</span> <span class="s2">&#34;top&#34;</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;/</span><span class="nt">body</span><span class="o">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>dark theme 的时候 <code>class</code> 就变为了 <code>class=&quot;dark&quot;</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="o">&lt;</span><span class="nt">body</span> <span class="nt">id</span> <span class="o">=</span> <span class="s2">&#34;top&#34;</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;/</span><span class="nt">body</span><span class="o">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>所以可以通过判断 <code>body</code> 是否包含 <code>dark</code> 的 class 来判断当前是否为 dark theme.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// 不同的Hugo theme可能会需要不同的判断方式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">function</span> <span class="nx">getCurrentTheme</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span><span class="s1">&#39;dark&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;dark&#39;</span> <span class="o">:</span> <span class="s1">&#39;light&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="初始化评论系统"><span class="section-num">2.2</span> 初始化评论系统</h3>
<p><a href="https://utteranc.es/">Utteranc</a> 文档提供的启用评价系统代码如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://utteranc.es/client.js&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">repo</span><span class="o">=</span><span class="s">&#34;[ENTER REPO HERE]&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">issue-term</span><span class="o">=</span><span class="s">&#34;pathname&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">theme</span><span class="o">=</span><span class="s">&#34;github-light&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">crossorigin</span><span class="o">=</span><span class="s">&#34;anonymous&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">async</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>因为我们需要在切换 Theme 时重新加载 Utteranc, 所以就需要通过 Javascript 来实现上面的HTML功能:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">loadUtterances</span><span class="p">(</span><span class="nx">darkMode</span><span class="o">=</span><span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">commentContainer</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;comments-utteranc&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">commentContainer</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">commentContainer</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="kr">const</span> <span class="nx">commentScript</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&#34;script&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nx">commentScript</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&#34;id&#34;</span><span class="p">,</span> <span class="s2">&#34;utteranc&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nx">commentScript</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&#34;src&#34;</span><span class="p">,</span> <span class="s2">&#34;https://utteranc.es/client.js&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nx">commentScript</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&#34;data-repo&#34;</span><span class="p">,</span> <span class="s2">&#34;ramsayleung/comment&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nx">commentScript</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&#34;data-theme&#34;</span><span class="p">,</span> <span class="nx">darkMode</span> <span class="o">?</span> <span class="s2">&#34;github-dark&#34;</span> <span class="o">:</span> <span class="s2">&#34;github-light&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nx">commentScript</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&#34;data-issue-term&#34;</span><span class="p">,</span> <span class="s2">&#34;title&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nx">commentScript</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&#34;crossorigin&#34;</span><span class="p">,</span> <span class="s2">&#34;anonymous&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nx">commentScript</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&#34;async&#34;</span><span class="p">,</span> <span class="s2">&#34;true&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nx">commentContainer</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">commentScript</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="监听主题变动"><span class="section-num">2.3</span> 监听主题变动</h3>
<p>用户可以在博客界面手动选择他们喜欢的主题，可以从 <code>dark</code> -&gt; <code>light</code>, <code>light</code> -&gt; <code>dark</code>, 我们需要做的就是监听主题的变动，在切换主题之后，重新加载评论系统。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// Watch for theme changes
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">themeObserver</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MutationObserver</span><span class="p">((</span><span class="nx">mutations</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">mutations</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">mutation</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nx">mutation</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="s1">&#39;attributes&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">mutation</span><span class="p">.</span><span class="nx">attributeName</span> <span class="o">===</span> <span class="s1">&#39;class&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="kr">const</span> <span class="nx">isDarkMode</span> <span class="o">=</span> <span class="nx">getCurrentTheme</span><span class="p">()</span> <span class="o">===</span> <span class="s1">&#39;dark&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="nx">loadUtterances</span><span class="p">(</span><span class="nx">isDarkMode</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`changing theme`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Start observing the body element for class changes
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">themeObserver</span><span class="p">.</span><span class="nx">observe</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">attributes</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">attributeFilter</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;class&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="总结"><span class="section-num">3</span> 总结</h2>
<p>自适应评论系统的代码<a href="https://github.com/ramsayleung/ramsayleung.github.io/blob/master/layouts/partials/comments.html">在这里</a>, 实现的效果如下:</p>
<figure>
    <img loading="lazy" src="/ox-hugo/responsive_comment_theme_2.jpg"/> 
</figure>

<figure>
    <img loading="lazy" src="/ox-hugo/responsive_comment_theme_3.jpg"/> 
</figure>

<div center class="qr-container">
<img src="/ox-hugo/qrcode_gh_e06d750e626f_1.jpg" alt="qrcode_gh_e06d750e626f_1.jpg" width="160px" height="160px" center="t" class="qr-container" />
公号同步更新，欢迎关注👻
</div>
]]></content:encoded>
    </item>
    <item>
      <title>旁观者眼中的加拿大省议会选举</title>
      <link>https://ramsayleung.github.io/zh/post/2024/%E6%97%81%E8%A7%82%E8%80%85%E7%9C%BC%E4%B8%AD%E7%9A%84%E5%8A%A0%E6%8B%BF%E5%A4%A7%E7%9C%81%E8%AE%AE%E4%BC%9A%E9%80%89%E4%B8%BE/</link>
      <pubDate>Sun, 20 Oct 2024 13:33:00 -0700</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2024/%E6%97%81%E8%A7%82%E8%80%85%E7%9C%BC%E4%B8%AD%E7%9A%84%E5%8A%A0%E6%8B%BF%E5%A4%A7%E7%9C%81%E8%AE%AE%E4%BC%9A%E9%80%89%E4%B8%BE/</guid>
      <description>1 前言 我所居住的BC(British Columbia)省选举在昨天刚结束，作为一个在全过程民主红旗下成长起来的社会主义接班人， 有机会近距离旁</description>
      <content:encoded><![CDATA[<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>我所居住的BC(British Columbia)省选举在昨天刚结束，作为一个在全过程民主红旗下成长起来的社会主义接班人，
有机会近距离旁观腐朽的资本主义的人民是如何行使他们的选举权的.</p>
<h2 id="政治体制"><span class="section-num">2</span> 政治体制</h2>
<p>看《新闻联播》的时候，总能听到韩国总统xxx, 美国总统xx, 加拿大总理xx, 难免会好奇，为什么有些国家管事的领导人叫「总理」，有些叫「总统」？</p>
<p>根源就在于这些国家的政治体制的不同，有的是实行总统制呢，而有的是议会制。</p>
<p>在西方政治思想家的理解中，民主是自由的基石，而分权是保障民主最重要的手段。</p>
<p>孟德斯鸠在他的著作《论法的精神》中说到：</p>
<blockquote>
<p>每一个国家有三种权力：立法权；行政权；司法权。</p>
<p>当立法权与行政权集中在同一个人或同一个机关之手，自由便不复存在了；如果司法权不和立法权和行政权分立，自由也就不复存在了；</p>
<p>如果一个人或一个机关行使这三种权力，则一切都完了</p>
</blockquote>
<p>而总统制和议会制就是对于「分权」这个蓝图的两种不同的施工方案。</p>
<h3 id="总统制"><span class="section-num">2.1</span> 总统制</h3>
<p>总统制下，最高领导人总统都是由人民直选产生的, 这个比较好理解，就是一人一票，哪个得票多的候选人就获胜。</p>
<figure>
    <img loading="lazy" src="/ox-hugo/%e6%80%bb%e7%bb%9f%e5%88%b6.jpg"/> 
</figure>

<p>最典型的代表就是美国和川普(前)大统领，美国的选举人团制也可以理解成某种形式的直选。</p>
<h3 id="议会制"><span class="section-num">2.2</span> 议会制</h3>
<p>而议会制下，最高领导人就不是直选出来，是由人民投票选举立法机构的议员，议会席次最多的党派成为执政党，然后由执政党推举出首相，然后首相挑合适的班底组阁，搭建内阁班子。</p>
<figure>
    <img loading="lazy" src="/ox-hugo/%e8%ae%ae%e4%bc%9a%e5%88%b6.jpg"/> 
</figure>

<p>比如议会有15个席位，A党拿下8个席位，B党拿下6个席位，C党只拿到1个席位，那么A党就成为执政党，由他们内部推举出首相作为最高领导人执政</p>
<figure>
    <img loading="lazy" src="/ox-hugo/%e8%ae%ae%e4%bc%9a%e5%88%b62.jpg"/> 
</figure>

<p>议会制的代表就是老牌玩家英国了。</p>
<h3 id="差别"><span class="section-num">2.3</span> 差别</h3>
<p>一人一票选举不是很民主么, 为什么还要搞议会制？</p>
<p>还是出于分权的考虑，正因为总统是一人一票选出来，所以他可以把自己当成民意的代表，在和自己的政党相处时，
就处于强势的一方（杰出代表又是川普（前）大统领）。</p>
<p>而如果总统所在的执政党又恰好赢得了立法机构选举，那相应于总统控制了行政权，可以影响立法权, 法院又弱势一些的话，司法权又会沦陷，分权就会荡然无存。</p>
<p>而议会制则不同，民众选举的是议会，所以代表民意的是议员和党派。</p>
<p>在执政党眼里，「首相就属于那种，我能捧得你上来，就把你摔下去」，所以首相相对议会比较弱势，就很难控制立法权，就能很好地确保分权制衡。</p>
<p>但是议会制下首相也无法摆脱执政党的影响，容易囿于政党。</p>
<p>就是两种制度各有利弊，一个是上下限都很高，一个是不容易出错，也不容易出彩。</p>
<p>世界上也不只有这两种政治制度，也有缝合怪，两种都玩的，比如法国；也有私服玩家，不在此列的；</p>
<h3 id="左与右"><span class="section-num">2.4</span> 左与右</h3>
<p>除去「总统」，「总理」之外，经常能听到的词就是「左派」，「右派」，「白左」这类的。</p>
<p>这里的「左」和「右」都是指的政治光谱下的政治立场，简单理解，就是「左派」平等，「右派」保守。</p>
<p>在美国政治中，左派的代表就是民主党，右派的代表就是共和党。</p>
<p>但是左和右是相对而言的，加拿大的右派保守党就比美国的左派民主党还要左，（可想而知，加拿大的左派要有多左）</p>
<h2 id="省议会选举"><span class="section-num">3</span> 省议会选举</h2>
<p>加拿大的政治制度是沿袭自英国，所以也是议会制，所以选举的也就是选区的议员，然后获得多数席位的政党就可以组建BC省下届政府.</p>
<p>所以选议员大概可以理解成选下一届的省政府</p>
<h3 id="投票指引"><span class="section-num">3.1</span> 投票指引</h3>
<p>省选举投票是在2024年10月19日进行，大概在9月底，我就收到了从公寓邮箱收到了一份投票指引(Voter&rsquo;s Guide), 这份20页的小册子非常详尽地介绍了选举需要注意的内容。</p>
<figure>
    <img loading="lazy" src="/ox-hugo/voters_guide_1.jpg"/> 
</figure>

<figure>
    <img loading="lazy" src="/ox-hugo/voters_guide_2.jpg"/> 
</figure>

<p>从目录可以看出，包括这次选举的内容，重要的日期，如何注册投票，投票ID可以用哪些，如何投票，投票流程等等。</p>
<p>最让我感兴趣的就是首页的选举介绍：</p>
<figure>
    <img loading="lazy" src="/ox-hugo/voters_guide_3.jpg"/> 
</figure>

<p>你满足以下三个条件，你就有资格投票：</p>
<ol>
<li>加拿大公民</li>
<li>在2024年10月19日年满18岁</li>
<li>在4月18日前居住于BC省（满足居住半年的要求）</li>
</ol>
<p>然后介绍了投票投的是什么，你投的票会有什么作用（影响到下一届省政府），以此来鼓励人民投票。</p>
<p>一个非常有趣的事，就是手册上还提到你可以带翻译(translator)去投票。</p>
<p>因为加拿大是移民国家，可能你入籍成为公民之后，还不懂英语或法语，
但是这不能成为阻碍你行使自己投票权的理由，所以你可以带翻译去投票。</p>
<p>在阅读这个册子几次后，我发现的另外一个有趣的事是，这个册子是独立于党派的，
它完全只介绍投票的流程，事项，帮助投票人更好地理解投票流程，但是并没有任何内容提及到任何一个党派的纲领，明示或者暗示你要投谁。</p>
<p>若干天后，邮箱又收到了投票卡，用于投票:</p>
<figure>
    <img loading="lazy" src="/ox-hugo/voter_card1.jpg"/> 
</figure>

<figure>
    <img loading="lazy" src="/ox-hugo/voter_card2.jpg"/> 
</figure>

<h3 id="拉票海报"><span class="section-num">3.2</span> 拉票海报</h3>
<p>既然有投票指引，自然少不了各种拉票的海报，投票前两周又收到了不同党派的投票海报。</p>
<p>因为所在的城市华人很多，所以海报都是中英双语的，从他们的海报也可以看出他们的政治纲领。</p>
<p>当然，也不是所有的候选议员都会隶属某个党派的，也有独立参选人。</p>
<figure>
    <img loading="lazy" src="/ox-hugo/seat_candidate1.jpg"/> 
</figure>

<figure>
    <img loading="lazy" src="/ox-hugo/seat_candidate2.jpg"/> 
</figure>

<figure>
    <img loading="lazy" src="/ox-hugo/seat_candidate3.jpg"/> 
</figure>

<p>我现在是发现，其实政党竞选和饭圈差不多，都是会拉踩的, 像下面这位NDP的候选人，正面是自己的「光辉形象」和自己的纲领</p>
<figure>
    <img loading="lazy" src="/ox-hugo/seat_candidate4.jpg"/> 
</figure>

<p>背面就是拉踩自己的对手，配上「遗照」和拉踩对手的话：</p>
<figure>
    <img loading="lazy" src="/ox-hugo/seat_candidate5.jpg"/> 
</figure>

<blockquote>
<p>John Rustad 是无法承受的风险, 保守党他们计划消减40亿的医保，让炒房客控制住房，并且会大量削减岗位。</p>
</blockquote>
<h2 id="战况"><span class="section-num">4</span> 战况</h2>
<p>想起之前看到的关于加拿大三大党派的区别的一个<a href="https://forum.iask.ca/threads/882956/">帖子</a>：</p>
<p>保守党（Convervative Party of Canda）: 就是地主老财党，地主资本家，黑五类，臭老九基本都在这个党，相信市场经济，道德情操，多劳多得，高效小政府，政府只做市场不想做不能做的事情。社会理念传统，过日子，生儿育女，管好自己。主打传统稳定的地主老财路线, 上一届总理就是保守党的.</p>
<p>NDP(新民主党 New Democratic Party), 丐帮、工会罢工党，一上台先打土豪分田地，吃了今天，不管明天，丐帮的信仰就是他们相信天上会掉馅饼。丐帮党的口号是: 无论如何，丐帮的兄弟们一定要有酒喝有鸡吃，其他的老子不管.</p>
<p>自由党: 又叫神仙党, 地主老财党和丐帮党都不要的人都加入了。他们要比丐帮斯文点，但是又比不上地主老财的深厚根基, 这个党聚集了一帮有远大革命抱负，不食人间烟火的愣头青. 他们的口号是: 世界大同，政治正确。
没钱了就让衙门发告示加税。只是好人都让你做了，谁付账? 现任加拿大总理就是自由党的.</p>
<p>虽然上面的帖子内容是恶搞和戏言，但大概还是能看出三党的政治光谱的， 加拿大的保守党甚至比美国的民主党还要左，可想而知NDP和自由党有多左。</p>
<p>所以难怪有人说加拿大是保守党当家修修补补好几年，或者NDP或者自由党的上来又霍霍几年，然后又换保守党上台再修。</p>
<p>而上面的帖子是2019年发的，五年过去了，在后疫情时代，情况只会更差，物价高涨，房租高企，工作机会减少，治安恶化，许多人都南下跑美国了.</p>
<p>而这样的情况只是让非常左的加拿大，稍稍往中间拉了点，以BC省的选举为例，现在保守党和NDP是势均力敌，并没有出现哪一方压倒性的场面。</p>
<p>不过，本来就没有什么是一成不变的，不是东风压倒西风，就是西风压倒东风，看什么时候风水轮流转。</p>
<h2 id="总结"><span class="section-num">5</span> 总结</h2>
<p>看了下地图，投票站离我住处大概1公里, 这么看来，投票选举离我也没有那么远。</p>
<div center class="qr-container">
<img src="/ox-hugo/qrcode_gh_e06d750e626f_1.jpg" alt="qrcode_gh_e06d750e626f_1.jpg" width="160px" height="160px" center="t" class="qr-container" />
公号同步更新，欢迎关注👻
</div>
]]></content:encoded>
    </item>
    <item>
      <title>测试技能进阶(三): Property Based Testing</title>
      <link>https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%B8%89_property_based_testing/</link>
      <pubDate>Mon, 14 Oct 2024 09:37:00 -0700</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%B8%89_property_based_testing/</guid>
      <description>1 前言 1.1 test case的局限 想要更好地理解什么是 Property based testing, 就来先看下已有 test case 的局限，再来观察它解决了什么问题。 用之前《测试技能进阶(二): Parameterized Test</description>
      <content:encoded><![CDATA[<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<h3 id="test-case的局限"><span class="section-num">1.1</span> test case的局限</h3>
<p>想要更好地理解什么是 Property based testing, 就来先看下已有 test case 的局限，再来观察它解决了什么问题。</p>
<p>用之前<a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%BA%8C_parameterized_tests/">《测试技能进阶(二): Parameterized Tests》</a>中计算折扣的函数为例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">calculate_discount</span><span class="p">(</span><span class="n">price</span><span class="p">,</span> <span class="n">discount_percentage</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">price</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Price must be greater than zero: </span><span class="si">{</span><span class="n">price</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">discount_percentage</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Discount_percentage must be greater than zero: </span><span class="si">{</span><span class="n">discount_percentage</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">price</span> <span class="o">&gt;</span> <span class="mi">50000</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">price</span> <span class="o">-</span> <span class="p">(</span><span class="n">price</span> <span class="o">*</span> <span class="p">(</span><span class="n">discount_percentage</span> <span class="o">*</span> <span class="mf">1.15</span><span class="p">)</span> <span class="o">/</span> <span class="mi">100</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">elif</span> <span class="n">price</span> <span class="o">&gt;</span> <span class="mi">100000</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">price</span> <span class="o">-</span> <span class="p">(</span><span class="n">price</span> <span class="o">*</span> <span class="p">(</span><span class="n">discount_percentage</span> <span class="o">*</span> <span class="mf">1.18</span><span class="p">)</span> <span class="o">/</span> <span class="mi">100</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">price</span> <span class="o">-</span> <span class="p">(</span><span class="n">price</span> <span class="o">*</span> <span class="n">discount_percentage</span> <span class="o">/</span> <span class="mi">100</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>即使我们使用了 Parameterized Test, 把测试逻辑和测试数据集作了分离，但是还是有两个缺点：</p>
<ol>
<li>我们的测试数据集还是要手工构造，即使现在不需要写新的 test case, 手工构造数据集还是很麻烦</li>
<li>第二个问题更严重，就是我们的构建的数据集可能不是完备的，如果数据集没有办法覆盖所有的条件分支，那我们仍然可能发现不了代码中的Bug</li>
</ol>
<h2 id="property-based-testing"><span class="section-num">2</span> Property Based Testing</h2>
<p>而 Property Based Testing 就是想解决这个问题，它希望可以结合人脑对特定问题域的理解和机器的运算能力，使用更少的时间来生成更优的测试case.</p>
<p>Property Based Testing 这个概念是由 Haskell 项目 <a href="https://en.wikipedia.org/wiki/QuickCheck">QuickCheck</a> <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>在1999年引入的，它的理念是，程序员应该只定义某个测试case, 参数需要满足的标准(specification), 然后程序就会自动生成大量满足这个标准的随机数，用这些随机数来测试这个 test case。</p>
<p>而因为测试数据是随机生成的，所以你意料之内的数据，或者意料之外的数据都会被用来测试，
既省去了费时费力构造不同数据作数据集来测试的烦恼，又能保证数据集的完备性, 经常可以帮助你发现意想不到的bug.</p>
<p>这就是声明式定义的一种，你只需要声明你想干什么(用什么样的数据测试什么函数)，而非命令式定义（你需要定义你要怎么做）.</p>
<p>人力应该是很珍贵，而机器的计算资源却是很便宜，应该让机器代替人去做生成数据的事。</p>
<p>举例来说, 以上面的 <code>calculate_discount</code> 函数为例，如果我们告诉程序, <code>price</code> 和 <code>discount_percentage</code> 应该是整数（specification）, 那么 Quickcheck 就会生成各种整数, 从 Integer.Min 到 Integer.Max 不等，用来测试我们的程序.</p>
<p>如果还是觉得这个概念比较抽象，可以来看下具体的例子：</p>
<h2 id="hypothesis"><span class="section-num">3</span> Hypothesis</h2>
<p>Python Property Based Testing的测试框架叫 <a href="https://hypothesis.works/">Hypothesis </a><sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>(假想)，这个项目名字也是起得非常有水平，结合Property Based Testing的哲学，可谓信雅达.</p>
<p>假设我们现在要实现一个简单的数据压缩的算法： <a href="https://en.wikipedia.org/wiki/Run-length_encoding">Run-length Encoding</a> <sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>(RLE)，通常用于压缩包含连续重复数据的序列, 这种编码方法特别适用于那些有大量重复字符或值的数据.</p>
<p>它的基本原理是：</p>
<ol>
<li>统计连续重复的数据元素的数量。</li>
<li>用一个计数值和数据值的组合来替代这些重复的数据。</li>
</ol>
<p>比如字符串: <code>AABBBCCCC</code>, RLE 编码后: <code>2A3B4C</code>. <code>2A</code> 表示两个连续的 <code>A</code>, <code>3B</code> 表示三个连续的 <code>B</code>, <code>4C</code> 表示四个连续的 <code>C</code> 。</p>
<p>Python实现如下:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">encode</span><span class="p">(</span><span class="n">input_string</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">count</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">prev</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">lst</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">character</span> <span class="ow">in</span> <span class="n">input_string</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">character</span> <span class="o">!=</span> <span class="n">prev</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">prev</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">entry</span> <span class="o">=</span> <span class="p">(</span><span class="n">prev</span><span class="p">,</span> <span class="n">count</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">lst</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">entry</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">count</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">prev</span> <span class="o">=</span> <span class="n">character</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">entry</span> <span class="o">=</span> <span class="p">(</span><span class="n">character</span><span class="p">,</span> <span class="n">count</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">lst</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">entry</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">lst</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">decode</span><span class="p">(</span><span class="n">lst</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">q</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">character</span><span class="p">,</span> <span class="n">count</span> <span class="ow">in</span> <span class="n">lst</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">q</span> <span class="o">+=</span> <span class="n">character</span> <span class="o">*</span> <span class="n">count</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">q</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果我们的代码实现没有问题的话，对于任意的字符串，编码后的字符串，解码后的结果应该和原来的字符串一致的，这个就是我们的测试逻辑:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">hypothesis</span> <span class="kn">import</span> <span class="n">given</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">hypothesis.strategies</span> <span class="kn">import</span> <span class="n">text</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@given</span><span class="p">(</span><span class="n">text</span><span class="p">())</span> <span class="c1"># 入参的标准是：任意的字符串，hypothesis 框架就会自动生成随机数，并调用test_decode_inverts_encode</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">test_decode_inverts_encode</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">decode</span><span class="p">(</span><span class="n">encode</span><span class="p">(</span><span class="n">s</span><span class="p">))</span> <span class="o">==</span> <span class="n">s</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>使用 <code>pytest</code> 运行上面的用例，结果如下:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">&gt; pytest property_based_testing.py
</span></span><span class="line"><span class="cl"><span class="o">===================================</span> <span class="nb">test</span> session <span class="nv">starts</span> <span class="o">====================================</span>
</span></span><span class="line"><span class="cl">platform darwin -- Python 3.12.6, pytest-8.3.3, pluggy-1.5.0
</span></span><span class="line"><span class="cl">rootdir: /Users/ramsayleung/code/python/test_technique
</span></span><span class="line"><span class="cl">plugins: hypothesis-6.115.0
</span></span><span class="line"><span class="cl">collected <span class="m">1</span> item
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">property_based_testing.py F                                                          <span class="o">[</span>100%<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">=========================================</span> <span class="nv">FAILURES</span> <span class="o">=========================================</span>
</span></span><span class="line"><span class="cl">________________________________ test_decode_inverts_encode ________________________________
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">@given<span class="o">(</span>text<span class="o">())</span>
</span></span><span class="line"><span class="cl">&gt;   def test_decode_inverts_encode<span class="o">(</span>s<span class="o">)</span>:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">property_based_testing.py:29:
</span></span><span class="line"><span class="cl">_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
</span></span><span class="line"><span class="cl">property_based_testing.py:30: in test_decode_inverts_encode
</span></span><span class="line"><span class="cl">assert decode<span class="o">(</span>encode<span class="o">(</span>s<span class="o">))</span> <span class="o">==</span> s
</span></span><span class="line"><span class="cl">_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">input_string</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">def encode<span class="o">(</span>input_string<span class="o">)</span>:
</span></span><span class="line"><span class="cl"><span class="nv">count</span> <span class="o">=</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="nv">prev</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">lst</span> <span class="o">=</span> <span class="o">[]</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> character in input_string:
</span></span><span class="line"><span class="cl">                 <span class="k">if</span> character !<span class="o">=</span> prev:
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> prev:
</span></span><span class="line"><span class="cl">                       <span class="nv">entry</span> <span class="o">=</span> <span class="o">(</span>prev, count<span class="o">)</span>
</span></span><span class="line"><span class="cl">                       lst.append<span class="o">(</span>entry<span class="o">)</span>
</span></span><span class="line"><span class="cl">                       <span class="nv">count</span> <span class="o">=</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl">                       <span class="nv">prev</span> <span class="o">=</span> character
</span></span><span class="line"><span class="cl">                       <span class="k">else</span>:
</span></span><span class="line"><span class="cl">                       <span class="nv">count</span> <span class="o">+=</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl">                       &gt;       <span class="nv">entry</span> <span class="o">=</span> <span class="o">(</span>character, count<span class="o">)</span>
</span></span><span class="line"><span class="cl">                       E       UnboundLocalError: cannot access <span class="nb">local</span> variable <span class="s1">&#39;character&#39;</span> where it is not associated with a value
</span></span><span class="line"><span class="cl">                       E       Falsifying example: test_decode_inverts_encode<span class="o">(</span>
</span></span><span class="line"><span class="cl">                           E           <span class="nv">s</span><span class="o">=</span><span class="s1">&#39;&#39;</span>,
</span></span><span class="line"><span class="cl">                           E       <span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                       property_based_testing.py:17: <span class="nv">UnboundLocalError</span>
</span></span><span class="line"><span class="cl">                       <span class="o">=================================</span> short <span class="nb">test</span> summary <span class="nv">info</span> <span class="o">==================================</span>
</span></span><span class="line"><span class="cl">                       FAILED property_based_testing.py::test_decode_inverts_encode - UnboundLocalError: cannot access <span class="nb">local</span> variable <span class="s1">&#39;character&#39;</span> where it is not associated ...
</span></span><span class="line"><span class="cl">                       <span class="o">====================================</span> <span class="m">1</span> failed in 0.14s <span class="o">=====================================</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到，当 <code>input_string =''</code> 是空字符串的时候， <code>encode</code> 函数抛出异常了，说 <code>character</code> 变量未定义。原来是 <code>encode</code> 函数没有对空字符串这个 corner case 作处理，那么就加个判断条件，修复一下:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">encode</span><span class="p">(</span><span class="n">input_string</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="ow">not</span> <span class="n">input_string</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">count</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">prev</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">lst</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">character</span> <span class="ow">in</span> <span class="n">input_string</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">character</span> <span class="o">!=</span> <span class="n">prev</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">prev</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">entry</span> <span class="o">=</span> <span class="p">(</span><span class="n">prev</span><span class="p">,</span> <span class="n">count</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">lst</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">entry</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">count</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">prev</span> <span class="o">=</span> <span class="n">character</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">entry</span> <span class="o">=</span> <span class="p">(</span><span class="n">character</span><span class="p">,</span> <span class="n">count</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">lst</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">entry</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">lst</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>既然我们知道空字符串是个特殊的 case, 因为 hypothesis 生成的都是任意的随机数，不一定每次都会测到空字符串，那我们就自己指定一个 case:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">hypothesis</span> <span class="kn">import</span> <span class="n">example</span><span class="p">,</span> <span class="n">given</span><span class="p">,</span> <span class="n">strategies</span> <span class="k">as</span> <span class="n">st</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@given</span><span class="p">(</span><span class="n">st</span><span class="o">.</span><span class="n">text</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="nd">@example</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">)</span> <span class="c1"># 手工指定空字符串这个 corner case</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">test_decode_inverts_encode</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">decode</span><span class="p">(</span><span class="n">encode</span><span class="p">(</span><span class="n">s</span><span class="p">))</span> <span class="o">==</span> <span class="n">s</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>pytest</code> 重新运行，测试就通过了。但是，对 <code>hypothesis</code> 框架还没有建立信心的你我就不确定，它是否真的生成很多随机来运行这个 test case 呢？</p>
<p>有两个方法可以验证：</p>
<p>方法一：最简单粗暴的方式，把 <code>s</code> 变量给打印出来，毕竟眼见为实:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nd">@given</span><span class="p">(</span><span class="n">st</span><span class="o">.</span><span class="n">text</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="nd">@example</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">test_decode_inverts_encode</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">decode</span><span class="p">(</span><span class="n">encode</span><span class="p">(</span><span class="n">s</span><span class="p">))</span> <span class="o">==</span> <span class="n">s</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后通过 <code>pytest -s</code> 参数要求 <code>pytest</code> 将写入到 <code>stdout</code> 的内容给打印出来</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">&gt; pytest property_based_testing.py -s
</span></span><span class="line"><span class="cl"><span class="o">=======================================</span> <span class="nb">test</span> session <span class="nv">starts</span> <span class="o">=======================================</span>
</span></span><span class="line"><span class="cl">platform darwin -- Python 3.12.6, pytest-8.3.3, pluggy-1.5.0
</span></span><span class="line"><span class="cl">rootdir: /Users/ramsayleung/code/python/test_technique
</span></span><span class="line"><span class="cl">plugins: hypothesis-6.115.0
</span></span><span class="line"><span class="cl">collected <span class="m">1</span> item
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">property_based_testing.py
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">O
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">¶
</span></span><span class="line"><span class="cl"><span class="se">\å</span>񢄏«
</span></span><span class="line"><span class="cl">𥛗Îbó
</span></span><span class="line"><span class="cl">𜆮å
</span></span><span class="line"><span class="cl">񰘰9
</span></span><span class="line"><span class="cl">gah󭾔𛧁
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">i򼯜+ó»򮩸b񝕨
</span></span><span class="line"><span class="cl">S!ÕTå<span class="p">&amp;</span>𰵩í¤ýäó÷F
</span></span><span class="line"><span class="cl">øôyµ
</span></span><span class="line"><span class="cl">Äª
</span></span><span class="line"><span class="cl">sLz$ï
</span></span><span class="line"><span class="cl">_𠵈
</span></span><span class="line"><span class="cl">Ü
</span></span><span class="line"><span class="cl">A
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">R󃝷<span class="o">{</span>©¾
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   ìõ
</span></span><span class="line"><span class="cl">   æ􂐛BÝ1*􅄢ëóg𮎈¼ ?𩓁
</span></span><span class="line"><span class="cl">   Òör @PP􎾂ö񳱊ûÁ½¬HÈ6#
</span></span><span class="line"><span class="cl">   a𣽗¶󿅌𧑁x~󗜬韹ûð󴯮#Z󅖫<span class="se">\©</span>𳖅ûf&gt;
</span></span><span class="line"><span class="cl">   i
</span></span><span class="line"><span class="cl">   ....
</span></span><span class="line"><span class="cl">   <span class="o">========================================</span> <span class="m">1</span> passed in 0.15s <span class="o">========================================</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这一堆都是什么字符呢, 都乱码了。</p>
<p>毕竟我们告诉 <code>hypothesis</code> 框架的是，我们参数接受的标准是任意的字符串， <code>hypothesis</code> 就非常尽职地帮我们生成了各种字符串，这个测试数据集可比我们自己手工构建的范围大得多，这就是 property based testing 的优势所在.</p>
<p>第二种方法是使用 <code>hypothesis</code> 框架提供的命令行参数 =&ndash;hypothesis-show-statistics=，用于打印统计信息:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">&gt; pytest property_based_testing.py --hypothesis-show-statistics
</span></span><span class="line"><span class="cl"><span class="o">=======================================</span> <span class="nb">test</span> session <span class="nv">starts</span> <span class="o">=======================================</span>
</span></span><span class="line"><span class="cl">platform darwin -- Python 3.12.6, pytest-8.3.3, pluggy-1.5.0
</span></span><span class="line"><span class="cl">rootdir: /Users/ramsayleung/code/python/test_technique
</span></span><span class="line"><span class="cl">plugins: hypothesis-6.115.0
</span></span><span class="line"><span class="cl">collected <span class="m">1</span> item
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">property_based_testing.py .                                                                 <span class="o">[</span>100%<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">======================================</span> Hypothesis <span class="nv">Statistics</span> <span class="o">======================================</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">property_based_testing.py::test_decode_inverts_encode:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">- during generate phase <span class="o">(</span>0.03 seconds<span class="o">)</span>:
</span></span><span class="line"><span class="cl">- Typical runtimes: &lt; 1ms, of which &lt; 1ms in data generation
</span></span><span class="line"><span class="cl">- <span class="m">100</span> passing examples, <span class="m">0</span> failing examples, <span class="m">0</span> invalid examples
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">- Stopped because settings.max_examples<span class="o">=</span><span class="nv">100</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">========================================</span> <span class="m">1</span> passed in 0.05s <span class="o">========================================</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>上面运行了 100 条数据，如果你觉得还想跑更多，可以通过 <code>settings</code> 装饰器指定更多:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nd">@settings</span><span class="p">(</span><span class="n">max_examples</span><span class="o">=</span><span class="mi">500</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="quickcheck-and-proptest"><span class="section-num">4</span> Quickcheck &amp; Proptest</h2>
<p>而在Rust生态，就有两个 Property Based Testing 的库，一个是由Rust社区知名开发者，<a href="https://github.com/BurntSushi/ripgrep">ripgrep</a> <sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>和 regex 库作者移植自 Haskell Quickcheck 库的 <a href="https://github.com/BurntSushi/quickcheck">quickcheck</a> <sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>(名字也一并移植了), 另外一个是思路继承自 Python Hypothesis 的 <a href="https://github.com/proptest-rs/proptest">Proptest</a> <sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup>(这位直接用property based testing技术来命名了，不得不说，命名真的是门艺术)</p>
<p>两者的社区接受度都相差无几(star, 使用者数量), 而在公司内部，我也发现 quickcheck 和 proptest 都有人用，坐我旁边的Principle Engineer 用的是 proptest, 而另外一个现在和我共事的同事，她的之前团队用的就是 quickcheck，看到都势均力敌嘛。</p>
<p>翻开 quickcheck 和 proptest 的API 文档之后，我发现我更喜欢 quickcheck 的接口风格，虽说它的活跃度更低一些，我最后还是选择了使用 quickcheck.</p>
<p>下面就来介绍一下我在Rust上使用 quickcheck 的心得:</p>
<p>假设我们现在有一个可以反转列表的函数 <code>reverse</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">fn</span> <span class="nf">reverse</span><span class="o">&lt;</span><span class="n">T</span>: <span class="nb">Clone</span><span class="o">&gt;</span><span class="p">(</span><span class="n">xs</span>: <span class="kp">&amp;</span><span class="p">[</span><span class="n">T</span><span class="p">])</span><span class="w"> </span>-&gt; <span class="nb">Vec</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">rev</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="fm">vec!</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">xs</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">rev</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="p">.</span><span class="n">clone</span><span class="p">())</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">rev</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>对于任意类型的列表，反转之后再反转的结果，肯定是和原结果一样的，那么我们就可以开始声明我们的标准(specification), 那就是任意的列表，可以是字符串列表，整型列表或者是其他的结构体列表:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="cp">#[cfg(test)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">mod</span> <span class="nn">tests</span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">use</span><span class="w"> </span><span class="n">quickcheck_macros</span>::<span class="n">quickcheck</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">use</span><span class="w"> </span><span class="k">crate</span>::<span class="n">reverse</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cp">#[quickcheck]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">double_reversal_is_identity_isize</span><span class="p">(</span><span class="n">xs</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="kt">isize</span><span class="o">&gt;</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kt">bool</span> <span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">xs</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">reverse</span><span class="p">(</span><span class="o">&amp;</span><span class="n">reverse</span><span class="p">(</span><span class="o">&amp;</span><span class="n">xs</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cp">#[quickcheck]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">double_reversal_is_identity_string</span><span class="p">(</span><span class="n">xs</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kt">bool</span> <span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">xs</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">reverse</span><span class="p">(</span><span class="o">&amp;</span><span class="n">reverse</span><span class="p">(</span><span class="o">&amp;</span><span class="n">xs</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Rust 的unit test 是不支持带参数的，=#[quickcheck]= 这个宏就会自动将 <code>double_reversal_is_identity_isize</code> 转换成 property based test case, 而得益于Rust的类型系统, <code>quickcheck</code> 就能推断出入参就是我们声明的标准 <code>Vec&lt;isze&gt;</code>, 任意 <code>isize</code> 类型的数组.</p>
<h3 id="struct-with-quickcheck"><span class="section-num">4.1</span> Struct with quickcheck</h3>
<p>如果上面的例子觉得过于简单的话，现在就让我们看个复杂一点的例子, 一个简单的图书管理系统，支持会员，借书，还书功能：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span><span class="lnt">91
</span><span class="lnt">92
</span><span class="lnt">93
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">chrono</span>::<span class="p">{</span><span class="n">Duration</span><span class="p">,</span><span class="w"> </span><span class="n">NaiveDate</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">collections</span>::<span class="n">HashMap</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="cp">#[derive(Debug, Clone, PartialEq)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">struct</span> <span class="nc">Book</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">isbn</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">title</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">author</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">publication_year</span>: <span class="kt">u16</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="cp">#[derive(Debug, Clone, PartialEq)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">struct</span> <span class="nc">Member</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">id</span>: <span class="kt">u32</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">name</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">email</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="cp">#[derive(Debug, Clone)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">struct</span> <span class="nc">Loan</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">book_isbn</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">member_id</span>: <span class="kt">u32</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">due_date</span>: <span class="nc">NaiveDate</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="cp">#[derive(Debug, Clone)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">struct</span> <span class="nc">Library</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">books</span>: <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nb">String</span><span class="p">,</span><span class="w"> </span><span class="n">Book</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">members</span>: <span class="nc">HashMap</span><span class="o">&lt;</span><span class="kt">u32</span><span class="p">,</span><span class="w"> </span><span class="n">Member</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">loans</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="n">Loan</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">current_date</span>: <span class="nc">NaiveDate</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Library</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">new</span><span class="p">(</span><span class="n">current_date</span>: <span class="nc">NaiveDate</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">Library</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">books</span>: <span class="nc">HashMap</span>::<span class="n">new</span><span class="p">(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">members</span>: <span class="nc">HashMap</span>::<span class="n">new</span><span class="p">(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">loans</span>: <span class="nb">Vec</span>::<span class="n">new</span><span class="p">(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">current_date</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">add_book</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">book</span>: <span class="nc">Book</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="p">(),</span><span class="w"> </span><span class="nb">String</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">books</span><span class="p">.</span><span class="n">contains_key</span><span class="p">(</span><span class="o">&amp;</span><span class="n">book</span><span class="p">.</span><span class="n">isbn</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nb">Err</span><span class="p">(</span><span class="s">&#34;Book with this ISBN already exists&#34;</span><span class="p">.</span><span class="n">to_string</span><span class="p">())</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="bp">self</span><span class="p">.</span><span class="n">books</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">book</span><span class="p">.</span><span class="n">isbn</span><span class="p">.</span><span class="n">clone</span><span class="p">(),</span><span class="w"> </span><span class="n">book</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nb">Ok</span><span class="p">(())</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">add_member</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">member</span>: <span class="nc">Member</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="p">(),</span><span class="w"> </span><span class="nb">String</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">members</span><span class="p">.</span><span class="n">contains_key</span><span class="p">(</span><span class="o">&amp;</span><span class="n">member</span><span class="p">.</span><span class="n">id</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nb">Err</span><span class="p">(</span><span class="s">&#34;Member with this ID already exists&#34;</span><span class="p">.</span><span class="n">to_string</span><span class="p">())</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="bp">self</span><span class="p">.</span><span class="n">members</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">member</span><span class="p">.</span><span class="n">id</span><span class="p">,</span><span class="w"> </span><span class="n">member</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nb">Ok</span><span class="p">(())</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">loan_book</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">book_isbn</span>: <span class="kp">&amp;</span><span class="kt">str</span><span class="p">,</span><span class="w"> </span><span class="n">member_id</span>: <span class="kt">u32</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="p">(),</span><span class="w"> </span><span class="nb">String</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="o">!</span><span class="bp">self</span><span class="p">.</span><span class="n">books</span><span class="p">.</span><span class="n">contains_key</span><span class="p">(</span><span class="n">book_isbn</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="nb">Err</span><span class="p">(</span><span class="s">&#34;Book not found&#34;</span><span class="p">.</span><span class="n">to_string</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="o">!</span><span class="bp">self</span><span class="p">.</span><span class="n">members</span><span class="p">.</span><span class="n">contains_key</span><span class="p">(</span><span class="o">&amp;</span><span class="n">member_id</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="nb">Err</span><span class="p">(</span><span class="s">&#34;Member not found&#34;</span><span class="p">.</span><span class="n">to_string</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">loans</span><span class="p">.</span><span class="n">iter</span><span class="p">().</span><span class="n">any</span><span class="p">(</span><span class="o">|</span><span class="n">loan</span><span class="o">|</span><span class="w"> </span><span class="n">loan</span><span class="p">.</span><span class="n">book_isbn</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">book_isbn</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="nb">Err</span><span class="p">(</span><span class="s">&#34;Book is already on loan&#34;</span><span class="p">.</span><span class="n">to_string</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">due_date</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">current_date</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">Duration</span>::<span class="n">days</span><span class="p">(</span><span class="mi">14</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="bp">self</span><span class="p">.</span><span class="n">loans</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">Loan</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">book_isbn</span>: <span class="nc">book_isbn</span><span class="p">.</span><span class="n">to_string</span><span class="p">(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">member_id</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">due_date</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nb">Ok</span><span class="p">(())</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">return_book</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">book_isbn</span>: <span class="kp">&amp;</span><span class="kt">str</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="p">(),</span><span class="w"> </span><span class="nb">String</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="kd">let</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="n">index</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">.</span><span class="n">loans</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">.</span><span class="n">iter</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">.</span><span class="n">position</span><span class="p">(</span><span class="o">|</span><span class="n">loan</span><span class="o">|</span><span class="w"> </span><span class="n">loan</span><span class="p">.</span><span class="n">book_isbn</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">book_isbn</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="bp">self</span><span class="p">.</span><span class="n">loans</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">index</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nb">Ok</span><span class="p">(())</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nb">Err</span><span class="p">(</span><span class="s">&#34;Book is not currently on loan&#34;</span><span class="p">.</span><span class="n">to_string</span><span class="p">())</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>通过上面的简单代码，就实现了新增图书，新增会员，借书，和还书功能。现在就让我们来结合 <code>quickcheck</code> 的 <code>Arbitrary</code> 接口，实现生成任意的图书和会员，以便用于测试:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">quickcheck</span>::<span class="p">{</span><span class="n">Arbitrary</span><span class="p">,</span><span class="w"> </span><span class="n">Gen</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Arbitrary</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Book</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">arbitrary</span><span class="p">(</span><span class="n">g</span>: <span class="kp">&amp;</span><span class="nc">mut</span><span class="w"> </span><span class="n">Gen</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">Book</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c1">// isbn必须以`ISBN` 开头，后接任意的大于等于0，小于uint32.max_value
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="c1">// 的整型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="n">isbn</span>: <span class="nc">format</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;ISBN-{}&#34;</span><span class="p">,</span><span class="w"> </span><span class="kt">u32</span>::<span class="n">arbitrary</span><span class="p">(</span><span class="n">g</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">title</span>: <span class="nb">String</span>::<span class="n">arbitrary</span><span class="p">(</span><span class="n">g</span><span class="p">),</span><span class="w"> </span><span class="c1">// 任意的字符串
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="n">author</span>: <span class="nb">String</span>::<span class="n">arbitrary</span><span class="p">(</span><span class="n">g</span><span class="p">),</span><span class="w"> </span><span class="c1">// 任意的字符串
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="n">publication_year</span>: <span class="o">*</span><span class="n">g</span><span class="p">.</span><span class="n">choose</span><span class="p">(</span><span class="o">&amp;</span><span class="p">[</span><span class="mi">2014_</span><span class="k">u16</span><span class="p">,</span><span class="w"> </span><span class="mi">2022_</span><span class="k">u16</span><span class="p">,</span><span class="w"> </span><span class="mi">2025_</span><span class="k">u16</span><span class="p">]).</span><span class="n">unwrap</span><span class="p">(),</span><span class="w"> </span><span class="c1">// 2014,2022或2025年出版的书
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Arbitrary</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Member</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">arbitrary</span><span class="p">(</span><span class="n">g</span>: <span class="kp">&amp;</span><span class="nc">mut</span><span class="w"> </span><span class="n">Gen</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">Member</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">id</span>: <span class="kt">u32</span>::<span class="n">arbitrary</span><span class="p">(</span><span class="n">g</span><span class="p">),</span><span class="w"> </span><span class="c1">// 任意大于0，小于uint32.max_value的整型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="n">name</span>: <span class="nb">String</span>::<span class="n">arbitrary</span><span class="p">(</span><span class="n">g</span><span class="p">),</span><span class="w"> </span><span class="c1">// 任意字符串
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="c1">// 任意字符开头, 以@example.com 结尾的字符
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="n">email</span>: <span class="nc">format</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;{}@example.com&#34;</span><span class="p">,</span><span class="w"> </span><span class="nb">String</span>::<span class="n">arbitrary</span><span class="p">(</span><span class="n">g</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>现在就让我们来看下借助 quickcheck 编写的 test case, 注意参数为 <code>Book</code> 和 <code>Member</code> 类型的 case, quickcheck 就会以我们上面定义的标准，自动给我们生成符合规定的 <code>Book</code> 和 <code>Member</code> 参数.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="cp">#[cfg(test)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">mod</span> <span class="nn">tests</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">use</span><span class="w"> </span><span class="n">chrono</span>::<span class="n">NaiveDate</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">use</span><span class="w"> </span><span class="n">quickcheck_macros</span>::<span class="n">quickcheck</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">use</span><span class="w"> </span><span class="k">crate</span>::<span class="n">book</span>::<span class="n">Member</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">use</span><span class="w"> </span><span class="k">super</span>::<span class="p">{</span><span class="n">Book</span><span class="p">,</span><span class="w"> </span><span class="n">Library</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cp">#[quickcheck]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">adding_book_increases_book_count</span><span class="p">(</span><span class="n">book</span>: <span class="nc">Book</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kt">bool</span> <span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">library</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Library</span>::<span class="n">new</span><span class="p">(</span><span class="n">NaiveDate</span>::<span class="n">from_ymd_opt</span><span class="p">(</span><span class="mi">2024</span><span class="p">,</span><span class="w"> </span><span class="mi">10</span><span class="p">,</span><span class="w"> </span><span class="mi">14</span><span class="p">).</span><span class="n">unwrap</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">initial_count</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">library</span><span class="p">.</span><span class="n">books</span><span class="p">.</span><span class="n">len</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">library</span><span class="p">.</span><span class="n">add_book</span><span class="p">(</span><span class="n">book</span><span class="p">.</span><span class="n">clone</span><span class="p">()).</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">library</span><span class="p">.</span><span class="n">books</span><span class="p">.</span><span class="n">len</span><span class="p">()</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">initial_count</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">library</span><span class="p">.</span><span class="n">books</span><span class="p">.</span><span class="n">contains_key</span><span class="p">(</span><span class="o">&amp;</span><span class="n">book</span><span class="p">.</span><span class="n">isbn</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cp">#[quickcheck]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">cannot_loan_nonexistent_book</span><span class="p">(</span><span class="n">book_isbn</span>: <span class="nb">String</span><span class="p">,</span><span class="w"> </span><span class="n">member_id</span>: <span class="kt">u32</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kt">bool</span> <span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">library</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Library</span>::<span class="n">new</span><span class="p">(</span><span class="n">NaiveDate</span>::<span class="n">from_ymd_opt</span><span class="p">(</span><span class="mi">2024</span><span class="p">,</span><span class="w"> </span><span class="mi">10</span><span class="p">,</span><span class="w"> </span><span class="mi">14</span><span class="p">).</span><span class="n">unwrap</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">library</span><span class="p">.</span><span class="n">loan_book</span><span class="p">(</span><span class="o">&amp;</span><span class="n">book_isbn</span><span class="p">,</span><span class="w"> </span><span class="n">member_id</span><span class="p">).</span><span class="n">is_err</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cp">#[quickcheck]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">can_return_loaned_book</span><span class="p">(</span><span class="n">book</span>: <span class="nc">Book</span><span class="p">,</span><span class="w"> </span><span class="n">member</span>: <span class="nc">Member</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kt">bool</span> <span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">library</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Library</span>::<span class="n">new</span><span class="p">(</span><span class="n">NaiveDate</span>::<span class="n">from_ymd_opt</span><span class="p">(</span><span class="mi">2024</span><span class="p">,</span><span class="w"> </span><span class="mi">10</span><span class="p">,</span><span class="w"> </span><span class="mi">14</span><span class="p">).</span><span class="n">unwrap</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">library</span><span class="p">.</span><span class="n">add_book</span><span class="p">(</span><span class="n">book</span><span class="p">.</span><span class="n">clone</span><span class="p">()).</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">library</span><span class="p">.</span><span class="n">add_member</span><span class="p">(</span><span class="n">member</span><span class="p">.</span><span class="n">clone</span><span class="p">()).</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">library</span><span class="p">.</span><span class="n">loan_book</span><span class="p">(</span><span class="o">&amp;</span><span class="n">book</span><span class="p">.</span><span class="n">isbn</span><span class="p">,</span><span class="w"> </span><span class="n">member</span><span class="p">.</span><span class="n">id</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">library</span><span class="p">.</span><span class="n">return_book</span><span class="p">(</span><span class="o">&amp;</span><span class="n">book</span><span class="p">.</span><span class="n">isbn</span><span class="p">).</span><span class="n">is_ok</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>通过 <code>quickcheck</code> 我们就可以只专注测试逻辑，可以假定测试数据集是完备的了。可能看到 <code>Book</code> 和 <code>Member</code>, 你会觉得 quickcheck 并没有做太多事情，你手工也可以构造。</p>
<p>但是我在的实际工作中，我就需要构造一个超过23个成员变量的 struct, 大部分还是 optional, 然后需要将这个 struct 写入到 parquet 文件，然后再测试读取逻辑。
不同成员变量的值可取的范围实在太多了，再叠加上 optional 的可能性，构造数据的代码写得相当恶心.</p>
<p>所以有了 quickcheck 之后，我只需要为这个 struct 实现 <code>Arbitrary</code> 接口，剩下的就由 <code>quickcheck</code> 替我生成，所以我直接和PE大佬说:</p>
<blockquote>
<p>property test saves me life, now I couldn&rsquo;t live without it.</p>
</blockquote>
<h2 id="总结"><span class="section-num">5</span> 总结</h2>
<p>本来想抒发感想写点结语，但是看到 Hypothesis 作者写的 <a href="https://hypothesis.readthedocs.io/en/latest/manifesto.html">The purpose of Hypothesis</a><sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup> 来说明他开发的 Hypothesis 的动机，他的文章甚至用来给这个《测试技能进阶》系列总结都相当妥当。</p>
<p>我就试翻译下他文章的部分段落, 更推荐阅读原文，可谓是用心良苦，字字珠玑:</p>
<blockquote>
<p>请容我狂妄一下，Hypothesis 的目标是希望可以让这个世界迈进到一个全新，由高质量软件打造的新世代。</p>
<p>正如人们所说，软件正在吞噬整个世界。但软件本身却很烂，它充满bug，又不安全，还经常被设计得很烂，这样的软件可谓是万恶之源.</p>
<p>而软件测试的状况甚至更糟糕，虽然大家都认同应该对代码进行测试，但是你能问心无愧地说，你经手过的代码都有被充分测试么？</p>
<p>问题在于，实在是太难写出好的测试了，
<strong><strong>你写测试用例的时候，通常持有和你写代码时一样的假设与误区，你写的测试用例自然无法发现你当初埋下的bug</strong></strong> (精辟)</p>
<p>与此同时，有各种各样让测试变成更好的工具却基本无人使用，最初的 Quickcheck 是1999年推出的，但是大多数开发者甚至从未听说过它，更别提使用了（开山始祖的Quickcheck在GitHub只有700多个Star，就知道作者所言不虚）。
虽然其他语言有些半成品的实现，但是大部分都不值得一试。</p>
<p>而 Hypothesis 的目标正是正本清源，把先进的测试技术传递给大众，并提供一个高质量的实现，让人们可以接纳它。</p>
<p>希望可以集百家之所长，附以个人微薄之力，让软件测试变得更好。</p>
</blockquote>
<p>系列文章:</p>
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%B8%80_%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E8%AE%A4%E7%9F%A5/">测试技能进阶(一): 软件质量认知</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%BA%8C_parameterized_tests/">测试技能进阶(二): Parameterized Tests</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%B8%89_property_based_testing/">测试技能进阶(三): Property Based Testing</a></li>
</ul>
<div center class="qr-container">
<img src="/ox-hugo/qrcode_gh_e06d750e626f_1.jpg" alt="qrcode_gh_e06d750e626f_1.jpg" width="160px" height="160px" center="t" class="qr-container" />
公号同步更新，欢迎关注👻
</div>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://en.wikipedia.org/wiki/QuickCheck">https://en.wikipedia.org/wiki/QuickCheck</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://hypothesis.works/">https://hypothesis.works/</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="https://en.wikipedia.org/wiki/Run-length_encoding">https://en.wikipedia.org/wiki/Run-length_encoding</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p><a href="https://github.com/BurntSushi/ripgrep">https://github.com/BurntSushi/ripgrep</a>&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p><a href="https://github.com/BurntSushi/quickcheck">https://github.com/BurntSushi/quickcheck</a>&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p><a href="https://github.com/proptest-rs/proptest">https://github.com/proptest-rs/proptest</a>&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7">
<p><a href="https://hypothesis.readthedocs.io/en/latest/manifesto.html">https://hypothesis.readthedocs.io/en/latest/manifesto.html</a>&#160;<a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>history on 自由庄园</title>
    <link>https://ramsayleung.github.io/zh/categories/history/</link>
    <description>Recent content in history on 自由庄园</description>
    <image>
      <title>自由庄园</title>
      <url>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>See this site&#39;s source code [here](https://github.com/ramsayleung/ramsayleung.github.io), licensed under GPLv3 ·</copyright>
    <lastBuildDate>Fri, 21 Jul 2023 21:38:00 -0700</lastBuildDate><atom:link href="https://ramsayleung.github.io/zh/categories/history/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>闲话罗马：国王是选举出来的</title>
      <link>https://ramsayleung.github.io/zh/post/2023/%E5%9B%BD%E7%8E%8B%E6%98%AF%E9%80%89%E4%B8%BE%E5%87%BA%E6%9D%A5%E7%9A%84/</link>
      <pubDate>Fri, 21 Jul 2023 21:38:00 -0700</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2023/%E5%9B%BD%E7%8E%8B%E6%98%AF%E9%80%89%E4%B8%BE%E5%87%BA%E6%9D%A5%E7%9A%84/</guid>
      <description>1 引子 年少的时候，很喜欢看历史书，倒不是因为「以史为鉴，可以明得失」发人深省的思考，单纯是因为手头没有太多打发时间的活动（那时还没有太多的电</description>
      <content:encoded><![CDATA[<h2 id="引子"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> 引子</h2>
<p>年少的时候，很喜欢看历史书，倒不是因为「以史为鉴，可以明得失」发人深省的思考，单纯是因为手头没有太多打发时间的活动（那时还没有太多的电脑游戏和视频），而少年人最多的就是时间。 <!-- raw HTML omitted --></p>
<p>历史书里面有光怪陆离，跌宕起伏的故事，那时的我自然很容易被吸引进去。 <!-- raw HTML omitted --></p>
<p>上中学的时候，特别喜欢看三国，喜欢武将决斗，谋士运筹的故事。 <!-- raw HTML omitted --></p>
<p>再后来，随着网络小说的兴起，兼之三国的历史已经烂熟于心，没有太多的新意，就开始看各种的架空，穿越三国的网络小说。 <!-- raw HTML omitted --></p>
<p>比如：《重生三国之xx》，《xx三国》等等，后来又因为《明朝那些事儿》的爆红，开始看明史。 <!-- raw HTML omitted --></p>
<p>工作之后，出于历史的兴趣，就开始摆脱通史类的故事书，阅读一些偏学术类的历史著作。 <!-- raw HTML omitted --></p>
<p>只是在截止到这个时候，阅读的都是中国历朝历代的历史，毕竟外国人的历史有什么好读的，地名和人名这么难记。 <!-- raw HTML omitted --></p>
<p>大概在三年多前，阅读一本英语学习书籍(《Word Power Made Easy》，这也是本神书，后面我一定要好好聊聊)的时候， <!-- raw HTML omitted --></p>
<p>该书中提到，古希腊和古罗马是现代欧美文明的精神来源，相关的传统，法律或者是宗教， <!-- raw HTML omitted -->
都可以从这两个古代文明找到参照物，约70%的英语单词就是衍生自古希腊语或者罗马人用的拉丁语。 <!-- raw HTML omitted --></p>
<p>何况古罗马历经共和国及帝国时代，历经1300年不倒。 <!-- raw HTML omitted --></p>
<p>对比之下，中国的朝代大多是三百年，为什么古罗马就能走出这样的历史周期律，延续千年呢？ <!-- raw HTML omitted --></p>
<p>想必自有其独到之处。 <!-- raw HTML omitted --></p>
<p>吃了那么久的中国菜，去尝试下西餐也不错嘛，说不定还能吃出新意呢。 <!-- raw HTML omitted --></p>
<h2 id="罗马建国"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> 罗马建国</h2>
<p>公元前八世纪，传说罗马第一任国王罗穆路斯和双胞胎弟弟瑞摩斯出生后即被装到一个桶里，和唐僧一样，被投到河里遗弃。 <!-- raw HTML omitted --></p>
<p>木桶顺流而下，婴儿在桶里大声哭闹，引来了附近正在徘徊的一匹母狼。 <!-- raw HTML omitted --></p>
<p>这匹母狼没有把这两个婴儿当作午餐，反而将乳头塞进了两个婴儿的嘴里，把他们从死亡线上拉了回来。 <!-- raw HTML omitted --></p>
<p>婴儿由母狼抚养长大的故事显然过于玄幻，所以母狼在喂抱两个幼儿之后就离开了，是一个羊倌发现他们并把他们带回家了。 <!-- raw HTML omitted --></p>
<p>所以在罗马，都有各种各样母狼喂养罗穆路斯和瑞摩斯的塑像： <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/Capitoline_she-wolf_Musei_Capitolini_MC1181.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>甚至意甲球队罗马的队徽也是母狼喂养罗穆路斯和瑞摩斯图: <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/AS_Roma_logo.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>在罗穆路斯18岁的时候，他和3000名追随他的拉丁人，以他自己的名字(Romulus)，在台伯河下游平原的七座小山丘上建立了罗马国（Roma，或者叫罗马城）： <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/300px-Die_sieben_H%c3%bcgel_Roms.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>为什么3000人就能建国？，这个没有什么硬性标准的嘛，只要实力够，自然可以自封为王。 <!-- raw HTML omitted --></p>
<p>所以也难怪曹操会说，设使天下无有孤，不知当有几人称王，几人称帝（串台了） <!-- raw HTML omitted --></p>
<h2 id="国政"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> 国政</h2>
<p>罗穆路斯建国之后，作为开国之王，却没有独揽大权，他把国政分成三个机构，分别是国王，元老院和市民大会。 <!-- raw HTML omitted --></p>
<p>国王作为宗教祭祀，军事和政治的最高领导人，由市民大会投票选举产生。 <!-- raw HTML omitted --></p>
<p>罗穆路斯认为，如果没有市民大会选举，自封的王不具有执政基础。 <!-- raw HTML omitted --></p>
<p>（只能说东西方的执政想法真的不一样，尧舜禹禅让，都被儒家夸了两千年。而罗马的权力竟然不是世袭的） <!-- raw HTML omitted --></p>
<p>罗穆路斯召集100位部族长老，设立元老院，他们的职责是为国王提忠告和建议，所以不需要通过市民大会的选举。 <!-- raw HTML omitted --></p>
<p>元老院的拉丁语是：Senātus，也是众多英语单词的词根，比如年长者(senior), 或者美国的参议院(senate), 都是元老院的衍生词。 <!-- raw HTML omitted --></p>
<p>市民大会由全体罗马市民组成，它的任务是选出以国王为首的各级政府官员。 <!-- raw HTML omitted --></p>
<p>（政府官员究竟不是国王或者上级官员指派的，无知的我又吃了一惊。） <!-- raw HTML omitted --></p>
<p>市民大会没有制定政策的权力，但是对国王听取元老院的建议后制定出来的政策有赞成或反对的表决权。 <!-- raw HTML omitted --></p>
<p>此外，在对外关系上，是战是和，也必须征得他们的同意才可实施。 <!-- raw HTML omitted --></p>
<p>当时的罗马国规模还不大，所以还能由全体罗马市民组成市民大会，不知道市民人数多了之后，市民大会又会如何发展呢？ <!-- raw HTML omitted --></p>
<h2 id="总结"><!-- raw HTML omitted -->4<!-- raw HTML omitted --> 总结</h2>
<p>原来十八世纪法国启蒙思想家孟德斯鸠的三权分立理念，在公元前八世纪的罗马城就能找到雏形。 <!-- raw HTML omitted --></p>
<p>这顿西餐，看来是越来越有趣了。 <!-- raw HTML omitted --></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>黑客列传：强得抠脚的教主RMS</title>
      <link>https://ramsayleung.github.io/zh/post/2023/%E5%BC%BA%E5%BE%97%E6%8A%A0%E8%84%9A%E7%9A%84%E6%95%99%E4%B8%BBrms/</link>
      <pubDate>Sun, 16 Jul 2023 22:58:00 -0700</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2023/%E5%BC%BA%E5%BE%97%E6%8A%A0%E8%84%9A%E7%9A%84%E6%95%99%E4%B8%BBrms/</guid>
      <description>1 前言 前段时间流行一种关于程序员效率的说法，叫「10x程序员」，即一个好的程序员的工作效率是普通程序员的10倍。 但是，在编程界，有这么一群人</description>
      <content:encoded><![CDATA[<h2 id="前言"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> 前言</h2>
<p>前段时间流行一种关于程序员效率的说法，叫「10x程序员」，即一个好的程序员的工作效率是普通程序员的10倍。 <!-- raw HTML omitted --></p>
<p>但是，在编程界，有这么一群人，他们的工作效率，可以说是百倍，甚至千倍于普通程序员； <!-- raw HTML omitted --></p>
<p>更令人惊叹的是，他们创造了普通程序员即使百倍努力也无法写出的作品，对于这样的大神，唯有叹服。 <!-- raw HTML omitted --></p>
<p>使用「程序员」这个职业来称呼他们，未免流于平凡，无法展现出他们竖立起的丰碑；而使用「计算机科学家」，又未免过于学术，不接地气； <!-- raw HTML omitted --></p>
<p>那么，就回到最初，用「黑客(hacker)」这个称谓来称呼他们吧。 <!-- raw HTML omitted --></p>
<h2 id="关于黑客"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> 关于黑客</h2>
<p>可能大家对「黑客 (hacker)」的印象多来自于电影，比如《黑客帝国》，就是那种在电脑面前，使用各种看不懂的工具入侵别人电脑的人。 <!-- raw HTML omitted --></p>
<p>但是这种看法大多是对于「黑客」的误解，称之为「骇客(cracker)」可能更加合适，即恶意入侵他人电脑的人。 <!-- raw HTML omitted --></p>
<p><code>hacker</code> 一词又是从 <code>hacking</code> 衍生而来的，将 <code>hacking</code> 翻译成成中文网络语中的「整，搞，开干」可能会更贴切，  而最初的「黑客」指的就是一群富有创造力和兴趣的爱好者，只是比较具有代表性的是在计算机领域。 <!-- raw HTML omitted --></p>
<p>国外有个很有名的科技相关的聚合网站，叫做「Hacker News」, 其中的「Hacker」, 也是沿用黑客最初的含义。 <!-- raw HTML omitted --></p>
<p>既然提到黑客，那么有一个无法绕过去的人物，那就是今天的主角，黑客文化的领军人物：Richard Stallman <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/rms_avatar.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<h2 id="unix"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> UNIX</h2>
<h3 id="分时系统"><!-- raw HTML omitted -->3.1<!-- raw HTML omitted --> 分时系统</h3>
<p>相信今天的我们，对操作系统这个概念不会陌生，在电脑上有 Windows 10, Windows 11, Windows 7 或者苹果的 MacOS操作系统，在手机上有 Android 和 IOS操作系统。 <!-- raw HTML omitted --></p>
<p>所谓的操作系统，即是一套管理硬件，发挥硬件性能的软件，避免应用程序直接和硬件打交道，省去普通程序员大量的开发成本和心智。 <!-- raw HTML omitted --></p>
<p>与今天直接在手机操作系统上，一边聊微信，一边放音乐不同，远古时候(二十世纪六十年代)的操作系统只支持批处理模式： <!-- raw HTML omitted --></p>
<p>即用户同时提交多个任务，任务1运行完才能运行任务2，相当于你只能把音乐听完，然后关掉音乐软件，然后才能打开微信，发送聊天消息。 <!-- raw HTML omitted -->
（请忽略远古时代还没有微信这个问题） <!-- raw HTML omitted --></p>
<p>你可能会想，这也太挫了吧。 <!-- raw HTML omitted --></p>
<p>没错，当时的计算机科学家也这么认为的。 <!-- raw HTML omitted --></p>
<p>因此1964年，通用电气和麻省理工大学就打算合作开发一个多任务操作系统，支持多个用户，运行多个任务，名为 <code>MULTICS</code> <!-- raw HTML omitted --></p>
<p>后来，AT&amp;T公司的贝尔实验室也加入到这个操作系统的研发中，但是项目目标过于庞大，特性太多，性能又很低, AT&amp;T见项目前景不妙，就把资源都撤了，退出了这个项目。 <!-- raw HTML omitted --></p>
<h3 id="玩游戏玩出来的unix"><!-- raw HTML omitted -->3.2<!-- raw HTML omitted --> 玩游戏玩出来的UNIX</h3>
<p>贝尔实验室的一位工程师，名叫Ken Thompson, 刚加入 MULTICS 项目不久，公司就准备退出了，但是通用公司为了项目而准备的机器 GE-645 就还保留在贝尔实验室，Ken 就打算用这些机器写个太空旅行的游戏。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/ge-645.jpg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>然而，Ken 写出来的游戏跑得很慢，每次运行还要75美刀，更难受的是，GE-645 这批机器，不久后就被搬回去通用公司了。 <!-- raw HTML omitted --></p>
<p>所以Ken 只好在实验室角落找了几台没人用的PDP-7, 在同事 Dennis Ritchie 的帮助下，再重写了一次游戏。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/pdp-7.jpeg"/> 
</figure>
  <!-- raw HTML omitted --></p>
<p>这次的游戏开发经历，加上之前的 MULTICS 项目经验，让Ken 开始研究如何使用 PDP-7 开发一个分时多任务操作系统。 <!-- raw HTML omitted --></p>
<p>然后他花费了一年的时间，和 Dennis 一起，在PDP-7上开发了一个分时多任务系统，名为UnICS，这就是第一版的 UNIX。 <!-- raw HTML omitted --></p>
<p>因为PDP-7的性能不佳，最多支持两个用户, Ken 和 Dennis 又把第一版的 UNIX迁移到 PDP-11上，为了方便迁移，还顺便发明了一门编程语言，名为 C语言，并将UnICS 改名为 UNIX. <!-- raw HTML omitted --></p>
<p>(这两位也是神) <!-- raw HTML omitted --></p>
<p>影响后世无数操作系统的 UNIX 操作系统就此诞生，并迅速风靡各大研究机构，政府机关，企业与大学，成为70-80年代，操作系统事实上的标准 <!-- raw HTML omitted --></p>
<h3 id="商业版本与闭源"><!-- raw HTML omitted -->3.3<!-- raw HTML omitted --> 商业版本与闭源</h3>
<p>原来的软件只是买硬件时的赠品，到七十年代未，人们开始发现，原来软件也可以卖钱，很快，制作与销售商业软件成为一门热门生意。 <!-- raw HTML omitted --></p>
<p>最开始的UNIX 版本是开放源代码供使用者的，也就是使用者不但可以安装 UNIX 系统，还可以阅读，并修改UNIX 系统的源代码。 <!-- raw HTML omitted --></p>
<p>但是贝尔实验室的母公司 AT&amp;T毕竟是商业公司，把自己的源代码授权出去，后面还怎么赚钱呢？ <!-- raw HTML omitted --></p>
<p>所以在20世纪80年代相继发布的UNIX 商业版本，只发行二进制，不再包含源代码。 <!-- raw HTML omitted --></p>
<p>对于黑客来说，就是你能看到这个操作系统是怎么跑的，但是你再也无法知道他是怎么实现的了。 <!-- raw HTML omitted --></p>
<h2 id="rms"><!-- raw HTML omitted -->4<!-- raw HTML omitted --> RMS</h2>
<p>Richard Matthew Stallman, 1953年出生于纽约的一个犹太家庭, 1974年毕业于哈佛大学，1975年在 MIT 攻读博士，后来退学在 MIT AI 实验室写代码。 <!-- raw HTML omitted --></p>
<p>他的名字首字母为 RMS, 早期在黑客社区混的时候，以 RMS为用户名，所以大家都叫他 RMS(后面就以RMS来称呼他了). <!-- raw HTML omitted --></p>
<p>当时的「黑客文化」崇尚开放，分享与交流，认为分享才能促进社会进步，在这样的文化熏陶下，RMS 自然对闭源软件痛恨不已。 <!-- raw HTML omitted --></p>
<p>1980年，还在 MIT AI 实验室工作的时候，因为激光打印机和大部分工作人员都不在同一层楼，总是跑上跑下去查看打印结果和进度就很麻烦。 <!-- raw HTML omitted --></p>
<p>RMS 就给实验室的激光打印机写了一个程序： <!-- raw HTML omitted --></p>
<p>可以在打印任务完成时，发消息通知用户；或者当打印任务卡住的时候，也发消息通知用户； <!-- raw HTML omitted --></p>
<p>然而，因为最新版本的打印机源码不再开放，RMS写的程序就无法再适配，让他相当恼火。 <!-- raw HTML omitted --></p>
<p>以小见大，整个软件行业都在发生变化，甚至连UNIX 这样的基石软件都开始不再开放源代码授权，RMS感觉，他要站出来做些什么了。 <!-- raw HTML omitted --></p>
<h2 id="gnu"><!-- raw HTML omitted -->5<!-- raw HTML omitted --> GNU</h2>
<h3 id="荜路蓝缕"><!-- raw HTML omitted -->5.1<!-- raw HTML omitted --> 荜路蓝缕</h3>
<p>在1983年, RMS 宣布了GNU 操作系统计划，计划开发出一个兼容 Unix的源码开放的操作系统，让 Unix用户可以无缝切换到 GNU 操作系统上. <!-- raw HTML omitted --></p>
<p>GNU 就是 &ldquo;GNU is Not Unix&quot;的缩写(那开头的GNU又是什么意思呢? 按照程序员的行话来说，这个叫递归) <!-- raw HTML omitted --></p>
<p>经过十多年的发展，Unix 已经成为操作系统事实上的标准，重新开发一个新的操作系统几近天方夜谭。 <!-- raw HTML omitted --></p>
<p>想象一下，有人跟你说要开发一个 Android 操作系统，用来替换掉 Google 的Android 系统，这工作量和难度可想而知，这就是现实中的想要移山的愚公，大战风车的堂吉诃德。 <!-- raw HTML omitted --></p>
<p>但是 RMS 并未被眼前的困难所吓退，而是一步一步，从0开始构建他心中的类Unix操作系统. <!-- raw HTML omitted --></p>
<p>1984年, RMS 开发并发布GNU Emacs 这个著名的文本编辑器, 方便程序员进行代码开发; <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/gnu_emacs.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>1986年, RMS 开发并发布GNU Debugger(gdb) 调试器, 方便程序员来调试程序; Emacs + gdb 就是他那个时代的IDE <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/gdb_screenshot.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>1987年, RMS 开发并发布GNU Compiler Collection(gcc) 编译器套件; 所谓的编译器，即将人写的代码，转换成机器可以运行的二进制代码。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/gcc_logo.svg"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p>开发出一个这样的软件就足以在计算机史上留名，RMS 在这3年间，还一口气开发出了3个，这样的技术水平和生产效率，只能让人叹服，影响力堪比盗火的普罗米修斯。 <!-- raw HTML omitted --></p>
<p>何况这些软件至今仍在迭代，被无数程序员所依赖，所使用。 <!-- raw HTML omitted --></p>
<p>比如微信的所有后台代码，都是使用GCC 编译出来的，也就是你现在也在间接使用着 RMS 当初编写的软件。 <!-- raw HTML omitted --></p>
<p>近40年过去了，市面上被广泛使用的C/C++编译器就只有三个: 微软家的 MSVC, 苹果支持开发的 Clang, 还有GNU 项目的 GCC. <!-- raw HTML omitted --></p>
<p>除此之外，GNU 项目还开发了许多的基础设施，如GNU make, GNU grep, bash，以及志在替换掉 PS的 GIMP 等等. <!-- raw HTML omitted --></p>
<p>除了基础设施外，GNU项目还希望类似通过美国宪法保证言论自由一样，通过法律和版权，确保软件开放源代码。 <!-- raw HTML omitted --></p>
<p>因此, 在1989年, RMS 发布了 GNU General Public License(GPL)授权, 主要内容是: 用户可以自由使用，复制，修改GPL软件, 派生的软件也必须使用GPL, 不能转换成闭源软件. <!-- raw HTML omitted --></p>
<p>从法律层面保证了GPL软件不会被有心人直接拿去闭源赚钱。 <!-- raw HTML omitted --></p>
<h3 id="开花结果"><!-- raw HTML omitted -->5.2<!-- raw HTML omitted --> 开花结果</h3>
<p>时间来到90年代, 经过近10年的耕耘, 在基础组件和配套设施相继完善之后，GNU 项目终于来到最关键的节点，开发出可以替换Unix 系统的内核(kernel). <!-- raw HTML omitted --></p>
<p>如果电脑硬件来比喻操作系统的话，就是内存，硬盘，主板，显示器，电源全部都就绪，就差最后的CPU, 画龙最后的点睛. <!-- raw HTML omitted --></p>
<p>但是GNU 的内核 Hurd 却迟迟未能发布, 而天下可谓苦闭源 Unix 久矣。 <!-- raw HTML omitted --></p>
<p>在1991年, 一个叫Linus的芬兰学生在社区上发布了他自己的业余项目：一个类Unix 的操作系统内核。 <!-- raw HTML omitted --></p>
<p>他把GNU 项目的相关组件(bash和gcc)移植到这个系统，也能正常运行起来了, 这个系统就是Linux(完整的名称应该是 GNU/Linux) <!-- raw HTML omitted --></p>
<p>自此, GNU 项目的最后一块拼图完整了, 十年磨一剑, GNU的基础组件加 Linus 的Linux内核, 一个志在替换 Unix 的操作系统终于完成了, 这就是 GNU/Linux. <!-- raw HTML omitted --></p>
<p>苦Unix久矣的社区的开发者云集而来，为 GNU/Linux 添砖加瓦, 让GNU/Linux 成为今天的参天大树(连微软家的服务器也在运行 Linux) <!-- raw HTML omitted --></p>
<p>&mdash; <!-- raw HTML omitted --></p>
<p>只见新人笑，哪闻旧人哭. <!-- raw HTML omitted --></p>
<p>有点离谱的是, GNU Hurd 已经开发超过30年了，还没有发布1.0(稳定可用版本). <!-- raw HTML omitted --></p>
<p>更离谱的是，最近还有更新: <!-- raw HTML omitted --></p>
<p>2023年6月份，还发布了2023年 <a href="https://lists.gnu.org/archive/html/bug-hurd/2023-06/msg00038.html">版本更新</a>: <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/gnu_hurd_2023_release.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<h2 id="轶事"><!-- raw HTML omitted -->6<!-- raw HTML omitted --> 轶事</h2>
<h3 id="教主"><!-- raw HTML omitted -->6.1<!-- raw HTML omitted --> 教主</h3>
<p>为什么称RMS 为教主呢？ <!-- raw HTML omitted --></p>
<p>因为RMS 创建了 Emacs 这个神的编辑器，自其诞生以来，与编辑器之神 Vi/Vim 的圣战就从未停息。 <!-- raw HTML omitted --></p>
<p>使用Emacs 的程序员与使用Vi/Vim 的程序员，一直在争论，究竟哪个才是更好的编辑器？ <!-- raw HTML omitted --></p>
<p>既然 RMS 是Emacs 的创始人，自然被使用 Emacs的人尊称为「教主」。 <!-- raw HTML omitted --></p>
<p>而这场争论已经持续近四十年，依旧没有分出胜负。 <!-- raw HTML omitted --></p>
<p>像 Google 这样浓眉大眼的家伙，还在不时地给这场战争拱火: <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/google_emacs.png"/> 
</figure>
  <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/google_vi.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<h3 id="教主与教主"><!-- raw HTML omitted -->6.2<!-- raw HTML omitted --> 教主与教主</h3>
<p>乔布斯被「果迷」尊称为「教主」，大家可能不知道的是，这两位「教主」曾经有过一场交锋。 <!-- raw HTML omitted --></p>
<p>1993年, 当时乔布斯还在 NeXT公司, 买下了 <code>Objective-C</code> 语言来开发应用程序(后来的IOS用的也是 <code>Objective-C</code>), 使用的编译器也是 GCC. <!-- raw HTML omitted --></p>
<p>NeXT 修改了 GCC的源码，以便增加对 =Objective-C=的支持，而GCC 使用的又是GPL 授权，而根据GPL 的授权，任何对GPL软件的修改，也必须要开放源代码。 <!-- raw HTML omitted --></p>
<p>所以乔布斯就问RMS, 他能否把 GCC 拆分成两部分，一部分是原来GCC, 继续开放源代码；另外一部分是增加 <code>Objective-C</code> 的GCC 编译器前端，闭源收费商用。 <!-- raw HTML omitted --></p>
<p>RMS 回复，当然是不可以。我估计老爷子心想，防的就是你这种人。 <!-- raw HTML omitted --></p>
<p>乔布斯只好将 <code>Objective-C</code> 编译器的前端也以GPL 授权开放出源代码。 <!-- raw HTML omitted --></p>
<p>&mdash; <!-- raw HTML omitted --></p>
<p>若干年后，苹果计划开发自己的编译器，因为设计以及授权的原因，在谋求与 GCC的合作未果后，转而支持 LLVM 的clang, 那也是后话了. <!-- raw HTML omitted --></p>
<h3 id="中国芯"><!-- raw HTML omitted -->6.3<!-- raw HTML omitted --> 中国芯</h3>
<p>根据 RMS <a href="https://usesthis.com/interviews/richard.stallman/">自述</a>, 他之前用的一直是中国科学院设计的龙芯处理器的龙梦电脑, 虽然这台电脑的性能，显示尺寸(只有9英寸)都无法让RMS 满意，但是这台电脑的是完全自由的，包括硬件, bios, 软件: <!-- raw HTML omitted --></p>
<blockquote>
<p>What hardware do you use? <!-- raw HTML omitted --></p>
<p>I am using a Lemote Yeelong, a netbook with a Loongson chip and a 9-inch display. This is my only computer, and I use it all the time. I chose it because I can run it with 100% free software even at the BIOS level. <!-- raw HTML omitted --></p>
</blockquote>
<p>在性能和自由之间，他一如既往地选择了「自由」 <!-- raw HTML omitted --></p>
<p>根据RMS <a href="https://stallman.org/intel.html">官网的描述</a>, 他不用intel 或者 amd 的芯片，是因为他们都有后门: <!-- raw HTML omitted --></p>
<blockquote>
<p>Reasons not to use Intel <!-- raw HTML omitted --></p>
<p>Don&rsquo;t use Intel processors newer than Core2, because they have the &ldquo;management engine&rdquo; back door. <!-- raw HTML omitted --></p>
<p>Recent AMD processors have a similar problem, but we do not yet have an article about it. <!-- raw HTML omitted --></p>
</blockquote>
<p>不过，据闻他的龙梦电脑被偷了之后，他也就换到 <a href="https://stallman.org/stallman-computing.html">ThinkPad 上了</a>: <!-- raw HTML omitted --></p>
<blockquote>
<p>As of 2022 I use a Thinkpad x200 computer, which has a free initialization program (Libreboot) and a free operating system (Trisquel GNU/Linux). <!-- raw HTML omitted --></p>
</blockquote>
<h3 id="抠脚"><!-- raw HTML omitted -->6.4<!-- raw HTML omitted --> 抠脚</h3>
<p>菜的抠脚就听说过，强得抠脚又是什么呢？ <!-- raw HTML omitted --></p>
<p>因为他真的抠脚（字面意思），还吃回去了。 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/koujiao_1.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/ox-hugo/koujiao2.png"/> 
</figure>
 <!-- raw HTML omitted --></p>
<h2 id="总结"><!-- raw HTML omitted -->7<!-- raw HTML omitted --> 总结</h2>
<p>他是天才黑客，是自由软件的精神领袖，是知行合一的孤勇者，更是个凡人堆里的理想主义者. <!-- raw HTML omitted --></p>
<p>当然，还是我大 Emacs 神教的教主. <!-- raw HTML omitted --></p>
<h2 id="参考"><!-- raw HTML omitted -->8<!-- raw HTML omitted --> 参考</h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/GNU_Compiler_Collection">https://en.wikipedia.org/wiki/GNU_Compiler_Collection</a> <!-- raw HTML omitted --></li>
<li><a href="https://en.wikipedia.org/wiki/Richard_Stallman">https://en.wikipedia.org/wiki/Richard_Stallman</a> <!-- raw HTML omitted --></li>
<li><a href="https://en.wikipedia.org/wiki/GNU_Emacs">https://en.wikipedia.org/wiki/GNU_Emacs</a> <!-- raw HTML omitted --></li>
<li><a href="https://en.wikipedia.org/wiki/GNU_Debugger">https://en.wikipedia.org/wiki/GNU_Debugger</a> <!-- raw HTML omitted --></li>
<li><a href="https://stallman.org/">https://stallman.org/</a> <!-- raw HTML omitted --></li>
<li><a href="https://usesthis.com/interviews/richard.stallman/">https://usesthis.com/interviews/richard.stallman/</a> <!-- raw HTML omitted --></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>皇帝与官僚：「上面」与「下面」</title>
      <link>https://ramsayleung.github.io/zh/post/2023/%E7%9A%87%E5%B8%9D%E4%B8%8E%E5%AE%98%E5%83%9A/</link>
      <pubDate>Fri, 27 Jan 2023 12:34:00 -0800</pubDate>
      
      <guid>https://ramsayleung.github.io/zh/post/2023/%E7%9A%87%E5%B8%9D%E4%B8%8E%E5%AE%98%E5%83%9A/</guid>
      <description>1 前言 年后在家略为空闲，就写了篇思考与感悟： 「上面的意思是好的，就是下面的人执行出了问题」 「下面的人也没办法，毕竟这是上面的规定」 那事情没做</description>
      <content:encoded><![CDATA[<h2 id="前言"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> 前言</h2>
<p>年后在家略为空闲，就写了篇思考与感悟：</p>
<p>「上面的意思是好的，就是下面的人执行出了问题」</p>
<p>「下面的人也没办法，毕竟这是上面的规定」</p>
<p>那事情没做好，究竟是谁的原因？</p>
<p>「上面」与「下面」的关系与内在逻辑究竟是怎么样的呢？</p>
<p>让我们翻开中国漫长的历史，一探皇帝与官僚之间的关系.</p>
<h2 id="牧民之道"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> 牧民之道</h2>
<p>皇帝是国家的最高统治者，号为「天子」，代表上天来统治臣民，具有至高无上的权力。</p>
<p>虽然想当皇帝的人有很多个，但皇帝这个岗位实际只能有一个人在职.</p>
<p>「普天之下，莫非王土，率土之滨，莫非王臣」,这么多的「王臣」与「王土」，皇帝一个人自然是管理不过来，就需要三公九卿等文武百官。</p>
<p>封建官僚拿着皇帝给予的权力和薪水，逐级管理着小农。</p>
<p>最底层是万千小农，他们对帝国纳税，用自己的血汗钱养活帝王与封建官僚。</p>
<h2 id="利益之差"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> 利益之差</h2>
<p>封建官僚是一种“压力单向传导机制”，压力只能逐级向下传导，封建官僚不但不会分散压力，而且会为了自身利益扩大这种压力。这样，压力传导到最后的小农便会呈几何级数扩张。</p>
<p>疫情期间，各地都出现「层层加码」的现象，这也是一种压力单向传导机制作用的现象。</p>
<p>对封建官僚来说，假如中央要求州上缴赋税10万石，每个郡平均上缴1万石；每个州向郡下达任务时，可能会要求上缴10万石，每个县平均上缴5千石；郡向县下达任务，可能就会要求每个县上缴一万石；</p>
<p>这样既能满足上级的要求，又可以截留剩余的税赋，还师出有名，可以把锅甩给上级。</p>
<p>说到底对国家财富具有所有权的，是帝王，天下是一家一姓的地盘，民不聊生对他们也没有好处。</p>
<p>封建官僚却完全不同，只要达到目的，管你大浪滔天，反正又不是我的天下。</p>
<h3 id="王朝周期循环"><!-- raw HTML omitted -->3.1<!-- raw HTML omitted --> 王朝周期循环</h3>
<p>中国封建王朝轮回更替两千多年, 尽管每朝每代制度不尽相同，但是总逃脱不了所谓的王朝周期循环：</p>
<ul>
<li>阶段1：新朝初立，连年征战国家元气损伤，人口凋零，开国君主多是刀枪入库，马放南山，休养生息，鼓励民众生产，轻徭薄赋</li>
<li>阶段2: 王朝强盛，人口剧增，土地兼并，社会阶级逐步分化</li>
<li>阶段3: 王朝末期，土地集中在少数人手上，农民失去土地，失去工作，成为流民，揭杆而起。一切变为废墟，破而后立，直至新朝建立, 开启新一轮循环。</li>
</ul>
<p>如果从封建官僚的角度来分析王朝周期循环的原因：</p>
<p>皇权只有借助封建官僚才能统治整个帝国，但是封建官僚自身就是一个强势分利集团，他们会借助手中的权力疯狂掠夺帝国财富。</p>
<p>皇权根本就无法彻底遏制这种掠夺，毕竟联系皇权和封建官僚的纽带恰恰就是掠夺财富的权力。</p>
<p>封建官僚对财富的掠夺将成为帝国难以治愈的沉疴。</p>
<p>强势分利集团完全不遵守财富规则,毕竟他们既是运动员，又是裁判，又怎么会遵守规则呢？</p>
<p>最终，掠夺超出了帝国居民承受的极限，人们失去了土地、失去了工作、没有能力组建家庭，最终成为流民。</p>
<h3 id="官僚利益"><!-- raw HTML omitted -->3.2<!-- raw HTML omitted --> 官僚利益</h3>
<p>总有人奇怪，为什么明朝皇帝崇祯不像唐玄宗，宋高宗那样，在贼兵临城时，跑路迁都南京。</p>
<p>如果再翻开史料，重现当时的场景，就会发现，既有崇祯主观的因素，也有官僚在背后推波助澜。</p>
<p>崇祯十七年，当时李自成已兵临北京，形势危急，右庶子李明睿劝崇祯放弃北京，尽快南迁，皇帝告诉他：“汝意与朕合，但外边诸臣不从，奈何？”</p>
<p>李明睿说：“天命微密，当内断圣心，勿致噬脐之忧。”并请崇祯勿犹豫，尽快决断。</p>
<p>崇祯帝一直有意迁都，崇祯对众臣说：“李明睿有疏劝朕南迁。国君死于社稷，朕将何往？又劝朕教太子先往南京，诸卿以为如何？”</p>
<p>首辅陈演反对南迁，并示意兵科给事中光时亨，严厉谴责李明睿，扬言：“不杀李明睿，不足以安定民心。”其事遂不了了之</p>
<p>为什么官员们把调子提得这么高呢，莫非迁都真的事不可为？</p>
<p>平心而论，崇祯着实算不上一位好老板，性格存在缺陷，求治心切，生性多疑，刚愎自用，并且有不少恶劣的前科：</p>
<p>「崇祯十五年, 松山、锦州失守，洪承畴降清，崇祯想和满清议和而和兵部尚书陈新甲暗中商议计划, 没想到事情泄漏，被朝臣知晓，明朝士大夫鉴于南宋的教训，皆以为与满人和谈为耻。</p>
<p>崇祯就把议和责任都推到兵部尚书陈新甲, 并将其下狱斩首。」</p>
<p>面对这样性格的老板，即使知道迁都是个明智之选，官僚们明面上都不会赞同这样的建议。</p>
<p>如果能打退贼兵，老板如果面子挂不住，又要追究迁都的责任，那我们附和迁都建议的都可能完蛋。如果打不退贼兵，双膝朝下，跪谁不是跪，只是换个老板而言。</p>
<p>所以对于官僚来说，最佳的选择就是把调子拨得高高的，君王死社稷，我们都要和陛下共存亡，死战不退。这样官员们就能立于不败之地。</p>
<p>崇祯十七年，李自成入北京，崇祯皇帝自缢于煤山，首辅陈演想逃离北京，但因家产太多而未果。他主动向农民军献白银四万两。稍后，其家仆告发，说他家中地下藏银数万。农民军掘之，果见地下全是白银。</p>
<p>另一民变领袖张献忠后来称帝，以陈演的女儿为皇后，陈演的儿子为翰林学士。</p>
<p>想起韩国电影《辩护人》中关于爱国者的论述：</p>
<blockquote>
<p>你不是真正的爱国者</p>
<p>你是让善良无罪的国家生病的蛆虫，军事政权肮脏的帮手而已</p>
<p>说出真相，那才是真正的爱国</p>
</blockquote>
<p>官僚利益与皇帝利益并不一致，管你洪水滔天，还是民不聊生，反正民不是我家的，国不是我家的，钱才是我家的。</p>
<h3 id="服从性测试"><!-- raw HTML omitted -->3.3<!-- raw HTML omitted --> 服从性测试</h3>
<p>对于皇帝而言，官员的能力，品格，尚在其次，皇帝最关心的是忠诚。毕竟品格越高尚，能力越出色，但是怀有二心，对皇帝的危害就越大。</p>
<p>所以皇帝就派自己家奴去监视官员。但俗话说，「人心隔肚皮」，皇帝也没有办法知道官员的心思。皇帝是想到的办法，就和我们玩狼人杀一样，就是「观其言，察其行」，看你们是否表里不一。</p>
<p>所以对于官员们「层层加码」的行为，就能明白其背后的逻辑：对于「上面」的命令，「下面」的执行不到位，就容易被理解是对「上面」不忠诚。</p>
<p>所谓「忠诚不绝对，就是绝对不忠诚」，何况即使你100%执行到位，隔壁的同行150%执行到位。相比之下，你就变成执行不到位，就容易「内巻」起来，变成相互竞争加码。</p>
<p>对于官僚而言，正确的命令要坚决执行，不正确的命令也要坚决执行。前者容易理解，后者又有什么解究呢？</p>
<p>对于不正确的命令，如果官员执行到位，他不会有任何的错，因为错在「上面」。但因为「上面」不可能出错，所以就变成了大家都没有错。如果执行不到位，那么「上面」就可以认为，是执行有问题，而不是决策有问题，其罪在你。</p>
<p>因此，权衡之下，官员的最佳选择就是加倍执行命令，无论对错，甚至还可以夹带点私货。</p>
<p>何况，不正确的命令也是一种服从性测试。如果君王知道你在民怨沸腾的情况，还把不正确的命令也如实执行了，会认为你对君王忠心不二，简在帝心。</p>
<p>不正确的命令也要执行，那小农的死活怎么办？</p>
<p>权力运行自有其规律：**权力只对来源负责**.</p>
<p>老爷心善，见不得穷人, 把他们赶走吧。</p>
<h2 id="决策权与信息权之争"><!-- raw HTML omitted -->4<!-- raw HTML omitted --> 决策权与信息权之争</h2>
<p>皇帝拥有至高无上的权力，是帝国的主人，对帝国的政策拥有最终的决策权。</p>
<p>拥有决策权，并不意味着皇帝都能在问题上作出正确的抉择，官僚们只能俯首听令。</p>
<p>面对皇帝的政令，官僚们自有应对之策，皇帝拥有决策权，但做出决策的前提是有充足的信息，对问题有充分的了解。但皇帝囿于深宫之中，又如何能知天下事呢，只能听从官僚们的汇报，所以说，影响皇帝决策的信息权，掌握在官僚手上。</p>
<p>官僚们可以通过隐藏，截留，篡改信息，以误导皇帝作出有利于自己的决策。</p>
<p>《天朝的崩溃》就有提到，原来在鸦片战争期间，直到英军直逼天津大沽口, 道光皇帝才知道战事之靡烂，防备之严峻，而北京几乎无险可守，此前道光皇帝还一直以为清军战事占优。</p>
<p>而皇帝对官僚们隐瞒信息的招数，自然是心知肚明，所以自明朝起，皇帝就开设东厂与锦衣卫，通过特务机构来打破封建官僚的信息垄断。</p>
<p>受电视剧影响，我们总以为东厂首领权倾朝野，对百官予取予求。但本质上，东厂首领钦差掌印太监，只是皇帝的家权，他们的权力都来源于皇权，所以他们忠诚的对象只能是皇帝。又因为他们生理缺陷，无法生育，也无法将权力延续，自然不会对皇权产生威胁。</p>
<p>即使是明熹宗权倾朝野的九千岁魏忠贤，在崇祯登基后，一纸诏书就将其赐死。</p>
<p>通俗理解，在明朝以前，是官僚集团与皇帝在玩二人转；皇帝招架不过来，就拉了些信得过的家奴，和官僚一起斗地主。</p>
<p>在现代社会，各种媒体资讯发达，官僚已经无法垄断信息权。</p>
<p>想起英剧《是，大臣》里面的一个情节，外交部大臣竟然是通过电视来了解最新的国际时事的，既滑稽又现实。毕竟记者都跑得比较快。</p>
<h3 id="信息反馈与决策"><!-- raw HTML omitted -->4.1<!-- raw HTML omitted --> 信息反馈与决策</h3>
<p>信息权无法再被垄断，但还可以人为制造信息的茧房：</p>
<p>王小波先生在《沉默的大多数》中有一篇文章，名为《花剌子模信使问题》：</p>
<blockquote>
<p>据野史记载，中亚古国花剌子模有一古怪的风俗，凡是给君王带来好消息的信使，就会得到提升，给君王带来坏消息的人则会被送去喂老虎。</p>
<p>于是将帅出征在外，凡麾下将士有功，就派他们给君王送好消息，以使他们得到提升；有罪，则派去送坏消息，顺便给国王的老虎送去食物。</p>
</blockquote>
<p>虽说信使带来的消息的好坏，决定人并不是信使本身，并不妨碍君王把他们当作老虎的点心。</p>
<p>正常人都会趋利避害，长此下去，君王只会听到各种花团锦簇的好消息，不会听到任何反映现实的坏消息，就这样活在了自己制造的信息茧房里。缺乏现实感，又怎能作出正确的决定的呢。</p>
<p>唐太宗李世民曾说过：「以铜为鉴，可以正衣冠；以人为鉴，可以明得失；以史为鉴，可以知兴替」。</p>
<p>所谓的「以人为鉴」就是指臣下能如实说清事实，指明对错。君主要有容人之量，臣下要有犯颜直谏的勇气。</p>
<p>即使魏征经常把李世民怼得脑壳疼，甚至把李世民的宠物鸟都憋死了（太宗怀鹞），也没见魏征去当老虎点心。</p>
<p>「以人为鉴」既要有识人之明，又要有容人之量，更要有自省之心。只愿开美颜，就只会看到美照，苏大强都觉得自己是吴彦祖。</p>
<h2 id="出路在何方"><!-- raw HTML omitted -->5<!-- raw HTML omitted --> 出路在何方</h2>
<p>抗日战争胜利前夕, 1945年7月1日至5日，黄炎培等人访问延安，试图调解国共关系，化解政治危机。</p>
<p>7月4日下午，毛泽东接待黄炎培等人，黄炎培说：“中国历史上的王朝都存在一个从兴起到消亡的周期率，一部历史，「政怠宦成」的也有，「人亡政息」的也有，「求荣取辱」也有, 总之没有能跳出这「周期率」。</p>
<p>毛泽东欣然笑对道：“我们已经找到新路，我们能够跳出这「周期率」。这条新路，就是民主，（我们要）用民主来打破历代从艰苦创业到腐败灭亡的「周期率」，跳出这种兴亡「周期率」。”</p>
<h2 id="参考"><!-- raw HTML omitted -->6<!-- raw HTML omitted --> 参考</h2>
<ul>
<li>《中国是部金融史》</li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%B4%87%E7%A6%8E%E5%B8%9D">维基百科：崇祯帝</a></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>

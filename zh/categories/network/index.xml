<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>network on 自由庄园</title>
    <link>https://ramsayleung.github.io/zh/categories/network/</link>
    <description>Recent content in network on 自由庄园</description>
    <image>
      <title>自由庄园</title>
      <url>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.120.4</generator>
    <language>zh</language>
    <copyright>See this site&amp;rsquo;s source code here, licensed under GPLv3 ·</copyright>
    <lastBuildDate>Wed, 23 Feb 2022 22:26:46 +0800</lastBuildDate>
    <atom:link href="https://ramsayleung.github.io/zh/categories/network/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python多线程端口扫描器</title>
      <link>https://ramsayleung.github.io/zh/post/2017/port_scanner/</link>
      <pubDate>Sun, 19 Mar 2017 00:00:00 +0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2017/port_scanner/</guid>
      <description>An introduction about port scan</description>
      <content:encoded><![CDATA[<p>近两日，闲来无事，就写了些端口扫描器，重温TCP/IP协议栈的部分原理。</p>
<h2 id="端口扫描器"><span class="section-num">1</span> 端口扫描器</h2>
<p>所谓的端口扫描器，其实是用来检测目标服务器有哪些端口开放所使用的工具，一般是管理员用来进行安全加固，检测是否有无意开放的端口；或者是恶意攻击的人员在进行攻击前的准备工作。</p>
<p>所以综述上下，端口扫描器是用来确定目标机器 (本地机器或者远程机器)的特定服务的可用性</p>
<h2 id="端口扫描原理"><span class="section-num">2</span> 端口扫描原理</h2>
<p>上面提到过，端口扫描器是用来确定目标机器的服务的可用性的；那么具体是怎么确定的呢？如果还没有答案的话，可以换个角度来思考这个问题。</p>
<p>假如你想确定邻居家的妹子是否在家，你会怎么办？这不简单么，问一下不就清楚了么？对阿，对于服务器的端口也可以适用这样的方法嘛。端口扫描的原理都是“问一下”，只是问的方法不一样而已，就好像你是决定直接过去敲邻居门，还是打电话过去一样，殊途同归，方法是没有对错的之分，差异只是方法的优劣。</p>
<h3 id="tcp连接扫描"><span class="section-num">2.1</span> TCP连接扫描</h3>
<p>这是最简单的一种方法，一般被称为连接扫描，即利用 <code>socket</code> 对目标机器进行连接尝试，如果能够成功建立三次握手连接，那就说明你用 <code>socket</code> 连接的端口是开放的；然后你就可以断开连接，扫描下一个目标端口了 (如果不断开连接，这就是一种 DDOS攻击了).</p>
<p>只不过TCP连接扫描不是很常用，不仅是因为容易被发现，而且你的IP地址也可能会被目标地址记录下来的(对于攻击者来说，隐藏身份是很重要的)</p>
<h4 id="代码解析"><span class="section-num">2.1.1</span> 代码解析：</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">scan</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">args</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">host</span><span class="p">,</span> <span class="n">port</span> <span class="o">=</span> <span class="n">args</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># Create a TCP socket and try to connect</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># AF_INET for ipv4,AF_INET6 for ipv6</span>
</span></span><span class="line"><span class="cl">	<span class="n">sock</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">sock</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="n">sock</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">timeout</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">error</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="kc">False</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>因为原理很简单，所以核心代码也是很简洁的，只是建立 <code>socket</code> 然后进行连接，如果连接不上，就很大几率说明端口是关闭的 (并不是绝对的，例如socket超时的异常可能就是因为网络异常，不一定是目标机器的缘故)</p>
<h3 id="syn扫描"><span class="section-num">2.2</span> SYN扫描</h3>
<p>再回顾一下TCP的三次握手：</p>
<h4 id="tcp三次握手"><span class="section-num">2.2.1</span> TCP三次握手</h4>
<ol>
<li>TCP建立连接时，首先客户端和服务器处于close状态。</li>
<li>然后客户端发送SYN同步位，此时客户端处于SYN-SEND状态，服务器处于lISTEN状态，当服务器收到SYN以后，向客户端发送同步位SYN和确认码ACK，然后服务器变为SYN-RCVD，客户端收到服务器发来的SYN和ACK 后，客户端的状态变成ESTABLISHED(已建立连接)，</li>
<li>客户端再向服务器发送ACK确认码，服务器接收到以后也变成ESTABLISHED。然后服务器客户端开始数据传输</li>
</ol>
<p>如图：</p>
<figure>
    <img loading="lazy" src="https://sites.google.com/a/javainterview.net/question/_/rsrc/1425457816649/misc/tcp-ip/3-way-handshake-Intro-to-transport-layer-The-internetworking-Part2.gif"
         alt="Figure 1: 图来源于Google"/> <figcaption>
            <p><span class="figure-number">Figure 1: </span>图来源于Google</p>
        </figcaption>
</figure>

<h4 id="syn扫描原理"><span class="section-num">2.2.2</span> SYN扫描原理</h4>
<!--list-separator-->
<ol>
<li>
<p>SYN+ACK</p>
<p>那么现在再回到SYN扫描上来.如果在发送第一次握手的 <code>SYN</code> flag 时，目标机器回复了<code>SYN+ACK</code>,这不就说明笔者发送的TCP包中的目标端口是开放的么！如果不开放，服务器就不会期待第三次握手了，也不会给笔者发送 <code>SYN+ACK</code> 了；如图：</p>
<figure>
        <img loading="lazy" src="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/uploads/101613_1123_PortScannin3.jpg"/> 
    </figure>

<p>图来自 <a href="http://resources.infosecinstitute.com/port-scanning-using-scapy/">http://resources.infosecinstitute.com/port-scanning-using-scapy/</a></p>
</li>
</ol>
<!--list-separator-->
<ol start="2">
<li>
<p>RST</p>
<p>如果第二次握手的时候，目标机器回复的不是 <code>SYN+ACK</code>, 而是 <code>RST</code>, 就说明TCP包中的目标端口在目标机器上是关闭的；如图</p>
<figure>
        <img loading="lazy" src="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/uploads/101613_1123_PortScannin4.jpg"/> 
    </figure>

<p>图来自 <a href="http://resources.infosecinstitute.com/port-scanning-using-scapy/">http://resources.infosecinstitute.com/port-scanning-using-scapy/</a></p>
</li>
</ol>
<!--list-separator-->
<ol start="3">
<li>
<p>Filtered</p>
<p>上面提及了目标端口的开放和关闭两种状态，那么，还有没有其他状态呢？什么，还有其他状态？</p>
<p>如果就SYN扫描而言，就还有 filtered被过滤之一说，如果还有加上其他扫描技术， 就还有其他状态了。</p>
<p>回到SYN扫描，当返回的不是服务器想建立第二次握手的包，而是ICMP的包就有可能被过滤，例如响应信息是ICMP错误信息类型3代码3(无法到达目标：端口不可达)这里出现的端口不可达，可能就是被防火墙过滤了，如果是类型3代码13(无法到达目标：通信被管理员禁止),那也是被过滤了。</p>
<p>更多信息就要查询<a href="https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml">ICMP的官方文档</a> 了</p>
</li>
</ol>
<h4 id="代码解释"><span class="section-num">2.2.3</span> 代码解释</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">scan</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">args</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">dst_ip</span><span class="p">,</span> <span class="n">dst_port</span> <span class="o">=</span> <span class="n">args</span>
</span></span><span class="line"><span class="cl">    <span class="n">src_port</span> <span class="o">=</span> <span class="n">RandShort</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">answered</span><span class="p">,</span> <span class="n">unanswered</span> <span class="o">=</span> <span class="n">sr</span><span class="p">(</span><span class="n">IP</span><span class="p">(</span><span class="n">dst</span><span class="o">=</span><span class="n">dst_ip</span><span class="p">)</span> <span class="o">/</span> <span class="n">TCP</span><span class="p">(</span><span class="n">sport</span><span class="o">=</span><span class="n">src_port</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">						   <span class="n">dport</span><span class="o">=</span><span class="n">dst_port</span><span class="p">,</span> <span class="n">flags</span><span class="o">=</span><span class="s2">&#34;S&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">			  <span class="n">timeout</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">timeout</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">packet</span> <span class="ow">in</span> <span class="n">unanswered</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">packet</span><span class="o">.</span><span class="n">dst</span><span class="p">,</span> <span class="n">packet</span><span class="o">.</span><span class="n">dport</span><span class="p">,</span> <span class="s2">&#34;Filtered&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">send</span><span class="p">,</span> <span class="n">recv</span><span class="p">)</span> <span class="ow">in</span> <span class="n">answered</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span><span class="p">(</span><span class="n">recv</span><span class="o">.</span><span class="n">haslayer</span><span class="p">(</span><span class="n">TCP</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">	    <span class="n">flags</span> <span class="o">=</span> <span class="n">recv</span><span class="o">.</span><span class="n">getlayer</span><span class="p">(</span><span class="n">TCP</span><span class="p">)</span><span class="o">.</span><span class="n">sprintf</span><span class="p">(</span><span class="s2">&#34;%&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	    <span class="k">if</span><span class="p">(</span><span class="n">flags</span> <span class="o">==</span> <span class="s2">&#34;SA&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">		<span class="c1"># set RST to server in case of ddos attack</span>
</span></span><span class="line"><span class="cl">		<span class="n">send_rst</span> <span class="o">=</span> <span class="n">sr</span><span class="p">(</span><span class="n">IP</span><span class="p">(</span><span class="n">dst</span><span class="o">=</span><span class="n">dst_ip</span><span class="p">)</span> <span class="o">/</span> <span class="n">TCP</span><span class="p">(</span><span class="n">sport</span><span class="o">=</span><span class="n">src_port</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">						   <span class="n">dport</span><span class="o">=</span><span class="n">dst_port</span><span class="p">,</span> <span class="n">flags</span><span class="o">=</span><span class="s2">&#34;R&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">			  <span class="n">timeout</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">timeout</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">dst_ip</span><span class="p">,</span> <span class="n">dst_port</span><span class="p">,</span> <span class="s2">&#34;Open&#34;</span>
</span></span><span class="line"><span class="cl">	    <span class="k">elif</span> <span class="p">(</span><span class="n">flags</span> <span class="o">==</span> <span class="s2">&#34;RA&#34;</span> <span class="ow">or</span> <span class="n">flags</span> <span class="o">==</span> <span class="s2">&#34;R&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">dst_ip</span><span class="p">,</span> <span class="n">dst_port</span><span class="p">,</span> <span class="s2">&#34;Closed&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="k">elif</span><span class="p">(</span><span class="n">recv</span><span class="o">.</span><span class="n">haslayer</span><span class="p">(</span><span class="n">ICMP</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">	    <span class="n">icmp_type</span> <span class="o">=</span> <span class="n">recv</span><span class="o">.</span><span class="n">getlayer</span><span class="p">(</span><span class="n">ICMP</span><span class="p">)</span><span class="o">.</span><span class="n">type</span>
</span></span><span class="line"><span class="cl">	    <span class="n">icmp_code</span> <span class="o">=</span> <span class="n">recv</span><span class="o">.</span><span class="n">getlayer</span><span class="p">(</span><span class="n">ICMP</span><span class="p">)</span><span class="o">.</span><span class="n">code</span>
</span></span><span class="line"><span class="cl">	    <span class="k">if</span><span class="p">(</span><span class="n">icmp_type</span> <span class="o">==</span> <span class="n">ICMP_TYPE_DESTINATION_UNREACHABLE</span> <span class="ow">and</span> <span class="n">icmp_code</span> <span class="ow">in</span> <span class="n">ICMP_CODE</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">dst_ip</span><span class="p">,</span> <span class="n">dst_port</span><span class="p">,</span> <span class="s2">&#34;Filtered&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	    <span class="k">return</span> <span class="n">dst_ip</span><span class="p">,</span> <span class="n">dst_port</span><span class="p">,</span> <span class="s2">&#34;CHECK&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>核心代码很简单，就是发送建立连接的握手请求，然后根据不同的返回结果判断不同的状态。</p>
<p>如果端口确定是开放，那就发送 <code>R</code> flag给目标机器结束握手 (如果不结束握手的话，那就是DDOS,这也是DDOS最常用的手段); 因为这次不是使用操作系统原生的 <code>socket</code>, 而是自行构造发送 IP数据包，所以需要使用一个很强大的构造 操作各种数据包的工具 &ndash; <a href="https://github.com/phaethon/scapy">scapy</a></p>
<p>(顺便说一下，如果在Windows下安装 scapy,需要非常多的步骤，如果是Unix/Linux,只需几行命令:) )</p>
<h2 id="后话"><span class="section-num">3</span> 后话</h2>
<p>简单的扫描器就已经完成了，加上多线程的功能提高性能。</p>
<p>很想吐嘈一下，真的对Python 的多线程恨铁不成钢，只好换成多进程；也给 Python2 Python3 API的改变折腾得够呛，不禁让笔者怀念起Java:(</p>
<p>其实正如笔者开头所言的，你确定隔壁家妹子是否在家的方法有很多，你扫描端口的方法也有很多：例如 XMAS scan(TCP圣诞树扫描), FIN scan,Null scan, ACK scan, Window scan, UDP scan等。</p>
<p>当然你如果不想针对各种扫描都写一个扫描器，你可以使用 <a href="https://nmap.org/">nmap</a> 这个地球最强大的扫描器 (没有之一). 在Python也已经有与nmap整合的强大的包 <a href="http://xael.org/pages/python-nmap-en.html">python-nmap</a></p>
<p>扫描器完整代码地址 <a href="https://github.com/samrayleung/PortScanner">https://github.com/samrayleung/PortScanner</a></p>
<hr>
<p>参考</p>
<ul>
<li><a href="http://resources.infosecinstitute.com/port-scanning-using-scapy/">http://resources.infosecinstitute.com/port-scanning-using-scapy/</a></li>
</ul>
]]></content:encoded>
    </item>
  </channel>
</rss>

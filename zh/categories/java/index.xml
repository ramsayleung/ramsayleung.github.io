<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>java on 花生地</title>
    <link>https://ramsayleung.github.io/zh/categories/java/</link>
    <description>Recent content in java on 花生地</description>
    <image>
      <title>花生地</title>
      <url>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.120.4</generator>
    <language>zh</language>
    <copyright>See this site&amp;rsquo;s source code here, licensed under GPLv3 ·</copyright>
    <lastBuildDate>Sat, 26 Feb 2022 10:11:32 +0800</lastBuildDate>
    <atom:link href="https://ramsayleung.github.io/zh/categories/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>java8基于堆实现尾递归优化</title>
      <link>https://ramsayleung.github.io/zh/post/2020/java%E5%AE%9E%E7%8E%B0%E5%B0%BE%E9%80%92%E5%BD%92%E4%BC%98%E5%8C%96/</link>
      <pubDate>Sun, 05 Jul 2020 16:51:00 +0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2020/java%E5%AE%9E%E7%8E%B0%E5%B0%BE%E9%80%92%E5%BD%92%E4%BC%98%E5%8C%96/</guid>
      <description>1 前言 尾调用消除(tail call elimination, TCE)是函数式编程的重要概念, 有时也被称为尾调用优化(tail call optimization, TCO), 作用是将尾递归函数转化成循环, 避免创建许</description>
      <content:encoded><![CDATA[<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>尾调用消除(tail call elimination, TCE)是函数式编程的重要概念, 有时也被称为尾调用优化(tail call optimization, TCO),
作用是将尾递归函数转化成循环, 避免创建许多栈帧, 减少开销.</p>
<p>遗憾的是, Java不支持TCE, 所以本文主要是介绍, 如何使用java8特性, 基于堆来实现尾递归优化.</p>
<hr>
<p>一个有趣的事，这篇文章是我在阿里ATA上发的最后一篇文章。发在内网的第二天，也就是我的last day，有位P8的同事在钉钉上夸我文章写得好，只回复了一句，还未来得及多交流几句，我的离职流程就走完，钉钉被强制下线了，甚至没看到这位同事的回复。</p>
<h2 id="尾调用与尾递归"><span class="section-num">2</span> 尾调用与尾递归</h2>
<p>想要了解尾递归优化, 首先要了解下什么是尾调用.</p>
<p>尾调用的概念非常简单,
一言以蔽之, 指函数的最后一步是调用另一个函数. 以斐波那契数列为例:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">fac</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">2</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">fac</span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>虽说上面的函数看起来像是尾调用函数, 但实际上它只是普通的递归函数,
因为它最后一步不是调用函数, 它只是作了加法计算, 上面的逻辑等同于:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">fac</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">2</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">accumulator</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">fac</span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">accumulator</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>既然调用 <code>fac(n-1)</code>函数的目的是为了获取累加值,
那么我们自然将累加值抽出来,
然后把上面的斐波那契数列函数改成尾调用函数呢:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">fac</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">facTailCall</span><span class="p">(</span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">facTailCall</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">accumulator</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">2</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">accumulator</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">facTailCall</span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">accumulator</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>函数调用自身, 称为递归函数. 如果尾调用函数自身, 就称为尾递归函数.
那尾递归函数有什么用呢? 仅仅是将斐波那契数列的累加值抽了出来么?</p>
<p>要回答这个问题, 让我们先把目光投回到递归版本的斐波那契数列, 当调用
<code>fac(6)</code>时发生了什么事情:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">6</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">fac</span><span class="p">(</span><span class="n">5</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">6</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="n">5</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">fac</span><span class="p">(</span><span class="n">4</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">6</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="n">5</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="n">4</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">fac</span><span class="p">(</span><span class="n">3</span><span class="p">)))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// N次展开之后</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">6</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="n">5</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="n">4</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="n">3</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="n">2</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="n">1</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">1</span><span class="p">)))))</span><span class="w"> </span><span class="c1">// &lt;= 最终的展开</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// 到这里为止, 程序做的仅仅还只是展开而已, 并没有运算真正运运算, 接下来才是运算</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">6</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="n">5</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="n">4</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="n">3</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="n">2</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">1</span><span class="p">))))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">6</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="n">5</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="n">4</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="n">3</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">2</span><span class="p">)))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">6</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="n">5</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="n">4</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">6</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// N次调用之后</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">720</span><span class="w"> </span><span class="c1">// &lt;= 最终的结果</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">fac</span><span class="p">(</span><span class="n">10000</span><span class="p">)</span><span class="w"> </span><span class="c1">// =&gt; java.lang.StackOverflowError</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>从上面的例子可以看出, 普通递归的问题在于展开的时候会需要非常大的空间,
这些空间指的就是函数调用的栈帧, 每一次递归的调用都需要创建新的栈帧,
递归调用有对应的深度限制, 这个限制就是栈的大小.</p>
<p>默认栈空间从32kb到1024kb不等, 具体取决于Java版本和所用的系统,
对于64位的java8程序而言, 递归的最大次数约为8000.</p>
<p>我们也没法通过增加栈的大小来增加递归的次数,
栈的大小相当于是一个全局配置, 所有的线程都会使用相同的栈,
增加栈的大小只是浪费资源而言.</p>
<p>那有没有方法可以避免上述的 <code>StackOverflowError</code> 呢? 那当然是有的,
答案就是上文提到的尾递归.</p>
<p>让我们来观察下尾递归版本的斐波那契数列, 看看调用 <code>facTailCall(1, 6)</code> 会发生什么事情?</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">facTailCall</span><span class="p">(</span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">6</span><span class="p">)</span><span class="w"> </span><span class="c1">// 1 是 fac(0) 的值</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">facTailCall</span><span class="p">(</span><span class="n">6</span><span class="p">,</span><span class="w"> </span><span class="n">5</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">facTailCall</span><span class="p">(</span><span class="n">30</span><span class="p">,</span><span class="w"> </span><span class="n">4</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">facTailCall</span><span class="p">(</span><span class="n">120</span><span class="p">,</span><span class="w"> </span><span class="n">3</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">facTailCall</span><span class="p">(</span><span class="n">360</span><span class="p">,</span><span class="w"> </span><span class="n">2</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">facTailCall</span><span class="p">(</span><span class="n">720</span><span class="p">,</span><span class="w"> </span><span class="n">1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">720</span><span class="w"> </span><span class="c1">// &lt;= 最终的结果</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">facTailCall</span><span class="p">(</span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">15000</span><span class="p">)</span><span class="w"> </span><span class="c1">// java.lang.StackOverflowError</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>与上方的普通递归函数相比, 尾递归函数在展开的过程中计算并且缓存了结果,
使得并不会像普通递归函数那样展开出非常庞大的中间结果,
<strong>但是尾递归函数还是递归函数, 如果不作尾递归优化(TCO), 依然会出现
StackOverflowError</strong>.</p>
<p>所谓的尾递归优化, 可以简单理解成将尾递归函数优化成循环; 在函数式编程中,
是鼓励大家使用递归, 而不是循环来解决问题.</p>
<p>这是因为循环会引入变量, 而变量是函数式编程中被视为洪水猛兽一样的存在.</p>
<p>但如果递归调用的深度比较大, 栈帧会开辟很多, 一来是浪费空间,
二来性能也必然会下降(有很多读写内存操作);</p>
<p>相反, 如果使用循环, 则只在一个函数栈空间里, 不会开辟更多的空间, 所以使用循环,
性能要好于递归.</p>
<p>所以在函数式编程语言中, 如Scheme, Haskell, Scala, 尾递归优化是标配, 所以不会出现 <strong>StackOverflowError</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">fact</span> <span class="nv">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">fact-tail</span> <span class="nv">x</span> <span class="nv">accum</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nf">=</span> <span class="nv">x</span> <span class="mi">0</span><span class="p">)</span> <span class="nv">accum</span>
</span></span><span class="line"><span class="cl">	    <span class="p">(</span><span class="nv">fact-tail</span> <span class="p">(</span><span class="nf">-</span> <span class="nv">x</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nf">*</span> <span class="nv">x</span> <span class="nv">accum</span><span class="p">))))</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nv">fact-tail</span> <span class="nv">x</span> <span class="mi">1</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nv">fact</span> <span class="mi">1000000</span><span class="p">)</span><span class="o">,</span>  <span class="c1">;;; 返回一个很大很大的数, 使用的空间与(fact 3)相当</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>遗憾的是, Java并不支持尾递归优化.</p>
<h2 id="基于堆的尾递归"><span class="section-num">3</span> 基于堆的尾递归</h2>
<p>尾递归优化的一大用处是维持常数级空间, 保证不会爆栈.</p>
<p>既然爆栈的原因是栈空间不足, 又无法扩大栈的空间,
那么只能把函数存在其他地方, 比如堆(heap). 使用堆来抽象递归,
那么需要做的事情如下:</p>
<ol>
<li>表示一个函数的调用</li>
<li>把函数调用存储在栈式结构中, 直到条件终止</li>
<li>以后进先出(LIFO)的顺序调用函数</li>
</ol>
<p>为此我们可以定义一个名为<code>TailCall</code>的抽象类, 它有两个子类:
其一表示挂起一个函数以再次调用该函数对下一步求值, 如下,
先暂停<code>f()</code>的调用, 先调用出<code>g()</code>的结果, 再对<code>f()</code>进行求值,
此子类名为<code>Suspend</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">f</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">g</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>而一个函数的调用可以通过java8引入的<code>Supplier&lt;T&gt;</code>类来表示,
以此来存储函数, T为TailCall, 表示下一个递归调用.</p>
<p>这样一来, 就可以通过每个尾调用引用下一个调用的方式来构造一个隐式链表,
完成栈式数据结构存储的要求.</p>
<p>另一个子类表示返回一个调用, 它应该返回结果,
不会持有到一个TailCall的引用, 因为已经没有下一个TailCall了,
所以其名为<code>Return</code>.</p>
<p>其外, 还需要几个额外的抽象方法: 返回一个调用,
返回结果, 以及判断是否判断<code>TailCall</code>是<code>Suspend</code>还是<code>Result</code>,
接口及子类实现如下:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @author Ramsay/Ramsayleung@gmail.com
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Create on 7/5/20
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">abstract</span><span class="w"> </span><span class="kd">class</span> <span class="nc">TailCall</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">abstract</span><span class="w"> </span><span class="n">TailCall</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="nf">resume</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">abstract</span><span class="w"> </span><span class="n">T</span><span class="w"> </span><span class="nf">eval</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">abstract</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">isSuspend</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kd">class</span> <span class="nc">Return</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="kd">extends</span><span class="w"> </span><span class="n">TailCall</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">private</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="n">T</span><span class="w"> </span><span class="n">t</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">private</span><span class="w"> </span><span class="nf">Return</span><span class="p">(</span><span class="n">T</span><span class="w"> </span><span class="n">t</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="k">this</span><span class="p">.</span><span class="na">t</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">t</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="nd">@Override</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">public</span><span class="w"> </span><span class="n">TailCall</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="nf">resume</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="k">throw</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">IllegalStateException</span><span class="p">(</span><span class="s">&#34;Return has no more TailCall&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="nd">@Override</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">public</span><span class="w"> </span><span class="n">T</span><span class="w"> </span><span class="nf">eval</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="k">return</span><span class="w"> </span><span class="n">t</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="nd">@Override</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">isSuspend</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kd">class</span> <span class="nc">Suppend</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="kd">extends</span><span class="w"> </span><span class="n">TailCall</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">private</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="n">Supplier</span><span class="o">&lt;</span><span class="n">TailCall</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="n">resume</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">private</span><span class="w"> </span><span class="nf">Suppend</span><span class="p">(</span><span class="n">Supplier</span><span class="o">&lt;</span><span class="n">TailCall</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="n">resume</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="k">this</span><span class="p">.</span><span class="na">resume</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">resume</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="nd">@Override</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">public</span><span class="w"> </span><span class="n">TailCall</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="nf">resume</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="k">return</span><span class="w"> </span><span class="n">resume</span><span class="p">.</span><span class="na">get</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="nd">@Override</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">public</span><span class="w"> </span><span class="n">T</span><span class="w"> </span><span class="nf">eval</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="n">TailCall</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="n">tailCall</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">this</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">tailCall</span><span class="p">.</span><span class="na">isSuspend</span><span class="p">())</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">tailCall</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">tailCall</span><span class="p">.</span><span class="na">resume</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="k">return</span><span class="w"> </span><span class="n">tailCall</span><span class="p">.</span><span class="na">eval</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="nd">@Override</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">isSuspend</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="n">Return</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="nf">tReturn</span><span class="p">(</span><span class="n">T</span><span class="w"> </span><span class="n">t</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">Return</span><span class="o">&lt;&gt;</span><span class="p">(</span><span class="n">t</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="n">Suppend</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="nf">suppend</span><span class="p">(</span><span class="n">Supplier</span><span class="o">&lt;</span><span class="n">TailCall</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="n">supplier</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">Suppend</span><span class="o">&lt;&gt;</span><span class="p">(</span><span class="n">supplier</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><code>Return</code>并没有实现<code>resume</code>方法, 只是简单地抛出了异常, 因为前文提到过,
<code>Return</code>表示最后一个调用, 没有下一个调用了, 自然无法实现<code>resume</code>方法;</p>
<p>同理, 只要不是最后一个调用, 就没法实现<code>eval()</code>方法,
因为最后的一个调用才能返回结果.</p>
<p>那为啥<code>Suspend</code>还实现了<code>eval</code>方法呢? 主要是不让用户感知函数调用并返回结果的逻辑, 将其内敛到<code>Suspend</code>内.
现在让我们来看看效果:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @author Ramsay/Ramsayleung@gmail.com
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Create on 7/5/20
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">TailCallTest</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 尾递归版本斐波那契数列
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">fac</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">accumulator</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">facTailCall</span><span class="p">(</span><span class="n">accumulator</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="p">).</span><span class="na">eval</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="n">TailCall</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="nf">facTailCall</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">accumulator</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">2</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="k">return</span><span class="w"> </span><span class="n">TailCall</span><span class="p">.</span><span class="na">tReturn</span><span class="p">(</span><span class="n">accumulator</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">TailCall</span><span class="p">.</span><span class="na">suppend</span><span class="p">(()</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">facTailCall</span><span class="p">(</span><span class="n">accumulator</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">n</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">1</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 递归版本的两数相加
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">addRecur</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">y</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="n">addRecur</span><span class="p">(</span><span class="o">++</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="o">--</span><span class="n">y</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 尾递归优化版本的两数相加
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">addTCO</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">y</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">addTailCall</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="p">).</span><span class="na">eval</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="n">TailCall</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="nf">addTailCall</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">y</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kt">int</span><span class="w"> </span><span class="n">_x_plus_one</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kt">int</span><span class="w"> </span><span class="n">_y_minus_one</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="n">TailCall</span><span class="p">.</span><span class="na">tReturn</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="n">TailCall</span><span class="p">.</span><span class="na">suppend</span><span class="p">(()</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">addTailCall</span><span class="p">(</span><span class="n">_x_plus_one</span><span class="p">,</span><span class="w"> </span><span class="n">_y_minus_one</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@Test</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">addTest</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">addRecur</span><span class="p">(</span><span class="n">10</span><span class="p">,</span><span class="w"> </span><span class="n">10</span><span class="p">);</span><span class="w"> </span><span class="c1">// =&gt; 20</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">addRecur</span><span class="p">(</span><span class="n">10</span><span class="p">,</span><span class="w"> </span><span class="n">10000</span><span class="p">);</span><span class="w"> </span><span class="c1">// StackoverFlowError</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">addTCO</span><span class="p">(</span><span class="n">3</span><span class="p">,</span><span class="w"> </span><span class="n">100000</span><span class="p">);</span><span class="w"> </span><span class="c1">// =&gt; 100003</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@Test</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">test</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">fac</span><span class="p">(</span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">6</span><span class="p">);</span><span class="w"> </span><span class="c1">// =&gt; 720</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">fac</span><span class="p">(</span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">600000</span><span class="p">);</span><span class="w"> </span><span class="c1">// 数字过大溢出, 返回0, 且没有出现 StackOverflowError</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="总结"><span class="section-num">4</span> 总结</h2>
<p>至此, 我们通过java8的lambda, <code>Supplier</code>接口实现了基于堆的尾递归优化,
虽说没有优化成常数空间, 但终归解决了递归过深时, 栈空间不足导致
<code>StackOverflowError</code>的问题.</p>
<p>而按照<a href="https://stackoverflow.com/questions/53354898/tail-call-optimisation-in-java">Stackoverflow问题的说法</a>, java不支持尾调用的原因如下:</p>
<blockquote>
<p>In jdk classes there are a number of security sensitive methods that
rely on counting stack frames between jdk library code and calling
code to figure out who&rsquo;s calling them.</p>
</blockquote>
<p>后续java版本也暂无支持尾递归优化的计划, 无奈摊手.jpg</p>
<h2 id="参考"><span class="section-num">5</span> 参考</h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Tail_call">https://en.wikipedia.org/wiki/Tail_call</a></li>
<li><a href="https://book.douban.com/subject/26981273/">Functional Programming in Java</a></li>
<li><a href="https://youtu.be/4tEi86h8-TM?t=32m30s">NightHacking with Venkat Subramaniam</a></li>
<li><a href="https://stackoverflow.com/questions/43937160/designing-tail-recursion-using-java-8">Designing tail recursion using java 8</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>一条经典面试题的错误答案引发的思考</title>
      <link>https://ramsayleung.github.io/zh/post/2019/%E4%B8%80%E6%9D%A1%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98%E5%BC%95%E5%8F%91%E7%9A%84%E6%80%9D%E8%80%83/</link>
      <pubDate>Thu, 21 Mar 2019 11:04:00 +0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2019/%E4%B8%80%E6%9D%A1%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98%E5%BC%95%E5%8F%91%E7%9A%84%E6%80%9D%E8%80%83/</guid>
      <description>浅谈Java公平锁与内存模型 1 前言 春天来了，春招还会远么? 又到了春招的季节，随之而来的是各种的面试题。今天就看到组内大佬面试实习生的一道Ja</description>
      <content:encoded><![CDATA[<p>浅谈Java公平锁与内存模型</p>
<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>春天来了，春招还会远么? 又到了春招的季节，随之而来的是各种的面试题。今天就看到组内大佬面试实习生的一道Java题目:</p>
<blockquote>
<p>编写一个程序，开启 3 个线程A,B,C，这三个线程的输出分别为
A、B、C，每个线程将自己的 输出在屏幕上打印 10
遍，要求输出的结果必须按顺序显示。如：ABCABCABC&hellip;.</p>
</blockquote>
<h2 id="经过"><span class="section-num">2</span> 经过</h2>
<p>出于好奇的心态，我花了点时间来尝试解决这个问题, 主要的难点是让线程顺序地如何顺序地输出，线程之间如何交换。</p>
<p>很快就按着思路写出了一个版本，用Lock 来控制线程的顺序，A,B,C线程依次启动，因为A线程先启动，所以A线程会最先拿到锁，B,C阻塞；但是A输出完字符串，释放锁，B 线程获得锁，C,A线程阻塞; 依此循环:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">Test</span><span class="p">(){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="n">Integer</span><span class="w"> </span><span class="n">index</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">Lock</span><span class="w"> </span><span class="n">lock</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ReentrantLock</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@Test</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">testLock</span><span class="p">(){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">Thread</span><span class="w"> </span><span class="n">threadA</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">work</span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="n">3</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="p">()</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&#34;A&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">Thread</span><span class="w"> </span><span class="n">threadB</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">work</span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="n">3</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="p">()</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&#34;B&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">Thread</span><span class="w"> </span><span class="n">threadC</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">work</span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="n">3</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">2</span><span class="p">,</span><span class="w"> </span><span class="p">()</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&#34;C&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">threadA</span><span class="p">.</span><span class="na">start</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">threadB</span><span class="p">.</span><span class="na">start</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">threadC</span><span class="p">.</span><span class="na">start</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">Thread</span><span class="w"> </span><span class="nf">work</span><span class="p">(</span><span class="n">Predicate</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="n">condition</span><span class="p">,</span><span class="w"> </span><span class="n">Runnable</span><span class="w"> </span><span class="n">function</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">Thread</span><span class="p">(()</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">index</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">30</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		    </span><span class="n">lock</span><span class="p">.</span><span class="na">lock</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">condition</span><span class="p">.</span><span class="na">test</span><span class="p">(</span><span class="n">index</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">function</span><span class="p">.</span><span class="na">run</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">index</span><span class="o">++</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		    </span><span class="n">lock</span><span class="p">.</span><span class="na">unlock</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>输入结果如我预期那般，ABCABC交替输出，也成功输出了10次，奇怪的是A,B却多输出了一次？
<img loading="lazy" src="https://imgur.com/3lolbwK.png" alt=""  />
</p>
<p>为什么会多输出一次，不是应该恰好是输出30次么, 为什么会多输出一次A,B
真的百思不得其解. 所以我把<code>index</code> 也打印出来查看, 结果相当奇怪:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">function</span><span class="p">.</span><span class="na">run</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="n">index</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">....</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>为什么A 会是30, B会是31, 不是有(index.intvalue&lt;30) 的条件判断么,
为什么还会出现这样的数据？灵异事件? <img loading="lazy" src="https://imgur.com/fhurKt5.png" alt=""  />
</p>
<h2 id="解惑"><span class="section-num">3</span> 解惑</h2>
<p>灵异事件自然是不存在的，仔细分析了一番代码之后，发现了问题：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">index</span><span class="p">.</span><span class="na">intValue</span><span class="p">()</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">30</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">  </span><span class="c1">// 1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">lock</span><span class="p">.</span><span class="na">lock</span><span class="p">();</span><span class="w"> </span><span class="c1">// 2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">condition</span><span class="p">.</span><span class="na">test</span><span class="p">(</span><span class="n">index</span><span class="p">.</span><span class="na">intValue</span><span class="p">()))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">function</span><span class="p">.</span><span class="na">run</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">index</span><span class="o">++</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">lock</span><span class="p">.</span><span class="na">unlock</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>将1，2行的操作做了这三件事，如下:</p>
<ol>
<li><strong>线程读取index的值</strong></li>
<li>比较index的值是否大于30 3. 如果小于30, 尝试获取锁</li>
</ol>
<p>换言之，当index=29时，线程C持有锁，但是锁只能阻止线程A,线程B修改index的值，并不能阻止线程A,线程B在获取锁之前读取index的值，所以线程A读取index=29,并把值保持到线程的内部，如下图:</p>
<figure>
    <img loading="lazy" src="https://imgur.com/tI8NTgO.png"/> 
</figure>

<p><strong>当线程C执行完，还没释放锁的时候，线程A的index值为29；当线程C释放锁，线程A获取锁，进入同步块的时候，因为 <a href="https://en.wikipedia.org/wiki/Memory_barrier#Multithreaded_programming_and_memory_visibility">Java内存模型有内存可见性的要求</a>, 兼之Lock的实现类实现了<a href="https://stackoverflow.com/questions/12429818/does-explicit-lock-automatically-provide-memory-visibility">内存可见</a>，所以线程A的index值会变成30</strong>,</p>
<p>这就解析了为什么线程A index=30的时候能跳过<code>(index.intValue&lt;30)</code>的判断条件，因为执行这个判断条件的时候线程A index=29, 进入同步块之后变成了30:</p>
<figure>
    <img loading="lazy" src="https://imgur.com/xaA4Q0y.png"/> 
</figure>

<p>把问题剖析清楚之后，解决方案就呼之欲出了:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">index</span><span class="p">.</span><span class="na">intValue</span><span class="p">()</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">30</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">  </span><span class="c1">// 1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">lock</span><span class="p">.</span><span class="na">lock</span><span class="p">();</span><span class="w"> </span><span class="c1">// 2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="p">(</span><span class="n">index</span><span class="o">&gt;=</span><span class="n">30</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">continue</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">condition</span><span class="p">.</span><span class="na">test</span><span class="p">(</span><span class="n">index</span><span class="p">.</span><span class="na">intValue</span><span class="p">()))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">function</span><span class="p">.</span><span class="na">run</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">index</span><span class="o">++</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">lock</span><span class="p">.</span><span class="na">unlock</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这种解决方法不禁让我想起单例模式里面的双重校验:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="n">Singleton</span><span class="w"> </span><span class="nf">getSingleton</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">instance</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">                         </span><span class="c1">//Single Checked</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">synchronized</span><span class="w"> </span><span class="p">(</span><span class="n">Singleton</span><span class="p">.</span><span class="na">class</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">instance</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">                 </span><span class="c1">//Double Checked</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">instance</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">Singleton</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">instance</span><span class="w"> </span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>只是当时并不清楚Double Checked的作用，究竟解决了什么问题？</p>
<p>只是知道不加这条语句就会造成初始化多个示例，的确是需要<strong>知其然知其所以然</strong>.</p>
<h2 id="公平锁问题"><span class="section-num">4</span> 公平锁问题</h2>
<p>前文说到，</p>
<blockquote>
<p>这个程序是用Lock 来控制线程的顺序，A,B,C线程依次启动，因为A线程先启动，所以A线程会最先拿到锁，B,C阻塞；</p>
<p>但是A输出完字符串，释放锁，B 线程获得锁，C,A线程阻塞; 依此循环。</p>
</blockquote>
<p>粗看似乎没什么问题, 但是这里是存在着一个问题: 当线程A释放锁的时候，获取锁的是否一定是线程B, 而不是线程C,
线程C是否能够”插队”抢占锁?</p>
<p>这个就涉及到了公平锁和非公平锁的定义了:</p>
<ul>
<li>
<p>公平锁: 线程C不能抢占，只能排队等待线程B 获取并释放锁</p>
</li>
<li>
<p>非公平锁：线程C能抢占，抢到锁之后线程B只能继续等(有点惨!)</p>
<p>而ReentrantLock默认恰好是非公平锁, 查看源码可知:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">​ * Creates an instance of {@code ReentrantLock}.
</span></span></span><span class="line"><span class="cl"><span class="cm">​ * This is equivalent to using {@code ReentrantLock(false)}.
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="nf">ReentrantLock</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">sync</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">NonfairSync</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>因此为了规避非公平锁抢占的问题, 上述的代码在同步块增加了判断条件:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">condition</span><span class="p">.</span><span class="na">test</span><span class="p">(</span><span class="n">index</span><span class="p">.</span><span class="na">intValue</span><span class="p">()))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">....</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>只有符合条件的线程才能进行操作，否则就是线程自旋.(但是加锁+自旋实现起来，效率不会太高效!)</p>
</li>
</ul>
<h2 id="小结"><span class="section-num">5</span> 小结</h2>
<p>写一条面试题的答案都写得是问题多多的，不禁令人沮丧，说明自己对Java的并发模型理解还有很大的提高。
不过在排查问题的过程中，通过实践有体感地理解了Java的内存模型，发现Java内存模型并不是那么地曲高和寡，在日常的开发中也是很常见的.</p>
<p>费了一番工夫排查之后，终究是有新的收获的</p>
]]></content:encoded>
    </item>
    <item>
      <title>How to fool the Jacoco ◜◡‾</title>
      <link>https://ramsayleung.github.io/zh/post/2019/%E5%A6%82%E4%BD%95%E5%88%B7pojo%E7%B1%BB%E7%9A%84%E5%8F%98%E6%9B%B4%E8%A1%8C%E8%A6%86%E7%9B%96%E7%8E%87/</link>
      <pubDate>Thu, 14 Mar 2019 11:14:00 +0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2019/%E5%A6%82%E4%BD%95%E5%88%B7pojo%E7%B1%BB%E7%9A%84%E5%8F%98%E6%9B%B4%E8%A1%8C%E8%A6%86%E7%9B%96%E7%8E%87/</guid>
      <description>刷POJO类的变更行覆盖率 1 反射大法好 1.1 背景 众所周知，蚂蚁对代码质量要求很高，质量红线其中一项指标就是变更行覆盖率。如果你的变更行覆盖率没有</description>
      <content:encoded><![CDATA[<p>刷POJO类的变更行覆盖率</p>
<h2 id="反射大法好"><span class="section-num">1</span> 反射大法好</h2>
<h3 id="背景"><span class="section-num">1.1</span> 背景</h3>
<p>众所周知，蚂蚁对代码质量要求很高，质量红线其中一项指标就是变更行覆盖率。如果你的变更行覆盖率没有达到80%，测试同学是不会允许你上测试环境的（如果对此有所不满，测试同学就会过来捶你)。
为了提高代码质量，这项要求倒是无可厚非，变更的代码逻辑需要充分的测试；但是如果我新增了一堆的POJO类，只是为了逻辑模型，变更行也会变得非常可观。为了覆盖这些POJO类的变更，你免不了会测试一堆的Getter/Setter
方法：</p>
<figure>
    <img loading="lazy" src="https://raw.githubusercontent.com/ramsayleung/images/master/20191104102036.png"
         alt="Figure 1: getter/setter"/> <figcaption>
            <p><span class="figure-number">Figure 1: </span>getter/setter</p>
        </figcaption>
</figure>

<p>(红色是指没有覆盖到的变更行)</p>
<h3 id="反射"><span class="section-num">1.2</span> 反射</h3>
<p>如果为了变更行覆盖了，我要写上一堆的Getter/Setter 方法测试用例，测试用例也只是单纯调用一下方法，未免过于痛苦，能否偷个懒，解决覆盖率问题，也不需手写这些没啥用的测试用例.</p>
<p>但是一时间没有想到解决方法，我就一边写这些没啥用的用例，一边思考，突然发现了规律：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">SomeType</span><span class="w"> </span><span class="nf">getXxxx</span><span class="p">(){}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">setXxxx</span><span class="p">(</span><span class="n">SomeType</span><span class="w"> </span><span class="n">Xxx</span><span class="p">){}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="n">SomeType</span><span class="w"> </span><span class="nf">getYyy</span><span class="p">(){}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">setYyyy</span><span class="p">(</span><span class="n">SomeType</span><span class="w"> </span><span class="n">Yyyy</span><span class="p">){}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>所有这些方法都是的前缀都是 <code>set/get</code> (真.废话)，如果我能获取一个Pojo类所有的方法，然后循环执行所有以<code>get/set</code>开头的方法，不就不用手动写方法了么?</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">MerchantBusiModelTest</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">protected</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="n">Logger</span><span class="w"> </span><span class="n">LOGGER</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">LoggerFactory</span><span class="p">.</span><span class="na">getLogger</span><span class="p">(</span><span class="n">ModelUtils</span><span class="p">.</span><span class="na">class</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * get类型方法的前缀
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">GET_METHOD_PREFIX</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;get&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * set类型方法的前缀
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">SET_METHOD_PREFIX</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;set&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">MerchantBusiModel</span><span class="w"> </span><span class="n">merchantBusiModel</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">MerchantBusiModel</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@Test</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">testModel</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">Method</span><span class="o">[]</span><span class="w"> </span><span class="n">methods</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">merchantBusiModel</span><span class="p">.</span><span class="na">getClass</span><span class="p">().</span><span class="na">getDeclaredMethods</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">Method</span><span class="w"> </span><span class="n">method</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="n">methods</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">Modifier</span><span class="p">.</span><span class="na">isPublic</span><span class="p">(</span><span class="n">method</span><span class="p">.</span><span class="na">getModifiers</span><span class="p">())</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">method</span><span class="p">.</span><span class="na">getName</span><span class="p">().</span><span class="na">startsWith</span><span class="p">(</span><span class="n">GET_METHOD_PREFIX</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">Object</span><span class="o">[]</span><span class="w"> </span><span class="n">parameters</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">Object</span><span class="o">[</span><span class="n">method</span><span class="p">.</span><span class="na">getParameterCount</span><span class="p">()</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">try</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		    </span><span class="n">method</span><span class="p">.</span><span class="na">invoke</span><span class="p">(</span><span class="n">merchantBusiModel</span><span class="p">,</span><span class="w"> </span><span class="n">parameters</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		    </span><span class="n">LoggerUtil</span><span class="p">.</span><span class="na">warn</span><span class="p">(</span><span class="n">LOGGER</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;调用方法, method: {}.{}&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				    </span><span class="n">merchantBusiModel</span><span class="p">.</span><span class="na">getClass</span><span class="p">().</span><span class="na">getSimpleName</span><span class="p">(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				    </span><span class="n">method</span><span class="p">.</span><span class="na">getName</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">IllegalAccessException</span><span class="w"> </span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		    </span><span class="n">LoggerUtil</span><span class="p">.</span><span class="na">warn</span><span class="p">(</span><span class="n">LOGGER</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;调用方法异常, method: {}.{}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">e</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				    </span><span class="n">merchantBusiModel</span><span class="p">.</span><span class="na">getClass</span><span class="p">().</span><span class="na">getName</span><span class="p">(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				    </span><span class="n">method</span><span class="p">.</span><span class="na">getName</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">InvocationTargetException</span><span class="w"> </span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		    </span><span class="n">LoggerUtil</span><span class="p">.</span><span class="na">warn</span><span class="p">(</span><span class="n">LOGGER</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;调用方法异常, method: {}.{}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">e</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				    </span><span class="n">merchantBusiModel</span><span class="p">.</span><span class="na">getClass</span><span class="p">().</span><span class="na">getName</span><span class="p">(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				    </span><span class="n">method</span><span class="p">.</span><span class="na">getName</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这样很快就把<code>MerchantBusiModel</code>所有的get方法执行了(set
方法也同理啦)，调用结果如下:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">19/03/14 10:46:32 WARN util.ModelUtils: (,N,20190314104632162,-,,,-,-,-,)[调用方法, method: MerchantBusiModel.getMcc]
</span></span><span class="line"><span class="cl">19/03/14 10:46:32 WARN util.ModelUtils: (,N,20190314104632256,-,,,-,-,-,)[调用方法, method: MerchantBusiModel.getOutMerchantId]
</span></span><span class="line"><span class="cl">19/03/14 10:46:32 WARN util.ModelUtils: (,N,20190314104632256,-,,,-,-,-,)[调用方法, method: MerchantBusiModel.getMerchantName]
</span></span><span class="line"><span class="cl">19/03/14 10:46:32 WARN util.ModelUtils: (,N,20190314104632256,-,,,-,-,-,)[调用方法, method: MerchantBusiModel.getMerhantType]
</span></span><span class="line"><span class="cl">19/03/14 10:46:32 WARN util.ModelUtils: (,N,20190314104632256,-,,,-,-,-,)[调用方法, method: MerchantBusiModel.getDealType]
</span></span><span class="line"><span class="cl">19/03/14 10:46:32 WARN util.ModelUtils: (,N,20190314104632257,-,,,-,-,-,)[调用方法, method: MerchantBusiModel.getAlias]
</span></span><span class="line"><span class="cl">19/03/14 10:46:32 WARN util.ModelUtils: (,N,20190314104632257,-,,,-,-,-,)[调用方法, method: MerchantBusiModel.getLegalPerson]
</span></span><span class="line"><span class="cl">19/03/14 10:46:32 WARN util.ModelUtils: (,N,20190314104632257,-,,,-,-,-,)[调用方法, method: MerchantBusiModel.getPrincipalCertType]
</span></span><span class="line"><span class="cl">省略一大片类似的输出，省点篇幅
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="org-dot-reflections-dot-reflections"><span class="section-num">1.3</span> org.reflections.Reflections</h3>
<p>通过反射，就很完美地解决了POJO类的变更行覆盖率问题了，反正POJO类都是Getter/Setter 方法，我的反射方法能把它们全覆盖上啦 (๑&gt;◡&lt;๑) .</p>
<p>很快，我就遇到了另外的一个问题:
像<code>MerchantBusiModel</code>这样的Model类有十几二十个，难道每个Model我都需要写一个<code>XxxModelTest</code>的测试类么？也实在是太痛苦了，也太不优雅了(其实是我懒)，能不能自动把所有的Model类扫出来，然后循环执行每个Model的Getter/Setter方法呢？</p>
<p>因为这些Model都是继承一个统一的基类<code>BaseBusiModel</code>, 能否把这个基类的所有子类搞出来，这样就可以开心地用反射解决问题了.</p>
<p>调研一番之后发现，Jdk 的反射方式不支持遍历父类所有子类的方法，这做法行不通阿!!!</p>
<p>在我都几乎要放弃，要手写所有ModelTest的时候，我在StackOverFlow上面找到了 <a href="https://github.com/ronmamo/reflections">reflections</a> 这第三方包，发现这个包非常强大(niubility), 可以获取基类的子类或者接口的实现类:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Reflections</span><span class="w"> </span><span class="n">reflections</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">Reflections</span><span class="p">(</span><span class="s">&#34;my.project&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">Set</span><span class="o">&lt;</span><span class="n">Class</span><span class="o">&lt;?</span><span class="w"> </span><span class="kd">extends</span><span class="w"> </span><span class="n">SomeType</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="n">subTypes</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">reflections</span><span class="p">.</span><span class="na">getSubTypesOf</span><span class="p">(</span><span class="n">SomeType</span><span class="p">.</span><span class="na">class</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>简直了。在这”牛包”的帮助下，成功实现了扫描某个package下面所有基类的实现类的方法, 我的用例有救了:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">ModelTest</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">protected</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="n">Logger</span><span class="w"> </span><span class="n">LOGGER</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">LoggerFactory</span><span class="p">.</span><span class="na">getLogger</span><span class="p">(</span><span class="n">ConvertorTest</span><span class="p">.</span><span class="na">class</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">PACKAGE_NAME</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;xxx.xxx.core.service.v1.busimodel&#34;</span><span class="p">;</span><span class="w"> </span><span class="c1">// model所有的包</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@Test</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">testModel</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">Reflections</span><span class="w"> </span><span class="n">reflections</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">Reflections</span><span class="p">(</span><span class="n">PACKAGE_NAME</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">Set</span><span class="o">&lt;</span><span class="n">Class</span><span class="o">&lt;?</span><span class="w"> </span><span class="kd">extends</span><span class="w"> </span><span class="n">BaseBusiModel</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="n">classes</span><span class="w"> </span><span class="o">=</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="n">reflections</span><span class="p">.</span><span class="na">getSubTypesOf</span><span class="p">(</span><span class="n">BaseBusiModel</span><span class="p">.</span><span class="na">class</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">Class</span><span class="o">&lt;?</span><span class="w"> </span><span class="kd">extends</span><span class="w"> </span><span class="n">BaseBusiModel</span><span class="o">&gt;</span><span class="w"> </span><span class="n">clazz</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="n">classes</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">Modifier</span><span class="p">.</span><span class="na">isAbstract</span><span class="p">(</span><span class="n">clazz</span><span class="p">.</span><span class="na">getModifiers</span><span class="p">()))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">continue</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="n">BaseBusiModel</span><span class="w"> </span><span class="n">modelInstance</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">null</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="k">try</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">modelInstance</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">clazz</span><span class="p">.</span><span class="na">newInstance</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">IllegalAccessException</span><span class="w"> </span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">LoggerUtil</span><span class="p">.</span><span class="na">warn</span><span class="p">(</span><span class="n">LOGGER</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;调用方法IllegalAccessException异常, clazz: {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">e</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="n">clazz</span><span class="p">.</span><span class="na">getName</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">InstantiationException</span><span class="w"> </span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">LoggerUtil</span><span class="p">.</span><span class="na">warn</span><span class="p">(</span><span class="n">LOGGER</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;调用方法InstantiationExceptionn异常, clazz: {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">e</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="n">clazz</span><span class="p">.</span><span class="na">getName</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="n">ModelUtils</span><span class="p">.</span><span class="na">invokeGetAndSetMethod</span><span class="p">(</span><span class="n">modelInstance</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><code>ModelUtils.invokeGetAndSetMethod(modelInstance);</code> 这个静态方法就是上一节反射方法的完整可用版:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">ModelUtils</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">protected</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="n">Logger</span><span class="w"> </span><span class="n">LOGGER</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">LoggerFactory</span><span class="p">.</span><span class="na">getLogger</span><span class="p">(</span><span class="n">ModelUtils</span><span class="p">.</span><span class="na">class</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * get类型方法的前缀
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">GET_METHOD_PREFIX</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;get&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * get类型方法的前缀
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">SET_METHOD_PREFIX</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;set&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 调用clazz 对象的所有get, set方法
</span></span></span><span class="line"><span class="cl"><span class="cm">     *
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param clazz
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">invokeGetAndSetMethod</span><span class="p">(</span><span class="n">Object</span><span class="w"> </span><span class="n">clazz</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">invokeMethodWithPrefix</span><span class="p">(</span><span class="n">GET_METHOD_PREFIX</span><span class="p">,</span><span class="w"> </span><span class="n">clazz</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">invokeMethodWithPrefix</span><span class="p">(</span><span class="n">SET_METHOD_PREFIX</span><span class="p">,</span><span class="w"> </span><span class="n">clazz</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 通过方法前缀调用方法
</span></span></span><span class="line"><span class="cl"><span class="cm">     *
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param prefix
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param instance
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">invokeMethodWithPrefix</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">prefix</span><span class="p">,</span><span class="w"> </span><span class="n">Object</span><span class="w"> </span><span class="n">instance</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">Method</span><span class="o">[]</span><span class="w"> </span><span class="n">methods</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">instance</span><span class="p">.</span><span class="na">getClass</span><span class="p">().</span><span class="na">getDeclaredMethods</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">Method</span><span class="w"> </span><span class="n">method</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="n">methods</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">Modifier</span><span class="p">.</span><span class="na">isPublic</span><span class="p">(</span><span class="n">method</span><span class="p">.</span><span class="na">getModifiers</span><span class="p">())</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">method</span><span class="p">.</span><span class="na">getName</span><span class="p">().</span><span class="na">startsWith</span><span class="p">(</span><span class="n">prefix</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">Object</span><span class="o">[]</span><span class="w"> </span><span class="n">parameters</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">Object</span><span class="o">[</span><span class="n">method</span><span class="p">.</span><span class="na">getParameterCount</span><span class="p">()</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">try</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		    </span><span class="n">method</span><span class="p">.</span><span class="na">invoke</span><span class="p">(</span><span class="n">instance</span><span class="p">,</span><span class="w"> </span><span class="n">parameters</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">IllegalAccessException</span><span class="w"> </span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		    </span><span class="n">LoggerUtil</span><span class="p">.</span><span class="na">warn</span><span class="p">(</span><span class="n">LOGGER</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;调用方法异常, method: {}.{}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">e</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				    </span><span class="n">instance</span><span class="p">.</span><span class="na">getClass</span><span class="p">().</span><span class="na">getName</span><span class="p">(),</span><span class="w"> </span><span class="n">method</span><span class="p">.</span><span class="na">getName</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">InvocationTargetException</span><span class="w"> </span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		    </span><span class="n">LoggerUtil</span><span class="p">.</span><span class="na">warn</span><span class="p">(</span><span class="n">LOGGER</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;调用方法异常, method: {}.{}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">e</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				    </span><span class="n">instance</span><span class="p">.</span><span class="na">getClass</span><span class="p">().</span><span class="na">getName</span><span class="p">(),</span><span class="w"> </span><span class="n">method</span><span class="p">.</span><span class="na">getName</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="总结"><span class="section-num">1.4</span> 总结</h3>
<ol>
<li>Reflections 包是真的强，有空要去看一下源码</li>
<li>懒惰是程序员的第一生产力, 这话真不是我编的，是Perl 语言之父 Larry
Wall 说的</li>
<li>加了其他两个类似功能的反射测试类，我的变更行覆盖率暴增30%
(可以看出我这次的变更主要是新增模型和工具类，这样反射才能调用规律性代码)</li>
<li>Java大法好，Java世界那么大，还需要我好好探索.</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>Maven 小记</title>
      <link>https://ramsayleung.github.io/zh/post/2018/maven%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Tue, 23 Oct 2018 12:15:00 +0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2018/maven%E5%B0%8F%E8%AE%B0/</guid>
      <description>Maven 在工作中的经验以及《Maven 实战》读后感 1 前言 蚂蚁金服的伯岩大大曾经说 Java 生态都太重量级，连Maven 都是怪兽级的构建工具，需要整整一本书</description>
      <content:encoded><![CDATA[<p>Maven 在工作中的经验以及《Maven 实战》读后感</p>
<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>蚂蚁金服的伯岩大大曾经说 <a href="http://blog.fnil.net/index.php/archives/70/">Java 生态都太重量级，连Maven 都是怪兽级的构建工具，需要整整一本书来讲解</a>. 平心而论，Maven 的确如此, 但是无论是怪兽级，还是迪迦级的工具，只要能把事情做好了就是好工具, 而 Maven 恰恰就是这样的工具</p>
<h2 id="配置文件"><span class="section-num">2</span> 配置文件</h2>
<h3 id="pom-dot-xml"><span class="section-num">2.1</span> pom.xml</h3>
<p>就好像 Unix 平台的 Make 对应的 <code>MakeFile</code>，Cmake对应的 <code>CmakeFile.txt</code>, Maven 项目的核心是 <code>pom.xml</code>, POM(Project Object Model,项目对象模型)定义了项目的基本信息，用于描述项目如何构建，声明项目依赖等等，可以 pom.xml 是 Maven 一切实践的基础</p>
<h2 id="依赖管理"><span class="section-num">3</span> 依赖管理</h2>
<h3 id="坐标"><span class="section-num">3.1</span> 坐标</h3>
<p>Maven 仓库中有成千上万个构件（jar，war 等文件），Maven 如何精确地找到用户所需的构件呢，用的就是坐标。说起坐标，可能第一反映是平面几何中的 x，y坐标，通过 x，y坐标来唯一确认平面中的一个点，而Maven 的坐标就是用来唯一标识一个构件。</p>
<p>Maven 通过坐标为构件引入了秩序，任何一个构件都需要明确定义自己的坐标，而坐标是由以下元素组成：<code>groupId</code>, <code>artifactId</code>, <code>version</code>, <code>packaging</code>, <code>classifier</code>, <code>scope</code>, <code>exclusions</code>等。一个典型的Maven 坐标：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>spring-beans<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>1.2.6<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>坐标元素详解:</p>
<ul>
<li>groupId(必填): 定义当前Maven 项目隶属的实际项目, 一般是域名的方向定义</li>
<li>artifactId(必填): 定义实际项目中的一个Maven 项目，推荐的做法是使用实际项目名称作为 <code>artifactId</code> 的前缀, 比如上例的 <code>artifactId</code> 是 spring-beans，使用了实际项目名 spring 作为前缀</li>
<li>version(必填): 定义了Maven 项目当前所处的版本，如上例版本是 1.2.6</li>
<li>packaging(选填): 定义了Maven 项目的打包方式。打包方式和所生成的构建的文件扩展名对应，如果上例增加了<code>&lt;packaging&gt;jar&lt;/packaging&gt;</code>元素，最终的文件名为spring-beans-1.2.6.jar(Maven 打包方式默认是 jar)，如果是 web 构件，打包方式就是 <code>war</code>，生成的构件将会以<code>.war</code> 结尾</li>
<li>classifier: 用来帮助定义构建输出的一些附属构件. 附属构建和主构件对应，如上例的主构件是<code>spring-beans-1.2.6.jar</code>, 这个项目还会通过使用一些插件生成`=spring-beans-1.2.6-doc.jar=, <code>spring-beans-1.2.6-source.jar</code>, 其中包含文档和源码</li>
<li>exclusions: 用来排除依赖</li>
<li>scope: 定义了依赖范围，例如 <code>junit</code> 常见的scope 就是<code>&lt;scope&gt;test&lt;/scope&gt;</code>, 表示这个依赖只对测试生效</li>
</ul>
<h3 id="依赖范围"><span class="section-num">3.2</span> 依赖范围</h3>
<p>上文提到，JUnit 依赖的测试范围是test，测试范围用元素scope 表示。首先需要知道，Maven 在编译项目主代码的时候需要使用一套classpath，上例在编译项目主代码的时候就会用到<code>spring-beans</code>，该文件以依赖的方式呗引入到classpath 中。</p>
<p>其次，Maven 在执行测试时候会使用另外一套 classpath。如上文提到的 JUnit 就是以依赖的方式引入到测试使用的 classpath，需注意的是这里的依赖范围是<code>test</code>. 最后，项目在运行的时候，又会使用另外一套的 classpath，上例的<code>spring-beans</code>就是在该classpath里，而JUnit 则不需要。</p>
<p>简而言之，依赖范围就是用来控制依赖与这是那种 classpath (编译classpath, 测试 classpath, 运行 classpath 的关系，Maven 有以下几种依赖范围:</p>
<ul>
<li>compile: 编译依赖范围，如果没有显式指定<code>scope</code>, 那么<code>compile</code>就是默认依赖范围，使用此依赖范围的Maven 依赖，对于编译，测试，运行三种 classpath 都是有效的</li>
<li>test: 测试依赖范围，指定了该范围的依赖，只对测试 classpath 有效，在编译或者运行项目的时候，无法使用该依赖；典型例子就是 JUnit</li>
<li>provided: 已提供依赖范围。使用此依赖范围的 Maven 依赖，对于编译和测试classpath 有效，但在运行时无效</li>
<li>runtime：运行时依赖范围。使用此依赖范围的 Maven 依赖，对于测试和运行的classpath 有效，但在编译主代码时无效</li>
<li>import: 导入依赖范围，该依赖范围不会对三种 classpath 产生实际的影响</li>
<li>system: 系统依赖方位。与 provided 依赖范围完全一致, 即只对编译和测试的classpath有效，对运行时的 classpath 无效. 但是，使用system 范围的依赖必须通过systemPath 元素显式地指定依赖文件的路径 如：</li>
</ul>
<!--listend-->
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>javax.sql<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>jdbc-stdext<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>2.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;scope&gt;</span>system<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;systemPath&gt;</span>${java.home}/lib/rt.jar<span class="nt">&lt;/systemPath&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>由于此类依赖不是通过Maven 仓库解析的，而且往往与本机系统绑定，可能造成构建的不可移植，因此应该谨慎使用</strong>
上述除import 以外的各种依赖范围与三种classpath 的关系如下:</p>
<table>
<thead>
<tr>
<th>依赖范围 scope</th>
<th>对于编译classpath有效</th>
<th>对于测试classpath 有效</th>
<th>对于运行时classpath有效</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td>compile</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>spring-core</td>
</tr>
<tr>
<td>test</td>
<td>&ndash;</td>
<td>Y</td>
<td>&ndash;</td>
<td>JUnit</td>
</tr>
<tr>
<td>provided</td>
<td>Y</td>
<td>Y</td>
<td>&ndash;</td>
<td>servlet-apt</td>
</tr>
<tr>
<td>runtime</td>
<td>&ndash;</td>
<td>Y</td>
<td>Y</td>
<td>JDBC 驱动实现</td>
</tr>
<tr>
<td>system</td>
<td>Y</td>
<td>Y</td>
<td>&ndash;</td>
<td>本地的，java类库以外的文件</td>
</tr>
</tbody>
</table>
<h2 id="仓库"><span class="section-num">4</span> 仓库</h2>
<p>上文提及了依赖管理，通过声明的方式指定所需的构件，那么是从哪里获取所需的构件的呢？答案是 Maven 仓库，Maven 仓库可以分为两类: 本地仓库和远程仓库。</p>
<p>当 Maven 需要根据坐标寻找构件的时候，它首先会查找本地仓库，如果本地仓库存在该构件，则直接使用，如果本地不存在该构件，或者需要查看是否有更新的构件版本，Maven 聚会去远程仓库查找，发现需要的构件之后，下载到本地仓库在使用.</p>
<p>如果本地和远程仓库都没有所需要的构件，那么 Maven 就会报错。如果需要细化远程仓库的类型，还可以分成中央仓库，私服和其他公共库。</p>
<ul>
<li>中央仓库：Maven 核心自带的的远程仓库，它包含了绝大部分开源的构件。在默认的配置下，当本地仓库没有 Maven 需要的构件的时候，它就会尝试从中央仓库下载。</li>
<li>私服：为了节省带宽和时间，可以在内网假设一个特殊的仓库服务器，用来代理所有的外部的远程仓库</li>
</ul>
<figure>
    <img loading="lazy" src="https://raw.githubusercontent.com/ramsayleung/images/master/20191104112131.png"
         alt="Figure 1: repo"/> <figcaption>
            <p><span class="figure-number">Figure 1: </span>repo</p>
        </figcaption>
</figure>

<h3 id="snapshot"><span class="section-num">4.1</span> SNAPSHOT</h3>
<p>在Maven 的世界中，任何一个项目或者构件都必须有自己的版本，版本可能是 <code>1.0.0</code>, <code>1.0-alpha-4,2.1-SNAPSHOT</code> 或者 <code>2.1-20181028-11</code>, 其中 <code>1.0.0</code>, <code>1.0-alpha-4</code> 是稳定的发布版本，而 <code>2.1-SNAPSHOT</code> 或者 <code>2.1-20181028-11</code> 是稳定的快照版本。</p>
<p>Maven 为什么要区分快照版本和发布版本呢？难道1.0.0 不能解决么？为什么需要2.0-SNAPSHOT。</p>
<p>我对此 <code>SNAPSHOT</code> 这个特性印象非常深刻，在蚂蚁金服的新人培训中，其中就有一项是大家协作完成一个 Mini Alipay，一个 Mini Alipay 分成三个应用<code>bkonebusiness</code>, <code>bkoneuser</code>, <code>bkoneacccount</code>，以SOA 的架构进行拆分，应用之间相互依赖。</p>
<p>在开发过程中，<code>bkoneuser</code> 经常需要将最新的构件共享 <code>bkonebusiness</code>, 以供他们进行测试和开发。</p>
<p>因为<code>bkoneuser</code>本身也在快速迭代中，为了让<code>bkonebusiness</code> 用到最新的代码，我们不断地变更版本，<code>1.0.1</code>, <code>1.0.2</code>, <code>1.0.3</code>,&hellip; <code>bkoneuser</code> 不断发版本，<code>bkonebusiness</code> 不断升版本，甚至有一次<code>bkoneuser</code> 在没有更新版本号的情况下发布了最新代码，而 <code>bkonebusiness</code> 已经有原来版本的 jar 包，所以就没有去远程仓库拉取最新的代码，就出问题了&hellip;.</p>
<p>其实 Maven 快照版本就是为了解决这种问题，防止滥用版本号和及时拉取最新代码。</p>
<p>bkoneuser 只需将版本指定为<code>1.0.1-SNAPSHOT</code>, 然后发布到远程服务器，在发布的工程中，Maven 会自动为构件打上时间戳，比如 <code>1.0.1-20181028.120112-13</code> 表示 2018年10月28号的12点01分12秒的13次快照，有了时间戳，Maven 就能随时找到仓库中该构件<code>1.0.1-SNAPSHOT</code>版本的最新文件。</p>
<p>这是，<code>bkonebusiness</code>对于 <code>bkoneuser</code>的依赖，只要构建<code>bkonebusiness</code>，Maven就会自动从仓库中检查 <code>bkoneuser</code>的罪行构建，发现有更新便进行下载。</p>
<p>基于快照版本，<code>bkonebusiness</code> 可以完全不用考虑 <code>bkoneuser</code> 的构建，因为它总是拉取最新版本的 <code>bkoneuser</code>,这个是 Maven 的快照机制进行保证。</p>
<p>如果到了 release，就要及时将 <code>1.0.1-SNAPSHOT</code>, 否则 <code>bkonebusiness</code> 在构建发布版本的时候可能拉取到最新的有问题的版本.</p>
<h3 id="仓库搜索服务"><span class="section-num">4.2</span> 仓库搜索服务</h3>
<p>在公司开发的时候有私服，但是在开发自己项目的时候，我一般到 <a href="https://repository.sonatype.org/">SnoaType Nexus</a> 找对应的构件</p>
<h2 id="插件与生命周期"><span class="section-num">5</span> 插件与生命周期</h2>
<h3 id="何为生命周期"><span class="section-num">5.1</span> 何为生命周期</h3>
<p>在有关 Maven 的日常使用中，命令行的输入往往就对应了生命周期，如 <code>mvn package</code> 就表示执行默认的生命周期阶段 <code>package</code>.</p>
<p>Maven 的生命周期是抽象的，其实际行为都由插件来完成，如<code>package</code> 阶段的任务就会有<code>maven-jar-plugin</code> 完成。</p>
<p>Maven的生命周期就是为了对所有的构建过程进行抽象和统一，包括项目的清理，初始化，编译，测试，打包，集成测试，验证，部署等几乎所有的构建步骤。</p>
<p>需要注意的是 <strong>Maven 的生命周期是抽象的，这意味着生命周期本身不作任何实际的工作，实际的任务(如编译源代码)都交由插件来完成. 每个步骤都可以绑定一个或者多个插件行为，而且Maven 为大多数构建步骤编写并绑定了默认的插件</strong></p>
<p>例如：针对编码的插件有 <code>maven-compiler-plugin</code>,针对测试的插件有<code>maven-surefire-plugin</code> 等，用户几乎不会察觉插件的存在</p>
<h3 id="三套生命周期"><span class="section-num">5.2</span> 三套生命周期</h3>
<p>Maven 有用三套相互独立的生命周期，它们分别是<code>clean</code>, <code>default</code> , <code>site</code>. <code>clean</code> 生命周期的目的是清理项目，<code>default</code> 生命周期的目的是构件项目，而 <code>site</code> 生命周期的目的是建立项目站点</p>
<h4 id="clean-生命周期"><span class="section-num">5.2.1</span> clean 生命周期</h4>
<p>clean 生命周期主要是清理项目，它包含三个阶段:</p>
<ol>
<li>pre-clean: 执行一些清理前需要完成的工作</li>
<li>clean 清理上一次构造生成的文件</li>
<li>post-clean 执行一些清理后需要完成的工作</li>
</ol>
<h4 id="default-生命周期"><span class="section-num">5.2.2</span> default 生命周期</h4>
<p>default 生命周期奠定了真正构件时所需要执行的所有步骤，它是所有生命周期最核心的部分，其包含的阶段如下：</p>
<ul>
<li>validate</li>
<li>initialize</li>
<li>generate-sources</li>
<li>process-sources 处理项目主资源文件。一般来说，是对src/main/resources 目录内的内容进行变量替换的工作后，复制到项目输出的主classpath 目录中</li>
<li>generate-resources</li>
<li>process-resources</li>
<li>compile 编译项目的主源码，一般来说，是编译 src/main/java 目录下的java 文件至项目输出的主 classpath 目录中</li>
<li>process-classes</li>
<li>generate-test-sources</li>
<li>process-test-sources 处理项目测试资源文件。一般来说，是对src/test/resources 目录的内容进行变量替换等工作后，复制到项目输出的测试classpath 目录中</li>
<li>generate-test-resources</li>
<li>process-test-resources</li>
<li>test-compile 编码项目的测试代码。一般来说，是编译 src/test/java 目录下的java 文件至项目输出的测试classpath 目录中</li>
<li>process-test-classes</li>
<li>test 使用单元测试框架运行测试，测试代码不会被打包或部署</li>
<li>prepare-packae</li>
<li>package 接受编译好的代码，打包或可发布的格式，如 jar</li>
<li>pre-integration-test</li>
<li>integration-test</li>
<li>post-integration-test</li>
<li>vertify</li>
<li>install 将包安装到Maven 本地仓库，供本地其他Maven 项目使用</li>
<li>deploy 将最终的包复制到远程仓库，共其他开发人员和Maven 项目使用</li>
</ul>
<h4 id="site-生命周期"><span class="section-num">5.2.3</span> site 生命周期</h4>
<p>site 生命周期的目的是建立和发布项目站点，生命周期包含如下阶段</p>
<ul>
<li>pre-site 执行一些在生成项目站点前需要完成的工作</li>
<li>site 生成项目站点文档</li>
<li>post-site 执行一些在生成项目站点之后需要完成的工作</li>
<li>site-deploy 将生成的项目站点发布到服务器上</li>
</ul>
<h4 id="命令行和生命周期"><span class="section-num">5.2.4</span> 命令行和生命周期</h4>
<p>从命令行执行Maven 任务的最主要方式就是调用 Maven的生命周期阶段。需要注意的是，各个生命周期是相互独立的，而一个生命周期的阶段是有前后依赖关系的。</p>
<p>下面以一些常见的Maven 命令为例，解释其执行的生命周期阶段:</p>
<ul>
<li>mvn clean: 该命令调用clean 生命周期的clean 阶段。实际执行的阶段为clean 生命周期的pre-clean 和clean 阶段</li>
<li>mvn test: 该命令调用default 生命周期的test 阶段。实际执行的阶段是 default 生命周期的 validate, initialize, 直到 test 的所有阶段。这也解释了为什么在测试的时候，项目的代码能够自动得以编译</li>
<li>mvn clean install: 该命令调用 clean 生命周期的clean 阶段和default 生命周期的 install 阶段。实际执行的阶段为 clean 生命周期的 pre-clean, clean 阶段，以及default 生命周期的从validate 到 install 的所有阶段。该命令结合了两个生命周期，在执行真正的项目构建之前清理项目是一个很好的实践</li>
</ul>
<h2 id="继承"><span class="section-num">6</span> 继承</h2>
<p>如bkoneuser 的项目结构所示:</p>
<figure>
    <img loading="lazy" src="https://raw.githubusercontent.com/ramsayleung/images/master/20191104112215.png"
         alt="Figure 2: bkoneuser 的项目结构"/> <figcaption>
            <p><span class="figure-number">Figure 2: </span>bkoneuser 的项目结构</p>
        </figcaption>
</figure>

<p>按照 DDD(Domain Driven Design) 的驱动，<code>bkoneuser</code> 下有多个对应的子模块，每个模块也是一个 Maven 项目，每个模块里面可能有相同的依赖，如 <code>SpringFramework</code> 的 <code>spring-core</code>, <code>spring-beans</code>, <code>spring-context</code> 等。</p>
<p>如果每个子模块都维护一份大致相同的依赖，那么就有10几份相同的依赖，这还会随着子模块的增多而变得庞大。</p>
<p>如果我们工程师的嗅觉, 会发现有很多的重复依赖，面对重复应该怎么办？通过抽象来减少重复代码和配置，而 Maven 提供的抽象机制就是继承(还有聚合，只是个人觉得不如继承常用).</p>
<p>在 OOP 中，工程师可以建立一种类的父子结构，然后在父类中声明一些字段供子类继承，这样就可以做到“一处声明，多处使用”, 类似地，我们需要创建 POM 的父子结构，然后在父POM 中声明一些供子 POM 继承，以实现“一处声明，多处使用”</p>
<h3 id="配置示例"><span class="section-num">6.1</span> 配置示例</h3>
<p>parent 的配置如下:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;groupId&gt;</span>com.minialipay<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;artifactId&gt;</span>bkgponeuser-parent<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;version&gt;</span>1.0.0-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;packaging&gt;</span>pom<span class="nt">&lt;/packaging&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;properties&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;java.version&gt;</span>1.8<span class="nt">&lt;/java.version&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;bkgponeaccount.common.service.facade.version&gt;</span>1.1.0.20180919<span class="nt">&lt;/bkgponeaccount.common.service.facade.version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/properties&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;modules&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;module&gt;</span>app/core/service<span class="nt">&lt;/module&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;module&gt;</span>app/core/model<span class="nt">&lt;/module&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;module&gt;</span>app/biz/shared<span class="nt">&lt;/module&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;module&gt;</span>app/biz/service-impl<span class="nt">&lt;/module&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;module&gt;</span>app/common/util<span class="nt">&lt;/module&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;module&gt;</span>app/common/service/facade<span class="nt">&lt;/module&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;module&gt;</span>app/common/service/integration<span class="nt">&lt;/module&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;module&gt;</span>app/common/dal<span class="nt">&lt;/module&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;module&gt;</span>app/test<span class="nt">&lt;/module&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/modules&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>需要主要的关键点是parent 的 <code>packaging</code> 值必须是 <code>pom</code>, 而不是默认的 <code>jar</code>, 否则则无法进行构件.</p>
<p>而 <code>modules</code> 元素则是实现继承最核心的配置，通过在打包方式为 pom 的Maven 项目中声明任意数量的 <code>module</code> 来实现模块的继承, 每个 <code>module</code>的值都是一个当前POM 的相对目录，比如 <code>app/core/service</code> 就是说子模块的POM在 parent 目录的下的 <code>app/core/service</code>目录</p>
<h3 id="子模块配置示例"><span class="section-num">6.2</span> 子模块配置示例</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;parent&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>com.minialipay<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>bkgponeuser-parent<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>1.0.0-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;relativePath&gt;</span>../../../pom.xml<span class="nt">&lt;/relativePath&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/parent&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;artifactId&gt;</span>bkgponeuser-core-service<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;packaging&gt;</span>jar<span class="nt">&lt;/packaging&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>上述pom 中使用 <code>parent</code> 元素来声明父模块，<code>parent</code> 下元素groupid， artifactId 和 version 指定了父模块的坐标，这三个元素是必须。</p>
<p>元素 <code>relativePath</code> 表示父模块POM的相对路径, <code>../../../pom.xml</code> 指父POM的位置在三级父目录上</p>
<h3 id="可继承的pom-元素"><span class="section-num">6.3</span> 可继承的POM 元素</h3>
<p>可继承元素列表及简短说明:</p>
<ul>
<li>groupId: 项目Id, 坐标的核心元素</li>
<li>version：项目版本, 坐标的核心元素</li>
<li>description: 项目的描述信息</li>
<li>organization: 项目的组织信息</li>
<li>inceptionYear: 项目的创始年份</li>
<li>url: 项目的url 地址</li>
<li>developers: 项目的开发者信息</li>
<li>contributors: 项目的贡献者信息</li>
<li>distributionManagement：项目的部署配置</li>
<li>issueManagement: 项目的缺陷跟踪系统信息</li>
<li>ciManagement: 项目的持续继承系统信息</li>
<li>scm: 项目的版本控制系统信息</li>
<li>mailingLists: 项目的邮件列表信息</li>
<li>properties: 自定义的Maven 属性</li>
<li>dependencies: 项目的依赖配置</li>
<li>dependencieyManagemant: 项目的依赖管理配置</li>
<li>repositories: 项目的仓库配置</li>
<li>build: 包括项目的源码目录配置，输出目录配置，插件配置，插件管理配置等</li>
<li>reporting: 包括项目的报告输出目录配置，报告插件配置等</li>
</ul>
<h3 id="dependencymanagement-依赖管理"><span class="section-num">6.4</span> dependencyManagement 依赖管理</h3>
<p>可继承列表包含了 <code>dependencies</code> 元素，说明是会被继承的，这是我们就会很容易想到将这一特性应用到 <code>bkoneuser-parent</code> 中。子模块同时依赖 <code>spring-beans</code>,=spring-context=,=fastjson= 等, 因此可以将这些依赖配置放到父模块 <code>bkoneuser-parent</code> 中，子模块就能移除这些依赖，简化配置.</p>
<p>这种做法可行，但是存在问题，我们可以确定现有的子模块都是需要 <code>spring-beans</code>, <code>spring-context</code> 这几个模块的，但是我们无法确定将来添加的子模块就一定需要这四个依赖.</p>
<p>假设将来项目中要加入一个<code>app/biz/product</code>, 但是这个模块不需要 <code>spring-beans</code>, <code>spring-context</code>, 只需要 <code>fastjson</code>, 那么继承 <code>bkoneuser</code> 就会引入不需要的依赖，这样是非常不利于项目维护的！</p>
<p>Maven 提供的 <code>dependencyManagement</code> 元素既能让子模块继承到父模块的依赖配置，又能保证子模块依赖使用的灵活性。在 <code>dependencyManagement</code> 元素下的依赖声明不会引入实际的依赖，不过它能够约束 <code>dependencies</code> 下的依赖使用。</p>
<p>例如在 <code>bkoneuser-parent</code> 用 <code>dependencyManagement</code>声明依赖:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependencyManagement&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;groupId&gt;</span>com.alibaba<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;artifactId&gt;</span>fastjson<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;version&gt;</span>1.1.33<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;groupId&gt;</span>junit<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;artifactId&gt;</span>junit<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;version&gt;</span>4.7<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/dependencies&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependencyManagement&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在 <code>app/core/service</code> 子模块进行引用:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.alibaba<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>fastjson<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>junit<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>junit<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependencies&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>子模块的<code>fastjson</code> 依赖只配置了 <code>groupId</code> 和 <code>artifactId</code>, 省去了 <code>version</code> , 而 <code>junit</code> 依赖 不仅省去了<code>version</code>, 连<code>scope</code> 都省去了。</p>
<p>《Maven 实战》作者强烈推荐使用这种方式，其主要原因在与在父POM 中使用 <code>dependencyManagement</code> 声明依赖能够统一规范依赖的版本，当依赖版本在父POM中声明之后，子模块在使用依赖的时候就无须声明版本，也就不会发生多个子模块使用依赖版本不一致的情况</p>
<h2 id="依赖冲突"><span class="section-num">7</span> 依赖冲突</h2>
<p>在Java 项目中，随着项目代码量的增长，各种问题就会接踵而至，jar 包冲突就是其中一个最常见的问题. jar 冲突常见的异常: <code>NoSuchMethodError</code>, <code>NoClassDefFoundError</code></p>
<h3 id="成因"><span class="section-num">7.1</span> 成因</h3>
<p>当Maven根据pom文件作依赖分析, 发现通过直接依赖或者间接依赖, 有多个相同<code>groupId</code>, <code>artifactId</code>, 不同 <code>version</code> 的依赖时, 它会根据两点原则来筛选出唯一的一个依赖, 并最终把相应的jar包放到 classpath下:</p>
<ol>
<li>依赖路径长度: 比如应用的pom里直接依赖了A, 而A又依赖了B, 那么B对于应用来说, 就是间接依赖, 它的依赖路径长度就是2. 长度越短, 优先级越高. 当出现不同版本的依赖时, maven优先选择依赖路径短的依赖.</li>
<li>依赖声明顺序: 当依赖路径长度相同时, POM 里谁的声明在上面, Maven 就选择谁.</li>
</ol>
<!--listend-->
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">A</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">B</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="o">=</span><span class="k">new</span><span class="w"> </span><span class="n">B</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">func_a</span><span class="p">(){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">b</span><span class="p">.</span><span class="na">func_b</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// 来自b-1.0.jar</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">B</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">C</span><span class="w"> </span><span class="n">c</span><span class="o">=</span><span class="k">new</span><span class="w"> </span><span class="n">C</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">func_b</span><span class="p">(){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">c</span><span class="p">.</span><span class="na">func_c</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// 来自c-1.0.jar</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">C</span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">func_xxx</span><span class="p">(){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">func_c</span><span class="p">(){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// 来自c-1.1.jar</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">C</span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">func_xxx</span><span class="p">(){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">func_c1</span><span class="p">(){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// d.1.0.jar</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">D</span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// 来自c-1.1.jar</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">C</span><span class="w"> </span><span class="n">c</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">C</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">func_d</span><span class="p">(){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="n">c</span><span class="p">.</span><span class="na">func_xxx</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">MyMain</span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">main</span><span class="p">(</span><span class="n">String</span><span class="o">[]</span><span class="w"> </span><span class="n">args</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">new</span><span class="w"> </span><span class="n">A</span><span class="p">().</span><span class="na">func_a</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>应用程序里有个A类, 里面含有一个属性B, 这个B类来自 <code>b-1.0.jar</code> 包. A类有个 <code>func_a()</code> 方法, 里面会调用b类的 <code>func_b</code> 方法.B类含有一个属性C, 这个C类来自<code>c-1.0.jar</code>. B类还提供一个方法 <code>func_b()</code>, 里面调用C类的 <code>func_c()</code> 方法.</p>
<p>这时, 应用程序的主POM里间接依赖了 <code>c-1.1.jar</code> 包, 但是这个jar里的C类中已经把 <code>func_c()</code> 删除了.</p>
<p>这样由于B类使用的 <code>c-1.0.jar</code> 对于应用程序来说, 是间接依赖, 依赖路径长度是2 (A -&gt; B -&gt; C), 比应用程序主pom中间接依赖的 <code>c-1.1.jar</code> 路径(D-&gt;C)长, 最后就会被maven排掉了 (也就是应用程序的 classpath 下, 最终会保留 <code>c-1.1.jar</code>).</p>
<p>最后执行main函数时, 就会报 <code>NoSuchMethodError</code>, 也就是找不到C类中 <code>func_c()</code> 方法.</p>
<h3 id="解决方案"><span class="section-num">7.2</span> 解决方案</h3>
<p>强制Maven 使用<code>c-1.0.jar</code>, 也就是将<code>c-1.1.jar</code>排除掉:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.d<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>d<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>1.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;exclusions&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;exclusion&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;groupId&gt;</span>com.c<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;artifactId&gt;</span>c<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/exclusion&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/exclusions&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependencies&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在 <code>d.1.0.jar</code> 的依赖排除 <code>c.1.1.jar</code> 的时候，不需要指定版本, 因为这个时候<code>d.1.0.jar</code> 的依赖的版本一定是 <code>c.1.1.jar</code>. 需要注意的是，如果 <code>d</code> 使用了<code>c.1.1.jar</code> 的 <code>func_c1()</code>，排掉 <code>c.1.1.jar</code> 是会报错的，因为满足了B类的 <code>func_c()</code> 就无法满足 D 类的 <code>func_c1()</code>, 这个就是著名的“菱形依赖问题”(diamond dependency problem)。</p>
<p>不得不说，入职的时候，遇上了各种jar 包冲突的问题，排包都排出心得. 在此推荐个排包神器, Intellij Idea 的插件：<a href="https://plugins.jetbrains.com/plugin/7179-maven-helper">maven helper</a>, 比手动<code>-verbose:class</code> + <code>mvn dependency:tree</code>排包方便多了</p>
<h2 id="总结"><span class="section-num">8</span> 总结</h2>
<p>的确，写到这里，必须再次承认 Maven 是怪兽级的 构建工具，但是同样无可否认的是，它出色的构建和依赖管理功能。写go 语言的时候，我多希望有个 Maven 可以用呢 ╥﹏╥&hellip;</p>
]]></content:encoded>
    </item>
    <item>
      <title>为Java瘦身 – Lombok</title>
      <link>https://ramsayleung.github.io/zh/post/2017/lombok/</link>
      <pubDate>Wed, 24 May 2017 00:00:00 +0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2017/lombok/</guid>
      <description>An introduction about lombok</description>
      <content:encoded><![CDATA[<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>几天前 Goolge 在 I/O 大会上宣布了 Android 将官方支持 Kotlin, 这意味着 Android开发者可以更好地使用 Kotlin 开发 Android.</p>
<p>我虽不是 Android 开发者，但是也为 Android 开发者多了一个选择而感到高兴，略显意外的是，接下来到处可以看到 &ldquo;Java已死，Kotlin 当立&rdquo; 之类的言论。</p>
<p>一群人围在一起诉说被 Java &ldquo;折磨&rdquo; 的血泪史，然后为Kotlin 的到来欢欣鼓舞。我学过挺多的语言，也并不是一个 &ldquo;Java 卫道士&rdquo;.</p>
<p>但是看到很多人都说 &ldquo;Java 的语法啰嗦，每次都要编写一大段 &ldquo;Setter/Getter&rdquo; 这类的模板代码，还有各种的 Bean; 真的好累&rdquo; 我就觉得其实很多人都是人云亦云，他们也并没有对 Java 有多少关注。</p>
<p>其实 Java8 发布以后，使用 Java8 的函数式进行编码已经可以减少很多代码了；其次，一个新颖的类库也可以帮 Java 的代码进行瘦身 &ndash; Lombok</p>
<h2 id="lombok"><span class="section-num">2</span> Lombok</h2>
<h3 id="简介"><span class="section-num">2.1</span> 简介</h3>
<p>很多开发者都对模板代码嗤之以鼻，但是 Java 中就有很多非常类似且改动很少的样板 代码。</p>
<p>这问题一方面是由于类库的设计决定，另外一方面也是 Java 的自身语言的特性。 而 Lombok 这个项目就是希望通过注解来减少模板代码。</p>
<p>就注解而言，大多是各类框架用于生成代码 (典型的就是 Spring 和 Hibernate 了)，而很少直接使用注解生成的代
码。</p>
<p>因为如果想要直接在程序中使用注解生成的代码，就意味着在代码进行编译之前，注解就要进行相应的处理。这似乎是没可能发生的事情: 在编译代码之前使用编译后生成的代码。</p>
<p>但是 Lombok 在 IDE 的配合下就真的做到在开发的时候就插入相应的代码。</p>
<h3 id="getter-and-setter"><span class="section-num">2.2</span> @Getter and @Setter</h3>
<p>百闻不如一见，还是直接看例子吧。</p>
<p>对于使用过 Java 的开发者而言，我相信他们最熟悉的肯定是 Java 无处不在的封装以及对应的 Getter/Setter. 现在就来看一下如何 为最常见的模板代码瘦身。</p>
<p>未使用 Lombok 的代码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">private</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="n">employed</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">name</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">isEmployed</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">employed</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">setEmployed</span><span class="p">(</span><span class="kd">final</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="n">employed</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">this</span><span class="p">.</span><span class="na">employed</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">employed</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">protected</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">setName</span><span class="p">(</span><span class="kd">final</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">name</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">this</span><span class="p">.</span><span class="na">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">name</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>并没有上面特点，还是 &ldquo;旧把式&rdquo;. 那么现在来看一下使用了 Lombok 的同等作用的代
码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Getter</span><span class="w"> </span><span class="nd">@Setter</span><span class="w"> </span><span class="kd">private</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="n">employed</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nd">@Setter</span><span class="p">(</span><span class="n">AccessLevel</span><span class="p">.</span><span class="na">PROTECTED</span><span class="p">)</span><span class="w"> </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>除了必要的变量定义以及 <code>@Getter</code>, <code>@Setter</code> 注解以外，没有了其他的东西的。</p>
<p>但是使用 Lombok 的代码比原生的 Java 代码少了很多行，定义的类的属性越多，减少的代码数就越可观。</p>
<p>而 @Getter 和 @Setter 注解的作用就是为一个类的属性生成 getter 和 setter 方法，而这些生成的方法跟我们自己编写的代码是一样的。</p>
<h3 id="nonnull"><span class="section-num">2.3</span> @NonNull</h3>
<p>相信每一个使用过 Java 的开发者都不会对空指针这个异常陌生吧，因为 NullPointException 导致了各种 Bug, 以至于它的发明者 Tony Hoare 都自嘲到他创 造了价值十亿的错误 (&ldquo;Null Reference: The Billion Dollar Mistake&rdquo;).</p>
<p>因此在Java 的代码中，出于安全性的考虑，对于可能出现空指针的地方，都需要进行空指针 检查，自然无可避免地产生了很多的模板代码。</p>
<p>而 Lombok 引入的 @NonNull 注解可以让需要进行空指针检查的代码 fast-fail; 这样就无需显示添加空指针检查了。</p>
<p>当为类 的属性添加了 @NonNull 注解以后，在对应的 setter 函数，Lombok 也会生成对应的 空指针检查。例子：使用 Lombok 对 <code>Family</code> 类添加注解：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Getter</span><span class="w"> </span><span class="nd">@Setter</span><span class="w"> </span><span class="nd">@NonNull</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span><span class="w"> </span><span class="n">members</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>对应的相同作用的原生代码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@NonNull</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span><span class="w"> </span><span class="n">members</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="nf">Family</span><span class="p">(</span><span class="nd">@NonNull</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span><span class="w"> </span><span class="n">members</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">members</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w"> </span><span class="k">throw</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">java</span><span class="p">.</span><span class="na">lang</span><span class="p">.</span><span class="na">NullPointerException</span><span class="p">(</span><span class="s">&#34;members&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">this</span><span class="p">.</span><span class="na">members</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">members</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nd">@NonNull</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span><span class="w"> </span><span class="nf">getMembers</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">members</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">setMembers</span><span class="p">(</span><span class="nd">@NonNull</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span><span class="w"> </span><span class="n">members</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">members</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w"> </span><span class="k">throw</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">java</span><span class="p">.</span><span class="na">lang</span><span class="p">.</span><span class="na">NullPointerException</span><span class="p">(</span><span class="s">&#34;members&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">this</span><span class="p">.</span><span class="na">members</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">members</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>不得不感慨，使用 Lombok, 敲击键盘的次数都成指数级下降.</p>
<h3 id="equalsandhashcode"><span class="section-num">2.4</span> @EqualsAndHashCode</h3>
<p>因为 Java 的 Object 类存在用于比较的 <code>equals()</code> 以及对应的 <code>hashCode()</code> 方法，而很多类都经常需要重写这两个方法来实现比较操作。</p>
<p>比较的操作大多是逐一比较子类的属性，而计算 hash 值的函数也基本是逐一取各个属性的 hash 值，然后与固定值相乘在相加. 这样的操作并不需要复杂算法，完成的都是重复性的 &ldquo;体力活&rdquo;.</p>
<p>幸运的是， Lombok 也提供了相应的注解来减少这些模板代码。类级别的 <code>@EqualsAndHashCode</code> 注解可以为指定的属性生成 <code>equals()</code> 方法和 <code>hashCode()</code> 方法。</p>
<p>默认情况下，所有非静态或者没被标注成 <code>transient</code> 的属性都会被 <code>equals()</code> 和 <code>hashCode()</code> 方 法包含在内。当然，你也可以使用 <code>exclude</code> 声明不需要被包含的属性。</p>
<p>例子：使用了 <code>@EqualAndHashCode</code> 注解的代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@EqualsAndHashCode</span><span class="p">(</span><span class="n">callSuper</span><span class="o">=</span><span class="kc">true</span><span class="p">,</span><span class="n">exclude</span><span class="o">=</span><span class="p">{</span><span class="s">&#34;address&#34;</span><span class="p">,</span><span class="s">&#34;city&#34;</span><span class="p">,</span><span class="s">&#34;state&#34;</span><span class="p">,</span><span class="s">&#34;zip&#34;</span><span class="p">})</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">Person</span><span class="w"> </span><span class="kd">extends</span><span class="w"> </span><span class="n">SentientBeing</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">enum</span><span class="w"> </span><span class="n">Gender</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">Male</span><span class="p">,</span><span class="w"> </span><span class="n">Female</span><span class="w"> </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@NonNull</span><span class="w"> </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">name</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@NonNull</span><span class="w"> </span><span class="kd">private</span><span class="w"> </span><span class="n">Gender</span><span class="w"> </span><span class="n">gender</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">ssn</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">address</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">city</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">state</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">zip</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>对应的相同作用的原生代码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">Person</span><span class="w"> </span><span class="kd">extends</span><span class="w"> </span><span class="n">SentientBeing</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">enum</span><span class="w"> </span><span class="n">Gender</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="cm">/*public static final*/</span><span class="w"> </span><span class="n">Male</span><span class="w"> </span><span class="cm">/* = new Gender() */</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="cm">/*public static final*/</span><span class="w"> </span><span class="n">Female</span><span class="w"> </span><span class="cm">/* = new Gender() */</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@NonNull</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">name</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@NonNull</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">Gender</span><span class="w"> </span><span class="n">gender</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">ssn</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">address</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">city</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">state</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">zip</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@java.lang.Override</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">equals</span><span class="p">(</span><span class="kd">final</span><span class="w"> </span><span class="n">java</span><span class="p">.</span><span class="na">lang</span><span class="p">.</span><span class="na">Object</span><span class="w"> </span><span class="n">o</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">o</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="k">this</span><span class="p">)</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">o</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">o</span><span class="p">.</span><span class="na">getClass</span><span class="p">()</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="k">this</span><span class="p">.</span><span class="na">getClass</span><span class="p">())</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="kd">super</span><span class="p">.</span><span class="na">equals</span><span class="p">(</span><span class="n">o</span><span class="p">))</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">final</span><span class="w"> </span><span class="n">Person</span><span class="w"> </span><span class="n">other</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">Person</span><span class="p">)</span><span class="n">o</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="na">name</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="n">other</span><span class="p">.</span><span class="na">name</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="na">name</span><span class="p">.</span><span class="na">equals</span><span class="p">(</span><span class="n">other</span><span class="p">.</span><span class="na">name</span><span class="p">))</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="na">gender</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="n">other</span><span class="p">.</span><span class="na">gender</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="na">gender</span><span class="p">.</span><span class="na">equals</span><span class="p">(</span><span class="n">other</span><span class="p">.</span><span class="na">gender</span><span class="p">))</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="na">ssn</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="n">other</span><span class="p">.</span><span class="na">ssn</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="na">ssn</span><span class="p">.</span><span class="na">equals</span><span class="p">(</span><span class="n">other</span><span class="p">.</span><span class="na">ssn</span><span class="p">))</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@java.lang.Override</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">hashCode</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">final</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">PRIME</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">31</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kt">int</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">PRIME</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="kd">super</span><span class="p">.</span><span class="na">hashCode</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">PRIME</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="na">name</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				   </span><span class="n">0</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="k">this</span><span class="p">.</span><span class="na">name</span><span class="p">.</span><span class="na">hashCode</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">PRIME</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="na">gender</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				   </span><span class="n">0</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="k">this</span><span class="p">.</span><span class="na">gender</span><span class="p">.</span><span class="na">hashCode</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">PRIME</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="na">ssn</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				   </span><span class="n">0</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="k">this</span><span class="p">.</span><span class="na">ssn</span><span class="p">.</span><span class="na">hashCode</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">result</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>模板代码和使用了 Lombok 的代码简洁程度而言，差距越来越大了</p>
<h3 id="data"><span class="section-num">2.5</span> @Data</h3>
<p>下面我就来介绍一下在我项目中使用最频繁的注解 <code>@Data</code>.</p>
<p>使用 <code>@Data</code> 相当于同时在类级别使用 <code>@EqualAndHashCode</code> 注解以及我未曾提及的 <code>@ToString</code> 注解 (这个应该可以从注解名字猜出注解的作用), 以及为每一个类的属性添加上 <code>@Setter</code> 和 <code>@Getter</code> 注解。</p>
<p>在一个类使用 <code>@Data</code>, Lombok 还会为该类生成构造函数。</p>
<p>例子：使用 了 <code>@Data</code> 注解的函数：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Data</span><span class="p">(</span><span class="n">staticConstructor</span><span class="o">=</span><span class="s">&#34;of&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">Company</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="n">Person</span><span class="w"> </span><span class="n">founder</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">name</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span><span class="w"> </span><span class="n">employees</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>同等作用的原生 Java 代码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">Company</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="n">Person</span><span class="w"> </span><span class="n">founder</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">name</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span><span class="w"> </span><span class="n">employees</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="nf">Company</span><span class="p">(</span><span class="kd">final</span><span class="w"> </span><span class="n">Person</span><span class="w"> </span><span class="n">founder</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">this</span><span class="p">.</span><span class="na">founder</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">founder</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="n">Company</span><span class="w"> </span><span class="nf">of</span><span class="p">(</span><span class="kd">final</span><span class="w"> </span><span class="n">Person</span><span class="w"> </span><span class="n">founder</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">Company</span><span class="p">(</span><span class="n">founder</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="n">Person</span><span class="w"> </span><span class="nf">getFounder</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">founder</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="nf">getName</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">name</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">setName</span><span class="p">(</span><span class="kd">final</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">name</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">this</span><span class="p">.</span><span class="na">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">name</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span><span class="w"> </span><span class="nf">getEmployees</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">employees</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">setEmployees</span><span class="p">(</span><span class="kd">final</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span><span class="w"> </span><span class="n">employees</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">this</span><span class="p">.</span><span class="na">employees</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">employees</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@java.lang.Override</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">equals</span><span class="p">(</span><span class="kd">final</span><span class="w"> </span><span class="n">java</span><span class="p">.</span><span class="na">lang</span><span class="p">.</span><span class="na">Object</span><span class="w"> </span><span class="n">o</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">o</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="k">this</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">o</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">o</span><span class="p">.</span><span class="na">getClass</span><span class="p">()</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="k">this</span><span class="p">.</span><span class="na">getClass</span><span class="p">())</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">final</span><span class="w"> </span><span class="n">Company</span><span class="w"> </span><span class="n">other</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">Company</span><span class="p">)</span><span class="w"> </span><span class="n">o</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="na">founder</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="n">other</span><span class="p">.</span><span class="na">founder</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="na">founder</span><span class="p">.</span><span class="na">equals</span><span class="p">(</span><span class="n">other</span><span class="p">.</span><span class="na">founder</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="na">name</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="n">other</span><span class="p">.</span><span class="na">name</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="na">name</span><span class="p">.</span><span class="na">equals</span><span class="p">(</span><span class="n">other</span><span class="p">.</span><span class="na">name</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="na">employees</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="n">other</span><span class="p">.</span><span class="na">employees</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="na">employees</span><span class="p">.</span><span class="na">equals</span><span class="p">(</span><span class="n">other</span><span class="p">.</span><span class="na">employees</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@java.lang.Override</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">hashCode</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">final</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">PRIME</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">31</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kt">int</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">PRIME</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="na">founder</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				   </span><span class="n">0</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="k">this</span><span class="p">.</span><span class="na">founder</span><span class="p">.</span><span class="na">hashCode</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">PRIME</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="na">name</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				   </span><span class="n">0</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="k">this</span><span class="p">.</span><span class="na">name</span><span class="p">.</span><span class="na">hashCode</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">PRIME</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="na">employees</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				   </span><span class="n">0</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="k">this</span><span class="p">.</span><span class="na">employees</span><span class="p">.</span><span class="na">hashCode</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">result</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@java.lang.Override</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">public</span><span class="w"> </span><span class="n">java</span><span class="p">.</span><span class="na">lang</span><span class="p">.</span><span class="na">String</span><span class="w"> </span><span class="nf">toString</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="s">&#34;Company(founder=&#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">founder</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s">&#34;, name=&#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s">&#34;,&#34;</span><span class="w"> </span><span class="o">+</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="s">&#34; employees=&#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">employees</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s">&#34;)&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>差别更加显而易见了</p>
<h2 id="小结"><span class="section-num">3</span> 小结</h2>
<p>我在日常的开发中，使用的开发语言主要是 Java, 我也学习过其他的语言，所以 Java 和其他语言相比的优缺点也了然于心。</p>
<p>Java 绝佳的工程性，优秀的 OOP 范式，以及大量的类库，框架 (例如 Spring &ldquo;全家桶&rdquo;), 以及 JIT 带来的接近 C++ 的性能，但是 Java 语法实在啰嗦，需要编写很多的模板代码，以至于经常出现将小项目写成中项目，中项目写成大项目的烦恼，更被戏称为 &ldquo;搬砖&rdquo;.</p>
<p>现在看来，Lombok 为 Java 减少的模板代码实在算是造福 Java 开发者，让开发者在获得 Java 优势的时候，还可以尽量少地打字，可谓是来的及时。</p>
<hr>
<h2 id="参考"><span class="section-num">4</span> 参考</h2>
<ul>
<li><a href="https://projectlombok.org/index.html">https://projectlombok.org/index.html</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Java UUID 源码剖析</title>
      <link>https://ramsayleung.github.io/zh/post/2017/uuid/</link>
      <pubDate>Thu, 18 May 2017 00:00:00 +0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2017/uuid/</guid>
      <description>a introduction about uuid</description>
      <content:encoded><![CDATA[<p>笔者近来闲来无事，又因为有需要构造全局唯一 ID 的需求，所以就去看了 UUID 这个提供稳定的系统唯一标识符的类的源码</p>
<h2 id="uuid-variant"><span class="section-num">1</span> UUID variant</h2>
<p>事实上是存在很多中 UID 的不同实现的的，但是 UUID 里面默认是使用 &ldquo;加盐&rdquo;(Leach-Salz)实现，但是也可以使用其他的实现。</p>
<h2 id="layout-of-variant2--leach-salz--uuid"><span class="section-num">2</span> Layout of variant2(Leach-Salz) UUID</h2>
<p>加盐的 UUID 的结构布局如下：最高位 (most significant) 的64 位长整型值由下面的的无符号位组成：</p>
<ul>
<li>0xFFFFFFFF00000000 time_low //时间的低位值</li>
<li>0x00000000FFFF0000 time_mid //时间的中位值</li>
<li>0x000000000000F000 version // 说明 UUID 的类型，1,2,3,4 分别代表 基于时间，基于 DEC，基于命名，和随机产生的 UUID</li>
<li>0x0000000000000FFF time_hi //时间的高位值</li>
</ul>
<p>最低位 (least significant) 的 64 位长整型由以下的无符号位组成：</p>
<ul>
<li>0xC000000000000000 variant //说明UUID 的结构布局，并且只有在类型 2 (加盐类型), 结构布局才有效</li>
<li>0x3FFF000000000000 clock_seq</li>
<li>0x0000FFFFFFFFFFFF node</li>
</ul>
<h2 id="uuid-constructor"><span class="section-num">3</span> UUID constructor</h2>
<p>UUID 类有两个构造函数，分别是 public 和 private 修饰的构造函数</p>
<h3 id="private-uuid"><span class="section-num">3.1</span> private UUID</h3>
<p>private 类型的构造函数以一个 byte 数组为构造参数：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Private constructor which uses a byte array to construct the new UUID.
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="nf">UUID</span><span class="p">(</span><span class="kt">byte</span><span class="o">[]</span><span class="w"> </span><span class="n">data</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">long</span><span class="w"> </span><span class="n">msb</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">long</span><span class="w"> </span><span class="n">lsb</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">assert</span><span class="w"> </span><span class="n">data</span><span class="p">.</span><span class="na">length</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">16</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s">&#34;data must be 16 bytes in length&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="o">=</span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">&lt;</span><span class="n">8</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">msb</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">msb</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="n">8</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="p">(</span><span class="n">data</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">0xff</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="o">=</span><span class="n">8</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">&lt;</span><span class="n">16</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">lsb</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">lsb</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="n">8</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="p">(</span><span class="n">data</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">0xff</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">this</span><span class="p">.</span><span class="na">mostSigBits</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">msb</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">this</span><span class="p">.</span><span class="na">leastSigBits</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">lsb</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>private 构造器完成的工作主要是通过左移位，与运算和或运算对 mostSigBit 和 leastSigBit 赋值。 private的构造函数只能在类本身被调用, 该构造器的用法会在接下来阐述。</p>
<h3 id="public-uuid"><span class="section-num">3.2</span> public UUID</h3>
<p>public 类型的构造器接受两个 <code>long</code> 类型的参数，即上面提到的最高位和最低位：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Constructs a new {@code UUID} using the specified data.  {@code
</span></span></span><span class="line"><span class="cl"><span class="cm"> * mostSigBits} is used for the most significant 64 bits of the {@code
</span></span></span><span class="line"><span class="cl"><span class="cm"> * UUID} and {@code leastSigBits} becomes the least significant 64 bits of
</span></span></span><span class="line"><span class="cl"><span class="cm"> * the {@code UUID}.
</span></span></span><span class="line"><span class="cl"><span class="cm"> *
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @param  mostSigBits
</span></span></span><span class="line"><span class="cl"><span class="cm"> *         The most significant bits of the {@code UUID}
</span></span></span><span class="line"><span class="cl"><span class="cm"> *
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @param  leastSigBits
</span></span></span><span class="line"><span class="cl"><span class="cm"> *         The least significant bits of the {@code UUID}
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="nf">UUID</span><span class="p">(</span><span class="kt">long</span><span class="w"> </span><span class="n">mostSigBits</span><span class="p">,</span><span class="w"> </span><span class="kt">long</span><span class="w"> </span><span class="n">leastSigBits</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">this</span><span class="p">.</span><span class="na">mostSigBits</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mostSigBits</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">this</span><span class="p">.</span><span class="na">leastSigBits</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">leastSigBits</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>使用最高位和最低位的值来构造 UUID, 而最高位和最低位的赋值是在 private 的构造器里面完成的。</p>
<h2 id="uuid-type"><span class="section-num">4</span> UUID type</h2>
<h3 id="type-4-randomly-generated-uuid"><span class="section-num">4.1</span> type 4 &ndash; randomly generated UUID</h3>
<p>现在就看看使用频率最高的 UUID 类型 &ndash; 随机的 UUID 以及随机生成 UUID 的函数：
<code>randomUUID()</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Static factory to retrieve a type 4 (pseudo randomly generated) UUID.
</span></span></span><span class="line"><span class="cl"><span class="cm"> *
</span></span></span><span class="line"><span class="cl"><span class="cm"> * The {@code UUID} is generated using a cryptographically strong pseudo
</span></span></span><span class="line"><span class="cl"><span class="cm"> * random number generator.
</span></span></span><span class="line"><span class="cl"><span class="cm"> *
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @return  A randomly generated {@code UUID}
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="n">UUID</span><span class="w"> </span><span class="nf">randomUUID</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">SecureRandom</span><span class="w"> </span><span class="n">ng</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Holder</span><span class="p">.</span><span class="na">numberGenerator</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">byte</span><span class="o">[]</span><span class="w"> </span><span class="n">randomBytes</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">byte</span><span class="o">[</span><span class="n">16</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">ng</span><span class="p">.</span><span class="na">nextBytes</span><span class="p">(</span><span class="n">randomBytes</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">randomBytes</span><span class="o">[</span><span class="n">6</span><span class="o">]</span><span class="w">  </span><span class="o">&amp;=</span><span class="w"> </span><span class="n">0x0f</span><span class="p">;</span><span class="w">  </span><span class="cm">/* clear version        */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">randomBytes</span><span class="o">[</span><span class="n">6</span><span class="o">]</span><span class="w">  </span><span class="o">|=</span><span class="w"> </span><span class="n">0x40</span><span class="p">;</span><span class="w">  </span><span class="cm">/* set to version 4     */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">randomBytes</span><span class="o">[</span><span class="n">8</span><span class="o">]</span><span class="w">  </span><span class="o">&amp;=</span><span class="w"> </span><span class="n">0x3f</span><span class="p">;</span><span class="w">  </span><span class="cm">/* clear variant        */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">randomBytes</span><span class="o">[</span><span class="n">8</span><span class="o">]</span><span class="w">  </span><span class="o">|=</span><span class="w"> </span><span class="n">0x80</span><span class="p">;</span><span class="w">  </span><span class="cm">/* set to IETF variant  */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">UUID</span><span class="p">(</span><span class="n">randomBytes</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>关于调用到的 <code>Holder</code> 变量的定义：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm"> * The random number generator used by this class to create random
</span></span></span><span class="line"><span class="cl"><span class="cm"> * based UUIDs. In a holder class to defer initialization until needed.
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kd">class</span> <span class="nc">Holder</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">static</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="n">SecureRandom</span><span class="w"> </span><span class="n">numberGenerator</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">SecureRandom</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>上面用到 <code>java.security.SecureRandom</code> 类来生成字节数组， <code>SecureRandom</code> 是被认为是达到了加密强度 (cryptographically strong) 并且因为不同的 JVM 而有不同的实现的。所以可以保证产生足够 &ldquo;随机&quot;的随机数以保证 UUID 的唯一性。</p>
<p>然后在即将用来构造的 UUID 的字节数组重置和添加关于 UUID 的相关信息，例如版本，类型信息等，然后把处理好的字节数组传到 private 的构造器以构造 UUID。这里的<code>randomUUID</code> 静态方法就是通过静态工厂的方式构造 UUID.</p>
<h3 id="type-3-name-based-uuid"><span class="section-num">4.2</span> type 3 &ndash; name-based UUID</h3>
<p>在上面关于 UUID 结构布局的时候提到，UUID 有四种类型的实现，而类型3 就是基于命名的实现：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Static factory to retrieve a type 3 (name based) {@code UUID} based on
</span></span></span><span class="line"><span class="cl"><span class="cm"> * the specified byte array.
</span></span></span><span class="line"><span class="cl"><span class="cm"> *
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @param  name
</span></span></span><span class="line"><span class="cl"><span class="cm"> *         A byte array to be used to construct a {@code UUID}
</span></span></span><span class="line"><span class="cl"><span class="cm"> *
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @return  A {@code UUID} generated from the specified array
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="n">UUID</span><span class="w"> </span><span class="nf">nameUUIDFromBytes</span><span class="p">(</span><span class="kt">byte</span><span class="o">[]</span><span class="w"> </span><span class="n">name</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">MessageDigest</span><span class="w"> </span><span class="n">md</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">try</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">md</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">MessageDigest</span><span class="p">.</span><span class="na">getInstance</span><span class="p">(</span><span class="s">&#34;MD5&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">NoSuchAlgorithmException</span><span class="w"> </span><span class="n">nsae</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">throw</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">InternalError</span><span class="p">(</span><span class="s">&#34;MD5 not supported&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">nsae</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">byte</span><span class="o">[]</span><span class="w"> </span><span class="n">md5Bytes</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">md</span><span class="p">.</span><span class="na">digest</span><span class="p">(</span><span class="n">name</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">md5Bytes</span><span class="o">[</span><span class="n">6</span><span class="o">]</span><span class="w">  </span><span class="o">&amp;=</span><span class="w"> </span><span class="n">0x0f</span><span class="p">;</span><span class="w">  </span><span class="cm">/* clear version        */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">md5Bytes</span><span class="o">[</span><span class="n">6</span><span class="o">]</span><span class="w">  </span><span class="o">|=</span><span class="w"> </span><span class="n">0x30</span><span class="p">;</span><span class="w">  </span><span class="cm">/* set to version 3     */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">md5Bytes</span><span class="o">[</span><span class="n">8</span><span class="o">]</span><span class="w">  </span><span class="o">&amp;=</span><span class="w"> </span><span class="n">0x3f</span><span class="p">;</span><span class="w">  </span><span class="cm">/* clear variant        */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">md5Bytes</span><span class="o">[</span><span class="n">8</span><span class="o">]</span><span class="w">  </span><span class="o">|=</span><span class="w"> </span><span class="n">0x80</span><span class="p">;</span><span class="w">  </span><span class="cm">/* set to IETF variant  */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">UUID</span><span class="p">(</span><span class="n">md5Bytes</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><code>MessageDigest</code> 是 JDK 提供用来计算散列值的类，使用的散列算法包括Sha-1,Sha-256 或者是 MD5 等等。</p>
<p><code>nameUUIDFromBytes</code> 使用 MD5 算法计算传进来的参数 name 的散列值，然后在散列值重置，添加 UUID 信息，然后再使用生成的散列值 (字节数组)传递给 private 构造器以构造 UUID.</p>
<p>这里的 <code>nameUUIDFromBytes</code> 静态方法也是通过静态工厂的方式构造 UUID.</p>
<h3 id="type-2-dec-security"><span class="section-num">4.3</span> type 2 &ndash; DEC security</h3>
<p>在 JDK 的 UUID 类中并未提供 基于 DEC 类型的 UUID 的实现。</p>
<h3 id="type-1-time-based-uuid"><span class="section-num">4.4</span> type 1 &ndash; time-based UUID</h3>
<p>与基于命名和随机生成的 UUID 都有一个静态工厂方法不一样， 基于时间的 UUID 并不存在静态工厂方法，time-based UUID 是基于一系列相关的方法的：</p>
<h4 id="timestamp"><span class="section-num">4.4.1</span> timestamp</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">long</span><span class="w"> </span><span class="nf">timestamp</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">version</span><span class="p">()</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">throw</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">UnsupportedOperationException</span><span class="p">(</span><span class="s">&#34;Not a time-based UUID&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="p">(</span><span class="n">mostSigBits</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">0x0FFFL</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="n">48</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="o">|</span><span class="w"> </span><span class="p">((</span><span class="n">mostSigBits</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="n">16</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">0x0FFFFL</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="n">32</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="o">|</span><span class="w"> </span><span class="n">mostSigBits</span><span class="w"> </span><span class="o">&gt;&gt;&gt;</span><span class="w"> </span><span class="n">32</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>60 个bit长的时间戳是由上面提到的 <code>time_low</code> <code>time_mid</code> <code>time_hi</code> 构造而成的。</p>
<p>而时间的计算是从 UTC 时间的 1582 年 10月 15 的凌晨开始算起，结果的值域在 100-nanosecond 之间。</p>
<p>但是这个时间戳的值只是对基于时间的 UUID 有效的，对于其他类型的 UUID, <code>timestamp()</code> 方法会抛出<code>UnsuportedOperationException</code>异常。</p>
<h4 id="clocksequence"><span class="section-num">4.4.2</span> clockSequence()</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">clockSequence</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">version</span><span class="p">()</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">throw</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">UnsupportedOperationException</span><span class="p">(</span><span class="s">&#34;Not a time-based UUID&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="p">)((</span><span class="n">leastSigBits</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">0x3FFF000000000000L</span><span class="p">)</span><span class="w"> </span><span class="o">&gt;&gt;&gt;</span><span class="w"> </span><span class="n">48</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>14 个 bit 长的时钟序列值是从 该UUID 的时钟序列域构造出来的(clock sequence filed).</p>
<p>而时钟序列域通常是用来保证基于时间的 UUID 的唯一性。跟 <code>timestamp()</code> 函数一样， <code>clockSequence()</code> 函数也只对基于时间的 UUID 有效。 对于其他类型的 UUID, 它会抛出<code>UnsuportedOperationException</code>异常。</p>
<h4 id="node"><span class="section-num">4.4.3</span> node()</h4>
<p>48 个 bit 长的节点值是从该 UUID 的节点域 (node filed) 构造出来的。节点域通过保存运行 JVM 机器的局域网地址 (IEEE 802) 来保证该机器生成 UUID 的空间唯一性。</p>
<p>和上述方法一样， <code>node()</code> 方法只对基于时间的 UUID 有效，对于其他类型的 UUID 该方法会抛出<code>UnsuportedOperationException</code>异常。</p>
<hr>
<p>对应 field 的图示</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">0                   1                   2                   3
</span></span><span class="line"><span class="cl">0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
</span></span><span class="line"><span class="cl">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</span></span><span class="line"><span class="cl">|                          time_low                             |
</span></span><span class="line"><span class="cl">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</span></span><span class="line"><span class="cl">|       time_mid                |         time_hi_and_version   |
</span></span><span class="line"><span class="cl">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</span></span><span class="line"><span class="cl">|clk_seq_hi_res |  clk_seq_low  |         node (0-1)            |
</span></span><span class="line"><span class="cl">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</span></span><span class="line"><span class="cl">|                         node (2-5)                            |
</span></span><span class="line"><span class="cl">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="fromstring-tostring"><span class="section-num">5</span> FromString()/ToString()</h2>
<h3 id="tostring"><span class="section-num">5.1</span> toString()</h3>
<p>以字符串的形式表示 UUID, 格式说明：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="n">hexDigit</span>               <span class="o">=</span>
</span></span><span class="line"><span class="cl">	<span class="s2">&#34;0&#34;</span> <span class="o">|</span> <span class="s2">&#34;1&#34;</span> <span class="o">|</span> <span class="s2">&#34;2&#34;</span> <span class="o">|</span> <span class="s2">&#34;3&#34;</span> <span class="o">|</span> <span class="s2">&#34;4&#34;</span> <span class="o">|</span> <span class="s2">&#34;5&#34;</span> <span class="o">|</span> <span class="s2">&#34;6&#34;</span> <span class="o">|</span> <span class="s2">&#34;7&#34;</span> <span class="o">|</span> <span class="s2">&#34;8&#34;</span> <span class="o">|</span> <span class="s2">&#34;9&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="o">|</span> <span class="s2">&#34;a&#34;</span> <span class="o">|</span> <span class="s2">&#34;b&#34;</span> <span class="o">|</span> <span class="s2">&#34;c&#34;</span> <span class="o">|</span> <span class="s2">&#34;d&#34;</span> <span class="o">|</span> <span class="s2">&#34;e&#34;</span> <span class="o">|</span> <span class="s2">&#34;f&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="o">|</span> <span class="s2">&#34;A&#34;</span> <span class="o">|</span> <span class="s2">&#34;B&#34;</span> <span class="o">|</span> <span class="s2">&#34;C&#34;</span> <span class="o">|</span> <span class="s2">&#34;D&#34;</span> <span class="o">|</span> <span class="s2">&#34;E&#34;</span> <span class="o">|</span> <span class="s2">&#34;F&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">hexOctet</span>               <span class="o">=</span> <span class="o">&lt;</span><span class="n">hexDigit</span><span class="o">&gt;&lt;</span><span class="n">hexDigit</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">time_low</span>               <span class="o">=</span> <span class="mi">4</span><span class="o">*&lt;</span><span class="n">hexOctet</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">time_mid</span>               <span class="o">=</span> <span class="mi">2</span><span class="o">*&lt;</span><span class="n">hexOctet</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">time_high_and_version</span>  <span class="o">=</span> <span class="mi">2</span><span class="o">*&lt;</span><span class="n">hexOctet</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">variant_and_sequence</span>   <span class="o">=</span> <span class="mi">2</span><span class="o">*&lt;</span><span class="n">hexOctet</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">node</span>                   <span class="o">=</span> <span class="mi">6</span><span class="o">*&lt;</span><span class="n">hexOctet</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">UUID</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">time_low</span><span class="o">&gt;</span> <span class="s2">&#34;-&#34;</span> <span class="o">&lt;</span><span class="n">time_mid</span><span class="o">&gt;</span> <span class="s2">&#34;-&#34;</span> <span class="o">&lt;</span><span class="n">time_high_and_version</span><span class="o">&gt;</span> <span class="s2">&#34;-&#34;</span> <span class="s2">&#34;variant_and_sequence&#34;</span> <span class="s2">&#34;-&#34;</span> <span class="o">&lt;</span><span class="n">node</span><span class="o">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>而关于这些不同 field 的大小，之前的内容已经有图示，需要的可以去回顾。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/** Returns val represented by the specified number of hex digits. */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="nf">digits</span><span class="p">(</span><span class="kt">long</span><span class="w"> </span><span class="n">val</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">digits</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">long</span><span class="w"> </span><span class="n">hi</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">1L</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="p">(</span><span class="n">digits</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">4</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">Long</span><span class="p">.</span><span class="na">toHexString</span><span class="p">(</span><span class="n">hi</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="p">(</span><span class="n">val</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="p">(</span><span class="n">hi</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">1</span><span class="p">))).</span><span class="na">substring</span><span class="p">(</span><span class="n">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="nf">toString</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="p">(</span><span class="n">digits</span><span class="p">(</span><span class="n">mostSigBits</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="n">32</span><span class="p">,</span><span class="w"> </span><span class="n">8</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s">&#34;-&#34;</span><span class="w"> </span><span class="o">+</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="n">digits</span><span class="p">(</span><span class="n">mostSigBits</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="n">16</span><span class="p">,</span><span class="w"> </span><span class="n">4</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s">&#34;-&#34;</span><span class="w"> </span><span class="o">+</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="n">digits</span><span class="p">(</span><span class="n">mostSigBits</span><span class="p">,</span><span class="w"> </span><span class="n">4</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s">&#34;-&#34;</span><span class="w"> </span><span class="o">+</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="n">digits</span><span class="p">(</span><span class="n">leastSigBits</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="n">48</span><span class="p">,</span><span class="w"> </span><span class="n">4</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s">&#34;-&#34;</span><span class="w"> </span><span class="o">+</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="n">digits</span><span class="p">(</span><span class="n">leastSigBits</span><span class="p">,</span><span class="w"> </span><span class="n">12</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="fromstring"><span class="section-num">5.2</span> fromString()</h3>
<p>与 <code>toString()</code> 函数功能相反， <code>fromString()</code> 函数的作用就是将字符串形式的对象解码成 UUID 对象：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="n">UUID</span><span class="w"> </span><span class="nf">fromString</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">name</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">String</span><span class="o">[]</span><span class="w"> </span><span class="n">components</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">name</span><span class="p">.</span><span class="na">split</span><span class="p">(</span><span class="s">&#34;-&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">components</span><span class="p">.</span><span class="na">length</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">5</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">throw</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">IllegalArgumentException</span><span class="p">(</span><span class="s">&#34;Invalid UUID string: &#34;</span><span class="o">+</span><span class="n">name</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="o">=</span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">&lt;</span><span class="n">5</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">components</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;0x&#34;</span><span class="o">+</span><span class="n">components</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">long</span><span class="w"> </span><span class="n">mostSigBits</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Long</span><span class="p">.</span><span class="na">decode</span><span class="p">(</span><span class="n">components</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="p">).</span><span class="na">longValue</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">mostSigBits</span><span class="w"> </span><span class="o">&lt;&lt;=</span><span class="w"> </span><span class="n">16</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">mostSigBits</span><span class="w"> </span><span class="o">|=</span><span class="w"> </span><span class="n">Long</span><span class="p">.</span><span class="na">decode</span><span class="p">(</span><span class="n">components</span><span class="o">[</span><span class="n">1</span><span class="o">]</span><span class="p">).</span><span class="na">longValue</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">mostSigBits</span><span class="w"> </span><span class="o">&lt;&lt;=</span><span class="w"> </span><span class="n">16</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">mostSigBits</span><span class="w"> </span><span class="o">|=</span><span class="w"> </span><span class="n">Long</span><span class="p">.</span><span class="na">decode</span><span class="p">(</span><span class="n">components</span><span class="o">[</span><span class="n">2</span><span class="o">]</span><span class="p">).</span><span class="na">longValue</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">long</span><span class="w"> </span><span class="n">leastSigBits</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Long</span><span class="p">.</span><span class="na">decode</span><span class="p">(</span><span class="n">components</span><span class="o">[</span><span class="n">3</span><span class="o">]</span><span class="p">).</span><span class="na">longValue</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">leastSigBits</span><span class="w"> </span><span class="o">&lt;&lt;=</span><span class="w"> </span><span class="n">48</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">leastSigBits</span><span class="w"> </span><span class="o">|=</span><span class="w"> </span><span class="n">Long</span><span class="p">.</span><span class="na">decode</span><span class="p">(</span><span class="n">components</span><span class="o">[</span><span class="n">4</span><span class="o">]</span><span class="p">).</span><span class="na">longValue</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">UUID</span><span class="p">(</span><span class="n">mostSigBits</span><span class="p">,</span><span class="w"> </span><span class="n">leastSigBits</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="使用场景"><span class="section-num">6</span> 使用场景</h2>
<p>UUID 一般用来生成全局唯一标识符，那么 UUID 是否能保证唯一呢？以<code>UUID.randomUUID()</code> 生成的 UUID 为例，从上面的源码，除了 version 和 variant是固定值之外，另外的 14 byte 都是足够随机的.</p>
<p>如果你生成的是 128 bit 长的 UUID 的话，理论上是 2的14x8=114次方才会有一次重复。这是个什么概念的呢？ 即你每秒能 生成 10 亿个 UUID, 在100年以后，你就有 50%的可能性产生一个重复的 UUID了，是不是很开心呢？</p>
<p>即使你使用 <code>UUID.randomUUID.getLeastSignificant()</code> 生成长整型的ID, 你理论上需要生成 2的56次方个 ID 后才会产生一个重复的 ID, 所以你可以放心地使用 UUID 了 :)</p>
]]></content:encoded>
    </item>
    <item>
      <title>Spock 一个优雅的Groovy/Java测试框架</title>
      <link>https://ramsayleung.github.io/zh/post/2017/spock/</link>
      <pubDate>Tue, 11 Apr 2017 00:00:00 +0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2017/spock/</guid>
      <description>an introduction about spock</description>
      <content:encoded><![CDATA[<p>因为需要编写 RESTful api 测试的缘故，重拾了 Spock 这个适用于 Groovy/Java 的测试
框架，顺便把以前写的一篇旧文整理了一下，权当重温。</p>
<h2 id="关于-spock"><span class="section-num">1</span> 关于 Spock</h2>
<p>Spock 是一个适用于 Java(Groovy) 的一个优雅并且全面的测试框架, 说 Spock 全面，是
因为 Spock 集成了现有的 Java 测试库；至于为什么赞美 Spock 优雅，阅读完全文你就会
有体会的了</p>
<figure>
    <img loading="lazy" src="http://ww3.sinaimg.cn/large/cd613764jw1f71jlmu3hpj20i70eemy7.jpg"/> 
</figure>

<p>因为基于 Groovy, 使得 Spock 可以更容易地写出表达能力更强的测试用例。又因为它内置
了 Junit Runner, 所以 Spock 兼容大部分的 IDE，测试工具，和持续集成服务器。接下来
就介绍一下 Spock 的特性</p>
<h2 id="spock-特性"><span class="section-num">2</span> Spock 特性</h2>
<ol>
<li>内置支持 mocking stubbing，可以很容易地模拟复杂的类的行为</li>
<li>Spock 实现了 BDD 范式(behavior-driven development)</li>
<li>与现有的 Build 工具集成，可以用来测试后端代码，Web 页面等等</li>
<li>兼容性强，内置 Junit Runner, 可以像运行 Junit 那样运行 Spock，甚至可以在同一个项
目里面同时使用两种测试框架</li>
<li>取长补短，吸收了现有框架的优点，并加以改进</li>
<li>Spock 代码风格简短，易读，表达性强，扩展性强，还有更清晰显示 bug</li>
</ol>
<h2 id="为什么是-spock"><span class="section-num">3</span> 为什么是 Spock</h2>
<p>Spock 似乎有很多不错的特性，但是为什么有 Junit 这个那么强大的测试框架, 还要去
使用 Spock 呢? 甚至可以用 Spock 来代替 Junit 呢? 下面就用一些简单的例子来诠释
一下Spock 的强大. 以一个简单的加法为例：</p>
<figure>
    <img loading="lazy" src="http://ww1.sinaimg.cn/large/cd613764jw1f71jm5dserj20ek04kmxc.jpg"/> 
</figure>

<p>Junit 的测试用例</p>
<figure>
    <img loading="lazy" src="http://ww4.sinaimg.cn/large/cd613764jw1f71jmipwsmj20hy07xabc.jpg"/> 
</figure>

<p>Spock 的测试用例</p>
<figure>
    <img loading="lazy" src="http://ww2.sinaimg.cn/large/cd613764gw1f71jn4vlzoj20nn09vmym.jpg"/> 
</figure>

<p>是否觉得耳目一新呢? 因为 Spock 支持以类人类语言的形式来定义方法名, 所以对比
Junit 的测试用例, 你会发现 Spock 的测试用例, 只需函数名, 就可以清晰了解这个测
试的用途</p>
<p>接下来, 再写一个乘法的类, 然后人为地加入一个 Bug, 再看看 Junit 和 Spock 的表现</p>
<figure>
    <img loading="lazy" src="http://ww1.sinaimg.cn/large/cd613764gw1f71jnieycnj20lz047dfz.jpg"/> 
</figure>

<p>如果测试 fail, 会出现什么情况呢?</p>
<figure>
    <img loading="lazy" src="http://ww1.sinaimg.cn/large/cd613764gw1f71jnxh6wtj20sq0gpdic.jpg"/> 
</figure>

<figure>
    <img loading="lazy" src="http://ww2.sinaimg.cn/large/cd613764jw1f71job6us9j20p308iq42.jpg"/> 
</figure>

<p>显而易见，Junit 只是显示了结果不等，却没办法究竟判断是加法还是乘法出现了 bug，
但是 Spock 就很清晰地给出了答案。不难看出 Spock 的语法更加简洁, 优雅; 此外, 得
益于 Spock 独特的命名方式，只需查看函数名字便可以了解测试用例的目的，无需额外
的注释。而这只是 Spock 和 Junit 的一部分差异，其他的差异，接下来会继续说明。</p>
<h2 id="spock-语法"><span class="section-num">4</span> Spock 语法</h2>
<h3 id="specification"><span class="section-num">4.1</span> Specification</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">MyFirstSpecification</span><span class="w"> </span><span class="n">extend</span><span class="w"> </span><span class="n">Specification</span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">//fields</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">//fixture methods</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">//feature methods</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">//helper methods</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Specification 是指一个继承于 <strong>spock.lang.Specification</strong> 的一个 Groovy 类. 而
Specification 的名字一般是跟系统或者业务逻辑有关的组合词，例如之前的AdderSpec</p>
<h3 id="fields"><span class="section-num">4.2</span> Fields</h3>
<p>实例化一个类</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="kt">def</span> <span class="n">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassUnderSpecification</span><span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="kt">def</span> <span class="n">coll</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Collaborator</span><span class="o">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="feature-methods"><span class="section-num">4.3</span> Feature Methods</h3>
<p>Feature Methods 指具体的测试用例方法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="kt">def</span> <span class="s2">&#34;pushing an element on the stack&#34;</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// blocks go here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="fixture-methods"><span class="section-num">4.4</span> Fixture Methods</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="kt">def</span> <span class="nf">setup</span><span class="o">()</span> <span class="o">{}</span>          <span class="c1">// run before every feature method
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">def</span> <span class="nf">cleanup</span><span class="o">()</span> <span class="o">{}</span>        <span class="c1">// run after every feature method
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">def</span> <span class="nf">setupSpec</span><span class="o">()</span> <span class="o">{}</span>     <span class="c1">// run before the first feature method
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">def</span> <span class="nf">cleanupSpec</span><span class="o">()</span> <span class="o">{}</span>   <span class="c1">// run after the last feature method
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>关于 Fixture Methods 的作用，笔者引用一下官方文档的一段话</p>
<blockquote>
<p>Fixture methods are responsible for setting up and cleaning up the environment in
which feature methods are run. Usually it’s a good idea to use a fresh fixture for
every feature method, which is what the setup() and cleanup() methods are for.
All fixture methods are optional.</p>
</blockquote>
<p>简而言之， <strong>Fixture methodr</strong> 是进行初始化或者收尾工作的。为了更好地理解 Spock
的特性，可以用 Spock 和 Junit 进行比较，(图截自官网)</p>
<figure>
    <img loading="lazy" src="http://ww4.sinaimg.cn/large/cd613764jw1f71josjimij20sl0g7jsr.jpg"/> 
</figure>

<p>以上就是 Spock 的基本用法， 也只能说是中规中矩，难言惊艳。那么，接下来介绍的
就是 Spock <strong>killer</strong> 级别的特性了</p>
<h3 id="blocks"><span class="section-num">4.5</span> Blocks</h3>
<p>关于 Blocks 的用法， 这里引用官网的一段话</p>
<blockquote>
<p>Spock has built-in support for implementing each of the conceptual phases of a
feature method. To this end, feature methods are structured into so-called blocks.
Blocks start with a label, and extend to the beginning of the next block, or the
end of the method. There are six kinds of blocks: setup, when, then, expect,
cleanup, and where blocks</p>
</blockquote>
<p>简而言之， 这些内置的功能强大的 blocks, 就是帮助开发者编写单元测试的语法糖</p>
<figure>
    <img loading="lazy" src="http://ww2.sinaimg.cn/large/cd613764jw1f71jpaxv52j20uv095q40.jpg"/> 
</figure>

<p>下面就了解一下不同 Block 的功能</p>
<h4 id="the-given-block"><span class="section-num">4.5.1</span> The <strong>given</strong>: block</h4>
<p><strong>given</strong>: 应该包含所有的初始化条件或者初始化类，例如你可以把要测试的类的实例化放在
<strong>given</strong>. 总而言之， <strong>given</strong> 就是放置所有单元测试开始前的准备工作的地方</p>
<h4 id="the-setup-block"><span class="section-num">4.5.2</span> The <strong>setup</strong>: block</h4>
<p><strong>setup</strong>: 笔者个人理解功能跟 <strong>given</strong> 很相似，所以初始化的时候可以二选一(笔者
个人推荐用 given，因为这样更符合 BDD 范式)</p>
<h4 id="the-when-blcok"><span class="section-num">4.5.3</span> The <strong>when</strong>: blcok</h4>
<p><strong>when</strong>: 是 Spock 测试中最重要的一部分，这里放置的就是你要测试的代码，和你如
何测试的用例，这里的测试代码应该尽可能地短。有经验的 Spock 用户可以直接看
<strong>when</strong>: block 就了解测试流程了</p>
<h4 id="the-then-block"><span class="section-num">4.5.4</span> The <strong>then</strong>: block</h4>
<p><strong>then</strong>: block 包含隐式的断言, 补充一下，Spock 是没有 assert 这个断言函数的，
Spock 使用的是 assertion, 笔者个人理解成这是一种隐式的断言。概括来说, <strong>then</strong>
就是放置你预期测试结果的地方。</p>
<p>现在已经把 given-when-then 粗略地解释了一下, 现在就通过代码阐述具体的用法.
首先确定一下需求; 假设现在要测试一个通过网站来销售电脑的电商平台, 如下图 (图
截自 java_test_with_spock 一书)</p>
<figure>
    <img loading="lazy" src="http://ww1.sinaimg.cn/large/cd613764gw1f71jyfgad2j20t90alq3n.jpg"/> 
</figure>

<p>然通过模拟用户添加商品到购物车, 以展示 Spock 的用法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">Product</span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">name</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">price</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">weight</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">Basket</span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">addProduct</span><span class="p">(</span><span class="n">Product</span><span class="w"> </span><span class="n">product</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">addProduct</span><span class="p">(</span><span class="n">product</span><span class="p">,</span><span class="n">1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">addProduct</span><span class="p">(</span><span class="n">Product</span><span class="w"> </span><span class="n">product</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">times</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">//some code about business</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">getCurrentWeight</span><span class="p">(){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">//</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">getProductTypesCount</span><span class="p">(){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">//</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>然后编写 Spock 的测试用例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="kt">def</span> <span class="s2">&#34;A basket with one product has equal weight&#34;</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nl">given:</span> <span class="s2">&#34;an empty basket and a Tv&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Product</span> <span class="n">tv</span><span class="o">=</span><span class="k">new</span> <span class="n">Product</span><span class="o">(</span><span class="nl">name:</span><span class="s2">&#34;bravia&#34;</span><span class="o">,</span><span class="nl">price:</span><span class="mi">1200</span><span class="o">,</span><span class="nl">weight:</span><span class="mi">18</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">Basket</span> <span class="n">basket</span><span class="o">=</span><span class="k">new</span> <span class="n">Basket</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nl">when:</span><span class="s2">&#34;user wants to buy the TV&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">basket</span><span class="o">.</span><span class="na">addProduct</span><span class="o">(</span><span class="n">tv</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nl">then:</span><span class="s2">&#34;basket weight is equal to the TV&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">basket</span><span class="o">.</span><span class="na">currentWeight</span><span class="o">==</span><span class="n">tv</span><span class="o">.</span><span class="na">weight</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>现在对 Spock 有一个初步的认识了。也可以使用 given-when-then 这 &ldquo;三板斧&rdquo; 来写
一些逻辑不是非常复杂的测试用例了。</p>
<h4 id="the-and-block"><span class="section-num">4.5.5</span> The <strong>and</strong>: block</h4>
<p><strong>and</strong>: 它的用法有点像语法糖，它自己本身是没有什么功能，它只是拿来扩展其他的
功能的. 用上面的例子来解释一下用法:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="kt">def</span> <span class="s2">&#34;A basket with one product has equal weight&#34;</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nl">given:</span> <span class="s2">&#34;an empty basket &#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Basket</span> <span class="n">basket</span><span class="o">=</span><span class="k">new</span> <span class="n">Basket</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nl">and:</span> <span class="s2">&#34;several products&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Product</span> <span class="n">tv</span><span class="o">=</span><span class="k">new</span> <span class="n">Product</span><span class="o">(</span><span class="nl">name:</span><span class="s2">&#34;bravia&#34;</span><span class="o">,</span><span class="nl">price:</span><span class="mi">1200</span><span class="o">,</span><span class="nl">weight:</span><span class="mi">18</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">Product</span> <span class="n">camera</span><span class="o">=</span><span class="k">new</span> <span class="n">Product</span><span class="o">(</span><span class="nl">name:</span><span class="s2">&#34;panasonic&#34;</span><span class="o">,</span><span class="nl">price:</span><span class="mi">350</span><span class="o">,</span><span class="nl">weight:</span><span class="mi">2</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">Product</span> <span class="n">hifi</span><span class="o">=</span><span class="k">new</span> <span class="n">Product</span><span class="o">(</span><span class="nl">name:</span><span class="s2">&#34;jvc&#34;</span><span class="o">,</span><span class="nl">price:</span><span class="mi">600</span><span class="o">,</span><span class="nl">weight:</span><span class="mi">5</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nl">when:</span><span class="s2">&#34;user wants to buy the TV abd the camera and the hifi&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">basket</span><span class="o">.</span><span class="na">addProduct</span><span class="o">(</span><span class="n">tv</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">basket</span><span class="o">.</span><span class="na">addProduct</span><span class="o">(</span><span class="n">camera</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">basket</span><span class="o">.</span><span class="na">addProduct</span><span class="o">(</span><span class="n">hifi</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nl">then:</span><span class="s2">&#34;basket weight is equal to all product weight&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">basket</span><span class="o">.</span><span class="na">currentWeight</span><span class="o">==(</span><span class="n">tv</span><span class="o">.</span><span class="na">weight</span><span class="o">+</span><span class="n">camera</span><span class="o">.</span><span class="na">weight</span><span class="o">+</span><span class="n">hifi</span><span class="o">.</span><span class="na">weight</span><span class="err">）</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>从上面的代码可以看出，given 和 and 都用来进行类初始化，只是根据 Basket 和
Product 类型进行了细分。如下图</p>
<figure>
    <img loading="lazy" src="http://ww1.sinaimg.cn/large/cd613764jw1f71jq4hwjlj20wt0e10uv.jpg"/> 
</figure>

<p>使用 <strong>and</strong> block 可以代码结构更简洁优雅. 此外, 如果 <strong>and</strong> 是紧跟在 <strong>when</strong> 后
面, 那么 <strong>and</strong> 就据有和 <strong>when</strong> block 一样的功能，依此类推</p>
<h4 id="the-expect-block"><span class="section-num">4.5.6</span> The <strong>expect</strong>: block</h4>
<p><strong>expect</strong> 是一个很强大的特性，它用很多种用法，最常用的用法就是把
given-when-then 都结合起来</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="kt">def</span> <span class="s2">&#34;An empty basket has no weight&#34;</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nl">expect:</span><span class="s2">&#34;zero weight when nothing is added&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">new</span> <span class="nf">Basket</span><span class="o">().</span><span class="na">currentWeight</span><span class="o">==</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>或者是以下这种形式</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="kt">def</span> <span class="s2">&#34;An empty basket has no weight(alternative)&#34;</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nl">given:</span><span class="s2">&#34;an empty basket&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Basket</span> <span class="n">basket</span><span class="o">=</span><span class="k">new</span> <span class="n">Basket</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nl">expect:</span><span class="s2">&#34;that the weight is 0&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">basket</span><span class="o">.</span><span class="na">currentWeight</span><span class="o">==</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>又或者用 <strong>expect</strong> 提前进行条件判断</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="kt">def</span> <span class="s2">&#34;A basket with two products weights as their sum (precondition)&#34;</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nl">given:</span> <span class="s2">&#34;an empty basket, a TV and a camera&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Product</span> <span class="n">tv</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Product</span><span class="o">(</span><span class="nl">name:</span><span class="s2">&#34;bravia&#34;</span><span class="o">,</span><span class="nl">price:</span><span class="mi">1200</span><span class="o">,</span><span class="nl">weight:</span><span class="mi">18</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">Product</span> <span class="n">camera</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Product</span><span class="o">(</span><span class="nl">name:</span><span class="s2">&#34;panasonic&#34;</span><span class="o">,</span><span class="nl">price:</span><span class="mi">350</span><span class="o">,</span><span class="nl">weight:</span><span class="mi">2</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">Basket</span> <span class="n">basket</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Basket</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nl">expect:</span><span class="s2">&#34;that nothing should be inside&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">basket</span><span class="o">.</span><span class="na">currentWeight</span> <span class="o">==</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="n">basket</span><span class="o">.</span><span class="na">productTypesCount</span> <span class="o">==</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* expect: block performs
</span></span></span><span class="line"><span class="cl"><span class="cm">     intermediate assertions*/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nl">when:</span> <span class="s2">&#34;user wants to buy the TV and the camera&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">basket</span><span class="o">.</span><span class="na">addProduct</span> <span class="n">tv</span>
</span></span><span class="line"><span class="cl">    <span class="n">basket</span><span class="o">.</span><span class="na">addProduct</span> <span class="n">camera</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nl">then:</span> <span class="s2">&#34;basket weight is equal to both camera and tv&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">basket</span><span class="o">.</span><span class="na">currentWeight</span> <span class="o">==</span> <span class="o">(</span><span class="n">tv</span><span class="o">.</span><span class="na">weight</span> <span class="o">+</span> <span class="n">camera</span><span class="o">.</span><span class="na">weight</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* then: block examines
</span></span></span><span class="line"><span class="cl"><span class="cm">     the final result*/</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>上面那个例子是在添加产品之前检查初始化条件，这种情况下，能更容易看出是哪里测试 fail</p>
<h4 id="the-clean-block"><span class="section-num">4.5.7</span> The <strong>clean</strong>: block</h4>
<p>clean 就相当于在所有的测试结束以后执行的操作，例如，如果在测试中新建了 IO 流，
就可以在 clean 里面关闭 IO 流，那样就可以保证代码的正确性了</p>
<h3 id="spock-killer-future"><span class="section-num">4.6</span> Spock killer future</h3>
<p>确定需求:（例子来自 Java_test_with_spock 一书），假设有一个核反应堆，这个反应
堆的系统组成：</p>
<ul>
<li>
<p>多个烟雾感应器(输入)</p>
</li>
<li>
<p>3 个辐射感应器(输入)</p>
</li>
<li>
<p>现在的压力值(输入</p>
</li>
<li>
<p>报警器(输出)</p>
</li>
<li>
<p>疏散命令(输出)</p>
</li>
<li>
<p>通知操作员关闭反应堆(输出)
系统如图</p>
<figure>
        <img loading="lazy" src="http://ww1.sinaimg.cn/large/cd613764jw1f71jsj8fqqj20vt0jlmzt.jpg"/> 
    </figure>

<p>系统相关设定:</p>
</li>
<li>
<p>如果压力值超过 150，报警器报警</p>
</li>
<li>
<p>如果 2 个或者更多的烟雾感应器被触发，那么报警器报警，通知操作员关闭反应堆</p>
</li>
<li>
<p>如果辐射值超过 100，警报器报警，通知操作员关闭反应堆，并马上疏散人群</p>
</li>
</ul>
<p>输入输出对应关系</p>
<figure>
    <img loading="lazy" src="http://ww4.sinaimg.cn/large/cd613764jw1f71jtabh47j20tm0k976p.jpg"/> 
</figure>

<p>现在，假如用 Junit 来写测试用例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RunWith</span><span class="p">(</span><span class="n">Parameterized</span><span class="p">.</span><span class="na">class</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">NuclearReactorTest</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">triggeredFireSensors</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">Float</span><span class="o">&gt;</span><span class="w"> </span><span class="n">radiationDataReadings</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">pressure</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="n">expectedAlarmStatus</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="n">expectedShutdownCommand</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">expectedMinutesToEvacuate</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="nf">NuclearReactorTest</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">pressure</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">triggeredFireSensors</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			      </span><span class="n">List</span><span class="o">&lt;</span><span class="n">Float</span><span class="o">&gt;</span><span class="w"> </span><span class="n">radiationDataReadings</span><span class="p">,</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="n">expectedAlarmStatus</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			      </span><span class="kt">boolean</span><span class="w"> </span><span class="n">expectedShutdownCommand</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">expectedMinutesToEvacuate</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">this</span><span class="p">.</span><span class="na">triggeredFireSensors</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">triggeredFireSensors</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">this</span><span class="p">.</span><span class="na">radiationDataReadings</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">radiationDataReadings</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">this</span><span class="p">.</span><span class="na">pressure</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">pressure</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">this</span><span class="p">.</span><span class="na">expectedAlarmStatus</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">expectedAlarmStatus</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">this</span><span class="p">.</span><span class="na">expectedShutdownCommand</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">expectedShutdownCommand</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">this</span><span class="p">.</span><span class="na">expectedMinutesToEvacuate</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">expectedMinutesToEvacuate</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@Test</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">nuclearReactorScenario</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">NuclearReactorMonitor</span><span class="w"> </span><span class="n">nuclearReactorMonitor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">NuclearReactorMonitor</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">nuclearReactorMonitor</span><span class="p">.</span><span class="na">feedFireSensorData</span><span class="p">(</span><span class="n">triggeredFireSensors</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">nuclearReactorMonitor</span><span class="p">.</span><span class="na">feedRadiationSensorData</span><span class="p">(</span><span class="n">radiationDataReadings</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">nuclearReactorMonitor</span><span class="p">.</span><span class="na">feedPressureInBar</span><span class="p">(</span><span class="n">pressure</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">NuclearReactorStatus</span><span class="w"> </span><span class="n">status</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">nuclearReactorMonitor</span><span class="p">.</span><span class="na">getCurrentStatus</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">assertEquals</span><span class="p">(</span><span class="s">&#34;Expected no alarm&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">expectedAlarmStatus</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		     </span><span class="n">status</span><span class="p">.</span><span class="na">isAlarmActive</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">assertEquals</span><span class="p">(</span><span class="s">&#34;No notifications&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">expectedShutdownCommand</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		     </span><span class="n">status</span><span class="p">.</span><span class="na">isShutDownNeeded</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">assertEquals</span><span class="p">(</span><span class="s">&#34;No notifications&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">expectedMinutesToEvacuate</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		     </span><span class="n">status</span><span class="p">.</span><span class="na">getEvacuationMinutes</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@Parameters</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="n">Collection</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">[]&gt;</span><span class="w"> </span><span class="nf">data</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">Arrays</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="p">.</span><span class="na">asList</span><span class="p">(</span><span class="k">new</span><span class="w"> </span><span class="n">Object</span><span class="o">[][]</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		    </span><span class="p">{</span><span class="w"> </span><span class="n">150</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Float</span><span class="o">&gt;</span><span class="p">(),</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w"> </span><span class="o">-</span><span class="n">1</span><span class="w"> </span><span class="p">},</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		    </span><span class="p">{</span><span class="w"> </span><span class="n">150</span><span class="p">,</span><span class="w"> </span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Float</span><span class="o">&gt;</span><span class="p">(),</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w"> </span><span class="o">-</span><span class="n">1</span><span class="w"> </span><span class="p">},</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		    </span><span class="p">{</span><span class="w"> </span><span class="n">150</span><span class="p">,</span><span class="w"> </span><span class="n">3</span><span class="p">,</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Float</span><span class="o">&gt;</span><span class="p">(),</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w"> </span><span class="o">-</span><span class="n">1</span><span class="w"> </span><span class="p">},</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		    </span><span class="p">{</span><span class="w"> </span><span class="n">150</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">Arrays</span><span class="p">.</span><span class="na">asList</span><span class="p">(</span><span class="n">110</span><span class="p">.</span><span class="na">4f</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">.</span><span class="na">3f</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">.</span><span class="na">0f</span><span class="p">),</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		      </span><span class="kc">true</span><span class="p">,</span><span class="w"> </span><span class="n">1</span><span class="w"> </span><span class="p">},</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		    </span><span class="p">{</span><span class="w"> </span><span class="n">150</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">Arrays</span><span class="p">.</span><span class="na">asList</span><span class="p">(</span><span class="n">45</span><span class="p">.</span><span class="na">3f</span><span class="p">,</span><span class="w"> </span><span class="n">10</span><span class="p">.</span><span class="na">3f</span><span class="p">,</span><span class="w"> </span><span class="n">47</span><span class="p">.</span><span class="na">7f</span><span class="p">),</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		      </span><span class="kc">false</span><span class="p">,</span><span class="w"> </span><span class="o">-</span><span class="n">1</span><span class="w"> </span><span class="p">},</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		    </span><span class="p">{</span><span class="w"> </span><span class="n">155</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">Arrays</span><span class="p">.</span><span class="na">asList</span><span class="p">(</span><span class="n">0</span><span class="p">.</span><span class="na">0f</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">.</span><span class="na">0f</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">.</span><span class="na">0f</span><span class="p">),</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		      </span><span class="o">-</span><span class="n">1</span><span class="w"> </span><span class="p">},</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		    </span><span class="p">{</span><span class="w"> </span><span class="n">170</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">Arrays</span><span class="p">.</span><span class="na">asList</span><span class="p">(</span><span class="n">0</span><span class="p">.</span><span class="na">0f</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">.</span><span class="na">0f</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">.</span><span class="na">0f</span><span class="p">),</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		      </span><span class="n">3</span><span class="w"> </span><span class="p">},</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		    </span><span class="p">{</span><span class="w"> </span><span class="n">180</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">Arrays</span><span class="p">.</span><span class="na">asList</span><span class="p">(</span><span class="n">110</span><span class="p">.</span><span class="na">4f</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">.</span><span class="na">3f</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">.</span><span class="na">0f</span><span class="p">),</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		      </span><span class="kc">true</span><span class="p">,</span><span class="w"> </span><span class="n">1</span><span class="w"> </span><span class="p">},</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		    </span><span class="p">{</span><span class="w"> </span><span class="n">500</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">Arrays</span><span class="p">.</span><span class="na">asList</span><span class="p">(</span><span class="n">110</span><span class="p">.</span><span class="na">4f</span><span class="p">,</span><span class="w"> </span><span class="n">300f</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">.</span><span class="na">0f</span><span class="p">),</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		      </span><span class="kc">true</span><span class="p">,</span><span class="w"> </span><span class="n">1</span><span class="w"> </span><span class="p">},</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		    </span><span class="p">{</span><span class="w"> </span><span class="n">30</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">Arrays</span><span class="p">.</span><span class="na">asList</span><span class="p">(</span><span class="n">110</span><span class="p">.</span><span class="na">4f</span><span class="p">,</span><span class="w"> </span><span class="n">1000f</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">.</span><span class="na">0f</span><span class="p">),</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		      </span><span class="kc">true</span><span class="p">,</span><span class="w"> </span><span class="n">1</span><span class="w"> </span><span class="p">},</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		    </span><span class="p">{</span><span class="w"> </span><span class="n">155</span><span class="p">,</span><span class="w"> </span><span class="n">4</span><span class="p">,</span><span class="w"> </span><span class="n">Arrays</span><span class="p">.</span><span class="na">asList</span><span class="p">(</span><span class="n">0</span><span class="p">.</span><span class="na">0f</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">.</span><span class="na">0f</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">.</span><span class="na">0f</span><span class="p">),</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		      </span><span class="o">-</span><span class="n">1</span><span class="w"> </span><span class="p">},</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		    </span><span class="p">{</span><span class="w"> </span><span class="n">170</span><span class="p">,</span><span class="w"> </span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">Arrays</span><span class="p">.</span><span class="na">asList</span><span class="p">(</span><span class="n">45</span><span class="p">.</span><span class="na">3f</span><span class="p">,</span><span class="w"> </span><span class="n">10</span><span class="p">.</span><span class="na">3f</span><span class="p">,</span><span class="w"> </span><span class="n">47</span><span class="p">.</span><span class="na">7f</span><span class="p">),</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		      </span><span class="kc">true</span><span class="p">,</span><span class="w"> </span><span class="n">3</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>各种输入输出数据以及 getter setter 耦合在一起，代码变得难读起来. 此外，除了可
读性， 还有更严重的问题，假如需求要增加一个输入或者增加一个输出呢， 就只能改
变数据结构， 这样的代码真的难以维护。不知道 Spock 的表现又如何呢？</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">NuclearReactorSpec</span> <span class="kd">extends</span> <span class="n">spock</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Specification</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">def</span> <span class="s2">&#34;Complete test of all nuclear scenarios&#34;</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nl">given:</span> <span class="s2">&#34;a nuclear reactor and sensor data&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="n">NuclearReactorMonitor</span> <span class="n">nuclearReactorMonitor</span> <span class="o">=</span><span class="k">new</span> <span class="n">NuclearReactorMonitor</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nl">when:</span> <span class="s2">&#34;we examine the sensor data&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="n">nuclearReactorMonitor</span><span class="o">.</span><span class="na">feedFireSensorData</span><span class="o">(</span><span class="n">fireSensors</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">nuclearReactorMonitor</span><span class="o">.</span><span class="na">feedRadiationSensorData</span><span class="o">(</span><span class="n">radiation</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">nuclearReactorMonitor</span><span class="o">.</span><span class="na">feedPressureInBar</span><span class="o">(</span><span class="n">pressure</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">NuclearReactorStatus</span> <span class="n">status</span> <span class="o">=</span> <span class="n">nuclearReactorMonitor</span><span class="o">.</span><span class="na">getCurrentStatus</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nl">then:</span> <span class="s2">&#34;we act according to safety requirements&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="n">status</span><span class="o">.</span><span class="na">alarmActive</span> <span class="o">==</span> <span class="n">alarm</span>
</span></span><span class="line"><span class="cl">	<span class="n">status</span><span class="o">.</span><span class="na">shutDownNeeded</span> <span class="o">==</span> <span class="n">shutDown</span>
</span></span><span class="line"><span class="cl">	<span class="n">status</span><span class="o">.</span><span class="na">evacuationMinutes</span> <span class="o">==</span> <span class="n">evacuation</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nl">where:</span> <span class="s2">&#34;possible nuclear incidents are:&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="n">pressure</span> <span class="o">|</span> <span class="n">fireSensors</span> <span class="o">|</span> <span class="n">radiation</span>             <span class="o">||</span> <span class="n">alarm</span> <span class="o">|</span> <span class="n">shutDown</span> <span class="o">|</span> <span class="n">evacuation</span>
</span></span><span class="line"><span class="cl">	<span class="mi">150</span>      <span class="o">|</span> <span class="mi">0</span>           <span class="o">|</span> <span class="o">[]</span>                    <span class="o">||</span> <span class="kc">false</span> <span class="o">|</span> <span class="kc">false</span>    <span class="o">|</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">	<span class="mi">150</span>      <span class="o">|</span> <span class="mi">1</span>           <span class="o">|</span> <span class="o">[]</span>                    <span class="o">||</span> <span class="kc">true</span>  <span class="o">|</span> <span class="kc">false</span>    <span class="o">|</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">	<span class="mi">150</span>      <span class="o">|</span> <span class="mi">3</span>           <span class="o">|</span> <span class="o">[]</span>                    <span class="o">||</span> <span class="kc">true</span>  <span class="o">|</span> <span class="kc">true</span>     <span class="o">|</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">	<span class="mi">150</span>      <span class="o">|</span> <span class="mi">0</span>           <span class="o">|</span> <span class="o">[</span><span class="mf">110.4f</span> <span class="o">,</span><span class="mf">0.3f</span><span class="o">,</span> <span class="mf">0.0f</span><span class="o">]</span>  <span class="o">||</span> <span class="kc">true</span>  <span class="o">|</span> <span class="kc">true</span>     <span class="o">|</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">	<span class="mi">150</span>      <span class="o">|</span> <span class="mi">0</span>           <span class="o">|</span> <span class="o">[</span><span class="mf">45.3f</span> <span class="o">,</span><span class="mf">10.3f</span><span class="o">,</span> <span class="mf">47.7f</span><span class="o">]</span> <span class="o">||</span> <span class="kc">false</span> <span class="o">|</span> <span class="kc">false</span>    <span class="o">|</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">	<span class="mi">155</span>      <span class="o">|</span> <span class="mi">0</span>           <span class="o">|</span> <span class="o">[</span><span class="mf">0.0f</span> <span class="o">,</span><span class="mf">0.0f</span><span class="o">,</span> <span class="mf">0.0f</span><span class="o">]</span>    <span class="o">||</span> <span class="kc">true</span>  <span class="o">|</span> <span class="kc">false</span>    <span class="o">|</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">	<span class="mi">170</span>      <span class="o">|</span> <span class="mi">0</span>           <span class="o">|</span> <span class="o">[</span><span class="mf">0.0f</span> <span class="o">,</span><span class="mf">0.0f</span><span class="o">,</span> <span class="mf">0.0f</span><span class="o">]</span>    <span class="o">||</span> <span class="kc">true</span>  <span class="o">|</span> <span class="kc">true</span>     <span class="o">|</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl">	<span class="mi">180</span>      <span class="o">|</span> <span class="mi">0</span>           <span class="o">|</span> <span class="o">[</span><span class="mf">110.4f</span> <span class="o">,</span><span class="mf">0.3f</span><span class="o">,</span> <span class="mf">0.0f</span><span class="o">]</span>  <span class="o">||</span> <span class="kc">true</span>  <span class="o">|</span> <span class="kc">true</span>     <span class="o">|</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">	<span class="mi">500</span>      <span class="o">|</span> <span class="mi">0</span>           <span class="o">|</span> <span class="o">[</span><span class="mf">110.4f</span> <span class="o">,</span><span class="mi">300</span><span class="n">f</span><span class="o">,</span> <span class="mf">0.0f</span><span class="o">]</span>  <span class="o">||</span> <span class="kc">true</span>  <span class="o">|</span> <span class="kc">true</span>     <span class="o">|</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">	<span class="mi">30</span>       <span class="o">|</span> <span class="mi">0</span>           <span class="o">|</span> <span class="o">[</span><span class="mf">110.4f</span> <span class="o">,</span><span class="mi">1000</span><span class="n">f</span><span class="o">,</span> <span class="mf">0.0f</span><span class="o">]</span> <span class="o">||</span> <span class="kc">true</span>  <span class="o">|</span> <span class="kc">true</span>     <span class="o">|</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">	<span class="mi">155</span>      <span class="o">|</span> <span class="mi">4</span>           <span class="o">|</span> <span class="o">[</span><span class="mf">0.0f</span> <span class="o">,</span><span class="mf">0.0f</span><span class="o">,</span> <span class="mf">0.0f</span><span class="o">]</span>    <span class="o">||</span> <span class="kc">true</span>  <span class="o">|</span> <span class="kc">true</span>     <span class="o">|</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">	<span class="mi">170</span>      <span class="o">|</span> <span class="mi">1</span>           <span class="o">|</span> <span class="o">[</span><span class="mf">45.3f</span> <span class="o">,</span><span class="mf">10.3f</span><span class="o">,</span> <span class="mf">47.7f</span><span class="o">]</span> <span class="o">||</span> <span class="kc">true</span>  <span class="o">|</span> <span class="kc">true</span>     <span class="o">|</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>除了上面提及的 given-when-then 范式外，还多了一个之前没见过的 where block。现
在就来认识一下 Spock 的 killer 特性. 可以看到 Spock 的输入输出参数都保存在类
似表格的数据结构，其实这是 Spock 的 Parameterized tests，而在 <strong>||</strong> 符号左边的
是输入，右边的输出，每一列开始都是该参数的属性名，这样就可以很便捷地在 <strong>then</strong>
判断输出结果是否符合预期结果. 而数据添加或者减少输入参数或者输出结果的操作，
只需在 <strong>where</strong> block 里面对应地添加或者减少具体的参数，整个操作一目了然. 参数
的新增或者移除也很容易地实现</p>
<h2 id="结语"><span class="section-num">5</span> 结语</h2>
<p>笔者在项目中正是使用 Spock 编写测试， 或许对比 Junit, Spock 在流行度方面还难而
望其项背, 但是综合多方考虑，Spock 真的值得一试，兼之 Groovy 语言的语法加成，就
有一种在使用脚本编写 Java 的感觉 (好吧，笔者知道 Groovy 就是基于 jvm 的脚本)，
无需再为 Java 啰嗦的语法而烦恼。此外 Spock还有很多很强大的功能，例如内置的
Mocking Stubbing (Junit 需要第三方库支持), 还有支持企业级应用，Spring, Spring
boot, 和 Restful service 测试等。更多的用法，就要查阅官方文档了</p>
<h2 id="参考"><span class="section-num">6</span> 参考</h2>
<ul>
<li><a href="https://www.amazon.com/Java-Testing-Spock-Konstantinos-Kapelonis/dp/1617292532">Java Testing with Spock</a></li>
<li><a href="http://spockframework.org/spock/docs/1.1-rc-3/index.html">Spock Framework Reference Documentation</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Java读写文件小结</title>
      <link>https://ramsayleung.github.io/zh/post/2017/java8_file_io/</link>
      <pubDate>Mon, 06 Mar 2017 00:00:00 +0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2017/java8_file_io/</guid>
      <description>An post about write and read file with java</description>
      <content:encoded><![CDATA[<p>今天在完成《算法》上的练习的时候，要对文件进行读写，而书上的例子是直接通过 Linux/Unix的重定向来实现的，我要把它修改成直接读取文件。</p>
<p>此外，个人一直觉得Java IO 很容易混淆，因为有太多的选择(但是这也是Java 的强大之处)，现在Java8 又新增了文件的API,所以我就对文件IO作了个小结</p>
<h2 id="read"><span class="section-num">1</span> Read</h2>
<p>我今天的需求是要逐行读写文本文件，我就以此为例子了；测试文件是 <code>/tmp/test.txt</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">test
</span></span><span class="line"><span class="cl">this is a test
</span></span><span class="line"><span class="cl">this is another test
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="bufferedreader"><span class="section-num">1.1</span> BufferedReader</h3>
<p>虽然已经有了Java8的 <code>Stream</code>, 但是经典的东西总是历久弥新的；例如 <code>BufferedReader</code>就是JDK1.1就发布了的文件读API (对可能出现的IOException,使用更优雅try-with-resource并免去编写大量手动关闭资源的模板代码的麻烦)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w">  </span><span class="kt">void</span><span class="w"> </span><span class="nf">testBufferedReader</span><span class="p">(){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">String</span><span class="w"> </span><span class="n">filePath</span><span class="o">=</span><span class="s">&#34;/tmp/test.txt&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">try</span><span class="p">(</span><span class="n">BufferedReader</span><span class="w"> </span><span class="n">bufferedReader</span><span class="o">=</span><span class="k">new</span><span class="w"> </span><span class="n">BufferedReader</span><span class="p">(</span><span class="k">new</span><span class="w"> </span><span class="n">FileReader</span><span class="p">(</span><span class="n">filePath</span><span class="p">))){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">String</span><span class="w"> </span><span class="n">line</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">while</span><span class="p">((</span><span class="n">line</span><span class="o">=</span><span class="n">bufferedReader</span><span class="p">.</span><span class="na">readLine</span><span class="p">())</span><span class="o">!=</span><span class="kc">null</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="n">line</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">IOException</span><span class="w"> </span><span class="n">ex</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ex</span><span class="p">.</span><span class="na">printStackTrace</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">//do something</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="scanner"><span class="section-num">1.2</span> Scanner</h3>
<p>对发布于JDK1.5的Scanner,大部份Java 程序员都是相当熟悉的，因为总是用它来读取标准输入的数据。 现在只要把从标准输入变为从文件读取数据就可以了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w">  </span><span class="kt">void</span><span class="w"> </span><span class="nf">testScanner</span><span class="p">(){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">String</span><span class="w"> </span><span class="n">filePath</span><span class="o">=</span><span class="s">&#34;/tmp/test.txt&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">try</span><span class="p">(</span><span class="n">Scanner</span><span class="w"> </span><span class="n">scanner</span><span class="o">=</span><span class="k">new</span><span class="w"> </span><span class="n">Scanner</span><span class="p">(</span><span class="k">new</span><span class="w"> </span><span class="n">File</span><span class="p">(</span><span class="n">filePath</span><span class="p">))){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">while</span><span class="p">(</span><span class="n">scanner</span><span class="p">.</span><span class="na">hasNextLine</span><span class="p">()){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="n">scanner</span><span class="p">.</span><span class="na">nextLine</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">IOException</span><span class="w"> </span><span class="n">ex</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ex</span><span class="p">.</span><span class="na">printStackTrace</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">//do something</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="bufferedreader-plus-stream"><span class="section-num">1.3</span> BufferedReader+Stream</h3>
<p><code>Files</code> 类作为Java NIO 的一部分在Java 7被引入，该类提供了一系列操作文件的方法，而在Java8 又引入了另外有用的特性让Java 开发者可以更方便地操作文件。</p>
<p>例如 <code>lines()</code> 方法，可以让 <code>BufferedReader</code> 可以把文件内容以 <code>Stream</code> 的形式返回；读取文件， 并把文件内容存储到 <code>ArrayList</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">testBufferedReaderAndStream</span><span class="p">(){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">String</span><span class="w"> </span><span class="n">filePath</span><span class="o">=</span><span class="s">&#34;/tmp/test.txt&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="n">list</span><span class="o">=</span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">try</span><span class="p">(</span><span class="n">BufferedReader</span><span class="w"> </span><span class="n">bufferedReader</span><span class="o">=</span><span class="w"> </span><span class="n">Files</span><span class="p">.</span><span class="na">newBufferedReader</span><span class="p">(</span><span class="n">Paths</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="n">filePath</span><span class="p">))){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">list</span><span class="o">=</span><span class="n">bufferedReader</span><span class="p">.</span><span class="na">lines</span><span class="p">().</span><span class="na">collect</span><span class="p">(</span><span class="n">Collectors</span><span class="p">.</span><span class="na">toList</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">IOException</span><span class="w"> </span><span class="n">ex</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ex</span><span class="p">.</span><span class="na">printStackTrace</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">//do something</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>得益于强大的 <code>Stream</code> 你可以在读取文件是进行更多的操作；例如只存储含有 <code>this</code> 字符的行并且删除结尾的空白符</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w">  </span><span class="kt">void</span><span class="w"> </span><span class="nf">testBufferedReaderAndStream</span><span class="p">(){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">String</span><span class="w"> </span><span class="n">filePath</span><span class="o">=</span><span class="s">&#34;/tmp/test.txt&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="n">list</span><span class="o">=</span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">try</span><span class="p">(</span><span class="n">BufferedReader</span><span class="w"> </span><span class="n">bufferedReader</span><span class="o">=</span><span class="w"> </span><span class="n">Files</span><span class="p">.</span><span class="na">newBufferedReader</span><span class="p">(</span><span class="n">Paths</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="n">filePath</span><span class="p">))){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">bufferedReader</span><span class="p">.</span><span class="na">lines</span><span class="p">().</span><span class="na">filter</span><span class="p">(</span><span class="n">line</span><span class="o">-&gt;</span><span class="n">line</span><span class="p">.</span><span class="na">contains</span><span class="p">(</span><span class="s">&#34;this&#34;</span><span class="p">)).</span><span class="na">map</span><span class="p">(</span><span class="n">String</span><span class="p">::</span><span class="n">trim</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="p">.</span><span class="na">forEach</span><span class="p">(</span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">::</span><span class="n">println</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">IOException</span><span class="w"> </span><span class="n">ex</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ex</span><span class="p">.</span><span class="na">printStackTrace</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">//do something</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="lines-plus-stream"><span class="section-num">1.4</span> lines+Stream</h3>
<p>也可以直接使用 <code>lines</code> 方法来逐行读取文本文件，只是对比 <code>newBufferedReader</code> + <code>Stream</code>, 前者颗粒度更细；</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">testlinesAndStream</span><span class="p">(){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">String</span><span class="w"> </span><span class="n">filePath</span><span class="o">=</span><span class="s">&#34;/tmp/test.txt&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="n">list</span><span class="o">=</span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">try</span><span class="p">(</span><span class="n">Stream</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="n">stringStream</span><span class="o">=</span><span class="n">Files</span><span class="p">.</span><span class="na">lines</span><span class="p">(</span><span class="n">Paths</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="n">filePath</span><span class="p">))){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">stringStream</span><span class="p">.</span><span class="na">filter</span><span class="p">(</span><span class="n">line</span><span class="o">-&gt;</span><span class="n">line</span><span class="p">.</span><span class="na">contains</span><span class="p">(</span><span class="s">&#34;test&#34;</span><span class="p">)).</span><span class="na">forEach</span><span class="p">(</span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">::</span><span class="n">println</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">IOException</span><span class="w"> </span><span class="n">ex</span><span class="w"> </span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ex</span><span class="p">.</span><span class="na">printStackTrace</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">//do something</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>如果你是读取不是很大的文件的时候，你可以一次就把文件都进内存； <code>Files</code> 已经为你提供这样的方法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w">  </span><span class="kt">void</span><span class="w"> </span><span class="nf">testReadAllLines</span><span class="p">(){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">String</span><span class="w"> </span><span class="n">filePath</span><span class="o">=</span><span class="s">&#34;/tmp/test.txt&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="n">lists</span><span class="o">=</span><span class="w"> </span><span class="kc">null</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">try</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">lists</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Files</span><span class="p">.</span><span class="na">readAllLines</span><span class="p">(</span><span class="n">Paths</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="n">filePath</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">IOException</span><span class="w"> </span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">e</span><span class="p">.</span><span class="na">printStackTrace</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">list</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="n">lists</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="n">list</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>需要注意的是 <code>try-with-resource</code> 是不支持 <code>readAllLines</code> .此外大文件请慎重使用 <code>readAllLines</code>,因为你可能出现 <code>OutOfMemoryException</code></p>
<p>不得不说，新加入的API的确更加优雅</p>
<hr>
<h2 id="write"><span class="section-num">2</span> Write</h2>
<p>我就把测试文件重新写到一个新的文件，实现复制的功能，因为我的文件很小，所以我直接把测试独的文件加载到内存</p>
<h3 id="bufferedwriter"><span class="section-num">2.1</span> BufferedWriter</h3>
<p>与 <code>BufferedReader</code> 对应，对文件进行写</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">testBufferedWriter</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">String</span><span class="w"> </span><span class="n">readFilePath</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;/tmp/test.txt&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">String</span><span class="w"> </span><span class="n">writeFilePath</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;/tmp/test1.txt&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">try</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="n">lines</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Files</span><span class="p">.</span><span class="na">readAllLines</span><span class="p">(</span><span class="n">Paths</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="n">readFilePath</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">try</span><span class="w"> </span><span class="p">(</span><span class="n">BufferedWriter</span><span class="w"> </span><span class="n">bufferedWriter</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">BufferedWriter</span><span class="p">(</span><span class="k">new</span><span class="w"> </span><span class="n">FileWriter</span><span class="p">(</span><span class="n">writeFilePath</span><span class="p">)))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">line</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="n">lines</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">bufferedWriter</span><span class="p">.</span><span class="na">write</span><span class="p">(</span><span class="n">line</span><span class="o">+</span><span class="s">&#34;\n&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">IOException</span><span class="w"> </span><span class="n">ex</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="n">ex</span><span class="p">.</span><span class="na">printStackTrace</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="c1">//do something</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">IOException</span><span class="w"> </span><span class="n">ex</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ex</span><span class="p">.</span><span class="na">printStackTrace</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">//do something</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>你也可以将 <code>BufferedReader</code> 和 <code>Files</code> 结合</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">testBufferedWriterAndFiles</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">String</span><span class="w"> </span><span class="n">readFilePath</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;/tmp/test.txt&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">String</span><span class="w"> </span><span class="n">writeFilePath</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;/tmp/test1.txt&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">try</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="n">lines</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Files</span><span class="p">.</span><span class="na">readAllLines</span><span class="p">(</span><span class="n">Paths</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="n">readFilePath</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">try</span><span class="w"> </span><span class="p">(</span><span class="n">BufferedWriter</span><span class="w"> </span><span class="n">bufferedWriter</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Files</span><span class="p">.</span><span class="na">newBufferedWriter</span><span class="p">(</span><span class="n">Paths</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="n">writeFilePath</span><span class="p">)))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">line</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="n">lines</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">bufferedWriter</span><span class="p">.</span><span class="na">write</span><span class="p">(</span><span class="n">line</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s">&#34;\n&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">IOException</span><span class="w"> </span><span class="n">ex</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="n">ex</span><span class="p">.</span><span class="na">printStackTrace</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="c1">//do something</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">IOException</span><span class="w"> </span><span class="n">ex</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ex</span><span class="p">.</span><span class="na">printStackTrace</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">//do something</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="files-dot-write"><span class="section-num">2.2</span> Files.write</h3>
<p>使用 <code>Files.write()</code> 也可以写出相当优雅的代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w">  </span><span class="kt">void</span><span class="w"> </span><span class="nf">testFilesWrite</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">String</span><span class="w"> </span><span class="n">readFilePath</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;/tmp/test.txt&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">String</span><span class="w"> </span><span class="n">writeFilePath</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;/tmp/test1.txt&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">try</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="n">lines</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Files</span><span class="p">.</span><span class="na">readAllLines</span><span class="p">(</span><span class="n">Paths</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="n">readFilePath</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">Files</span><span class="p">.</span><span class="na">write</span><span class="p">(</span><span class="n">Paths</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="n">writeFilePath</span><span class="p">),</span><span class="w"> </span><span class="n">lines</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">IOException</span><span class="w"> </span><span class="n">ex</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ex</span><span class="p">.</span><span class="na">printStackTrace</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">//do something</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><hr>
<p>这就是各种对文本文件进行读写的方法；不知道为什么，我觉得似乎写文件的方法似乎比读文件的方法少，例如读文件有 <code>Scanner</code> , 而写文件似乎没有 <code>Printer</code> :(</p>
<p>不应该是匹配的么，或许我是不知道？</p>
<p>Enjoy Java :)</p>
<h2 id="参考"><span class="section-num">3</span> 参考</h2>
<ul>
<li><a href="http://winterbe.com/posts/2015/03/25/java8-examples-string-number-math-files/">http://winterbe.com/posts/2015/03/25/java8-examples-string-number-math-files/</a></li>
<li><a href="http://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#lines-java.nio.file.Path-">http://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#lines-java.nio.file.Path-</a></li>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html">https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Lambda与Java Collection有感</title>
      <link>https://ramsayleung.github.io/zh/post/2017/java_collection_lambda/</link>
      <pubDate>Sat, 04 Mar 2017 00:00:00 +0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2017/java_collection_lambda/</guid>
      <description>An Discussion abount Java Collection with Lambda Expression</description>
      <content:encoded><![CDATA[<p>我平时也有浏览各类博客的习惯，毕竟三人行则必有我师嘛。今天在浏览关于Java的一个博客的时候，对博主的观点有一些不同的开发，但是困于没法在博客下评论，内容如下：
<a href="/ox-hugo/argument.png"><img loading="lazy" src="/ox-hugo/argument.png" alt=""  />
</a>
所以打算聊聊Java 中Collection 这个话题。(BTW,窃以为博主对Java8 新引进的Lambda, 应该了解不足)</p>
<h2 id="java函数式编程"><span class="section-num">1</span> Java函数式编程</h2>
<p>Java8 引进了函数式编程的新特性，让Java的开发人员也可以享受函数式编程的美妙，已经有很多的文章介绍函数式了，珠玉在前，我就不赘言了。</p>
<p>来说说Java 的Lambda吧：Java8 对核心类库进行了改进，只要包括集合类的API和新引入的流(Stream), 流可以让开发者站在更高的 抽象层次对集合进行操作</p>
<h2 id="流的常用操作"><span class="section-num">2</span> 流的常用操作</h2>
<h3 id="collect--tolist"><span class="section-num">2.1</span> collect(toList())</h3>
<p><code>collect(toList())</code> 方法可以由Stream 值生成一个List,而Stream 的of方法可以使用初始值生成新的Stream.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="n">collected</span><span class="o">=</span><span class="w"> </span><span class="n">Stream</span><span class="p">.</span><span class="na">of</span><span class="p">(</span><span class="s">&#34;this&#34;</span><span class="p">,</span><span class="s">&#34;is&#34;</span><span class="p">,</span><span class="s">&#34;a&#34;</span><span class="p">,</span><span class="s">&#34;list&#34;</span><span class="p">).</span><span class="na">collect</span><span class="p">(</span><span class="n">Collectors</span><span class="p">.</span><span class="na">toList</span><span class="p">());</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="map"><span class="section-num">2.2</span> map</h3>
<p>如果有一个函数可以将一种类型的值转换成另外一种类型，map 操作就可以使用该函数，将一个流中的值转换成一个新的流
<a href="/ox-hugo/java_map.png"><img loading="lazy" src="/ox-hugo/java_map.png" alt=""  />
</a></p>
<h4 id="例子"><span class="section-num">2.2.1</span> 例子</h4>
<p>将字符变成大写格式如果用没有Lambda 时的模式编程</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="n">oldStyle</span><span class="o">=</span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">for</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">string</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="n">Arrays</span><span class="p">.</span><span class="na">asList</span><span class="p">(</span><span class="s">&#34;a&#34;</span><span class="p">,</span><span class="s">&#34;b&#34;</span><span class="p">,</span><span class="s">&#34;c&#34;</span><span class="p">)){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">String</span><span class="w"> </span><span class="n">uppercaseString</span><span class="o">=</span><span class="n">string</span><span class="p">.</span><span class="na">toUpperCase</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">oldStyle</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">uppercaseString</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>但是如果你有了Lambda</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="n">lambdaStyle</span><span class="o">=</span><span class="n">Stream</span><span class="p">.</span><span class="na">of</span><span class="p">(</span><span class="s">&#34;a&#34;</span><span class="p">,</span><span class="s">&#34;b&#34;</span><span class="p">,</span><span class="s">&#34;c&#34;</span><span class="p">).</span><span class="na">map</span><span class="p">(</span><span class="n">string</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">string</span><span class="p">.</span><span class="na">toUpperCase</span><span class="p">())</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">.</span><span class="na">collect</span><span class="p">(</span><span class="n">Collectors</span><span class="p">.</span><span class="na">toList</span><span class="p">());</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>真的有种说不出的优雅</p>
<h3 id="filter"><span class="section-num">2.3</span> filter</h3>
<p>遍历数据并检查其中的元素</p>
<figure><a href="/ox-hugo/java_filter.png">
    <img loading="lazy" src="/ox-hugo/java_filter.png"/> </a>
</figure>

<h4 id="例子"><span class="section-num">2.3.1</span> 例子</h4>
<p>你有一个User类，然后你想找出年龄大于30岁的用户</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">private</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span><span class="w"> </span><span class="n">users</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Arrays</span><span class="p">.</span><span class="na">asList</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">						</span><span class="k">new</span><span class="w"> </span><span class="n">User</span><span class="p">(</span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;Steve&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;Vai&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">40</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">						</span><span class="k">new</span><span class="w"> </span><span class="n">User</span><span class="p">(</span><span class="n">4</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;Joe&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;Smith&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">32</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">						</span><span class="k">new</span><span class="w"> </span><span class="n">User</span><span class="p">(</span><span class="n">3</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;Steve&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;Johnson&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">57</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">						</span><span class="k">new</span><span class="w"> </span><span class="n">User</span><span class="p">(</span><span class="n">9</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;Mike&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;Stevens&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">18</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">						</span><span class="k">new</span><span class="w"> </span><span class="n">User</span><span class="p">(</span><span class="n">10</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;George&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;Armstrong&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">24</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">						</span><span class="k">new</span><span class="w"> </span><span class="n">User</span><span class="p">(</span><span class="n">2</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;Jim&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;Smith&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">40</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">						</span><span class="k">new</span><span class="w"> </span><span class="n">User</span><span class="p">(</span><span class="n">8</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;Chuck&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;Schneider&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">34</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">						</span><span class="k">new</span><span class="w"> </span><span class="n">User</span><span class="p">(</span><span class="n">5</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;Jorje&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;Gonzales&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">22</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">						</span><span class="k">new</span><span class="w"> </span><span class="n">User</span><span class="p">(</span><span class="n">6</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;Jane&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;Michaels&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">47</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">						</span><span class="k">new</span><span class="w"> </span><span class="n">User</span><span class="p">(</span><span class="n">7</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;Kim&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;Berlie&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">60</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">						</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>非函数式编程(旧式):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span><span class="w"> </span><span class="n">olderUsers</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">User</span><span class="w"> </span><span class="n">u</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="n">users</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">.</span><span class="na">age</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">30</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">olderUsers</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">u</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>函数式编程：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span><span class="w"> </span><span class="n">olderUsers</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">users</span><span class="p">.</span><span class="na">stream</span><span class="p">().</span><span class="na">filter</span><span class="p">(</span><span class="n">u</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">u</span><span class="p">.</span><span class="na">age</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">30</span><span class="p">).</span><span class="na">collect</span><span class="p">(</span><span class="n">Collectors</span><span class="p">.</span><span class="na">toList</span><span class="p">());</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="flatmap"><span class="section-num">2.4</span> flatMap</h3>
<p>flatMap 方法可用Stream 替换值，然后将多个Stream 连接成一个Stream
<a href="/ox-hugo/java_flatmap.png"><img loading="lazy" src="/ox-hugo/java_flatmap.png" alt=""  />
</a></p>
<h4 id="例子"><span class="section-num">2.4.1</span> 例子</h4>
<p>假设有一个包含多个列表的流，希望得到所有数字的序列</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="n">together</span><span class="o">=</span><span class="n">Stream</span><span class="p">.</span><span class="na">of</span><span class="p">(</span><span class="n">Arrays</span><span class="p">.</span><span class="na">asList</span><span class="p">(</span><span class="n">1</span><span class="p">,</span><span class="n">2</span><span class="p">),</span><span class="n">Arrays</span><span class="p">.</span><span class="na">asList</span><span class="p">(</span><span class="n">3</span><span class="p">,</span><span class="n">4</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">.</span><span class="na">flatMap</span><span class="p">(</span><span class="n">numbers</span><span class="o">-&gt;</span><span class="n">numbers</span><span class="p">.</span><span class="na">stream</span><span class="p">()).</span><span class="na">collect</span><span class="p">(</span><span class="n">Collectors</span><span class="p">.</span><span class="na">toList</span><span class="p">());</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><hr>
<p>还有其他常用的操作，我就不一一列举了，官方<a href="http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/Lambda-QuickStart/index.html">Quick Start</a>有更详细的介绍。</p>
<p>但是就我谈到的几种操作，应该可以对那位博主朋友的博文做出回应了，最有效优雅过滤一个Collection 的方法，我觉得是Stream 的filter</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="n">filterExample</span><span class="o">=</span><span class="n">Stream</span><span class="p">.</span><span class="na">of</span><span class="p">(</span><span class="s">&#34;a&#34;</span><span class="p">,</span><span class="s">&#34;b&#34;</span><span class="p">,</span><span class="s">&#34;c&#34;</span><span class="p">).</span><span class="na">filter</span><span class="p">(</span><span class="n">string</span><span class="o">-&gt;</span><span class="n">string</span><span class="p">.</span><span class="na">equals</span><span class="p">(</span><span class="s">&#34;a&#34;</span><span class="p">)).</span><span class="na">collect</span><span class="p">(</span><span class="n">Collectors</span><span class="p">.</span><span class="na">toList</span><span class="p">());</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="小结"><span class="section-num">2.5</span> 小结</h3>
<p>Java Lambda的特性如果不经常使用，很容易又忘了，本文就当是对Java Lambda 的一次review吧</p>
<p>不过，函数式的引用的确让Java 焕发出新的活力，记得之前一位前辈吐嘈Java语法太啰嗦，现在前辈应该会用得舒心一点吧</p>
<hr>
<p>备注：上面的图都是来自《Java8 函数式编程》 一书</p>
<p>参考：Java8 函数式编程</p>
]]></content:encoded>
    </item>
  </channel>
</rss>

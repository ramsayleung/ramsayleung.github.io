<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Design on 菠萝油与天光墟</title>
    <link>https://ramsayleung.github.io/zh/categories/design/</link>
    <description>Recent content in Design on 菠萝油与天光墟</description>
    <image>
      <title>菠萝油与天光墟</title>
      <url>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.146.7</generator>
    <language>zh</language>
    <copyright>See this site&amp;rsquo;s source code here, licensed under GPLv3 ·</copyright>
    <lastBuildDate>Mon, 04 Aug 2025 14:06:30 -0700</lastBuildDate>
    <atom:link href="https://ramsayleung.github.io/zh/categories/design/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>一本读了八年还没读完的书</title>
      <link>https://ramsayleung.github.io/zh/post/2025/structure_and_interpretation_of_computer_programs/</link>
      <pubDate>Mon, 04 Aug 2025 10:00:00 -0700</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2025/structure_and_interpretation_of_computer_programs/</guid>
      <description>&lt;h2 id=&#34;缘起&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; 缘起&lt;/h2&gt;
&lt;p&gt;正如我在之前博客文章《&lt;a href=&#34;https://ramsayleung.github.io/zh/post/2023/%E8%BF%99%E4%BA%9B%E5%B9%B4%E8%B5%B0%E8%BF%87%E7%9A%84%E8%B7%AF_%E4%BB%8E%E5%B9%BF%E5%B7%9E%E5%88%B0%E6%B8%A9%E5%93%A5%E5%8D%8E/&#34;&gt;这些年走过的路：从广州到温哥华&lt;/a&gt;》&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;提到的那样，我在大二暑假的时候因缘际会，获得了去一家在深圳的初创公司实习的 Offer。&lt;/p&gt;
&lt;p&gt;实习的两个多月时间也快就过去了，我也顺利拿到了 Return Offer，公司也非常有人情味地给实习生办了个欢送典礼。&lt;/p&gt;
&lt;p&gt;当时实习的导师，也是这家公司的副总裁，加州州立大学的&lt;a href=&#34;https://www.linkedin.com/in/yingliu37&#34;&gt;刘颖&lt;/a&gt;教授&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;，在欢送典礼上给我们几个实习生每人都赠送了一本书作为临别礼物。（可惜换了几次手机，已经找不回当初手捧着书的合照了）&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="缘起"><span class="section-num">1</span> 缘起</h2>
<p>正如我在之前博客文章《<a href="https://ramsayleung.github.io/zh/post/2023/%E8%BF%99%E4%BA%9B%E5%B9%B4%E8%B5%B0%E8%BF%87%E7%9A%84%E8%B7%AF_%E4%BB%8E%E5%B9%BF%E5%B7%9E%E5%88%B0%E6%B8%A9%E5%93%A5%E5%8D%8E/">这些年走过的路：从广州到温哥华</a>》<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>提到的那样，我在大二暑假的时候因缘际会，获得了去一家在深圳的初创公司实习的 Offer。</p>
<p>实习的两个多月时间也快就过去了，我也顺利拿到了 Return Offer，公司也非常有人情味地给实习生办了个欢送典礼。</p>
<p>当时实习的导师，也是这家公司的副总裁，加州州立大学的<a href="https://www.linkedin.com/in/yingliu37">刘颖</a>教授<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>，在欢送典礼上给我们几个实习生每人都赠送了一本书作为临别礼物。（可惜换了几次手机，已经找不回当初手捧着书的合照了）</p>
<p>他说这是一本可以帮助我们了解程序本质，以及学习抽象的好书，这本书就叫《<a href="https://book.douban.com/subject/1148282/">计算机程序的构造和解释</a>》<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>（Structure and Interpretation of Computer Programs, 简称 SICP，下文使用 SICP 代称）</p>
<p>收到这本书时，我并未料到它会成为一场长达八年的拉锯战。</p>
<h2 id="好书不愉悦"><span class="section-num">2</span> 好书不愉悦</h2>
<p>我在2016年收到这本书，从2017年开始阅读，中间中断了好几次又重新拾起，而时至今日也只读了一半，即五个章节中的前三章。</p>
<p>翻看自己一直以来阅读这本书的日记，总有种看胡适先生一直在打牌的留学日记一样的感受：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-org" data-lang="org"><span class="line"><span class="cl"><span class="gu">**</span> DOING Read The Structure And Interpretation of Computer Programs
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   Read SICP everyday, at least 1 hour
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">   :LOGBOOK:
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="cs">   CLOCK: [2017-04-03 Mon 20:26]--[2017-04-03 Mon 21:25] =&gt;  0:59
</span></span></span><span class="line"><span class="cl"><span class="cs">   CLOCK: [2017-03-14 Tue 23:15]--[2017-03-14 Tue 23:40] =&gt;  0:25
</span></span></span><span class="line"><span class="cl"><span class="cs">   CLOCK: [2017-03-14 Tue 22:45]--[2017-03-14 Tue 23:10] =&gt;  0:25
</span></span></span><span class="line"><span class="cl"><span class="cs">   CLOCK: [2017-03-12 Sun 15:46]--[2017-03-12 Sun 16:11] =&gt;  0:25
</span></span></span><span class="line"><span class="cl"><span class="cs">   CLOCK: [2017-03-12 Sun 15:13]--[2017-03-12 Sun 15:38] =&gt;  0:25
</span></span></span><span class="line"><span class="cl"><span class="cs"></span><span class="c">   :END:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   &lt;<span class="s">2022-10-08 Sat</span>&gt;
</span></span><span class="line"><span class="cl"><span class="c">   #+begin_comment
</span></span></span><span class="line"><span class="cl"><span class="c">   读了6年了，还是没有读完，重新开始读
</span></span></span><span class="line"><span class="cl"><span class="c">   #+end_comment</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   &lt;<span class="s">2025-05-25 Sun</span>&gt;
</span></span><span class="line"><span class="cl">   读了8年，还是没有读完，又开始读
</span></span></code></pre></td></tr></table>
</div>
</div><p>看到这里，可能没有读过 SICP 可能会奇怪，为什么读一本书要这么久，如果蜻蜓点水，水过鸭背那样子读完一本书，自然只需要不停地翻页即可。</p>
<p>而 SICP 为了帮助你掌控书中讲解的知识和要点，会有大量的习题，并且把非常多额外的知识点都嵌入到习题中，以练带学。</p>
<p>就数量而言，章节一有46道习题，章节二有97道习题，章节三有82道习题。
如果跳过这些习题，这本书的内容不仅少了一半，而且也失去其精髓，可谓是买椟还珠。</p>
<p>此外，习题不仅数量多，还有相当难度，我每天花一到两个小时阅读，只能完成1-2道习题。</p>
<p>习题完成情况:</p>
<ul>
<li>章节一: 43/46</li>
<li>章节二: 88/97</li>
<li>章节三: 72/82</li>
<li>章节四: TODO</li>
<li>章节五: TODO</li>
</ul>
<p>我把所有的题解都放到了 GitHub 项目: <a href="https://github.com/ramsayleung/sicp_solution">https://github.com/ramsayleung/sicp_solution</a>, 并为大部分的题解都配套了单元测试，以验证其正确性，还加上了 GitHub Action 作 CI.</p>
<p>经年累月，我的题解代码和笔记都接近一万行了，这也能侧面说明我为什么读得这么慢了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">&gt; tokei .
</span></span><span class="line"><span class="cl"><span class="o">===============================================================================</span>
</span></span><span class="line"><span class="cl">Language            Files        Lines         Code     Comments       <span class="nv">Blanks</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================================</span>
</span></span><span class="line"><span class="cl">Markdown                <span class="m">1</span>           <span class="m">65</span>            <span class="m">0</span>           <span class="m">46</span>           <span class="m">19</span>
</span></span><span class="line"><span class="cl">Org                    <span class="m">70</span>         <span class="m">2757</span>         <span class="m">2163</span>            <span class="m">0</span>          <span class="m">594</span>
</span></span><span class="line"><span class="cl">Racket                 <span class="m">71</span>         <span class="m">3976</span>         <span class="m">3086</span>          <span class="m">256</span>          <span class="m">634</span>
</span></span><span class="line"><span class="cl">Scheme                 <span class="m">77</span>         <span class="m">2479</span>         <span class="m">1898</span>          <span class="m">110</span>          <span class="nv">471</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================================</span>
</span></span><span class="line"><span class="cl">Total                 <span class="m">219</span>         <span class="m">9277</span>         <span class="m">7147</span>          <span class="m">412</span>         <span class="nv">1718</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================================</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>毕竟大部分真正让人进步的阅读，读起来都不是愉悦的：</p>
<blockquote>
<p>世之奇伟、瑰怪、非常之观，常在于险远，而人之所罕至焉，故非有志者不能至也。</p>
<p>&mdash;-王安石《游褒禅山记》</p></blockquote>
<h2 id="主旨"><span class="section-num">3</span> 主旨</h2>
<p>如果笼统地概括整本书，“无非”是「抽象」，通过使用一门非常简单的语言 <code>Scheme</code>, 以及几个非常简单的操作 <code>cons(构造一个序对)</code>, <code>car(取出序对的第一个值)</code>, <code>cdr(取出序对的第二个值)</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-scheme" data-lang="scheme"><span class="line"><span class="cl"><span class="nv">&gt;</span> <span class="p">(</span><span class="nb">cons </span><span class="mi">1</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="o">.</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">&gt;</span> <span class="p">(</span><span class="nb">car </span><span class="p">(</span><span class="nb">cons </span><span class="mi">1</span> <span class="mi">2</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="nv">&gt;</span> <span class="p">(</span><span class="nb">cdr </span><span class="p">(</span><span class="nb">cons </span><span class="mi">1</span> <span class="mi">2</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="mi">2</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>构造出各种数据结构，如链表，队列，哈希表以及更复杂的组合数据结构; 探寻各种概念，如递归，闭包，高阶函数，赋值，流，程序优化等；</p>
<p>而后两章更进一步，第四章介绍如何实现一个 Scheme 简单的解释器，一个简单的 Prolog 解释器；而第五章介绍计算机体系结构的 CPU 设计，编译器，垃圾回收等。</p>
<p>从括号中的几个简单函数，到最后造出整个计算机体系，有种《道德经》里道生万物的感觉：</p>
<blockquote>
<p>道生一，一生二，二生三，三生万物。</p></blockquote>
<h2 id="计算机科学与工程"><span class="section-num">4</span> 计算机科学与工程</h2>
<p>我本科专业读的是软件工程(Software Engineering )，翻看当初的专业培养计划，从计算机导论开始入门，到程序设计基础，面向对象程序设计基础，数据结构，操作系统，计算机组成原理，再到计算机网络，汇编与编译原理，数据库原理到软件工程等。</p>
<p>学习完这些课程，可以成为一个合格的软件工程师，但广义的计算机专业还有一门专业，叫计算机科学(Computer Science)，我一直很疑惑两者之间的差别是什么，就我所见过的不同学校的培养计划里面，两者的课程都非常相似。</p>
<p>而在阅读这本1984年麻省理工就出版的计算机科学的教材时，我找到了我想要的答案。</p>
<p>最初的计算机科学是数学，电子工程和软件设计的交叉学科，计算机科学的学生需要兼备这三者的专业知识。</p>
<p>而三位作者也是高屋建瓴，在数学，电子工程和软件领域旁征博引，各种知识信手拈来，
如练习3.59关于微积分的内容，通过流来处理幂等数积分，练习3.60-3.62都是关于积分的内容。</p>
<p>如3.5章里面，通过流来描述信号处理系统中的「信号」，
练习3.73用程序的流(stream)来表示电流或者电压在时间序列上的值，用以模拟电子线路。</p>
<p>如 3.3章里面，通过程序来建立数字电路的反门，与门，或门，再通过这样的电子元件建立起半加器，
再通过多个半加器实现全加器，实现二进制的加法，从程序到模拟电路，再用模拟电路来构造计算机的处理器。</p>
<p>不同学科的知识在一本书中融会贯通，再配合这个 <code>eval-apply</code> 表达式的配图，总有一种太极的感觉，难免让我有种读计算机哲学书的感觉:</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-28ab8" hidden>
    <label for="zoomCheck-28ab8">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/apply_eval.jpg"/> 
    
    
    </label>
</figure>

<h2 id="优美的括号"><span class="section-num">5</span> 优美的括号</h2>
<p>书中那些非常有趣或者优美的代码</p>
<h3 id="图形构造-从点到面的抽象"><span class="section-num">5.1</span> 图形构造：从点到面的抽象</h3>
<p>第二章介绍了复合的数据结构时，就提到了如何去画图，先画点，再画线，然后要求完成习题连线成面，构造出图形。</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-91228" hidden>
    <label for="zoomCheck-91228">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/exercise-2-52-wave.png"/> 
    
    
    </label>
</figure>

<p>新的习题再要求通过变换，组合图形，构造新的复杂图形:</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-f815c" hidden>
    <label for="zoomCheck-f815c">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/wave-square-limit.png"/> 
    
    
    </label>
</figure>

<p>最后把类似的变换应用到图片上:</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-93de8" hidden>
    <label for="zoomCheck-93de8">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/square-limit-einstein.png"/> 
    
    
    </label>
</figure>

<h3 id="蒙特卡罗模拟来计算-π"><span class="section-num">5.2</span> 蒙特卡罗模拟来计算 π</h3>
<p>所谓的蒙特卡罗模拟（Monte Carlo Simulation）是一种通过随机采样和统计计算来求解的数值方法，通过大量随机实验模拟不确定性，从而估算复杂系统的可能结果。</p>
<p>用人话来说就是不断地试，在试错的过程中逼近确定解，试的次数越多，结果越准确。</p>
<p>书中就介绍了一种通过蒙特卡罗模拟来计算 π 的方法, 就像通过随机撒豆子估算圆的面积，概率统计将抽象的π转化为可计算的实验：</p>
<blockquote>
<p>举例来说，6/π^2 是随机选取的两个整数之间没有公因子（也就是说，它们的最大公因子是1）的概率。我们可以利用这一事实做出π的近似值。</p></blockquote>
<p>完全读不懂这段话，没理解是怎么可以算出π的近似值的。</p>
<p>查阅资料后得知:</p>
<p>随机选取两个正整数，它们互质（即最大公约数GCD为1）的概率是 \(\frac{6}{\pi^2}\) , 所谓的 互质指两个数没有公共因子（如8和15互质，但8和12不互质，因为公约数为4）。</p>
<p>这一结论源自数论中的经典定理（涉及黎曼ζ函数），我们只需利用其概率公式反推π即可。</p>
<p>而用蒙特卡罗模拟步骤来计算 \({\pi}\):</p>
<p>随机实验：重复多次随机选取两个整数，检查它们的GCD是否为1。</p>
<p>例如：</p>
<ul>
<li>(3, 5) → GCD=1（计数+1）</li>
<li>(4, 6) → GCD=2（不计数）</li>
</ul>
<p>统计概率：</p>
<p>若总实验次数为 N，其中 k 次GCD=1，则互质概率的估计值为 \(\frac{k}{N}\)</p>
<p>关联π：</p>
<p>根据数论结论 \(\frac{k}{N} \approx \frac{6}{\pi^2}\)，解得 \(\pi \approx \sqrt{\frac{6N}{k}}\)。</p>
<p>当直接计算π困难时，可通过概率实验间接逼近。</p>
<p>这里利用了数论中的概率规律，将π与随机事件联系起来。(高等数学对于我来说已是雪泥鸿爪，更遑论数论的知识了)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-racket" data-lang="racket"><span class="line"><span class="cl"><span class="kn">#lang </span><span class="nn">racket</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="n">estimate-pi</span> <span class="n">trials</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">sqrt</span> <span class="p">(</span><span class="nb">/</span> <span class="mi">6</span> <span class="p">(</span><span class="n">monte-carlo</span> <span class="n">trials</span> <span class="n">cesaro-test</span><span class="p">))))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="n">cesaro-test</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">=</span> <span class="p">(</span><span class="nb">gcd</span> <span class="p">(</span><span class="n">rand</span><span class="p">)</span> <span class="p">(</span><span class="n">rand</span><span class="p">))</span> <span class="mi">1</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="n">monte-carlo</span> <span class="n">trials</span> <span class="n">experiment</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="n">iter</span> <span class="n">trials-remaining</span> <span class="n">trial-passed</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="k">cond</span> <span class="p">((</span><span class="nb">=</span> <span class="n">trials-remaining</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">           <span class="p">(</span><span class="nb">/</span> <span class="n">trials-passed</span> <span class="n">trials</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">          <span class="p">((</span><span class="n">experiment</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">           <span class="p">(</span><span class="n">iter</span> <span class="p">(</span><span class="nb">-</span> <span class="n">trials-remaining</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nb">+</span> <span class="n">trials-passed</span> <span class="mi">1</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">          <span class="p">(</span><span class="k">else</span>
</span></span><span class="line"><span class="cl">           <span class="p">(</span><span class="n">iter</span> <span class="p">(</span><span class="nb">-</span> <span class="n">trials-remaining</span> <span class="mi">1</span><span class="p">)</span> <span class="n">trials-passed</span><span class="p">))))</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="n">iter</span> <span class="n">trials</span> <span class="mi">0</span><span class="p">))</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这里的蒙特卡罗实现真的是优雅，它将数学理论（互质概率）转化为寥寥数行的递归实验。</p>
<p>而基于流的实现更是优美:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-scheme" data-lang="scheme"><span class="line"><span class="cl"><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">monte-carlo</span> <span class="nv">experiment-stream</span> <span class="nv">passed</span> <span class="nv">failed</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">next</span> <span class="nv">passed</span> <span class="nv">failed</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="nf">cons-stream</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nb">/ </span><span class="nv">passed</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">passed</span> <span class="nv">failed</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nf">monte-carlo</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="nf">stream-cdr</span> <span class="nv">experiment-stream</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="nv">passed</span>
</span></span><span class="line"><span class="cl">      <span class="nv">failed</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">stream-car</span> <span class="nv">experiment-stream</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="nf">next</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">passed</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">failed</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="nf">next</span> <span class="nv">passed</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">failed</span> <span class="mi">1</span><span class="p">))))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="尾声-括号里的计算机哲学"><span class="section-num">6</span> 尾声：括号里的计算机哲学</h2>
<p>直到今天，我也只读完前三章。有时我会问自己：这本书究竟给了我什么？</p>
<p>它没有教我实用的编程技巧，也无关面试刷题。</p>
<p>但是我好像又抓住了一些东西，尤如用手拢过一团烟雾，张开手，并未见留下什么，但是手上还残留着它的气味。</p>
<p>如今，MIT 的课程已用 Python 替代 Scheme，但 SICP 的价值从未褪色。</p>
<p>SICP 不是一本教你「如何编程」的书，而是一把钥匙，是一座桥，连接着工程的实用与科学的纯粹。</p>
<p>那些括号中的表达式，最终在我脑中化成了某种朦胧却持久的气味：</p>
<p><strong><strong>一种对抽象本质的直觉</strong></strong></p>
<h3 id="推荐阅读">推荐阅读</h3>
<ul>
<li>旅加经历
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E8%BF%99%E4%BA%9B%E5%B9%B4%E8%B5%B0%E8%BF%87%E7%9A%84%E8%B7%AF_%E4%BB%8E%E5%B9%BF%E5%B7%9E%E5%88%B0%E6%B8%A9%E5%93%A5%E5%8D%8E/">这些年走过的路：从广州到温哥华</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E5%8A%A0%E6%8B%BF%E5%A4%A7%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C/">加拿大之初体验</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E7%99%BB%E9%99%86%E5%8A%A0%E6%8B%BF%E5%A4%A7%E4%B8%80%E5%B9%B4%E7%9A%84%E4%BD%93%E4%BC%9A/">登陆加拿大一年后的体会</a></li>
</ul>
</li>
<li>历史思考
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E7%BD%AE%E8%BA%AB%E4%BA%8B%E5%86%85/">为什么梦想买不起，故乡回不去</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E9%97%B2%E8%81%8A%E5%86%99%E4%BD%9C/">闲聊写作的好处</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E9%87%91%E6%A6%9C%E9%A2%98%E5%90%8D%E4%B9%8B%E5%90%8E/">金榜题名之后</a></li>
</ul>
</li>
<li>工具流分享
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E7%AE%80%E6%98%8E%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/">简明写作指南</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E5%86%99%E4%BD%9C%E6%B5%81/">我的写作流</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E7%94%BB%E5%9B%BE%E6%B5%81/">我的画图流：画图工具与技巧分享</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E6%90%9C%E7%B4%A2%E6%B5%81/">我的搜索流：高效搜索经验分享</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2022/feynman_technique/">最好的学习方式：费曼学习法(Feynman Technique)</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2021/%E7%B3%BB%E7%BB%9F%E6%80%9D%E8%80%83/">系统思考：既见树木，又见森林</a></li>
</ul>
</li>
<li>职场思考
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E7%BC%96%E7%A8%8B%E5%8D%81%E5%B9%B4%E7%9A%84%E6%84%9F%E6%82%9F/">编程十年的感悟</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E4%BB%8E%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E7%A6%BB%E7%BA%BF_%E6%88%91%E5%B8%A6%E8%B5%B0%E4%BA%86%E4%BB%80%E4%B9%88/">那些年，我从微信支付学到的东西</a></li>
</ul>
</li>
<li>软件工程
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2025/a_philosophy_of_software_design/">软件设计的哲学</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%B8%80_%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E8%AE%A4%E7%9F%A5/">测试技能进阶(一): 软件质量认知</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%BA%8C_parameterized_tests/">测试技能进阶(二): Parameterized Tests</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%B8%89_property_based_testing/">测试技能进阶(三): Property Based Testing</a></li>
</ul>
</li>
</ul>
<div class="qr-container" center>
<img src="/ox-hugo/qrcode_gh_e06d750e626f_1.jpg" alt="qrcode_gh_e06d750e626f_1.jpg" class="qr-container" width="160px" height="160px" center="t" />
公号同步更新，欢迎关注👻
</div>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://ramsayleung.github.io/zh/post/2023/%E8%BF%99%E4%BA%9B%E5%B9%B4%E8%B5%B0%E8%BF%87%E7%9A%84%E8%B7%AF_%E4%BB%8E%E5%B9%BF%E5%B7%9E%E5%88%B0%E6%B8%A9%E5%93%A5%E5%8D%8E/">https://ramsayleung.github.io/zh/post/2023/%E8%BF%99%E4%BA%9B%E5%B9%B4%E8%B5%B0%E8%BF%87%E7%9A%84%E8%B7%AF_%E4%BB%8E%E5%B9%BF%E5%B7%9E%E5%88%B0%E6%B8%A9%E5%93%A5%E5%8D%8E/</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://www.linkedin.com/in/yingliu37">https://www.linkedin.com/in/yingliu37</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="https://book.douban.com/subject/1148282/">https://book.douban.com/subject/1148282/</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>summary on 自由庄园</title>
    <link>https://ramsayleung.github.io/zh/categories/summary/</link>
    <description>Recent content in summary on 自由庄园</description>
    <image>
      <title>自由庄园</title>
      <url>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.120.4</generator>
    <language>zh</language>
    <copyright>See this site&amp;rsquo;s source code here, licensed under GPLv3 ·</copyright>
    <lastBuildDate>Mon, 23 Dec 2024 19:17:00 -0800</lastBuildDate>
    <atom:link href="https://ramsayleung.github.io/zh/categories/summary/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>编程十年的感悟</title>
      <link>https://ramsayleung.github.io/zh/post/2024/%E7%BC%96%E7%A8%8B%E5%8D%81%E5%B9%B4%E7%9A%84%E6%84%9F%E6%82%9F/</link>
      <pubDate>Sun, 15 Dec 2024 21:09:00 -0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2024/%E7%BC%96%E7%A8%8B%E5%8D%81%E5%B9%B4%E7%9A%84%E6%84%9F%E6%82%9F/</guid>
      <description>1 前言 马尔科姆·格拉德威尔的“一万小时定律”指出，持续投入一万小时的努力，足以使人在某个领域达到专家水平。 按照每周20小时的练习量计算，每天</description>
      <content:encoded><![CDATA[<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>马尔科姆·格拉德威尔的“一万小时定律”指出，持续投入一万小时的努力，足以使人在某个领域达到专家水平。
按照每周20小时的练习量计算，每天大约需要投入3小时，十年左右才能达成这一目标。</p>
<p>从我写下第一行C代码算起，至今已超过十年。
期间，我编写了超过三十万行代码，其中一部分在微信编写的代码，曾服务过超过一亿的用户。</p>
<p>尽管写了这么多代码，我仍不敢自诩为专家。
但多年的“打工”生涯，日复一日地敲代码，也让我积累了不少感悟。
“工多艺熟”，这些感悟既是对编程技术的思考，更是对职场人生的体味。
毕竟，除了最初在学校学习的几年，我的编程生涯几乎都伴随着“打工”的酸甜苦辣(多是苦辣)。</p>
<h2 id="持续学习"><span class="section-num">2</span> 持续学习</h2>
<p>虽然大学是从C语言入门编程的，但是我在大学时主修的语言是Java
，毕竟Java是门非常成熟的工业语言，有非常丰富的框架，在国内的企业非常受欢迎，工作岗位也多。</p>
<p>我当时从Java Servlets入门Web开发，再学习了非常流行的JavaEE 企业开发框架SSH, 即 <a href="https://struts.apache.org/">Structs2</a> <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>+ <a href="https://spring.io/projects/spring-framework">Spring</a> <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>+ <a href="https://hibernate.org/">Hibernate</a> <sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>, Struct2 负责控制逻辑关系，Spring 负责解耦, Hibernate 负责操作数据库.</p>
<p>而到我开始找工作时，SSH的概念就变了, Struct2 被<a href="https://docs.spring.io/spring-framework/reference/web/webmvc.html">SpringMVC</a> <sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>所取代, SSH 变成了 SpringMVC + Spring + Hibernate.</p>
<p>到我实习入职蚂蚁金服的时候，发现组里代码库操作数据库的ORM框架用的并不是Hibernate，而是 <a href="https://ibatis.apache.org/">Ibatis</a> <sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>, 后面又切换成了新的 <a href="https://mybatis.org/mybatis-3/">MyBatis</a> <sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup></p>
<p>而蚂蚁金服内部使用的也并不是Spring/SpringMVC, 而是自主研发出发的 <a href="https://github.com/sofastack/sofa-rpc">Sofa框架</a> <sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup>, Spring 社区后来觉得Spring框架过于重量级，不利于快速开发，又开发了更轻量级的 <a href="https://spring.io/projects/spring-boot">SpringBoot </a><sup id="fnref:8"><a href="#fn:8" class="footnote-ref" role="doc-noteref">8</a></sup>, 而蚂蚁内部又推出了Sofa版本的 <a href="https://github.com/sofastack/sofa-boot">Sofaboot</a> <sup id="fnref:9"><a href="#fn:9" class="footnote-ref" role="doc-noteref">9</a></sup></p>
<p>去了微信支付后，前期都是在写C++, 使用微信内部自研的svrkit 框架，到后期因为负责数据治理相关项目的缘故，开始使用 Spark + Python + Hive SQL</p>
<p>现在在AWS S3, 因为业务对性能和资源使用有非常高的要求，又开始使用Rust, 而历史业务又是使用Java, 兜兜转转之后，又回到Java的路子上。</p>
<p>细数下来, 这些年来，我写过Java,C++,Python,Rust,Javascript/Typescript 这些语言的生产代码.</p>
<p>除去工作之外, 我还因为学习SICP 学习了Scheme, 因为使用Emacs 而学习了Emacs Lisp, 想做独立开发赚钱学习了Swift, 想感受Ruby on Rails的魅力而学习的Ruby, 还有以前为了压测写的Golang, 还有各种语言对应的框架和库.</p>
<p>自我学习编程以来，学过的编程语言没有10种也有半打了.</p>
<p>我也从来不会把自己定义为某门语言的程序员，如Java程序员,C++程序员等等, 我只叫自己做Software Development Engineer. 语言从来只是工具，只要你持续学习，遇到新的场景，自然就会学习新的编程语言了.</p>
<p>计算机的世界日新月异，可能几个月就会出个新框架，几年又会流行一门新语言，只有持续学习，才能持续保持自己的竞争力。</p>
<h2 id="学好英语"><span class="section-num">3</span> 学好英语</h2>
<p>领袖常说，「东升西降」，虽然不知道此种变化何时才能实现，但起码说明，目前是「西尚在上，东尚在下」，在计算机领域，尤其如此。</p>
<p>最前沿的技术都是英文资料，英语又是世界通行的语言，来自不同国家的开发者又会不约而同地使用英语来交流，
因此学好英语既可以了解最新的技术潮流，又可以融入社区，建立自己的影响力。</p>
<p>疫情之后，越来越多的公司都开始推行远程办公，从全世界招聘开发者.
这就意味着如果你英文过硬，甚至可以离开一线城市，避免高额的生活开销，在老家工作，陪伴在父母身边，同时赚取外汇；这对于饱受996困扰的程序员来说，未尝不是一条出路.</p>
<p>于我个人而言，坚持学习英语可能是我收获最大的投资之一。</p>
<p>熟悉我的朋友，尤其是我的高中同学可能知道，十年以前，我的英文可以说着实挺烂的:
满分150分的英语，只考个及格的90分可谓是家常便饭，后来也只会笨学英语，到高三的时候能考个120分已经是巅峰水平。</p>
<p>但上大学之后，我也没有就此懈怠放下英语，大一还每天去晨读英语。</p>
<p>没有口语交流的条件，就自己创造，去网上找人聊天, 当时还在一个叫 <a href="https://www.interpals.net/">Interpals</a> <sup id="fnref:10"><a href="#fn:10" class="footnote-ref" role="doc-noteref">10</a></sup> 聊天网站认识了全世界好多的人, 其中还有一个是年龄相仿的土耳其女孩，我们还加了Facebook, 经常用Skype 视频聊天.</p>
<p>大学毕业后就没有那么多的时间闲聊后就断了联系, 最近看Facebook的动态，看她也穿上婚纱了.</p>
<p>工作后也一直阅读英文的技术文章，用英文搜索内容，在Stackoverflow 和 GitHub 用英文回答问题，在Discord 的英语学习频道找人聊天, 把电脑和手机系统语言都换成英文的，从学习英语变成用英语。</p>
<p>人们常说，路应该要越走越宽，而不是越走越窄；</p>
<p>而在我看来，英语就是夜里走路时手上拿着的手电筒，可以让我们走自己的路的同时，
扫一下旁边那条道的情况，需要时及时转向，不至于一条路走到黑.</p>
<h2 id="独立思考"><span class="section-num">4</span> 独立思考</h2>
<p>微信以前一直有发最新Iphone手机的传统，但是那已经是4年前的美好时光了。</p>
<p>记得2021年是小龙明确年会不会发手机的第一年，他当时透露，那一年会发个铝片。</p>
<p>当时同事之间还在讨论，Iphone也是一块铝片冲压而成的嘛，那发的是否还是Iphone呢，不发手机只是烟雾弹?</p>
<p>拆开年会礼物之后发现，的确是一块铝片，上面写着「2022保持独立思考」.</p>
<figure>
    <img loading="lazy" src="/ox-hugo/think_independently.jpg"/> 
</figure>

<p>小龙一直强调「独立思考」对微信的重要性，认为如果要选择一个最重要的品质，他会选择「独立思考」。</p>
<p>上级说的不一定是对的，老师说的不一定是对，学术机构说的也不一定是对，媒体说的也不一定是对，声音大的更不一定是对，毕竟有理不在言高。</p>
<p>比如微服务架构非常流行，许多公司都在搞微服务，那么单体架构是否就应该不使用？</p>
<p>作为初创公司或小团队，新业务是否要上微服务架构呢？还是先使用单体架构，业务发展起来再迁移到服务呢？</p>
<p>开发过程免不了要做各种决策，比如技术选型，针对你的需求，你可能会找到一打「看似」符合要求的组件，
可能还会去网上找找对各个组件的评价，会发现众说纷纭，就需要自己独立对每个组件做出分析，找出其优劣，再结合自身团队的特点，做出决策.</p>
<p>关于独立思考，我最喜欢的是一句话是HBO出品短剧《切尔诺贝利》里面，
科学家瓦列里·列加索夫希望克格勃释放调查真相同事乌拉娜·霍缪克的要求，说可以保证她是没问题的，克格勃头子回答的那句话:</p>
<blockquote>
<p>Trust, but verify.(相信，但要核实)</p>
</blockquote>
<h2 id="先跑起来再说"><span class="section-num">5</span> 先跑起来再说</h2>
<p>这句话还有一个广为人知的变种：「又不是不能用」</p>
<p>很多的程序员都是完美主义者，尤其是读过《重构》和《设计模式》的程序员，会倾向于把很多时间来优化代码，做重构。</p>
<p>以前的我也会有类似的冲动，总会想时间去优化代码, 但是项目肝多了之后，有种强烈的感觉，还是先把MVP上线，及早让用户体验。</p>
<p>如果没有用户使用，再好再漂亮的代码也没有任何意义了。</p>
<p>所以经常看到社区有人问做副业的时候，应该用什么语言和框架，PHP/Python/Ruby 会不会太慢，我的观点一直都是，先做个原型跑起来，先找到第一个用户再说。</p>
<p>当运行速度成为瓶颈时, 你的业务已经非常大，肯定有足够的钱可以招一打的程序员把你的项目换成Golang/Java了。</p>
<p>对此，我很赞同坐我旁边大佬关于代码质量的说法：</p>
<blockquote>
<p>make it run, make it fast, make it beautiful.</p>
</blockquote>
<p>最近在做副业的尝试，有个深刻的体会，技术可能是商业里面最不重要的。</p>
<p>从零把产品做出来，推广给用户，用户只会关注你的产品是否好用，能否解决他们的问题.</p>
<p>他们既不会关注你是用C++/Java还是Javascript 写的,也不会关注你代码写得是否优雅，与其执着于技术选型，不如先把产品干出来让用户试用。</p>
<h2 id="顺手的才是最好的"><span class="section-num">6</span> 顺手的才是最好的</h2>
<p>经常会看到有人在社区提问，什么语言最好，什么框架最好，什么编辑器最好，什么操作系统最好。</p>
<p>「最好」是个相当主观的结论，也并没有针对所有场景的「最好」的解决方案, 但是经常能看到社区有人因为哪个语言更好而吵起来.</p>
<p>或者有人在分享A的时候，有人会在下面回复B/C/D更好, 然后又争吵起来.</p>
<p>让不禁让我想起《社会性动物》这本著名的社会心理学著作里面提到的团队认同现象，
当球迷与某支球队产生强烈的认同感后，会将球队视为自我认同的一部分，这里他们会：</p>
<ol>
<li>用「我们」而不是「他们」来称呼球队</li>
<li>将球队的成功视为个人的成功</li>
<li>对批评球队的言论产生防御性反应，将这些批评视为对自我的攻击</li>
</ol>
<p>如果有人问我这个问题，我会回答「你顺手熟悉的工具的最好」。</p>
<p>即使是出于乐趣，编程的目的还是利用计算机解决问题，而解决问题最好的工具就是你最熟悉的工具。</p>
<p>除非你了解的工具不适用于你的问题，那么自然就需要一个新工具，也不要削足适履，矫枉过正。</p>
<p>当然，如果是为了满足求知欲而想去学习一个新的语言，那选择你感兴趣的就可以了。</p>
<p>当初在2017年学习Rust, 也只是因为大四没有课，时间充裕, 想学点有趣的新东西，那时候Rust1.0才发布2年, 可没指望能靠Rust找到工作</p>
<p>记不清在哪里看过的一段话：</p>
<blockquote>
<p>我也曾问过自己类似的问题:</p>
<ol>
<li>是不是好的东西就能流行？不一定</li>
<li>是不是我喜欢的东西就是好的东西？不一定</li>
<li>我会不会花时间精力在一个不一定会流行但是我喜欢的东西上？会</li>
</ol>
</blockquote>
<h2 id="多与人交流"><span class="section-num">7</span> 多与人交流</h2>
<p>程序员固然是和机器打交道，但是本质解决的还是人的问题.</p>
<p>当初学习编程的时候，曾经有个误区，认为自己只要把技术搞好，就可以不去关心什么「人情世故」。</p>
<p>因此初入职场之后，我既是这么持有这样的想法，又是这样行动的，虽然不至于对其他人冷脸相对，但是难免会如好友形容那般：「孤傲」</p>
<p>但是被毒打时间久了才会发现，无论是在国内或国外，都难免会有「人情世故」，用英文来说，那叫 network and connection.</p>
<p>即使我技术能力过硬，也需要被人见到才行，和同事领导相处关系好，才可以在做出成绩的时候，「花花轿子被众人抬」。</p>
<p>所以我现在都是有事没事都和同事们聊天，既可以提升下熟悉度，也可以了解到许多部门八卦，
还可以从同事们抱怨中找到潜在优化点，践行自己「Work hard and be nice to people」的理念.</p>
<p>这行做久了，会发现软件工程其实说到底，就是人的系统工程。</p>
<h2 id="代码不是万能的"><span class="section-num">8</span> 代码不是万能的</h2>
<p>程序写多了之后就会有种幻觉，就是觉得什么事情都可以用代码来解决。</p>
<p>手里拿着锤子的时候，把什么都当成钉子来砸。</p>
<p>被毒打多才认清的事实就是，有很多事情是无法用代码来解决，代码只是个工具，只能在个合适的场景使用, 避免路径依赖.</p>
<p>酒香也怕巷子深，只会写代码没啥用，还要写文章，在公司内部做分享，让别人能「看到你」。</p>
<p>编程肝项目的专业能力固然重要，但是也要有营销自己的软实力，就像一位长者说的那样: 两手抓，两手都要硬.</p>
<p>不知道是中国人讲究谦虚内敛的品质，还是程序员「木讷呆板」的刻板印象，导致大家都不怎么营销自己。</p>
<p>有事没事和老板聊下天，增进下交流，经常露个脸，可能比肝十个项目还有用。</p>
<h2 id="与优秀的人共事"><span class="section-num">9</span> 与优秀的人共事</h2>
<p>从业多年，去过蚂蚁金服，微信支付和AWS 搬砖, 和各种各样的同事都共事过，有个越发强烈的感悟：</p>
<p><strong><strong>要与优秀的人共事</strong></strong></p>
<p>不仅能从他们身上学到非常到的优点，提升技术能力，可以学到最佳实践和工程经验，在Code Review 的时候可以学到更好的编程方式，遇到问题时又有靠谱的队友帮忙和指导。</p>
<p>由优秀的程序员开发出来的系统的独特之处，知道什么叫简单好用的系统，形成自己的技术品味。</p>
<p>品味与美感这个词是很抽象，但是用过了好用的系统，自然就不会对那些粗制滥造，还靠老板背书强行推广的系统感兴趣。</p>
<p>和优秀的同事共事的另外一个好处是可以建立高质量的人脉网络，利于职业发展，跳槽换赛道也多个选择。</p>
<p>虽然初始公司也有优秀的开发者，但是平均而言，大公司优秀程序员的比例会更高，毕竟他们更有竞争力的薪资福利，自然也有更高的招聘门槛。</p>
<p>比如微信就有所谓的面试委员会，除了招聘部门的面试官之外，还要通过面委面试官的考核，避免为了快速招人而降低标准。</p>
<p>所以个人建议应届毕业生，有机会还是去大公司，见识下。</p>
<p>虽然离职微信快两年了，我仍然想念当初同组共事的同事们，他们真的是技术过硬，人又超nice, 还乐于帮忙.</p>
<h2 id="身体是一切的本钱"><span class="section-num">10</span> 身体是一切的本钱</h2>
<p>编程这么多年，落下一堆的职业病。</p>
<p>大学时候就有的鼠标手(腱鞘炎), 工作几年之后「喜提」腰椎间盘突出，久坐下半身会麻痹，还有我曾经浓密黝黑的头发，现在也日渐凋零。</p>
<p>因为腾讯总部有免费的健身房，所以我基本工作日都会去健身房薅公司羊毛，2天有氧慢跑，2天无氧器械，坚持了快3年。
也开始注意自己的饮食，尽量少油少糖不喝酒。</p>
<p>健身虽然不是包治百病，但是起码人显得有精神了，也有精力应付高强度的工作了。</p>
<p>只有失去才会懂得珍惜，也真的只有在开始吃药，去医院复诊，才会开始注意身体。</p>
<p>虽然编程很有趣，虽然养家很重要，但是还是要注意身体，毕竟身体是一切的本钱，垮就没有其他的精彩故事了。</p>
<h2 id="总结"><span class="section-num">11</span> 总结</h2>
<p>无论是编程，还是其他的技能，我感觉都是「马太效应」，你学得越多，你懂得越多，再学新的东西，你就会学得越快。</p>
<p>代码写多了才意识到，程序员的竞争力并不是写代码，也并不是哪门语言或者框架，
其核心竞争力是通过技术解决问题的能力，又何必再去拘泥于哪门具体的编程语言或技术呢。</p>
<p>希望编程十年只是个起点，十年后可以再写一篇「编程二十年的感悟」</p>
<h3 id="推荐阅读">推荐阅读</h3>
<ul>
<li>旅加经历
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E8%BF%99%E4%BA%9B%E5%B9%B4%E8%B5%B0%E8%BF%87%E7%9A%84%E8%B7%AF_%E4%BB%8E%E5%B9%BF%E5%B7%9E%E5%88%B0%E6%B8%A9%E5%93%A5%E5%8D%8E/">这些年走过的路：从广州到温哥华</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E5%8A%A0%E6%8B%BF%E5%A4%A7%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C/">加拿大之初体验</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E5%8A%A0%E6%8B%BF%E5%A4%A7%E8%80%83%E9%A9%BE%E7%85%A7%E7%9A%84%E7%BB%8F%E5%8E%86/">加拿大考驾照的经历</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E7%99%BB%E9%99%86%E5%8A%A0%E6%8B%BF%E5%A4%A7%E4%B8%80%E5%B9%B4%E7%9A%84%E4%BD%93%E4%BC%9A/">登陆加拿大一年后的体会</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%97%81%E8%A7%82%E8%80%85%E7%9C%BC%E4%B8%AD%E7%9A%84%E5%8A%A0%E6%8B%BF%E5%A4%A7%E7%9C%81%E8%AE%AE%E4%BC%9A%E9%80%89%E4%B8%BE/">旁观者眼中的加拿大省议会选举</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E5%A4%8F%E6%97%A5%E6%8D%95%E8%9F%B9%E8%AE%B0/">夏日捕蟹记</a></li>
</ul>
</li>
<li>历史思考
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E7%BD%AE%E8%BA%AB%E4%BA%8B%E5%86%85/">为什么梦想买不起，故乡回不去</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%B6%A6%E5%90%91%E4%BD%95%E6%96%B9_%E4%B8%8D%E5%AE%8C%E5%85%A8%E8%82%89%E8%BA%AB%E7%BF%BB%E5%A2%99%E6%8C%87%E5%8C%97/">润向何方：不完全肉身翻墙指北</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E7%9A%87%E5%B8%9D%E4%B8%8E%E5%AE%98%E5%83%9A/">皇帝与官僚：「上面」与「下面」</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E9%97%B2%E8%81%8A%E5%86%99%E4%BD%9C/">闲聊写作的好处</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E9%87%91%E6%A6%9C%E9%A2%98%E5%90%8D%E4%B9%8B%E5%90%8E/">金榜题名之后</a></li>
</ul>
</li>
<li>工具流分享
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E7%AE%80%E6%98%8E%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/">简明写作指南</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E5%86%99%E4%BD%9C%E6%B5%81/">我的写作流</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E7%94%BB%E5%9B%BE%E6%B5%81/">我的画图流：画图工具与技巧分享</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E6%90%9C%E7%B4%A2%E6%B5%81/">我的搜索流：高效搜索经验分享</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2022/feynman_technique/">最好的学习方式：费曼学习法(Feynman Technique)</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2021/%E7%B3%BB%E7%BB%9F%E6%80%9D%E8%80%83/">系统思考：既见树木，又见森林</a></li>
</ul>
</li>
<li>职场思考
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E4%BB%8E%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E7%A6%BB%E7%BA%BF_%E6%88%91%E5%B8%A6%E8%B5%B0%E4%BA%86%E4%BB%80%E4%B9%88/">那些年，我从微信支付学到的东西</a></li>
</ul>
</li>
<li>软件工程
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%B8%80_%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E8%AE%A4%E7%9F%A5/">测试技能进阶(一): 软件质量认知</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%BA%8C_parameterized_tests/">测试技能进阶(二): Parameterized Tests</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%B8%89_property_based_testing/">测试技能进阶(三): Property Based Testing</a></li>
</ul>
</li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://struts.apache.org/">https://struts.apache.org/</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://spring.io/projects/spring-framework">https://spring.io/projects/spring-framework</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="https://hibernate.org/">https://hibernate.org/</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p><a href="https://docs.spring.io/spring-framework/reference/web/webmvc.html">https://docs.spring.io/spring-framework/reference/web/webmvc.html</a>&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p><a href="https://ibatis.apache.org/">https://ibatis.apache.org/</a>&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p><a href="https://mybatis.org/mybatis-3/">https://mybatis.org/mybatis-3/</a>&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7">
<p><a href="https://github.com/sofastack/sofa-rpc">https://github.com/sofastack/sofa-rpc</a>&#160;<a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:8">
<p><a href="https://spring.io/projects/spring-boot">https://spring.io/projects/spring-boot</a>&#160;<a href="#fnref:8" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:9">
<p><a href="https://github.com/sofastack/sofa-boot">https://github.com/sofastack/sofa-boot</a>&#160;<a href="#fnref:9" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:10">
<p><a href="https://www.interpals.net/">https://www.interpals.net/</a>&#160;<a href="#fnref:10" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>登陆加拿大一年后的体会</title>
      <link>https://ramsayleung.github.io/zh/post/2024/%E7%99%BB%E9%99%86%E5%8A%A0%E6%8B%BF%E5%A4%A7%E4%B8%80%E5%B9%B4%E7%9A%84%E4%BD%93%E4%BC%9A/</link>
      <pubDate>Sun, 25 Feb 2024 19:46:00 -0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2024/%E7%99%BB%E9%99%86%E5%8A%A0%E6%8B%BF%E5%A4%A7%E4%B8%80%E5%B9%B4%E7%9A%84%E4%BD%93%E4%BC%9A/</guid>
      <description>1 前言 不知不觉，落地加拿大已经快一年，套用句老话，真的是光阴似箭。 想来蜜月期已过，可以去掉刚落地时【兴奋】和【新奇】的滤镜，从道听途说，到雾</description>
      <content:encoded><![CDATA[<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>不知不觉，落地加拿大已经快一年，套用句老话，真的是光阴似箭。 <br/></p>
<p>想来蜜月期已过，可以去掉刚落地时【兴奋】和【新奇】的滤镜，从道听途说，到雾里看花，再分享自己在加拿大的亲身经历 <br/></p>
<p>本文算是<a href="https://ramsayleung.github.io/zh/post/2023/%E8%BF%99%E4%BA%9B%E5%B9%B4%E8%B5%B0%E8%BF%87%E7%9A%84%E8%B7%AF_%E4%BB%8E%E5%B9%BF%E5%B7%9E%E5%88%B0%E6%B8%A9%E5%93%A5%E5%8D%8E/">《那些年走过的路，从广州到温哥华》</a>和<a href="https://ramsayleung.github.io/zh/post/2023/%E5%8A%A0%E6%8B%BF%E5%A4%A7%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C/">《温哥华的初体验》</a>的后续。 <br/></p>
<h2 id="work-life-balance"><span class="section-num">2</span> Work Life Balance</h2>
<p>自我工作以来，基本就是在体验995的工作节奏，我曾经无数次【幻想】过，如果我能每天5点下班，我的生活会是怎么样的？ <br/></p>
<p>我会有接近6-7个小时的空闲时间，我会把这些时间用来干什么呢？ <br/></p>
<p>当我不曾拥有时，我总是在不断地想象。 <br/></p>
<p>但当我真的可以5点，甚至4点多下班的时候，我并没有我自己想象的那般激动，欣喜若狂，而是当作理所当然，很平淡地接受。 <br/></p>
<p>毕竟我所在的BC省，法定工作时间都只是7.5个小时，我朝九晚五，甚至有点高于本地平均水平，尤其是我在北美著名的【血汗工厂】打工，需要Oncall，甚至比本地公司还要卷，所以我开始觉得朝九晚五工作时间有点长。 <br/></p>
<p><strong><strong>人阿，就是贪婪，总是会得寸进尺，得陇望蜀。</strong></strong> <br/></p>
<p>我5点下班之后，我可以【奢侈】地花一个小时去做晚餐，然后吃完晚餐和舍友一起看个把小时的电视，一边撸着猫一边吐槽今天的工作内容；或者在天气放晴的时候，和舍友在附近的公园饭后溜圈，再考虑下明天要学习哪个视频，做点什么新菜。 <br/></p>
<p>饭后到睡前的时间，花一到两小时，学习一下新的技术，Swift或者Ruby on Rails，或者读读新书，又或者和家人亲友视频聊个天，互诉衷肠。 <br/></p>
<p><strong><strong>原来那些失去的，用于加班的时间，重新获得后，也只是把它还给生活本身。</strong></strong> <br/></p>
<h2 id="英语"><span class="section-num">3</span> 英语</h2>
<p>未落地加拿大时，最最忧心的问题就是自己的英语不过关，无法正常地与人沟通交流，也无法正常工作。 <br/></p>
<p>毕竟我此前没有考过雅思，也没有在纯英文的环境中生活过，不知道自己英语水平如何。 <br/></p>
<p>落地之后，强迫自己开口对话，虽然难免会出现词不达意和【执笔忘字】的情况，但终究是敢开口说话了， <br/>
难免会遇到不认识的词不标准的发音，但是快速纠错之后，情况就慢慢在好转，脸皮厚一些就好了。 <br/></p>
<p>后来还花了两周时间准备了雅思考试，顺便测试下自己的英语能力，然后考了个7分，好像还行。 <br/></p>
<p>刚开始产品经理们开会，他们都是美国人，是真能扯，语速也真的快，好像高中时候的英语听力一样，只看到两个人不停地在张嘴说话，大脑一片空白。 <br/></p>
<p>到后面熟悉公司的黑话之后，情况也在慢慢变好，也听懂他们在说什么了，的确也是在扯。 <br/></p>
<p>从以前非常紧张与同事1:1开会，当现在已经能主动和同事拉会1:1，我可以感觉到自己的听力和口语能力也在不断地提高。 <br/></p>
<p>说到底，外语也不是什么特别的秘技，也只是种用进废退技能而已。 <br/></p>
<h2 id="惊喜"><span class="section-num">4</span> 惊喜</h2>
<p>人言洛阳花似锦，偏我来时不逢春。 <br/></p>
<p>想来入行前，都是听说互联网公司的各种红利，但是当然真正来到这个行业时，才发现自己啥红利都没有吃上，来了都是当人矿的，起了个大早，赶了个晚集，还碰上各种【奇遇】。 <br/></p>
<p>想我22年中面试的时候，那时还在北美【大放水】，通货膨胀的期间，各种大包满天飞，我却因为 international hire的原因，只赶上个low ball 包，因为我此前已经遇过很多次，已经可以泰然处之。 <br/></p>
<p>但是到23年初，受美国加息降通涨的影响，Meta和Twitter开了个坏头，北美的互联网都开始裁员，我司也不例外，不仅是裁员，连发出去的Offer开始撤回或者延期，然后我的Offer 也被影响了，原来面的组岗位被取消了。 <br/></p>
<p>我当时的心情不算是五雷轰顶，也算得上是晴天霹雳。 <br/></p>
<p>还好找到新的组接收，然后岗位被搬到另外一个新组，无论如何，先干着吧，不至于还没入职就失业，起码干的事情是新的，一切都是从0开始。 <br/></p>
<h2 id="什么tm的叫惊喜"><span class="section-num">5</span> 什么TM的叫惊喜</h2>
<p>在新组，我是组里的第一个SDE（软件工程师），之前的两位组员都是DE（数据工程师），manager也是刚升任成经理的，甚至我入职时，他的 title都还没有变成 manager。 <br/></p>
<p>马上我发现，组里是新人，新组，老代码，人是新的，但是代码却是历史代码，我们需要去维护这些历史代码，但是没有人能解释其中的逻辑为什么要这么写？ <br/></p>
<p>紧接着，我发现，代码主体都是SQL，项目的逻辑隐藏在数以万行计的SQL代码中，因为SQL的抽象程度高，就更难以理解业务逻辑了。 <br/></p>
<p>4月底，在我入职不到3周，我就被安排成为一个新项目的 owner，然后被告知要在半年后的 Re:Invent发布，当时我甚至不知道什么是 Re:Invent. <br/></p>
<p>后来才被告知，Re:Invent之于我司，犹如【WWDC】之于Apple，【微信公开课】之于微信，都是用来发布新产品的全球大会。 <br/></p>
<p>我当时心想，老板还真的看得起我嘛。 <br/></p>
<p>本着【能力越大，责任越大】的自嘲心理，我就这样接手了这个项目，成为了Owner。 <br/></p>
<p>和我的直属manager，总监以及产品沟通之后发现，他们似乎只要求要做这样一个产品，但是这个产品是什么， <br/>
应该怎么做，都是完全没有概念，也没有文档。 <br/></p>
<p>在我的认知中，一个项目从提出到上线的完整生命周期应该包括以下的部分： <br/></p>
<ol>
<li>某位领导或者产品经理提出新产品的想法 <br/></li>
<li>完善 use case, 细化想法 <br/></li>
<li>产品的各个利益方（stakeholders），或者叫涉众达成共识，领导层面获批 <br/></li>
<li>产品出需求文档，明确要做什么，具体的业务规则是什么 <br/></li>
<li>技术评估需求可行性 <br/></li>
<li>技术出设计文档 <br/></li>
<li>技术根据设计方案给出排期 <br/></li>
<li>技术开发需求，自测，内部上线 <br/></li>
<li>产品及涉众验收产品 <br/></li>
<li>内测及公测上线 <br/></li>
</ol>
<p>然而，我现在拿到手的只是一个模糊的需求概念和上线的日期，没有详细的需求文档，口头描述了大概要做什么。 <br/></p>
<p>我只能不停地追着产品经理和manager问他们我要做什么，能否先给我个需求文档，对于需求文档，产品经理也不会直说没有， <br/>
只是会说解释一通后，让你意会到没有，我只能当练习英语听力。 <br/></p>
<p>最后我被告知，先把senior data engineer写的一大段SQL转成服务代码，把End-to-End的结果跑出来再说。 <br/></p>
<p>我就不懂，既然SQL都能跑了，还要我写个服务来跑SQL呢？ <br/></p>
<p>咨询了一番，我还是没得出个所以然，最后只能是按照这段SQL来写设计文档，并根据设计方案开发服务。 <br/></p>
<p>心里第一次浮起疑问：【贵司的做事方式就是这样的么？它是怎么做到这种规模的？】 <br/></p>
<p>7月初，美国转来了一位L6的 senior SDE还有一位L5的SDE也加入到项目里面，以缓解资源不足的问题。 <br/></p>
<p>加入后不久，这两位工程师也问起了需求文档的事，得到的回复也是言不及没有需求文档，意含没有需求文档。 <br/></p>
<p>没有需求文档实在是没法干活，最后是我们三个技术开发溱一起，每个人把自己对需求的理解一人一句写下来，也算是人生新经历了。 <br/></p>
<p>7月底，服务End-to-End 跑通，将结果呈给总监与产品经理，然后总监和产品经理反馈这不是他们要的，要求修改需求。 <br/></p>
<p>8月，根据修改后的需求重新设计服务，分成三个模块，三个工程师每人负责一个模块。 <br/>
总监和产品经理再修改需求，并要求开发进行建模，但是新需求的模型不具备可行性，产品经理无法给出具体的业务规则，最后开发无法建模，导致新需求被搁置。 <br/></p>
<p>9月，主力产品经理突然宣布离职，此时离Re:Invent 不到两个月。 <br/></p>
<p>10月初，开发按照变更后的需求完成服务开发，然后发现服务使用的源数据全部是脏数据，服务结果不可用，团队已有使用该数据源的服务也是错的，开发紧急调研，再切换到新数据源。 <br/></p>
<p>11月初，所有服务组件万事具备，只待Re:Invent东风，然后被产品经理告知，我们的项目不能发布，因为没有在领导层面获得批准。 <br/></p>
<p>所以让开发紧赶慢赶，干了半年的大项目，连审批都还没有通过。 <br/></p>
<hr>
<p>开发项目期间不停地浮起疑问，【按照这种做事方式，这家公司是怎么做到这种规模的？】 <br/></p>
<p>但做人不能半途而废，过河抽桥，所以即使心中百般疑问和不解，我依旧是尽心尽力把这个项目做完。 <br/></p>
<p>在做完这个项目之后，我就谋求转组了，这样的做事方式着实不是我的风格，我主观认为也非长久之计。 <br/></p>
<hr>
<p>1月，GM（老板的老板的老板）离职。 <br/></p>
<p>2月，总监也离开了这个部门。 <br/></p>
<h2 id="裁员阴云"><span class="section-num">6</span> 裁员阴云</h2>
<p>自从2022年起，中美的互联网行业都笼罩在裁员的阴云之下，只是两者背后的原因各种不同。 <br/></p>
<p>朋友们在我登陆加拿大之后也和跟我吐槽国内环境变差，红利期已过，我只是个臭写代码的，也分析不出其背后的原因。 <br/></p>
<p>但是我知道的，大洋彼岸的北美大厂也在持续裁员，首当其冲的就是Google等大厂， <br/>
在人们2024年不要再有裁员的期待中，1月Google就以裁员来开年，真是【合家富贵】。 <br/></p>
<p>疫情时期的【大放水】，导致大厂们都用大包疯狂扩张，为了抑制通胀而采取的加息措施让企业们紧缩信贷， <br/>
压减成本，而人力成本在互联网大厂中可谓是占大头，然后在Meta和Twitter的带头下，开始挥刀裁员。 <br/></p>
<p>开始时，各大厂裁起员来还有些扭捏，裁完人公司高层还会写信安慰员工，说就裁这一波，高层还会出来道歉背锅。 <br/></p>
<p>然而裁到现在，已经变得明目张胆，和肆无忌惮，像Google这种， <br/>
都宣布2024年会持续裁员，还有其他大厂，就没有正式宣布裁员和什么时候结束裁员，就这么裁着。 <br/></p>
<p>毕竟在缺乏增长点情况下，裁员能缩减开支，让财报好看。 <br/></p>
<p>至于打工人们的看法，从来就不会有人在乎的。 <br/></p>
<p>所以「工作」也回归到它本身的意义上，这也只是份工作而已，It&rsquo;s just a job，不要赋予工作过多的意义。 <br/></p>
<p>「得益于」裁员，我现在对工作的看法已经很佛系了，以前那种拼命卷，想拿到好绩效证明自己的想法已经不复存在了，也难怪朋友会说我现在心态变好了。 <br/></p>
<h2 id="万税之国"><span class="section-num">7</span> 万税之国</h2>
<p>虽然在来加拿大之前听说过加拿大的税非常高和多，但是只有从我的钱包把钱拿走，才能切实体会到什么叫【万税之国】。 <br/></p>
<p>除了薪资收入30+%的个人所得税外，还有日常消费12%的消费税，15%的酒税， <br/>
以及超过50%的资本所得税（比如银行存款利息，基金，股票收益等等），各种五花八门，名目繁多的税种。 <br/></p>
<p>虽然知道【死亡和缴税无可避免】，但是死亡是一次性的，缴税却是持续性的。 <br/></p>
<p>更何况，交税后的许多社会福利却是和收入挂钩的，你的收入越低，能享受到的福利就越多，而富人又有非常多的避税手段。 <br/></p>
<p>像 daycare, 牛奶金，低保这些，都是和每个人的收入挂钩，低就有，高就没有。 <br/></p>
<p>所以说下来，而低收入者可以少交税，却问政府要钱要福利；富人又可以避税，只有老实打工的中产是被收割的，福利又少。 <br/></p>
<p>难怪人们总说，加拿大适合躺平吃福利，不适合来挣钱，带资来加拿大的可以靠吃政府福利过得非常滋润。 <br/></p>
<h2 id="医疗"><span class="section-num">8</span> 医疗</h2>
<p>加拿大的医疗体系是吃全民大锅饭，免费医疗。 <br/></p>
<p>免费的饭一般都不会很好吃，也不会很容易吃到。 <br/></p>
<p>加拿大的医疗体系我还没有机会亲身体验过，但是舍友有过几次的问诊纪录，原来抽个血化验排队等个两-三个小时着实是件很稀松平常的事。 <br/></p>
<h2 id="此处并非天堂"><span class="section-num">9</span> 此处并非天堂</h2>
<p>世界上不存在天堂，所以如果抱着前往天堂的愿景来加拿大，难免会失望，加拿大也有自身的问题。 <br/></p>
<p>疫情期间为了保消费实行的【大放水】政策导致持续的高通涨， <br/>
高企的物价，为了抑制通涨而实行的加息政策而导致高企的利率，7-8%的房贷车贷利率。 <br/></p>
<p>飙升的房价，虽然待过深圳的我觉得温哥华房价还赶不上深圳， <br/>
但是对比温哥华本地的中位数收入，温哥华的房价已经远远高于居民的中位数收入，一般人都负担不起了。 <br/></p>
<p>以房租举例，我现在与舍友合租，房租以人民币计价，大概是我之前在深圳的四倍。 <br/></p>
<p>增加的移民人口与减少的工作机会，各种【苛捐杂税】让带资过来的移民和本地的金主都不需要创办企业， <br/>
资本没法流动起来，自然不能创造就业岗位，随着移民人数的增加，以及激进的难民接收政策，就进一步加剧【僧多粥少】的问题。 <br/></p>
<p>而加息导致的企业的信贷紧缩，也抑制企业扩张，甚至导致企业缩减规模，进行裁员，又推进了失业的严重程度。 <br/></p>
<p>而政府对失业人数增多的应对措施竟然是【头痛治脚】地增加失业保险的缴纳基数，而非想办法重启经济活力，进一步扩大就业市场。 <br/></p>
<p>持续增多的各种税收与各种层出不穷的问题，也难怪认识的加拿大人都对现在的政府相当不满。 <br/></p>
<h2 id="好山好水好寂寞"><span class="section-num">10</span> 好山好水好寂寞</h2>
<p>温哥华的自然风光的确很美，依山望海。 <br/></p>
<p>经历过加拿大的冬天之后，我能理解为什么当地人在夏天都一股脑地出去玩，因为夏天不玩，冬天真的没得玩。 <br/></p>
<p>温哥华的冬天，只有雪和雨，阴冷潮湿，早上八点半日出，下午3点半日落，日照时间也只有7-8个小时。 <br/></p>
<p>冬天除了滑雪和滑冰外，基本没有太多其他种类的户外活动。 <br/></p>
<p>而温哥华的夏天要到接近7月份才来临，那时候大家可以露营，划船，登山。 <br/></p>
<p>很多店铺晚上6-7点就会关门，邮递员周末也不会送信，更不会有广州那种深夜大排档的盛况。 <br/></p>
<p>可能是因为温哥华相对国内人少，各种活动和玩法也没有国内花，也难怪有人评价其为【好山好水好寂寞】 <br/></p>
<h2 id="好脏好乱好热闹"><span class="section-num">11</span> 好脏好乱好热闹</h2>
<p>回到国内时的第一感受是，好多人，真的好久没有看到过这么多人。 <br/></p>
<p>得益于国内相对廉价的人力以及世界工厂的地位，以致于国内相对加拿大拥有价格更便宜，品质更好的产品与服务。 <br/></p>
<p>即使是深夜，到处也是人头攒动，可以很轻易地朋友玩通宵，到处都是人气和烟火气。 <br/></p>
<p>所以总会有朋友问我，【后面你会回国么？】 <br/></p>
<p>我只能说，未来的事无法计划，我也没有一个确切的答案。 <br/></p>
<p>当初想要出来只是某些契机因缘际会的结果，未来的事谁也不知道，只能拭目以待。 <br/></p>
]]></content:encoded>
    </item>
    <item>
      <title>那些年，我从微信支付学到的东西</title>
      <link>https://ramsayleung.github.io/zh/post/2023/%E4%BB%8E%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E7%A6%BB%E7%BA%BF_%E6%88%91%E5%B8%A6%E8%B5%B0%E4%BA%86%E4%BB%80%E4%B9%88/</link>
      <pubDate>Thu, 06 Apr 2023 18:31:00 -0700</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2023/%E4%BB%8E%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E7%A6%BB%E7%BA%BF_%E6%88%91%E5%B8%A6%E8%B5%B0%E4%BA%86%E4%BB%80%E4%B9%88/</guid>
      <description>1 前言 从微信支付离职，我能带走什么？文档，代码，设计方案还是微信支付的漏洞？ 如果我带走这些资产，那我现在就在深圳的看守所里面吃着公家饭了。 既</description>
      <content:encoded><![CDATA[<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>从微信支付离职，我能带走什么？文档，代码，设计方案还是微信支付的漏洞？</p>
<p>如果我带走这些资产，那我现在就在深圳的看守所里面吃着公家饭了。</p>
<p>既然这些资产不能带走，那么我能带走什么？</p>
<p>如果沉下心思考，就会发现，这些资产价值并不大，对于工程师而言，也没有领导想象中的那么重要，除非我们试图将代码放在黑市售卖。</p>
<p>对于业务开发而言，也可能是同样的道理。业务开发每天对着业务需求做CRUD，可能会羡慕开发底层组件的工程师，可以学习并提升技术水平，而自己技术水平还是在原地打转，能学习到的东西随着时间的推移，越来越少。</p>
<p>王安石的《游褒禅山记》有这样的感叹：</p>
<blockquote>
<p>夫夷以近，则遊者众；险以远，则至者少；而世之奇伟瑰怪非常之观，常在于险远，而人之所罕至焉；故非有志者，不能至也。</p>
</blockquote>
<p>所谓的「险以远」，并不特指深奥难懂的底层组件技术，也指思考的深度；</p>
<p>如果多去思考技术和业务，挖掘背后的本质，我们也可以看到许多「世之奇伟瑰怪非常之观」</p>
<h3 id="鱼与渔"><span class="section-num">1.1</span> 鱼与渔</h3>
<p>文档，代码，设计都是针对特定问题的解决方案，如果离职到新公司之后，我们遇到的问题肯定不会完全一样，或者手头可用的工具不一样，那么这些资产的价值就会打折扣。</p>
<p>更何况这些资产都是「一次性的」，用完即止；是属于「授人以鱼不如授人以渔」中的「鱼」；是「生产线」上的「成品」，而我对能生产「成品」的「生产线」更感兴趣。</p>
<p>二战结束以后，美国把1600多名德国科学家、工程师、技术人员带到美国，包括沃纳.冯.布劳恩和他的V-2火箭研究团队；</p>
<p>而苏联凭借地理位置靠近德国占领了一些重要的工厂，比如著名的德国光学巨头卡尔蔡司公司，苏联几乎搬空了该公司的设备，把1万多台设备中的9000多台都搬到了苏联。</p>
<p>有人对现成的「鱼」感兴趣，也有人对未来的「渔」感兴趣，我属于后者。</p>
<h2 id="思路"><span class="section-num">2</span> 思路</h2>
<p>既然选择「渔」，那么，要怎么挑选适合的「渔」来丰富自己的「渔库」呢？</p>
<p>两千多年前的老师孔子就已经给出自己的答案：</p>
<blockquote>
<p>见贤思齐焉，见不贤而内自省也</p>
</blockquote>
<p>见到那些优秀的实践和思路，就学下来；对于有弊端的实践，就要分析弊端形成的原因，再想办法避免和改进，别人掉进去的坑，我们就不要进去凑热闹了。</p>
<h2 id="贤"><span class="section-num">3</span> 贤</h2>
<h3 id="模式化"><span class="section-num">3.1</span> 模式化</h3>
<p>1994年，4个博士合著了一本书，书中对常见的设计问题进行了分类，归纳与总结，并且针对每一类问题，给出可重用的解决方案。他们将这些可以复用的解决方案，称之为设计模式(design pattern)。</p>
<p>这本书也成为软件工程和面向对象设计经久不衰的经典。</p>
<p>这本书即是《设计模式：可复用面向对象软件的基础》(Design Patterns:
Elements of Reusable Object-Oriented Software)，这四位博士也被称为Gang of Four (GoF)</p>
<blockquote>
<p>A design pattern is the re-usable form of a solution to a design problem.</p>
</blockquote>
<p>那么什么是模式呢？</p>
<p>按照另外一本经典名著《面向模式的软件架构卷一》的定义：</p>
<blockquote>
<p>当专家求解一个问题时，他们一般不会发明一种和已有解决方案完全不同的方案来处理这个问题。他们往往想起已解决过的相似的问题，并重用其解法的精华来解决新问题。</p>
</blockquote>
<p>在微信支付研发理念中，程序设计和开发，很多问题都是类似，或者是重复出现的。</p>
<p>针对此类重复问题，直接复制代码来解决，是下下策。</p>
<p>对代码进行抽象，复用代码来解决重复问题，也是下策。因为使用公共库会导致代码之间无法隔离，并且把逻辑隐藏在公共库，会导致无法分析代码的调用关系。</p>
<p>微信支付研发理念推崇的上策是对问题进行抽象，归纳出这类问题的通用解法，即模式；更进一步的是，为模式定义对应的代码模板，直接生成代码。</p>
<p>即使不生成代码，也可以将模式实现成对应的组件或库，方便直接调用。</p>
<p>具体例子如：</p>
<p>微信支付就总结常见的分布式事务场景，设计和开发了分布式事务编排中间件。通过在画板编排事务资源，即可生成对应的代码模板，开发者只需要在指定的地方编写个性化代码即可。</p>
<p>针对常见的领域服务，抽象了基于状态机和事件驱动的模型，设计了领域服务的代码生成组件。可通过绘制状态机UML图，直接生成接口代码，由开发者填充实现。</p>
<p>以上算是技术组件的模式化，对业务开发而言，还有对业务的模式化。</p>
<p>比如对扣款模式进行抽象，扣款时开启事务，进行风控校验，创建（或不创建）业务单，查询支付方式，轮询支付方式进行扣款，异常关单等。</p>
<p>当时组里的大神龙哥，就是对已有的扣款模式进行了抽象，基于面向对象，设计成同步扣款框架，定义了以上的接口，由业务进行继承和扩展。再使用同步扣款框架对已有的3个类似但不完全一致的代扣扣款业务进行了重构，把扣款模式都统一了。</p>
<h3 id="复盘"><span class="section-num">3.2</span> 复盘</h3>
<p>没有人能保证自己写的代码绝对不会出错，当错误与问题不期而至的时候，我们能做的就是将「错误」的效益最大化，即从「错误」中吸引教训，做到「不二过」。</p>
<p>复盘，就是在「错误」中吸引教训，做到「不二过」的手段。Amazon 也有类似的概念与机制，称为 Correctness Of Error(COE)</p>
<p>我们一直说「失败是成功之母」，但根据生物学常识，只有「成功才是成功之母」，或者说「小步的成功才是大步成功之母」，别人踩过的坑，我们就不要进去了。</p>
<p>复盘的一般步骤：</p>
<ol>
<li>回顾目标</li>
<li>故障影响</li>
<li>时间精确到分钟（甚至秒级别）的过程回顾。比如是新需求写出一级故障的bug, 就从拿到需求，设计方案，开发，部署上线，流量灰度，问题告警，处理手段，到故障排除，每个时间点操作都写下来。</li>
<li>分析问题原因，挖掘导致故障的表面原因与根本原因</li>
<li>总结针对问题的改进措施。</li>
<li>落实改进措施</li>
</ol>
<p>通过这样的复盘过程，确保同样的问题不会再次出现。</p>
<p>这样的工作方式和理念，无论是对个人还是组织，才同样适用。</p>
<h3 id="持续学习"><span class="section-num">3.3</span> 持续学习</h3>
<p>微信支付一直在推广全栈工程师，认为只从自己做的事情来思考问题，容易导致盲维和短板，看待问题的眼光容易受限。</p>
<p>此外，根据《人月神话》的理念，工程师之间的沟通成本，会随着人数的增加，呈指数水平上涨。而成为全栈工程师，可以一个人处理完需求，沟通成本就下降到0，极大地提交工作效率。</p>
<p>微信支付的全栈工程师定义是前端工程师 + 服务端工程师 + 数据开发工程师。</p>
<p>当然，某一端的开发工程师，不会某天突然自己变成全栈工程师，这些都是需要持续学习的，人总是需要不断提升自己的。</p>
<p>不能人为能给自己设限，把自己定义成「前端工程师」，「后端工程师」，或者「数据工程师」，应该是「工程师」。</p>
<h3 id="需求分析"><span class="section-num">3.4</span> 需求分析</h3>
<p>每个工程师都需要做需求，与正确地做需求相比，做正确的需求显然更重要。</p>
<p>如何确保做正确的需求呢？</p>
<p>微信支付选择的方法论是：​需求分析与业务建模，脱胎自UML专家潘家宇的著作《软件方法》。大概的流程是：</p>
<ol>
<li>寻找老大（需要满足谁的诉求）</li>
<li>寻找业务用例（业务执行者做什么事情，比如QQ音乐用户购买QQ音乐会员，就是一个业务用例）</li>
<li>根据业务用例，寻找系统用例。（例如商户发起扣款是一个系统用例；扣款成功回调通知商户也是一个系统用例）</li>
<li>将需求的业务规则，总结归纳成系统用例的规则。</li>
</ol>
<p>当然，业务用例和系统用例这套东西，可能只有微信支付用。但找准客户，帮客户解决真正的痛点，创造真正的价值，这个是有普适性的。</p>
<p>做需求时，可以多问这两个问题：</p>
<ol>
<li>谁是我们的客户。</li>
<li>我们在帮他们解决什么问题。</li>
</ol>
<h3 id="云雨伞"><span class="section-num">3.5</span> “云雨伞”</h3>
<p>“云雨伞”这个概念来自内部的一份PPT，讲述的是如何更好地向别人提出建议，内容大概是：</p>
<blockquote>
<p>屋外乌云密布，儿子要出门，妈妈对儿子说，马上要下雨，淋雨容易生病，把伞带上吧。</p>
</blockquote>
<p>“云雨伞”的步骤就是：</p>
<ol>
<li>指出现状：乌云密布，马上要下雨</li>
<li>导致的问题与影响：淋雨容易生病</li>
<li>提出措施和建议：把伞带上。</li>
</ol>
<p>通过这样的表述方式，会比「把伞带上」这样直接命令的话，更容易让人接受。</p>
<p>当然，如果阅读过《非暴力沟通》，会发现“云雨伞”的表述，其实是《非暴力沟通》总结的有效沟通方式的简化版本：</p>
<ol>
<li>清楚地表达观察结果</li>
<li>表达感受</li>
<li>说出是什么需求和原因导致了这样的感受</li>
<li>具体的请求</li>
</ol>
<p>当然，总是强调「云雨伞」的做法，把问题归咎到提问者身上，我是不赞同的。</p>
<p>领导经常说，提问题的时候，要把自己的解决方案也提出来，没有人喜欢听吐槽。</p>
<p>话虽如此，但是我想起之间还在蚂蚁时，一位P10工程师的文章，《没有答案，也可以提问题》。</p>
<p>提问题是为了帮助组织发现问题，如果不能吐槽的话，很多问题也不会被发现，自然也得不到解决，毕竟也没有人喜欢帮别人的问题提解决方案。</p>
<hr>
<p><span class="timestamp-wrapper"><span class="timestamp">&lt;2023-05-20 六&gt;</span></span></p>
<p>针对如何高效交流，我写了一篇自己的心得文章：<a href="https://ramsayleung.github.io/zh/post/2023/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%BD%AF%E6%8A%80%E8%83%BD%E6%8C%87%E5%8C%97_%E9%AB%98%E6%95%88%E4%BA%A4%E6%B5%81%E7%AF%873/">软件工程师的软技能指北（三）：高效交流篇</a></p>
<h3 id="一致性"><span class="section-num">3.6</span> 一致性</h3>
<p>领导总说，软件工程的本质就是管理和控制复杂度，而一致性就是减少复杂度的有力工具。所谓的一致性，可以理解成统一的流程，统一的组件等等</p>
<p>在这种理念的驱动下，微信支付内部使用统一的编程语言，统一的工具库，统一的存储组件（使用别的存储需要特殊审批和说明），统一的数据访问组件，使用统一的研发流程。</p>
<p>保证每个研发工程师，即使调到微信支付的其他团队，也是使用同样的工具，即插即用，和车床生产的螺丝一样。</p>
<p>开始我对这样的理念是持支持态度的，但到AWS以后，我的想法发生了动摇。</p>
<p>因为我发现AWS的工具真的是琳琅满目，应有尽有，而Amazon也并未对使用什么样的组件作要求。</p>
<p>反正AWS对各种组件的支持都很好，所以业务团队可以自行选择适合自身业务的任意组件，能完成需求就好。</p>
<p>所以我现在不确定，通过追求一致性来降低复杂度这样的做法是否合理。</p>
<h3 id="设计优于实现"><span class="section-num">3.7</span> 设计优于实现</h3>
<p>从2020年初起，微信支付内部的需求都需要先写设计文档，Leader 评审通过才能开发。</p>
<p>设计时有个非常关键的点，就是列出所有能想到的可行方法，而后比较各个方案的优劣，再作出取舍，选择最终方案。</p>
<p>软件工程没有银弹，系统/软件设计就是不断地在做取舍，当然，人生也是。</p>
<p>设计才是最重要的，而编码和实现都是简单的，因为这只是水到渠成的事（我也不是说可以不用重视代码质量，毕竟这是吃饭的手艺）</p>
<p>我个人觉得，对于业务开发（或者对于软件工程师）而言，不要过多花时间关注在编码上，而应该是花时间思考需求和问题，找到好的设计上。</p>
<p>良好设计带来的红利，是要多于良好编码带来的红利的。</p>
<p>如果把编码比作战术，设计就是战略，不要让战术的勤奋，掩盖了战略上的懒惰。</p>
<p>编码算是建筑的外墙和玻璃，而设计就是承重墙和地基，毕竟换皮容易换根难。</p>
<p>微信支付对于业务代码的态度是，能生成就尽量生成，就不要人写了，要多花些时间在设计上。</p>
<h2 id="总结"><span class="section-num">4</span> 总结</h2>
<p>拿走「代码，文档」终究是术，学走「思想和理念」才是道。</p>
]]></content:encoded>
    </item>
    <item>
      <title>润向何方：不完全肉身翻墙指北</title>
      <link>https://ramsayleung.github.io/zh/post/2023/%E6%B6%A6%E5%90%91%E4%BD%95%E6%96%B9_%E4%B8%8D%E5%AE%8C%E5%85%A8%E8%82%89%E8%BA%AB%E7%BF%BB%E5%A2%99%E6%8C%87%E5%8C%97/</link>
      <pubDate>Wed, 29 Mar 2023 20:25:00 -0700</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2023/%E6%B6%A6%E5%90%91%E4%BD%95%E6%96%B9_%E4%B8%8D%E5%AE%8C%E5%85%A8%E8%82%89%E8%BA%AB%E7%BF%BB%E5%A2%99%E6%8C%87%E5%8C%97/</guid>
      <description>1 前言 因为之前我发文总结了一些打工心得，提到我最终选择了去加拿大，有比较多朋友对此比较感兴趣（或者有疑问）：为什么选择的是加拿大？而不是xx</description>
      <content:encoded><![CDATA[<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>因为之前我发文总结了一些打工心得，提到我最终选择了去加拿大，有比较多朋友对此比较感兴趣（或者有疑问）：为什么选择的是加拿大？而不是xx国。</p>
<p>我写了这篇文章来总结下个人的分析和见解，以下纯属个人见解，每个人应该结合自身实际情况具体分析。若有疑问，建议进一步咨询中介。</p>
<p>如无兴趣，博君一笑</p>
<h2 id="基本认知"><span class="section-num">2</span> 基本认知</h2>
<h3 id="为什么要出国"><span class="section-num">2.1</span> 为什么要出国</h3>
<p>要想清楚为什么要出国？</p>
<p>世界上没有天堂，跟你说存在天堂的，只会是骗你的。</p>
<p>想清楚为什么而出国，才能建立好认知，这个事关你能否在国外能坚持下来。</p>
<p>一切都要像婴儿一样，重新开始学习。</p>
<p>切忌为了出国而出国，我就是想出去。</p>
<p>冲动的情绪就像一阵风，来得快，去得也快，在挫折面前很容易就演变成沮丧；只有深思熟虑后的决定，才能经得起考验。</p>
<h3 id="小马过河"><span class="section-num">2.2</span> 小马过河</h3>
<p>和世界上大多事情一样，出国这事也是「小马过河」。</p>
<p>光听别人说，自己不去实践和调查，总是无法过这条「河」的。你听到的案例可能是来自「松鼠」或「老牛」，但你要清楚自己的定位，你可能是「马」。</p>
<p>因为出国的途径和排列组合着实非常多，你能通过的，我不一定能通过，反之亦然。</p>
<p>而你需要做的，就是在诸多的排列组合中，找出对你而言，成本最能接受，可行性最高的组合。</p>
<h3 id="身份"><span class="section-num">2.3</span> 身份</h3>
<p>无论是想要去外国工作，旅游还是生活，「身份」是一切的前提。</p>
<p>「身份」可以理解成别国给你发的准入许可证，如果没有「身份」，你就无法在这个国家定居或工作，除非你愿意当「黑户」。</p>
<p>而签证就可以理解成是短期（十年以内）的准入证明，比如留学签证，旅游签证，工作签证。如果两个国家关系友好，那么两个国家公民在对方国家短暂（少于半年）的逗留，有可能就不需要签证，比如日本公民2023年可以访问190个国家或地区不需要签证，台湾有近145个免密国家或地区。</p>
<p>绿卡, permanent resident(PR), 即永久居民。以前美国permanent resident的卡是绿色的所以叫绿卡，后面变成一种对PR的统称了。如果你拿了某国绿卡之后，你就可以永久逗留在某个国家了，但此时你还是原来国家的国籍。</p>
<p>入籍，更换国籍，从法律上正式成为x国人，拥有x国护照。</p>
<h2 id="常见途径"><span class="section-num">3</span> 常见途径</h2>
<h3 id="读书"><span class="section-num">3.1</span> 读书</h3>
<p>去某个国家读书，工作，然后申请绿卡定居下来，是大部分人出国定居的途径，也相对而言为稳妥的途径。</p>
<ul>
<li>难度：中等</li>
<li>成本：较高</li>
<li>风险：较低</li>
</ul>
<p>成本包括时间成本和金钱成本。</p>
<p>时间成本，如果你是读master, 你需要花费2-3年来完成学业；读书期间，需要学费和生活费，这个就是金钱成本。如果你本来已经在工作，后面去读书，那么在此期间损失的收入也算是金钱成本的一部分。</p>
<p>一般而言，如果留学生毕业后能找到支持工作签证的工作，那么就可以拿到工作签证，继续留在这个国家，然后排期等绿卡。</p>
<p>当然，那只是一般而言。如果你要去美国这样的热门国家读书，找到工作之后也不是直接给你发工作签证H1B的，因为僧多粥少，需要抽签。</p>
<p>近些年来，H1B 中签率逐年下降，现在大概在20%, 理工科学生毕业后最多能参加3次H1B抽签。</p>
<h3 id="工作"><span class="section-num">3.2</span> 工作</h3>
<p>如果你已经在工作，不想花成本读书，那么直接申请某个国家的工作，也是一个可行的路径：</p>
<ul>
<li>难度：较高</li>
<li>成本：低</li>
<li>风险：低</li>
</ul>
<p>但是你就需要研究你能否胜任某个国家的工作，并且雇主能否帮你解决工作签证问题。</p>
<p>像清洁，外卖这些体力劳动，大部分成年人都能胜任，但是他们的雇主大多无能力（意愿）帮你解决工作签证问题。</p>
<p>另外，也需要考虑你的心仪国家的签证体系，是否对国外务工者足够友好。</p>
<p>以美国举例，除非是杰出人才，不然想直接从外国去美国打工，基本没戏。杰出人才的标准大概是博士学历，发了一堆的顶会论文，有客观指标和数据来证明你足够「杰出」。</p>
<p>相对而言，加拿大，日本，新加坡，欧洲国家基本都可以申请工作签证，但各有各的门槛。</p>
<p>比如加拿大，从国外直接招人，需要先申请LMIA(Labour Market Impact Assessment)，相当繁琐和复杂，就是说明为什么这个人要从国外招，不优先考虑我们加拿大国内的劳动力，避免过多的外来劳工冲击本地劳动力市场，当时律所帮忙，整LMIA都花了2-3个月。</p>
<p>新加坡还有个 EP工签，满足一定的薪水条件即可；日本也同理，程序员能面上日本的公司，基本能申请到签证。</p>
<p>这个途径主要就和心仪国家以及是自身能力相关，基本没有什么成本，风险也低。</p>
<h4 id="内部转岗"><span class="section-num">3.2.1</span> 内部转岗</h4>
<p>这个算是求职的分支途径，对于跨国大公司，可能在世界各地都有分部。那自然就有人会想，我能否先面试到中国的分部公司，然后再内部转岗到心仪的国家所在的部门呢。</p>
<ul>
<li>难度：中等</li>
<li>成本：低</li>
<li>风险：低</li>
<li>心理压力：max</li>
</ul>
<p>真的是个小机灵鬼。</p>
<p>但是这个主要是和公司策略以及是目标国家签证体制相关。</p>
<p>再以大家关注的美国为例，这种内部转岗到美国需要的签证是L1 签证，分为L1A 和L1B.</p>
<p>L1A是发给高管的，有效期七年；L1B是发给普通打工人的，有效期五年。在座的可能都还是打工人，所以我们就来看下L1B。</p>
<p>那L1B和H1B的差别是什么呢？H1B 可以跳槽，L1B不能跳槽。</p>
<p>也就是在你拿L1B 签证期间，需要一直为这家公司打工，如果中途被裁，那就只能回国了。</p>
<p>因为L1B这样被人拿捏，所以L1B 一般都是拿low ball，就不要想着拿高薪大包了。</p>
<p>当然L1B 也可以排队绿卡和抽H1B，只是看看留学生H1B 的中签率，就能想象到没有L1B 抽H1B 中签率了。</p>
<p>所以L1 签证需要在较长时间里，承受非常大的心理压力。</p>
<h3 id="结婚"><span class="section-num">3.3</span> 结婚</h3>
<p>通过和公民或者绿卡持有者结婚获得移民资格，路径非常简单，成功率与个体强相关。</p>
<ul>
<li>难度：因人而异</li>
<li>成本：低</li>
<li>风险：很低</li>
</ul>
<p>不过多展开</p>
<h3 id="投资"><span class="section-num">3.4</span> 投资</h3>
<p>某些国家，可以通过投资一定的钱，获得工作签证或绿卡。因为我没有这样的实力，所以完全没有了解过。</p>
<ul>
<li>难度：因人而异</li>
<li>成本：高</li>
<li>风险：低</li>
</ul>
<h3 id="曲线-非正当途径"><span class="section-num">3.5</span> 曲线/非正当途径</h3>
<p>了解到的，不建议途径：</p>
<ul>
<li>政治庇护</li>
<li>「走线」，非法入境，然后黑下来；</li>
</ul>
<p>曲线途径，在心仪国家产子，「父凭子贵」。</p>
<p>无论去哪，都是为了更好地生活，不要为了润而润。</p>
<h2 id="国家分析"><span class="section-num">4</span> 国家分析</h2>
<h3 id="常见选择"><span class="section-num">4.1</span> 常见选择</h3>
<p>妈妈常和我说，「人往高处走」。对于我而言，既然是出国是为了更好地生活，那选择自然是发达国家。</p>
<p>美国，加拿大，日本，澳大利亚，英国，德国，荷兰，法国，新西兰，新加坡等等。</p>
<h3 id="见解与分析"><span class="section-num">4.2</span> 见解与分析</h3>
<h4 id="美国"><span class="section-num">4.2.1</span> 美国</h4>
<p>难怪很多人都想去美国，毕竟我们的教科书上也说，美国是世界上唯一的超级大国。</p>
<p>美国工作机会多，工作薪资高，税收较低（相对于列表中的其他国家），挣到钱才能更好地生活。</p>
<p>对于计算机相关行业从业者来说，美国就是最好的工作地。</p>
<p>也因为持有这种想法的人非常多，导致去美国的难度较高，而常见的出国途径也只有这几种，详见前文分析。</p>
<h4 id="欧陆国家-德国-荷兰-英国-法国"><span class="section-num">4.2.2</span> 欧陆国家：德国，荷兰，英国，法国</h4>
<p>德国，荷兰和英国都是欧洲大陆的国家，因此可以把他们都放在同一类型里面。</p>
<p>欧陆国家的特点就是生活非常非常躺，会有各种的福利和假期，如果不想卷，在欧陆国家生活会是一个很不错的选择。</p>
<p>就计算机行业而言，欧陆国家算不温不火，美国的企业也在欧洲设有分部。</p>
<p>但是天底没有免费的午餐，这些福利都是来自于纳税人的税收，福利越多，税收自然越重（反过来却不一定成立，某些国家税收非常重，但是基本无福利）</p>
<p>并且，这种普遍吃大锅饭的氛围，也不卷，也就导致欧陆的薪资不高（相对美国而言）。</p>
<p>年薪10万欧元已经是比较高的薪资，但可能要交1/3 - 1/2的税。</p>
<p>还有一个问题，就是如果想申请这些欧陆国家的绿卡，除了英国外，基本都需要学习第二门外语，德语，荷兰语，法语等等。</p>
<p>并且，华人在欧陆的数量也不多。</p>
<p>个人主观感觉，英国工作岗位没有那么多，德国和荷兰比较缺IT的劳动力，我在Linkedin 更新简历后，有比较多的德国和荷兰的recruiter 和猎头找过来。</p>
<p>做高频交易的：</p>
<figure>
    <img loading="lazy" src="/ox-hugo/high_frequency_trading.png"/> 
</figure>

<h4 id="日本"><span class="section-num">4.2.3</span> 日本</h4>
<p>虽然因为历史和文化的原因，很多朋友情感上对日本持否定态度，但无可否认的是，日本是地理位置距离中国最近的几个老牌发达国家。</p>
<p>日本可能是对程序员而言，最容易来的发达国家之一（可能没有之一），对学历要求低（大专以上），对年龄也没有要求。</p>
<p>签证比五眼等国家的好拿，而且对人的要求也很低，并不需要你的日语有多么溜，只要能正常交流，把工作做出来，来日本还是很容易的。</p>
<p>对于二次元爱好者来说，日本来谓是圣地。</p>
<p>虽说身处东亚的日本也卷，但那是相对西方发达国家而言的。</p>
<p>前段时间看到个新闻，说因为日本的低生育率，政府都要严格禁止企业加班了，对于习惯了996的中国程序员而言，日本可以说是很佛系了。</p>
<p>日本很多公司实行的是终生雇佣制，也就是意味着，公司很难开除你。</p>
<p>同是黄种人，在外貌上与日本人几无差异，生活习惯也类似，当然除非口语能练习得与日本人一样好，不然开口就有差别了。</p>
<p>距离中国的距离也近，从东京飞到中国的最南边香港，也只需要4个小时。</p>
<p>但平心而论，日本的IT业并不发达，甚至可以说比较落后。</p>
<p>在日本最top 的薪资应该是日本Google，5年以上的工程师大概能开出2000 千万日元的薪资；次top的就是日本亚麻，Indeed，PayPay 5年以上的工程师大概能开出1000-1500千万日元的薪资，所以日本的薪资在国内是没有竞争力的。</p>
<p>日经中文网有这样一条新闻，细看下来非常能反应现状：</p>
<figure>
    <img loading="lazy" src="/ox-hugo/%e6%97%a5%e7%bb%8f%e6%96%b0%e9%97%bb.png"/> 
</figure>

<p>但因为长年累积下来的卷文化，东亚三国的生育率都逐年下降，未来社会可能缺乏活力。</p>
<p>在日本，想要拿PR，需要在日本居住10年，期间不能有任何犯罪记录，不能有失信行为，要遵守公序良俗做一个守法的移民。</p>
<p>但通过高度人才签证，理论上最快一年就能拿到永久。</p>
<p>高度人才签证是2017年推出的新政策，一定程度上说明了日本人才的紧缺，该签证采取的是打分制。</p>
<p>在日本工作生活三年或者一年即可申请，其中70分-79分者原则上是3年，80分以上则只需要理论上的一年就可以拿到永驻资格。</p>
<p>我参照打分表，给自己估了一下分，可以去到80分以上。</p>
<h4 id="新加坡"><span class="section-num">4.2.4</span> 新加坡</h4>
<p>新加坡有非常多国内公司的分部或者总部，比如Shopee, 字节跳动，Tiktok；也有非常多跨国公司的亚太总部放在新加坡，也有非常多聚居的华人，不会有陌生和疏离之感。</p>
<p>所以对于很多人来说，新加坡是出国的首选，无论是内部转岗或者是直接申请新加坡的公司；部分新加坡公司甚至可以使用中文来面试。</p>
<p>此外，根据美国-新加坡自由贸易协定，新加坡的公民（绿卡持有者不行）可以申请H1B1工作签证去美国工作。</p>
<p>但对我来说，新加坡这个选项，很快被我排除掉了，原因如下：</p>
<ol>
<li>新加坡国土面积太小，俗称坡县。国土面积小，可容纳公民少，缺乏战略纵深，容易受地缘政治影响。近些年因为大量移民进入，物价与房租飞涨，说明不堪重负了。</li>
<li>新加坡也很卷，因为大量中国公司和移民的涌入，导致新加坡也卷了起来。如果选择继续卷，何必出国再卷呢。</li>
<li>新加坡的PR不好拿，理论上新加坡的EP工签两年内就可以申请绿卡，但是据说绿卡很玄学。</li>
</ol>
<p>对我而言，新加坡是个面积缩小，难度强化版本的海外深圳。</p>
<h4 id="澳大利亚-新西兰"><span class="section-num">4.2.5</span> 澳大利亚，新西兰</h4>
<p>澳大利亚和新西兰合并在一起了，都在南半球。</p>
<p>IT行业比较一般，本土公司是Atlassian，Canva，国际公司在澳大利亚都有分部，如Google, Amazon 这些，高级工程师大概能给到15-20W澳元，工资对比国内没有明显优势。</p>
<p>环境优美，工作也不卷，对新移民友好。</p>
<p>因为身处在南半球岛国上，即使因为地缘政治，出现战争也难涉及这两个岛国。</p>
<h4 id="加拿大"><span class="section-num">4.2.6</span> 加拿大</h4>
<p>加拿大有非常多的华人，华人社区非常多，在温哥华的Richmond 地区，街上商铺的招牌有许多使用的都是中英双语，听着街上的粤语，甚至有种在香港的感觉。</p>
<p>IT业还可以，大部分的知名美国公司在加拿大有分部，例如Google, Meta, Amazon, Microsoft 等等。</p>
<p>拿到工签落地之后，考出符合要求的语言成绩，就可以申请绿卡。</p>
<p>根据北美自由贸易协定，美国给予加拿大和墨西哥公民的非移民工作签证（TN签证）。</p>
<p>所以入籍加拿大之后，可以申请TN签证南下美国打工。</p>
<p>加拿大可能是对新移民最友好和宽松的国家之一。</p>
<p>加拿大的Express Entry 项目，支持在加拿大境外申请加拿大的绿卡，会根据你的经历，学历，语言成绩进行打分，入池排队，分数高的就可以直接获得加拿大的绿卡。</p>
<p>但加拿大也有许多不足之处，冷，税收高，工资低。</p>
<p>另外，加拿大三面环大洋，南面是盟国美国，所以除非是外星人入侵，不然战争是没有可能波及加拿大的。</p>
<h4 id="香港-台湾"><span class="section-num">4.2.7</span> 香港，台湾</h4>
<p>香港IT行业就业机会较少，互联网很少，大多是交易或者投行公司。</p>
<p>香港也不是个适居的地方，物价高，房价尤其高，和新加坡一样。</p>
<p>随着中国经济的发展以及《国安法》的实施，香港和深圳的差距进一步缩小。</p>
<p>通过优才计划，要7年才能拿到香港居民身份证。</p>
<p>对于非广东人来说，香港的官方语言粤语一样算外语。</p>
<p>台湾很好，经济发达，免费医疗和教育，同根同源，都不需要适应期。</p>
<p>但中国大陆公民没有身份可以去台湾。</p>
<p>签证是邦交两国之间的准入身份，台湾与中国大陆肯定不会是邦交国关系。</p>
<h4 id="总结"><span class="section-num">4.2.8</span> 总结</h4>
<p>个人向：</p>
<figure>
    <img loading="lazy" src="/ox-hugo/%e5%9b%bd%e5%ae%b6%e6%80%bb%e7%bb%93.png"/> 
</figure>

<h2 id="申请国外工作流程"><span class="section-num">5</span> 申请国外工作流程</h2>
<p>如何将一头大象放去冰箱：</p>
<ol>
<li>打开冰箱门</li>
<li>将大象放进去</li>
<li>关闭冰箱门</li>
</ol>
<p>程序员如何申请国外的工作：</p>
<ol>
<li>在Leetcode （非大陆版本）上面刷题，基本所有的公司都需要解算法题。这个就是游戏规则，你喜欢或者不喜欢，规则都不会改变</li>
<li>学习并准备 System Design 的知识</li>
<li>使用 Linkedin （非大陆版本），将个人信息更新成英文，撰写英文简历，选择心仪国家和公司进行投递；或者等猎头和recruiter 找上门。</li>
<li>在一亩三分地（<a href="https://www.1point3acres.com/">https://www.1point3acres.com/</a>） 上查看面经</li>
<li>面试</li>
<li>拿 Offer</li>
</ol>
<p>具体每一步要如何展开，每个人都会不一样，无法一概而论。</p>
<h2 id="总结"><span class="section-num">6</span> 总结</h2>
<blockquote>
<p>种一棵树最好的时间是十年前，其次是现在。</p>
</blockquote>
<p>无论是去哪个国家，学会外语是第一要务，这个决定了你能否通过别国公司的面试，以及能否正常地在外国生活。</p>
<p>无论你的外语水平什么样，无论是什么语言，英语也罢，日语也罢，现在开始学习都不会迟，因为它决定你的职业上限。</p>
<p>凡事预则立，不预则废。无论要做什么，都需要提前准备。出国也罢，在国内也罢，都需要事先做好准备。</p>
<p>自学能力，无论什么时候，都需要学习，固步自封不会有任何的改变。在一个新的环境里，你的知识储备随时都可能不够用。</p>
<p>信息检索与分析能力，很多解决方案和知识就在哪里，如果不会检索和分析，你就一直待在井里，观着天。</p>
<p>不会有人随时，免费，耐心地给你解答问题的，Google 和 ChatGPT 除外。在询问别人前，自己先找下答案。</p>
<p>勇气，人类的赞歌就是勇气的赞歌，没有勇气，想法就永远不会变成现实。</p>
<h2 id="参考"><span class="section-num">7</span> 参考</h2>
<ul>
<li><a href="https://github.com/The-Run-Philosophy-Organization/run">润学：如何寻找适合自己的方案</a></li>
<li><a href="https://github.com/The-Run-Philosophy-Organization/run/blob/main/%E6%B6%A6%E5%AD%A6%E6%96%B9%E6%B3%95%E8%AE%BA/%E5%90%84%E5%9B%BD%E9%80%89%E6%8B%A9/%E4%BA%9A%E6%B4%B2%E5%92%8C%E5%A4%A7%E6%B4%8B%E6%B4%B2/%E6%97%A5%E6%9C%AC/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%B6%A6%E6%97%A5.md">润学：日本攻略</a></li>
<li><a href="https://zh.cn.nikkei.com/career/humanresource/48731-2022-06-09-08-53-47.html#:~:text=%E6%97%A5%E6%9C%ACIT%E4%BA%BA%E6%89%8D%E4%BE%9B%E6%87%89%E8%B7%9F,2019%E5%B9%B4%E6%B8%9B%E5%B0%914%EF%BC%85%E3%80%82">日本IT人才短缺，收入低於平均工資</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>这些年走过的路：从广州到温哥华</title>
      <link>https://ramsayleung.github.io/zh/post/2023/%E8%BF%99%E4%BA%9B%E5%B9%B4%E8%B5%B0%E8%BF%87%E7%9A%84%E8%B7%AF_%E4%BB%8E%E5%B9%BF%E5%B7%9E%E5%88%B0%E6%B8%A9%E5%93%A5%E5%8D%8E/</link>
      <pubDate>Sat, 25 Mar 2023 21:51:00 +0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2023/%E8%BF%99%E4%BA%9B%E5%B9%B4%E8%B5%B0%E8%BF%87%E7%9A%84%E8%B7%AF_%E4%BB%8E%E5%B9%BF%E5%B7%9E%E5%88%B0%E6%B8%A9%E5%93%A5%E5%8D%8E/</guid>
      <description>1 前言 人总是健忘的, 所以在行走一段人生旅途之后, 总要不自觉地停下来, 整理下前段时间的得与失, 得大于失证明这段时间没有浪费, 欣喜之余, 准备下一</description>
      <content:encoded><![CDATA[<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>人总是健忘的, 所以在行走一段人生旅途之后, 总要不自觉地停下来, 整理下前段时间的得与失, 得大于失证明这段时间没有浪费, 欣喜之余, 准备下一段旅途;</p>
<p>失大于得，那就说明这段时间是混过去了，唯有过后空叹，无可奈何花落去。</p>
<p>但无论是失大于得，还是得大于失，已经过去的就注定成为历史，无法挽回，人终究只能是向前看。</p>
<p>谨以本文，纪念我至今的打工生涯。</p>
<h2 id="广州"><span class="section-num">2</span> 广州</h2>
<h3 id="自学"><span class="section-num">2.1</span> 自学</h3>
<p>虽然当初没有去到我想去的大学，但我也不想虚度大学四年时光。</p>
<p>我对自己的大学生涯有很高的要求，我上的学校可能并不如其他人，但是我大学要学会的东西并不能比其他人差。</p>
<p>大一计算机导论的老师对我们说，国内很多教材编写得可能并没有那么好，最好还是看国外的经典教材。</p>
<p>因此，我把教材大多换成了国外的教材，并通过配套的网课进行自学</p>
<p>在大二的时候，把计算机相关的课程，例如计算机网络，数据库，数据结构，算法，C语言与Java语言等都自学完了。</p>
<h3 id="大二第一份-offer"><span class="section-num">2.2</span> 大二第一份 Offer</h3>
<p>并开始和同学组队写程序，我负责用Java写后端，参加各种比赛。</p>
<p>当时和同学模仿「超级课程表」这个APP，写了一个我们学校版本的仿制品，称为「眸知(MooApp)」.</p>
<p>因为我们学校最有标识的神兽是：动物科学院放养的一群黄牛，而黄牛叫声类似Moo，因此就起了这样的一个名字
（粤语发音就类似：无知，就什么也不知道）</p>
<p>做完「眸知」这个App之后，就开始一鱼多吃，把它投到所有能参加的比赛，并在其中一个叫「<a href="https://cse.sysu.edu.cn/gdhpcs/xhdt/52801.htm">穗港IT应用系统开发大赛</a>」获得了三等奖。</p>
<figure>
    <img loading="lazy" src="/ox-hugo/mooapp.png"/> 
</figure>

<p>颁奖典礼上邀请了加州州立大学的教授<a href="https://www.linkedin.com/in/yingliu37">刘颖</a>作程序开发经验分享，在分享过程中，
刘颖先生提了一些问题作为互动，大多问题我都举手作答。</p>
<p>会后，刘颖教授与我交流，询问我是否有意愿去他在深圳的创业公司（6滴科技有限公司）实习，怀揣着忐忑的心情，我表达了同意。</p>
<p>就这样，我在大二暑假，在无需面试的情况，我拿到了人生的第一份实习Offer。（Offer来得太容易，当时同学还担心我去深圳进传销窝了）</p>
<figure>
    <img loading="lazy" src="/ox-hugo/6%e6%bb%b4%e5%ae%9e%e4%b9%a0offer.png"/> 
</figure>

<p>实习期间，我主要是参与电商系统DevOps 功能的开发，主要是通过Docker 来做CI/CD。</p>
<p>但现在回想，当时并没有什么产出，大部分时间都在学习各种文档和概念（此前对Docker, CI, CD等根本没有认知），在老刘的指导下编写 Shell脚本。</p>
<p>可能是我学习态度还算勤勉，工作尚且认真，在实习期结束，我也拿到了公司的 Return Offer。</p>
<p>暑假结束，大三开始了。我用实习工资，给自己交了大三的学费。</p>
<h3 id="大三实习-offer"><span class="section-num">2.3</span> 大三实习 Offer</h3>
<p>大三要上的主要是专业选修课，大三下学期，我选的课是「面向对象分析与设计」，并且我此前已经自学过这门课了。</p>
<p>就尝试和授课老师曾玲（我们同学口中的「老奶奶」，是个专业水平非常高，并且人非常好的老师）商量，
我已经自学完这门课了，可否申请不来上课，按照提交作业和考试，我继续去深圳实习。</p>
<p>令人惊讶的是，老奶奶竟然答应了我这个要求，于是我又回去了深圳实习，过上了边打工边上课的生活。</p>
<p>（再回首，现在会觉得当初自己没有好好学习，光顾着打工，却不知未来打工之路漫长无期；
但是没法用现在的标准去要求过去的自己，大二时家里生了变故，我希望自己能解决学费和生活费，我需要收入。）</p>
<figure>
    <img loading="lazy" src="/ox-hugo/%e8%87%aa%e5%ad%a6%e7%94%b3%e8%af%b7.png"/> 
</figure>

<p>这次参与的是电商平台的后端开发，我们当时的代码都是开源项目，所以还能在Github 上找到<a href="https://github.com/reactivesw?type=source">源码</a></p>
<figure>
    <img loading="lazy" src="/ox-hugo/reactivesw.png"/> 
</figure>

<p>虽然我拿到了Return Offer, 但我感觉当时在做的业务并没有太多前景，无论是电商平台还是跨境电商，都已经是一片红海；</p>
<p>开发流程和开发工具也相对简陋，并且我想去BAT大厂见识下，于是我开始准备大三暑假的实习。</p>
<p>当时很天真，因为我只会Java, BAT 里面只有Alibaba 是用 Java 的，其余两家用的是 C++，所以我就只投了阿里。</p>
<p>而在选择事业群的时候，我也不知道阿里云，菜鸟是干什么的，所以就投了我用过的淘宝和支付宝。</p>
<p>简历被支付宝的面试官捞起了，凭着这些年的实习打工和各种开发工具，开发框架折腾经验，通过了三轮面试，顺利拿到了支付宝的实习Offer，而要去的部门是芝麻信用。</p>
<figure>
    <img loading="lazy" src="/ox-hugo/%e5%ae%9e%e4%b9%a0offer.png"/> 
</figure>

<p>当时自我感觉还不错，毕竟我知道这个部门。</p>
<h2 id="杭州"><span class="section-num">3</span> 杭州</h2>
<h3 id="芝麻信用"><span class="section-num">3.1</span> 芝麻信用</h3>
<p>当时支付宝的总部还在黄龙时代，距离新总部Z空间建成还有1年多的时间。</p>
<p>在新人培训结束的那个午后，我戴着实习生的工牌，迎着风走出公司大门。</p>
<p>回头看去，那个印着支付宝的Logo的大楼赫然立在身后，我面带微笑，感觉前景充满了希望。</p>
<p>但我当时还没有考虑Return Offer的事，还以为一切都是水到渠成的。</p>
<p>在实习期的两个月里面，一边学习蚂蚁的各种中间件和Sofa框架，一边跟着导师尝试做需求。
但却没有做出成果，以此证明自己有留用能力的紧迫感。</p>
<p>每天都是开心地过着，甚至导师还会用他的内网权限，带着年轻的我，一起看内网阿里味的相亲帖子。</p>
<p>直到留用面试的到来，其他的实习生同学都在紧张地准备，还拉上同事帮忙模拟面。</p>
<p>与密锣紧鼓准备的其他同学相比，我却还在自我感觉良好。因为没有找其他同事模拟面试，我甚至都不知道终面面试会问什么。</p>
<p>以现在的眼光来讲，终面面试，我发挥得是一塌糊涂，完全是答非所问，也没有结合业务和自己实习做的事情。
所以，我理所当然地没有拿到Return Offer.</p>
<p>而更为糟糕的是，因为我是迷之自信，以为自己可以拿到Return Offer, 就没有去准备秋招面试。</p>
<p>所以到实习结束，我是0 Offer在手，并且秋招已经结束，即使拿着在蚂蚁金服的实习经验，投递的简历也石沉大海。</p>
<p>我就这样回了广州，时间又来到了大四。</p>
<h2 id="广州"><span class="section-num">4</span> 广州</h2>
<p>我在懊悔和自责中继续投递着简历，但是依旧音讯全无。</p>
<p>我甚至去参加了腾讯的霸面，但是在酒店枯坐了一下午，也没有等来任何的面试机会。</p>
<p>我不禁焦急了起来，然后开始临时抱佛脚地学习起了C++.</p>
<p>这个时候，师兄帮我找了个机会，把我的简历发到了他在UC的部门群里面，由此我获得了一次面试实习的机会，表现达标的话，可以留用。</p>
<figure>
    <img loading="lazy" src="/ox-hugo/UC%e9%9d%a2%e8%af%95.png"/> 
</figure>

<p>我相当珍惜这次的机会，在面试前做了很多准备。</p>
<p>这次只有一轮面试，面试官是中心的总监，在紧张和不安中，我基本回答上了面试官的问题，面试官让我回去等消息。</p>
<p>不久后，我收到了HR的电话，通知我面试通过了，但是现在秋招已经结束了，已经没有实习生的HC了。</p>
<p>但他们给我提供了一个选项，以合作伙伴（即外包）的身份入职工作半年，再视表现决定是否录用。</p>
<p>虽然知道我可能被白嫖，但是我别无选择，只能努力向前，争取留用。</p>
<h3 id="uc"><span class="section-num">4.1</span> UC</h3>
<p>我就在UC 开始了自己的外包（实习生）之旅，邮箱也从之前的 <code>gongsun@alipay.com</code> 变成了 <code>wb-lzr345319@alibaba-inc.com</code>, 但平心而论，团队Leader 和导师真的是在用心指导和培养我。</p>
<p>因为有了在芝麻信用的翻车之鉴，我也格外珍惜这次的机会，所以花了很多心思和精力学习业务和参与开发。</p>
<p>与之前在芝麻只写运营系统代码不同，我这次写的代码是真的运行在生产系统上。</p>
<p>当时在UC 做的是业务存储系统，提供一个通用的存储模型供其他业务使用。</p>
<p>使用方定义模型，直接把数据存储在我们的系统里面，我们提供通用的数据访问接口，有点类似内部的PAAS 平台。</p>
<p>有趣的是，当时的团队是使用 HBase 来做实时系统的存储的，并使用Mysql 作备份，通过消息队列在两套存储系统之间作数据同步，然后再从 Mysql 拉取数据，写入到 ElasticSearch, 通过ES 提供各种个性化的查询接口。</p>
<p>使用 Hbase 主要是看上了它的水平扩展能力，非常易于扩展。</p>
<p>但 Hbase 此前主要是配合Hadoop 作离线计算，UC内部没有其他团队有类似的实践，所以有很多问题需要解决。</p>
<p>比如FGC降低系统吞吐量，负载均衡切换到其他的节点，在大流量情况下造成雪崩，把所有节点打挂，导致系统不可用的问题，就需要针对GC 参数作调优，减少GC Stop The World 的影响。</p>
<p>我从这个系统中学习到非常多系统设计和热点调优的知识，上手实操又加深了我对这些开源中间件的认知， 初窥了系统设计的门道。</p>
<p>虽说此前我连 Hadoop 和 ElasticSearch 是什么都不知道。</p>
<p>半年之期很快就到了，因为之前的翻车状况太过惨烈，这次的留用面试，我提前两周就开始准备PPT，并和导师总结实习结果和收获。</p>
<p>凭借半年的实习期的表现，以及最后的面试发挥，我通过留用面试，我把这个Offer 拿到手了。</p>
<p>但是，我没有选择这个Offer。</p>
<h3 id="再话蚂蚁金服"><span class="section-num">4.2</span> 再话蚂蚁金服</h3>
<p>在UC 工作4个多月后，我在v2ex 上面看到一个帖子，说蚂蚁这个团队秋招还有名额，欢迎应届生投递。</p>
<p>因为在UC 留用的事情不确定，本着多个Offer 多份保障的心思，我尝试着投递了简历，很快就收到面试电话邀约。</p>
<p>还是熟悉的三轮面试，但是可以深切感受到，校招的三轮面试，难度要远大于实习的面试。</p>
<p>终面时，面试官（我的未来二级主管）甚至问到数据库怎么水平扩容，要怎么分库分表，事务如何保障等等。</p>
<p>如果没有在UC 实习的这段经历，我可能真的没法办法回答得上，这些都不是看看面经就能回答上的问题。
我感觉也超出了校招对应届生的要求，就这样被「拷问」了接近一个半小时，远超出正常的面试时间。</p>
<p>经过这三轮面试之后，我终于收到了第一份校招 Offer，兜兜转转，又拿到了蚂蚁金服的Offer 了。可谓「山穷水尽疑无路，柳暗花明又一村」：</p>
<figure>
    <img loading="lazy" src="/ox-hugo/%e6%a0%a1%e6%8b%9boffer.png"/> 
</figure>

<h3 id="抉择"><span class="section-num">4.3</span> 抉择</h3>
<p>所以，我拿到了两份校招Offer，两份来自「阿里」的 Offer 。</p>
<p>最后，在权衡发展前景，技术成长和个人成长等因素，我选择了蚂蚁金服的Offer, 就这样，我以不一样的途径，又回到了蚂蚁这个最开始的地方。</p>
<p>这次去的部门是网商银行。</p>
<hr>
<p>如果从现在的眼光来看，实习时没有在芝麻信用留用，不见得是件坏事。</p>
<p>因为芝麻信用用户虽然多，但是没有找到业务发展的突破点和营收方向。在集团层面，已经连续几次被打业绩差了。（阿里人熟知的3.25）</p>
<h2 id="杭州"><span class="section-num">5</span> 杭州</h2>
<h3 id="近卫军"><span class="section-num">5.1</span> 近卫军</h3>
<p>2018年，一群来自天南海北的应届生来到了蚂蚁金服，公司开展了为期1个月的脱产培训，名为「青年近卫军」培训，我也认识了一群好朋友。</p>
<figure>
    <img loading="lazy" src="/ox-hugo/%e8%bf%91%e5%8d%ab%e5%86%9b.jpg"/> 
</figure>

<p>在这一个月的培训里面，上午来自不同部门的专家对我们进行组件和技术的培训，下午我们组队开发项目 mini-alipay 项目，然后为了赶进展，开始体验到传说中的996的工作节奏。</p>
<p>最后我们成功完成了自己的一个mini-alipay 的Android App, 并且凭借这个项目，收获到一篮子的奖项。</p>
<figure>
    <img loading="lazy" src="/ox-hugo/%e8%bf%91%e5%8d%ab%e5%86%9b%e8%8d%a3%e8%aa%89.jpg"/> 
</figure>

<p>我很自然地会以为，我「重生」的蚂蚁之旅，也会是这样顺利。</p>
<h3 id="客户域"><span class="section-num">5.2</span> 客户域</h3>
<p>我当时任职的团队是网商银行的客户域，负责处理网商银行所有的用户与商户信息，算是基础团队。</p>
<p>客户域非常值得称道的是，使用的是蚂蚁集团内部总结的金融数据模型「飞马模型」进行重构的，
对数据模型进行了清晰的划分，可以称之为标杆。</p>
<p>又因为客户域属于整个网商银行的底层服务，被非常多的服务所依赖，所以系统设计和空灾就要做得非常扎实，我也因此受益匪浅。</p>
<p>在客户域待了八个月后，有一天导师来和我们说，客户域的业务要移交给北京的团队；虽然知道阿里的文化有「拥抱变化」，
只是未曾想，变化来得如此之快。</p>
<h3 id="聚合收单"><span class="section-num">5.3</span> 聚合收单</h3>
<p>客户域的业务移交后，原团队的同事因为没有业务可干，分别被分流到其他团队。我来到了聚合收单团队；</p>
<p>所谓的聚合收单，即所谓的四方支付，在微信支付和支付宝支付外，再增加一层代理商的角色，为直连商户或服务商接入微信支付和支付宝。</p>
<p>那商户不能自己接入微信支付和支付宝么？当然可以，聚合支付只是可以帮你同时接入这两家。</p>
<p>这也是这个业务的问题所在，只能作为通道存在，不具有任何的门槛和粘性，商户可以随时切走。</p>
<p>其兴也勃焉 其亡也忽焉。</p>
<p>聚合收单巅峰时，曾代理微信支付10%的交易量；
但在微信支付发现这种代理行为，并进行打击之后，业务量急据萎缩，聚合收单团队又面临解散。</p>
<p>在聚合收单待了10个月之后，我又无事可干了。</p>
<h3 id="金融网络"><span class="section-num">5.4</span> 金融网络</h3>
<p>这一次，我和老板详谈，希望可以到个稳定的团队，可以踏实地工作。而老板手下能满足我要求的就是另外一个团队：金融网络。</p>
<p>对于网商银行，或者支付宝，微信支付等三方支付而言，必须要和其他的银行打交道，通过指令进行扣款/扣款。</p>
<p>因此就需要与每个银行进行对接，这个就是金融网络团队的工作。</p>
<p>或许会有人问，不能接入一个统一的代理中继，这样就不需要几百个银行，每个都对接一次了。这个中继是存在的，就是网联。</p>
<p>但是多一个中继，就需要多一份成本，人家又不可能给你白干，需要收手续费的。所以为了降低成本，也需要分别对接不同的银行。</p>
<p>网商银行的金融网络是从支付宝fork 过来的，不同的是，支付宝有100多号人的团队维护，网商银行的金融网络团队，加上我也不过8个人。</p>
<p>金融网络维护的系统，庞大，灵活且复杂。很多功能，复杂到都没有人能说清它是怎么工作的，也没有文档或者资料，一切都靠口口相传。</p>
<p>因为金融网络复杂又重要，被整个网商银行所依赖，就导致金融网络很容易出故障。</p>
<p>在这样的环境里面，我又坚持了半年，感觉着实看不到什么前景和机会。</p>
<p>频繁的业务变更，两年时间，经历了3个团队，兼之晋升和绩效的问题，导致我心生去意。</p>
<h3 id="加班与学习"><span class="section-num">5.5</span> 加班与学习</h3>
<p>杭州是996之都，而阿里可以说是996的发源地。因此，在蚂蚁金服，想正常上下班基本是种奢望。</p>
<p>我很敬仰的一位博主随想君对996工作制的认知是，996工作制只不过「劫贫济富」的缩影。</p>
<p>996工作制对工程师职业生涯的影响非常不利，主要是：</p>
<ol>
<li>压缩了员工的业余时间，因此减少了员工的自学时间，你更加没有时间去自学，去提升自己的能力；如果能力得不到提升，你在人力市场中的「议价能力/谈判筹码」也就得不到提升；然后只能继续接受这种变态的工作时间，这是个恶性循环。身陷其中，并越来越无法自拔</li>
<li>消耗了员工的自控力，也就减少了自学的「动力」：如果你的工作不是你的兴趣所在，长时间加班之后，回到家里，你很难再有动力去学习其它新技能。</li>
<li>对健康的负面影响</li>
<li>对家庭的负面影响</li>
</ol>
<p>如何走出996的怪圈呢？关键在于时间与坚持。</p>
<p>每天挤出的时间不需要很多，哪怕半小时到一小时，足矣。这里的关键在于「坚持」。</p>
<p>如果你能坚持每天挤出“半小时到一小时”用来自学，大约1到2年时间，就会有效果——你的能力就会有提升</p>
<p>提升自己的能力，是摆脱这个怪圈的第一步。</p>
<p>蚂蚁的工作强度虽然大，但只是995，又因为我住在公司旁边，所以省去了通勤的时间，不玩游戏，又省下不少时间。</p>
<p>每天晚上回去，花一个小时看书和学习；周末和近卫军的小伙伴韬然一起去学习半天到一天，然后另外一天去踢球。</p>
<p>就这样，我每年大概看完了20本书，专业书看得比较慢，花了1年多的时间，学习了C++，算是入了门。</p>
<p>英语是不能放下的，听，说，读，写；除了说的机会不大，读和写都尽量保持着，使用英文进行搜索，阅读英文文章；使用英语回复Github 和Stackoverflow 的问题。</p>
<p>在2020年的时候，又开始自学日语。学好语言，机会总会多些的。</p>
<h3 id="面试"><span class="section-num">5.6</span> 面试</h3>
<p>在决定离开之后，又开始了面试之路。</p>
<h4 id="腾讯"><span class="section-num">5.6.1</span> 腾讯</h4>
<p>因为好朋友在腾讯是做计费和结算系统的，然后就把我简历推给到他们部门，就这样开始了腾讯的面试之旅。</p>
<p>一面很顺利，在马路边一边散步一边电话面试，问题都不难。</p>
<p>二面总监面也还不错，问到的系统设计问题以及取舍，组件选型等问题我都能回答上来。</p>
<p>本来面试就差不多结束了，从电话那头，总监听起来也还挺满意的，最后问了我一个问题，我是怎么看待加班的。
我就把我的观点和对996的看法如实告知了总监，感觉电话那头的面试官陷入了沉默，面试就这样结束了。</p>
<p>然后，我二面就挂了，我不知道是否因为我太坦诚。或者我应该说不排斥加班，就能结束这个话题了。</p>
<h4 id="微软"><span class="section-num">5.6.2</span> 微软</h4>
<p>因为不想加班，所以就尝试外企，就找微软的朋友内推了简历，便有了人生第一次的外企面试经历。</p>
<figure>
    <img loading="lazy" src="/ox-hugo/%e5%86%85%e6%8e%a8%e5%be%ae%e8%bd%af.png"/> 
</figure>

<p>外企基本不考察项目经历和计算机原理（即所谓的八股文），基本只看解算法题，而我当时在leetcode 上也就解决了不到200道题。</p>
<p>当时令我惊讶的是无法约上他们面试官的时候，我希望是可以中午面试，HR反馈员工中午休息，不面试。
我打算是5点半之后面试，HR反馈大家下班了，不会进行面试。外企都这么早下班的么？这是我们这种996打工人无法想象的事情。</p>
<p>我都打算是请假面试了，最后是微软的面试官进行妥协，回家之后来面试我。面试时候，我甚至可以听到面试官孩子在旁边玩耍的笑声。</p>
<p>面试官问了3道算法题，我只做出来了一题半，那半题是使用暴力解法解出来的，时间复杂度基本没法看。</p>
<p>剩下的时间就和面试官相互沉默与尴尬，即使面试官给我提示，我也没有思路做出来。</p>
<p>解题的确是需要训练的，这一面自然是面试失败了。</p>
<p>当时可以说是相当沮丧。</p>
<h4 id="微信支付"><span class="section-num">5.6.3</span> 微信支付</h4>
<p>这样又过去了一个多月。</p>
<p>好朋友给我推荐了微信支付的岗位，说是有个师兄在学校的群里发的。</p>
<p>我就尝试投了一下简历，这连串的面试失败让我对自己没有什么信心，何况这还是微信支付。</p>
<p>微信支付一面的面试官面试内容比较有广度，从工程实践，面向对象设计，设计模式问到了分布式系统算法。</p>
<p>最后的20分钟又上一道算法题，我解出来之后，又追问我怎么证明我是对的。我只能当场写几个test case 来断言一下，只能说我的解法能覆盖到这些case。</p>
<p>然后一面就通过了。</p>
<p>新奇的是，在通过一面之后，一面面试官询问我是否愿意做一道笔试题。
其实这个也不算征询我的意见，如果想继续面试的话，笔试题只能做。</p>
<p>只是这道笔试题，需要两周的时间才能完成，也就是我拿到了一个完整的需求，要求2周内完成：
依照微信客户端，实现微信支付委托代扣服务列表和服务详情查询。</p>
<p>面试的时候说语言不限，现在又要求我使用C++ 和grpc 完成，说考察我的学习能力，还好我都学过。</p>
<p>但我就没见过这种面试要求，可能微信支付比较牛吧，我只能这么安慰自己。</p>
<p>就唯有白天和晚上上班，下班后加班到凌晨来做这个笔试题。</p>
<p>花了两周时间，撰写了设计文档，使用C++17写完了这个需求，并附上完整的测试case，得到的反馈是还不错。</p>
<p>就这样，推进到第三面（如果笔试题算二面的话）
三面面试官问题都非常有深度，但都是从浅入深，针对我给出的答案进行发问，没有实际的工程经验和思考，只靠面经是无法水过去的。</p>
<p>后来就是面委面，不过因为我的级别不到高级工程师(9级及以上)，所以只是微信支付内部的面委。</p>
<p>因为我的C++ 不够扎实，担心面试官问我C++, 面试前又恶补了一波；</p>
<p>万万没想到，面试官都是在问我Java，还有相当宽泛的问题，HTTPS是怎么实现的？</p>
<p>我都不知道这是否是压力面试，我回答什么，对面都不给反馈，就这么听着，让我觉得面试体验非常差，但最终都过了。</p>
<p>然后就到了HR面，不是说后面还有面试么？为什么要先来HR面？</p>
<p>HR面通过后，来到GM面，即所谓的总经理面，面试前，被要求用一周时间，针对笔试题，做一个述职PPT，并给了我述职大纲。</p>
<p>这都是些什么面试要求，还要画PPT？</p>
<p>只能按照要求，晚上回去埋头写PPT。GM面使用30分钟给GM讲完PPT，回答了几个面试官的问题，然后就结束了；后面就被通知通过了。</p>
<p>我还以为GM面是走个过场，后来才知道有非常多的面试者GM 面被GM问得体无完肤，因为 GM 想要既会做的，又会说的。</p>
<p>只说不做的假把式和只做不说的傻把式都不要。</p>
<p>就这样又到了HR面，怎么要面试两次HR，比阿里的HR面还要多。</p>
<p>这样就通过了所有轮次的面试，收到了微信支付的Offer。</p>
<figure>
    <img loading="lazy" src="/ox-hugo/%e8%85%be%e8%ae%af%e5%bd%95%e7%94%a8offer.png"/> 
</figure>

<p>面试要求和面试花样比别家多，待遇却不比别家高。</p>
<p>但最后还是选择了微信支付的Offer, 毕竟这是微信，想去看下。</p>
<p>就这样，在2020年，我回到了广东，去了深圳。</p>
<h2 id="深圳"><span class="section-num">6</span> 深圳</h2>
<p>之前听人说，深圳是一座只适合的打工的城市。</p>
<p>来了之后发现，的确如此。</p>
<h3 id="微信支付"><span class="section-num">6.1</span> 微信支付</h3>
<h4 id="业务"><span class="section-num">6.1.1</span> 业务</h4>
<p>在微信支付的人才会意识到，微信和微信支付更像是两个截然不同的公司，微信支付与腾讯的财付通关系反而要比微信本身更密切。</p>
<p>我所在的团队在微信支付做的是委托代扣业务，在微信支付内部，与收银台，付款码并称基础支付，虽然现在已经很少用这个称呼了。</p>
<p>委托代扣业务常见的业务场景就是免密支付和自动续费：</p>
<p>如乘坐滴滴或者骑行共享自行车，在行程结束后，商家自动扣款，这就是免密支付；
每个月腾讯视频，QQ音乐自动扣月费，那就是自动续费。</p>
<p>所谓的委托代扣，即是用户委托商户发起扣款，建立委托关系后，商户可以在用户无需输入密码验证身份的情况下，发起扣款。</p>
<figure>
    <img loading="lazy" src="/ox-hugo/%e7%ad%be%e7%ba%a6.jpg"/> 
</figure>

<p>所以委托代扣的业务流程分成两步：</p>
<ol>
<li>用户和商户建立委托关系，称为「签约」。这是一次性动作，只需要授权一次。</li>
<li>商户请求微信支付，对用户发起「扣款」。</li>
</ol>
<p>我之前还在腾讯内网写了一篇文章来介绍委托代扣的业务场景，可惜我自己已经看不到了。</p>
<p>委托代扣每天有海量的交易请求，即使在整个微信支付也是排得上号的（不然怎么会叫基础支付），
而微信支付对系统可用性的要求是99.999%, 也就是意味着全年的不可用时长不能超过5分钟。</p>
<p>在一个海量交易系统，需要实现5个9的可用性，难度可以说是非常高，因此需要做的事情非常多。</p>
<p>与之前在蚂蚁团队动荡的经历不同，直到我离开微信支付，我都一直在委托代扣团队工作。
所以我能从中学习到非常多关于如何构建高可用分布式系统的经验和知识</p>
<h4 id="加班与学习"><span class="section-num">6.1.2</span> 加班与学习</h4>
<p>无论在哪个大厂，加班也是绕不开的话题。</p>
<p>微信支付也不例外，微信是有名的卷厂。</p>
<p>据我观察，广州总部的工作节奏大概是11115，因为他们下班得晚，所以上班得晚，而我所在的微信支付稍好，大概是995, 1095.</p>
<p>在我的认知中，我是很排斥996这种工作制，而正如前文所说的那样，个人要摆脱996这种工作制，只有合理利用时间，坚持学习。</p>
<p>而健康的体魄又是实现任何想法的前提，所以身体和头脑，都需要锻炼。</p>
<p>因为我租住的房子，地铁和公交都不便利，因此乘坐公司的班车上下班就是我的最佳选择。</p>
<p>虽说腾讯标榜弹性工作制，但是却有很多潜规则。</p>
<p>例如班车在9点前，把员工送回到公司上班，就是其中一条。</p>
<p>另外一条就是，不同小区，对应上班的班车只有一趟，下班班车有多趟。
因为公司「期望」员工在固定时间前回公司上班，可以加班到不同的时间点下班。</p>
<p>因为班车要9点到公司，就要求班车必须较早出发，即8:14分出发，因此我每天必须7:50起床赶班车。</p>
<p>为了早起赶班车，我又必须在晚上23:30前睡觉，不然起不来。</p>
<p>因此，我每天的时间安排基本被固定下来了，再结合我自己的学习和运动计划，就变成了一个时间表：</p>
<ol>
<li>7:50：起床</li>
<li>8:14：乘坐班车</li>
<li>8:14 - 9:00：在车上阅读电子书或听英文Podcast（推荐几个Podcast：个人最爱 Healthy hacker, The Changelog, Let&rsquo;s Master English）</li>
<li>9:00 - 9:15/9:20：早餐</li>
<li>9:30 - 12:00：工作</li>
<li>12:00 - 14:00 午休时间：健身1小时，半小时洗澡+吃午饭</li>
<li>14:00 - 18:00 工作</li>
<li>18:00 - 18:40 晚饭</li>
<li>18:40 - 20:10/40 工作</li>
<li>20:10 - 20:40 下班班车</li>
<li>21:00 - 23:00 学习半小时日语或英语，阅读1小时书或维护开源项目或和妹子聊天或看视频，洗漱</li>
<li>23:30 - 7: 50 睡觉</li>
</ol>
<p>这样的时间表，从2020到2023，持续了近三年。</p>
<h4 id="魔幻2022"><span class="section-num">6.1.3</span> 魔幻2022</h4>
<p>2022年是魔幻的一年。</p>
<p>在疫情层面，深圳在农历新年之后，就开始了长达一个月的封城，并拉开了持续一整年的核酸大戏的序幕。</p>
<p>在公司层面，腾讯从2022年开始，就宣布了降本增效的大政方针，用通俗的话讲，就是裁员降薪。
从年初每天刷屏的毕业论文（被裁员同事写的感想），到年中宣布绩效与晋升改革，缩减高绩效名额，增加低绩效名额，晋升与涨薪脱钩，晋升机会从一年两次缩减为一年一次等等。</p>
<p>在个人层面，2022年是厚积薄发的一年。</p>
<p>我站在智哥的基础上，花了近4个月，把负债沉重的祖传签约链路给重构了，并梳理清楚了签约链路的业务规则，沉淀成文档。</p>
<p>花了1年多的时间，从0搭建了代扣的数据仓库。</p>
<p>花了1个多月时间，从0重新搭建了一套类似委托代扣签约的免密收银台签约链路。</p>
<p>在腾讯KM平台输出了十多篇文章，有超过5篇入选/获得双月度的腾讯知识奖，1篇获得年度腾讯知识奖，影响力超过了99%的同事。</p>
<p>一边是个人能力和认知的进，一边是公司待遇和前景的退，还有疫情的前途未卜，难免令人心生迷茫，不知前路在何方。</p>
<h4 id="骆驼身上的稻草"><span class="section-num">6.1.4</span> 骆驼身上的稻草</h4>
<p>如果一直给骆驼加稻草，可能会看到骆驼最终倒下，却不知道一把稻草里面，哪根是最后一根让骆驼倒下的稻草。</p>
<p>同组刚结婚购房的小伙伴，因为降本增效的政策，被毕业了。</p>
<p>2022年的两次的绩效考核，我的业绩都是 outstanding, 总评都只是 good, 而绩效又直接与收入回报挂钩。</p>
<p>2022年6月，本来我已经满了晋升高级工程师的停留时限要求，但是公司的一纸改革，直接把这次年中的晋升机会抹掉。</p>
<p>某天清晨，当我如往常一样准备穿衣上班，却突然发现小区因为疫情被毫无征兆地封控三天。
网上的蔬菜食物早被抢购一空，冰箱冷藏层找到的，数周前购买的冰鲜鸡腿，才让我得以饱食。</p>
<p>封控的第四天凌晨4点，舍友因为肾结石发作，敲响了我的房门，我唯有先向居委会申请通行证，才被允许出门看急诊。
直到2个小时之后，我们才走出了小区门。</p>
<p>如果舍友的病在封控期结束的早一天发作，我都不知道要如何才能出得了这道每天进出的门。</p>
<p>好朋友4年T10的晋升速度，与我可能6年还停留在T8的差距; 深圳高企的房价以及我增长缓慢的收入。</p>
<p>微信支付，在各种压力之下，变得越发地像一个工厂，而每个开发者，都只是流水线上的工人。</p>
<p>或许，我可以尝试去其他国家，去看下那个不一样的世界。</p>
<h4 id="面试"><span class="section-num">6.1.5</span> 面试</h4>
<p>自从公司明里暗里宣布裁员开始，我就开始重新在 Leetcode 上面刷题，坚持每天一题，我不喜欢被动应对。</p>
<figure>
    <img loading="lazy" src="/ox-hugo/leetcode_2022_submissions.png"/> 
</figure>

<p>有了尝试去其他国家的想法之后，我就在Linkedin 上面更新了英文简历和自己的简介，然后就有不同的国家的recruiter找上我。</p>
<p>排掉哪些我不想去的国家（比如坡县），
排掉某些我不感兴趣的公司（某跳动，某Tiktok），
排掉哪些我不感兴趣的职位，我约了两家来自不同国家的公司面试。</p>
<p>一个是来自的日本的 paypay, 是日本最大的三方支付公司，模仿的是支付宝。比较吸引我的点是：</p>
<ol>
<li>他们的公司75%都是外国人。</li>
<li>允许在日本任何地方远程办公，如果愿意在东京办公，有额外的补贴。我面试时视频见过的3个面试官+ recruiter，就没有一个是在公司环境办公的</li>
<li>较高的薪资，日本的IT公司薪资普遍不高，但paypay 给的薪资，能比得上0.75个日本Google</li>
<li>较新的技术栈，他们用的Java版本是JDK17，存储竟然用的是 TIDB.</li>
</ol>
<p>因为之前一直在学日语，所以刚开始时，还尝试用日语和这家公司recruiter 打招呼，类似《大家的日语》第一课：</p>
<blockquote>
<p>我: はじめまして、わたしわ梁です</p>
<p>HR: はじめまして、よろしくお願いします</p>
<p>我: よろしくお願いします</p>
</blockquote>
<p>当然，后面我就切换回英文了，毕竟我的日语口语还不支持我完成面试。paypay 是一轮笔试加四轮面试</p>
<p>另外一家就是AWS，base 在Canada，毕竟我没有身份可以去美帝。</p>
<p>AWS也是一轮笔试加四轮面试，笔试还是很有难度的，一道大概leetcode medium + 一道leetcode hard+ 原题，那道 hard+ 的题，如果不是刷过原题，我是解不出来的。</p>
<p>因为面试的是SDE2，所以这四轮面试是：</p>
<ol>
<li>解算法题 + 2个 LP 问题，算法题判断多叉树是否存在指定路径，如果存在，返回该路径。</li>
<li>解算法题 + 2个 LP 问题，算法题是Top K freqent element 问题</li>
<li>System Design + 2个 LP 问题，设计一个日志系统。</li>
<li>Object-Oriented Designa + 2个 LP 问题, 根据需求，用面向对象设计类，算是算法题与面向对象的结合版本。</li>
</ol>
<p>所谓的LP 问题，指的是 Leadership Principles, 就是 Amazon 的企业文化里面有16条Leadership Principles, 他们会针对这些准则，让你给合个人经历，讲你自己的故事。</p>
<p>例如，告诉我一个你没有在deadline 前完全项目的经历？主要是看你如何介绍背景，阐述问题，你的行动，最后的结果。即所谓的STAR: Situation, Task, Action, Result. 通过你的经历和应对，判断你是否是个合格的候选人。</p>
<p>我花了一个月的时间，写了20多个故事的英文底稿，基本覆盖了这16条principles, 把这些故事双面打印出来，用了大概11页纸。</p>
<figure>
    <img loading="lazy" src="/ox-hugo/%e6%95%85%e4%ba%8b%e7%a8%bf.jpg"/> 
</figure>

<p>最后面试都通过了，我选择了这个温哥华的 Offer。</p>
<h4 id="离开"><span class="section-num">6.1.6</span> 离开</h4>
<p>在每两周至少至少交付一个需求的前提下，我写的生产代码，没有出过一次故障，我没有写过一次复盘，我写过的最大的bug 就是读写文件时，没有对指针判空，导致文件不存在时，服务coredump。</p>
<p>曹操在评注《孙子兵法》时，有一句批注，「善战者无赫赫之功」。善于指挥的人，没有跌宕起伏的故事，没有赫赫有名的战功。</p>
<p>我喜欢四平八稳，而不是狼烟四起，再四处救火，不是「扶大厦于将倾」，方显「英雄本色」。</p>
<p>我更倾向于设计（尽量）不会倾的大厦，所以就没有什么存在感，故而平平无奇，会被认为，换谁来都可以。</p>
<p>就这样，到了樱花盛开的季节，也到了离开的季节。</p>
<figure>
    <img loading="lazy" src="/ox-hugo/%e5%be%ae%e4%bf%a1%e6%94%af%e4%bb%9888%e6%99%ba%e6%85%a7%e7%94%9f%e6%b4%bb%e6%97%a5.jpg"/> 
</figure>

<p>3月，我离开了微信支付。</p>
<figure>
    <img loading="lazy" src="/ox-hugo/%e5%be%ae%e4%bf%a1%e6%94%af%e4%bb%98.jpg"/> 
</figure>

<p>坐上了前往温哥华的班机。</p>
<figure>
    <img loading="lazy" src="/ox-hugo/%e7%99%bb%e6%9c%ba.jpg"/> 
</figure>

<h2 id="温哥华"><span class="section-num">7</span> 温哥华</h2>
<p>对于习惯了只有夏季的广东人来说，温哥华的春天比广东的冬天还冷。</p>
<p>但新的开始，总是伴随着与众不同。</p>
<figure>
    <img loading="lazy" src="/ox-hugo/%e6%b8%a9%e5%93%a5%e5%8d%8e.jpg"/> 
</figure>

<p>那温哥华的冬天是怎么的呢？只能等到冬天来了才知道。</p>
<p>我的未来会是怎么样的呢？也只有未来来了才知道。</p>
<h2 id="后话"><span class="section-num">8</span> 后话</h2>
<p>好友总问我，你每天这样的忙碌，还给自己的时间表排得这么满，不觉得累的么？你是怎么坚持的？</p>
<p>我希望可以追上期望中的自己，每次想到，我这样的坚持可以让我摆脱这样生活，我的动力就涌出来了。</p>
<p>所谓知人者智，自知者明，我只是个没有天赋，也没有资源的普通人，想要追上期望中的自己，坚持就是我最大的天赋。</p>
<p>中学时有篇文章是帝师宋濂讲自己早年求学经历，勉励学子马生专心治学的《送东阳马生序》</p>
<blockquote>
<p>余幼时即嗜学。家贫，无从致书以观，每假借于藏书之家，手自笔录，计日以还。</p>
<p>天大寒，砚冰坚，手指不可屈伸，弗之怠。录毕，走送之，不敢稍逾约。</p>
<p>以是人多以书假余，余因得遍观群书。</p>
<p>既加冠，益慕圣贤之道 。</p>
<p>又患无硕师名人与游，尝趋百里外，从乡之先达执经叩问。</p>
<p>先达德隆望尊，门人弟子填其室，未尝稍降辞色。</p>
<p>余立侍左右，援疑质理，俯身倾耳以请；或遇其叱咄，色愈恭，礼愈至，不敢出一言以复；俟其欣悦，则又请焉。</p>
<p>故余虽愚，卒获有所闻。</p>
<p>&hellip;</p>
</blockquote>
<p>我自己的经历和成就，自知无法与宋濂先生相比。但十数年后，再读宋先生的《送东阳马生序》，却有了不一样的感悟。</p>
<blockquote>
<p>故余虽愚，卒获有所闻。</p>
</blockquote>
<p>我虽然普通，但是坚持还是有收获了。</p>
<h2 id="延伸阅读"><span class="section-num">9</span> 延伸阅读</h2>
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2018/farewell_to_my_university_time/">恰同学少年: 纪念大学时光</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E7%BD%AE%E8%BA%AB%E4%BA%8B%E5%86%85/">为什么梦想买不起，故乡回不去</a></li>
</ul>
<h3 id="旅加经历"><span class="section-num">9.1</span> 旅加经历</h3>
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E5%8A%A0%E6%8B%BF%E5%A4%A7%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C/">加拿大之初体验</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E5%8A%A0%E6%8B%BF%E5%A4%A7%E8%80%83%E9%A9%BE%E7%85%A7%E7%9A%84%E7%BB%8F%E5%8E%86/">加拿大考驾照的经历</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E7%99%BB%E9%99%86%E5%8A%A0%E6%8B%BF%E5%A4%A7%E4%B8%80%E5%B9%B4%E7%9A%84%E4%BD%93%E4%BC%9A/">登陆加拿大一年后的体会</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E4%B8%89%E6%9C%88%E7%9A%84%E6%A8%B1%E8%8A%B1/">三月的樱花</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E5%A4%8F%E6%97%A5%E6%8D%95%E8%9F%B9%E8%AE%B0/">夏日捕蟹记</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%97%81%E8%A7%82%E8%80%85%E7%9C%BC%E4%B8%AD%E7%9A%84%E5%8A%A0%E6%8B%BF%E5%A4%A7%E7%9C%81%E8%AE%AE%E4%BC%9A%E9%80%89%E4%B8%BE/">旁观者眼中的加拿大省议会选举</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>最好的学习方式：费曼学习法(Feynman Technique)</title>
      <link>https://ramsayleung.github.io/zh/post/2022/feynman_technique/</link>
      <pubDate>Sat, 26 Mar 2022 17:07:00 -0700</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2022/feynman_technique/</guid>
      <description>1 前言 「最好的学习方式」 在如今打广告也需要遵守广告法的时代，用这样的标题来描述某个学习方法难免会让人觉得言过其实，不客气的朋友可能会直接说「</description>
      <content:encoded><![CDATA[<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>「最好的学习方式」</p>
<p>在如今打广告也需要遵守广告法的时代，用这样的标题来描述某个学习方法难免会让人觉得言过其实，不客气的朋友可能会直接说「营销味」十足。</p>
<p>不看广告看疗效，「言过其实」还是「名符其实」，只有试过才知道。</p>
<p>如果「尝试」也过于麻烦，那不如来看下提出该学习方法的理查德·费曼(Richard Phillips Feynman)其人。</p>
<h3 id="费曼其人"><span class="section-num">1.1</span> 费曼其人</h3>
<p>理查德·菲利普斯·费曼(Richard Phillips FeynmanA), 美国理论物理学家，以对量子力学的研究闻名于世，除此之外，他还是量子计算领域的先驱，并提出了纳米技术的概念。</p>
<figure>
    <img loading="lazy" src="/ox-hugo/Richard_Feynman_Nobel.jpg"/> 
</figure>

<p>因对量子电动力学的贡献，于1965年共同获得诺贝尔物理学奖。</p>
<p>费曼发展了得到广泛应用的亚原子粒子行为的图像化数学表述——费曼图(Feynman diagram)。费曼图长这个样子：</p>
<figure>
    <img loading="lazy" src="/ox-hugo/Feynmann_Diagram_Gluon_Radiation.svg.png"/> 
</figure>

<p>费曼在世时是世界上最有名的科学家之一。</p>
<p>1999年，在英国学术期刊《物理世界》举办的130位世界顶尖物理学家参与的票选活动中，费曼跻身十大有史以来最伟大物理学家之列</p>
<p>二战期间他曾参与曼哈顿计划，协助原子弹的开发，而后在1980年代因参与调查挑战者号航天飞机灾难而为公众熟知。</p>
<h4 id="趣事"><span class="section-num">1.1.1</span> 趣事</h4>
<p>费曼有一辆有名的货车(The Feynman Van)，他在这辆车上画满了以他名字命名的费曼图(Feynman diagram):</p>
<figure>
    <img loading="lazy" src="/ox-hugo/van1.jpg"/> 
</figure>

<p>虽然费曼他偶尔会开这辆车，但是大部分时间都是他的妻子(Gweneth)开。</p>
<p>有一次，她妻子开这辆车出去，等待红灯时，一个识货的司机走过来问，为什么她开着一辆画满费曼图的货车，她回答到，因为我是费曼的妻子。</p>
<blockquote>
<p>Although Richard occasionally used the van to commute from his home in Altadena to Caltech, the van was usually driven by his wife, Gweneth.</p>
<p>One time a perplexed motorist waiting at a red light asked the unidentified woman why she was driving a van with Feynman diagrams on the side.</p>
<p>Her answer: “Because my name is Gweneth Feynman.”</p>
</blockquote>
<p>另外一个小彩蛋，这辆车曾经出现在《生活大爆炸上》，看谢尔顿的翻脸速度和崇拜表情，大概就能感受到费曼有多牛。</p>
<p><video width="640" height="480" controls><source src="/ox-hugo/a0574396-170e-11e9-88c2-0a580a42fb87.mp4" type="video/mp4">
Your browser does not support the video tag.</video></p>
<p>(视频来自知乎问题：费曼是一个什么样的人，<a href="https://www.zhihu.com/question/31311463/answer/572942984">答主@流川枫</a>)</p>
<h2 id="理念"><span class="section-num">2</span> 理念</h2>
<p>费曼学习法，核心理念就是：</p>
<p><strong><strong>学习一种新事物最好的方法是，用你的话讲给别人听。</strong></strong></p>
<p><strong><strong>通过向别人清楚的解说某一事物，来确认自己是否真的弄懂了这件事。</strong></strong></p>
<p>所以说，学习最好的方式，是把你学到的东西教给别人。</p>
<p>学习步骤如下：</p>
<h3 id="学习并汇总"><span class="section-num">2.1</span> 学习并汇总</h3>
<p>选择一个你想要学习的领域或者课题，然后学习，再将你所学到的所有内容给记录下来。</p>
<p>做笔记，摘抄，或者写下自己的理解都可以。</p>
<h3 id="用自己的话向别人解释"><span class="section-num">2.2</span> 用自己的话向别人解释</h3>
<p>找一个小白或者小朋友，用你「自己的话」来复述你学到的内容。</p>
<p>你可以援引自己笔记的内容，但是不要说那些专业术语，只用你自己的话来解释。</p>
<p>因为用自己的话，才能说话你把学习的内容真正消化了，直接使用专业术语，只能说明你背下来了，不一定能说明你理解了。</p>
<blockquote>
<p>Simple is beautiful.</p>
</blockquote>
<p>目标是 <strong><strong>通顺，通透</strong></strong> 地向这个「无知」的小朋友解释你所学到的内容。</p>
<h3 id="反馈-改进"><span class="section-num">2.3</span> 反馈，改进</h3>
<p>在步骤二，你可能会出现四种情况。</p>
<h4 id="欲语还休"><span class="section-num">2.3.1</span> 欲语还休</h4>
<p>情况一，算是最糟糕的情况，你可能不知道从何讲起，说你还对该领域还缺乏「系统」的理解，就需要返回步骤一重新学习。</p>
<h4 id="跌跌撞撞"><span class="section-num">2.3.2</span> 跌跌撞撞</h4>
<p>情况二，算是最常见的情况，你能用自己话讲出来，但是讲得「磕磕碰碰」，一直会卡壳，小白也听得一知半解。</p>
<p>说明你对该领域有一个的了解，但还没完全「理顺」整个体系，这里就可以针对「卡壳」的点，有针对性地回到目步骤一进行学习。</p>
<h4 id="深入不浅出"><span class="section-num">2.3.3</span> 深入不浅出</h4>
<p>情况三，你能用自己的话用该领域的内容通顺地讲出来，但是小白没有完全理解，就说明你讲得不够「通透」，不够「深入浅出」。</p>
<p>这个时候就可以询问小白，是哪个部分没有讲清楚，这个部分就是你盲点，拼图缺乏这块，导致没法构建完体系。</p>
<p>再回去步骤一针对学习。</p>
<h4 id="娓娓道来"><span class="section-num">2.3.4</span> 娓娓道来</h4>
<p>在这种情况下，你能顺滑，流畅地使用自己的话向小白解释你学到的内容，小白也能完全领会 到你所讲述的知识，那就说明你已经完全掌握了这个领域的知识。</p>
<p>不要吝啬赞美的言词，大声地表扬下自己。</p>
<h3 id="总结"><span class="section-num">2.4</span> 总结</h3>
<h4 id="双赢"><span class="section-num">2.4.1</span> 双赢</h4>
<p>当你「通顺」，「通透」地向一个小白介绍完的你所学的知识时，你一定会有新的收获和感慨，把你新学到的知识再总结下来。</p>
<p>这就是输出的收获和乐趣，所以这也是一个「双赢」的学习法，既能育人，也能育已。</p>
<p>听众既能受益，输出知识的作者本身也能提高个人能力。</p>
<p>如果能吸引到读者高质量的问题，那么作者在解答的过程中，又可以进一步受益和得到提升，这还是一个良性循环。</p>
<h4 id="换位思考"><span class="section-num">2.4.2</span> 换位思考</h4>
<p>为了践行这种「以教代学」的学习方法，在向小白讲授内容的时候，为了更好地帮助他们理解，你就可能需要切换到「小白视角」，以他们的角度来思考问题。</p>
<p>久而久之，你的「换位思考」和「共情」能力自然就会得到提升。</p>
<h2 id="输出"><span class="section-num">3</span> 输出</h2>
<p>最好的学习方法是输出，而我这篇文章就是在用自己的话向大家介绍「费曼学习法」，而这个行为本身也是在实践「费曼学习法」。</p>
<p>如果大家看完本文，能理解「费曼学习法」是什么，那也就说明我已经掌握了「费曼学习法」(否则我就讲不清楚)！</p>
<p>干杯!</p>
<p>PS:</p>
<p>这应该算编译器自举(bootstrap)了 :)</p>
<h2 id="参考"><span class="section-num">4</span> 参考</h2>
<ul>
<li><a href="https://fs.blog/feynman-technique">The Feynman Technique: The Best Way to Learn Anything</a></li>
<li><a href="http://www.feynman.com/fun/the-feynman-van/">The Feynman Van</a></li>
<li><a href="https://www.zhihu.com/question/31311463">费曼是一个什么样的人</a></li>
<li><a href="https://program-think.blogspot.com/2019/10/Systematic-Learning.html#head-5">如何【系统性学习】——从“媒介形态”聊到“DIKW 模型”</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>2019年总结: 人生如逆旅, 我亦是行人</title>
      <link>https://ramsayleung.github.io/zh/post/2019/2019%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 26 Dec 2019 21:12:00 +0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2019/2019%E6%80%BB%E7%BB%93/</guid>
      <description>1 前言 人总是健忘的, 所以在行走一段人生旅途之后, 总要不自觉地停下来, 整理下前段时间的得与失, 得大于失证明这段时间没有浪费, 欣喜之余, 准备下一</description>
      <content:encoded><![CDATA[<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>人总是健忘的, 所以在行走一段人生旅途之后, 总要不自觉地停下来,
整理下前段时间的得与失, 得大于失证明这段时间没有浪费, 欣喜之余,
准备下一段旅途;</p>
<p>失大于得则证明这段时间虚度罢了, 却无法重来.
本文便是对过去一年得与失的总结.</p>
<blockquote>
<p>无可奈何花落去，似曾相识燕归来.</p>
</blockquote>
<h2 id="工作"><span class="section-num">2</span> 工作</h2>
<p>我所在的项目组做的是对B端的聚合收单业务, 有蚂蚁的big title 背书,
服务一堆的服务商, 但业务主导一切, 一切以业务为中心, 技术并没有话语权.</p>
<p>而后业务突遭变故, 业务接近停滞. 都要以为要重新准备简历了, 要拥抱变化了.
然后后面业务重新复活, 继续挣扎, 在生与死之间反复横跳,
为了复活做各种奇形怪状的需求, 也未见有起色.</p>
<p>在整个由死重生的过程中对于收单业务有了重新的认识,
对了公司也有了新的认识, 对于自己的地位与作用也有新的认识.</p>
<p>说到底, 我自己只是个工具人, 对于完全业务化的系统, 技术的作用着实毫不起眼,
充斥着无力感. 因此工作上免不了彷徨与迷茫.</p>
<p>另外一方面, 因为这样的业务状况, 我也如自己预想中那般, 绩效拿了3.5, 无晋升提名.
在花呗的室友, 同一天入职, 类似的绩效, 晋升了. 可见, 选择着实比努力更重要点.</p>
<h2 id="读书"><span class="section-num">3</span> 读书</h2>
<p>打算用读书冲淡工作变故而来的彷徨感, 兼之对于自身的不满与现实的疑惑,
寄望于通过多读书充实自己和从书中得到解答, 因此今年读了不少的书,
基本每本书都写了笔记与感悟:</p>
<p>读完的书:</p>
<ol>
<li>追风筝的人</li>
<li>双城记</li>
<li>浮生六记</li>
<li>围城</li>
<li>沉默的大多数</li>
<li>苏菲的世界</li>
<li>月亮与六便士</li>
<li>netty实战</li>
<li>java并发编程实战</li>
<li>Effective C++</li>
</ol>
<p>在读的书</p>
<ol>
<li>Unix网络编程(读了1/3)</li>
<li>枪炮, 病菌与钢铁</li>
</ol>
<p>除此之外, 还看了各种文章, 关于电影, 财经, 政治以及历史.</p>
<p>总结下来基本是每个月读完一本书, 虽说与去年20本的目标还有差距,
但这年来读的书, 着实解答了我不少疑问.</p>
<p>例如我现在为什么会996(实际上9105或者9115)? 原因可以说是多方面的:</p>
<p>从革新与底层技术方面来说, 我们没有经历过工业革命,
没有以技术去推动社会生产力进步的传统,
这三十年的发展很大一部分是全球化与人口红利的结果.</p>
<p>同理, 中国互联网只有业务模式的创新, 并没有基础技术的革新与壁垒,
所谓的新四大发明便是如此; 因为没有技术壁垒, 你做的东西, 别人也容易仿制,
所以只能和别人比速度, 难免就出现拼命加班的情况.</p>
<p>而从企业的角度来说, 以这个号称996发源地的公司举例,
他们的目的就是要不择手段地实现利益最大化,
员工利益的保障只能靠资本家良心发现了, 而资本家只是资本的人格化,
资本是不论对错, 只谈利弊的.</p>
<p>从政府及立法角度来说, 到了这一步, 员工的权利只能由政府来保障,
需要对企业作限制, 然而我们的政府对这种创造大量GDP的企业, 只会当作爸爸,
又怎会处罚呢? 你见过在南山区法院打赢腾讯的么? 在西湖区打赢支付宝的么?</p>
<p>而我们又没有投票权, 政府要加税就加税, 要保大企业就保大企业,
我们又能怎样? 政府不鼓励大企业实行996就不错了, 还处罚他们?</p>
<p>当然, 还有自身的原因, 身边自然不会少自愿加班的人,
而他们作为三口之家的唯一劳动力, 想要在杭州安家, 想有自己的房子,
需要负出自己的时间, 精力与健康, 也因为这样的人, 使996得而蔚然成风,
但为何买一套自己的房子需要付出如此大的代价, 引申出来又是一个复杂的问题,
可以参考下这两篇文章</p>
<ul>
<li><a href="https://program-think.blogspot.com/2013/03/weekly-share-42.html">每周转载</a></li>
<li><a href="https://github.com/iambryanshen/kkndme_tianya">天涯kkndme
神贴聊房价</a></li>
</ul>
<p>诸如此类的感悟, 是我在今年读书后, 对心中疑惑的思考. 读书的作用就如小恶魔
Tyrion Lannister所说的那般, 好脑筋需要书本, 就如同宝剑需要磨刀石.</p>
<h2 id="其他"><span class="section-num">4</span> 其他</h2>
<p>对于杭州有了新的认识, 借用下别人对杭州的评价:</p>
<blockquote>
<p>马路平整, 四季分明, 冬暖夏凉, 房价便宜, 美食多样, 工资够用, 一天工作 8
小时, 地铁发达, 大公司多, 小公司都很专业</p>
</blockquote>
<p>只需将上面的内容反转一下, 就可以知道杭州的实况.
去掉古代文人墨客诗文的滤镜, 杭州也就是这样罢了.</p>
<p>逐渐明白, 技术并不是万能, 甚至用处并不是那么大.</p>
<p>明白自己的无知和渺小, 很多事情并不能用技术来解决, 如工作遇到的变故等,
过于沉迷技术会形成一个误区, 以为什么都能用技术解决(当然,
也不能以此为借心放弃自己).</p>
<p>明白了每项技术都用其存在的意义及背景, 如什么场景都用javascript自然不行, 但在浏览器场景不用javascript,
自然也是不行的.</p>
<p>并技术没有对错, 争论哪个技术最好, 哪个编程语言更佳, 脱离场景毫无意义, 文人相轻又能解决什么问题呢?</p>
<p>开始学习其他技术无关的知识与技能; 重新练习口琴; 开始有意识地控制体重;</p>
<p>开始按照无器械健身的相关指南锻炼; 每周基本都有去运动, 游泳或者踢球;</p>
<p>开始补经典的番; 想学日语, 想去日本看看; 想去加拿大看看, 心生去意;</p>
<h2 id="展望"><span class="section-num">5</span> 展望</h2>
<p>把去年的展望搬过来, 机智如我:</p>
<ol>
<li>了解分布式, 高可用的知识，争取通过实战掌握; <del>读完《netty in action》</del>; 通过许家纯大大的教程，自己实现一个Rpc 框架；读sofa-bolt, sofa-rpc 和 Netty 的源码</li>
<li>成为一个掌握金融知识的计算机从业人员</li>
<li>读完20本书</li>
<li>结束单身狗的生活</li>
</ol>
<p>借一句诗勉励自己:</p>
<blockquote>
<p>沉舟侧畔千帆过，病树前头万木春.</p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>工作一年记</title>
      <link>https://ramsayleung.github.io/zh/post/2019/%E5%B7%A5%E4%BD%9C%E4%B8%80%E5%91%A8%E5%B9%B4%E8%AE%B0/</link>
      <pubDate>Fri, 28 Jun 2019 14:18:00 +0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2019/%E5%B7%A5%E4%BD%9C%E4%B8%80%E5%91%A8%E5%B9%B4%E8%AE%B0/</guid>
      <description>1 前言 转眼间, 我已经工作一年了 去年的6月28日, 我到了杭州, 入职了的一家全国闻名的金融科技公司, 开始了自己的职业生涯. 2 关于工作 2.1 工作后 工作</description>
      <content:encoded><![CDATA[<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>转眼间, 我已经工作一年了</p>
<p>去年的6月28日, 我到了杭州, 入职了的一家全国闻名的金融科技公司, 开始了自己的职业生涯.</p>
<h2 id="关于工作"><span class="section-num">2</span> 关于工作</h2>
<h3 id="工作后"><span class="section-num">2.1</span> 工作后</h3>
<p>工作之后, 日常会回想起学校的生活. 工作对比学生生活, 最大的差别就是,
我再也不能随心所欲, 尤其在大学时候, 想上课就上课, 想出外旅行就出外旅行,
什么事情都不想做的时候, 还能躺在床上睡觉.</p>
<p>而工作就是工作,
在公司，你需要做的就是不停地工作, 而9105已经是常态. 说好的弹性工作,
也可以通过要求早上9.15开晨会的形式来花式强制打卡, 员工除了被动接受,
也不会有其他的选择. 看来, 资本家果然是资本的人格化.</p>
<h3 id="拥抱变化"><span class="section-num">2.2</span> 拥抱变化</h3>
<p>我的公司和我的国家一样, 也会有各种的价值观, 而”拥抱变化”就是其中一项.
其意思在网上已经流传甚广, 公司内部也各种解读,
总结来说就是有任何看起来不好的事情, 都可以用”拥抱变化”来概述.</p>
<p>入职不到半年, 我便经历了一次”拥抱变化”: 原来的组被解散,
我被分流到新的组. 而入职一年后, 我又将要经历另外一次”拥抱变化”.
不禁感概, &ldquo;拥抱变化&quot;果然是我司的价值观.</p>
<h2 id="关于读书"><span class="section-num">3</span> 关于读书</h2>
<p>入职以后, 有感自我提升的迫切性, 前后买了近两打书, 最近搬家之后,
房子没有书柜, 书全放床上, 占了三分之一的地方, 颇有种”著作等身”的感觉.
这两打书，既有计算机相关的, 也有非计算机相关的书籍,</p>
<p>目前我大概读了三分之一, 也记录了相关的读书笔记心得. 目前在读的书名著是:
《苏菲的世界》,《围城》, 《枪炮、病菌与钢铁》, 几本书之间切换, 计算机的主要是 《Unix网络编程》.</p>
<p>之前搬家时, 才发现我的书点了两个箱子, 把和我一起搬东西的新舍友累个半死;
虽说如此, 书仍旧会继续, 因为书中记录的知识和书的价格相比,
书的价格实在是便宜.</p>
<h2 id="关于生活"><span class="section-num">4</span> 关于生活</h2>
<p>搬了一次家, 和朋友合租了间在7楼的房子, 现在住的地方离公司, 直线距离200M,
上班步行10分钟, 大部分时间是用在上下楼和等红灯. 因为现在住得近,
所以中午能和舍友一起自己做饭并在家午休.</p>
<p>除了舍友是个素食主义者和公司把午休时间从12:00-14:00改为12:00-13:30之外,
生活上的其他事情还是挺不错的.</p>
<p>入职半年之后, 可能是因为工作压力的缘故, 体重竟然比在校期间下降了5-6Kg,
而后可能是因为逐渐适应工作的强度, 体重渐渐恢复正常. 目前无肌肉, 无赘肉.</p>
<p>感情生活: 为0, 按下不表</p>
<h2 id="其他小事"><span class="section-num">5</span> 其他小事</h2>
<ol>
<li>弃用Emacs, 转向Vscode, 因为工作事情繁多缘故, 没有时间与精力研究Emacs,
遂转投Vscode, 目前一切尚可, 暂无回归Emacs之意.</li>
<li>学习五笔, 已经能熟练使用, 本文即用五笔书写.
最开始原因是拼音重码率高(如ji,si,shi,zhi, 有太多同音字),
不容易记录文言文&lt;&gt;笔记, 且我使用的系统是Linux, Linux上的拼音并不好用,
于是用五一的三天假期学习五笔, 上手有难度, 但是熟悉后会比拼音好用,
熟悉费时约一个月.</li>
<li>勤勉一年, 绩效尚可, 无晋升提名.</li>
</ol>
<h2 id="guava开坑序言"><span class="section-num">6</span> Guava开坑序言</h2>
<p>不甘心于碌碌无为, 每日只是搬砖, 工作一年后也没有什么值得引以为豪的地方,
所以需要决定开个大坑: <strong>研读Guava代码, 并翻译其<a href="https://github.com/google/guava/wiki">文档</a></strong>.</p>
<p>Guava是Java程序员工具箱中的一把瑞士军刀, 与<a href="https://commons.apache.org/">Apache common</a>类库齐名,
这样有名的类库, 对于一个合格的Java程序员, 自然是不能不读.
但是我无意于单纯的翻译文章, 这样的文章已经太多了,</p>
<p>我期待自己能结合实际的场景和源码解读Guava, 所谓”知其然知其所以然”.
这也是对自己的一个期许, 唯愿自己不要轻易放弃, 须知: 千淘万漉虽辛苦,
吹尽狂沙始到金.</p>
<h2 id="憧憬与展望"><span class="section-num">7</span> 憧憬与展望</h2>
<p>借用高适的一首诗以寄期望:</p>
<blockquote>
<p>千里黄云白日曛 北风吹雁雪纷纷 莫愁前路无知己 天下谁人不识君</p>
</blockquote>
<p>希望自己还能保持乐观~~</p>
]]></content:encoded>
    </item>
    <item>
      <title>迟来的2018年总结</title>
      <link>https://ramsayleung.github.io/zh/post/2019/2018%E6%80%BB%E7%BB%93/</link>
      <pubDate>Wed, 23 Jan 2019 01:48:00 +0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2019/2018%E6%80%BB%E7%BB%93/</guid>
      <description>一晃，2018年已经过去了 6月25日，拖着行李，从广州来了杭州 告别了学校，从学生变成了一个社会人 既然选择了远方, 便只顾风雨兼程 &amp;ndash; 汪国真 1 工作</description>
      <content:encoded><![CDATA[<p>一晃，2018年已经过去了</p>
<p>6月25日，拖着行李，从广州来了杭州</p>
<p>告别了学校，从学生变成了一个社会人</p>
<hr>
<blockquote>
<p>既然选择了远方, 便只顾风雨兼程 &ndash; 汪国真</p>
</blockquote>
<h2 id="工作"><span class="section-num">1</span> 工作</h2>
<p>从工作上来说，我”换”了两份工作，阿里大文娱和蚂蚁金服; 阿里大文娱-UC
2017.11-2018.5
实习，然后毕业之后入职蚂蚁金服-微贷-网商银行，主要是负责客户相关的业务；工作很累，但是总归是有收获的.</p>
<p>入职蚂蚁之后，感觉就是忙，很忙。从新人培训的近卫军到回归日常业务，每天都有各种各样的事情需要处理，加班已经成为了工作中”不可磨灭的一部分”了</p>
<p>刚入职的时候，给自己定了目标：业务上熟悉自己客户相关的业务，熟悉领域模型，继而从客户延伸了解整个网商银行的业务，学习金融知识；技术上学习组里的高可用架构，如何实现分布式系统的高可用，学习高并发-高可用-分布式-Java/蚂蚁中间件
生态；争取一年P6</p>
<p>但是大半年下来，基本都是没有达到自己的预期目标，目测升P6的目标基本也是凉了。反思没有达到预期的原因；自身原因有之，外部原因亦有之.</p>
<p>10，11月这两个月，组里的同事被拉去做各种项目，之剩下包括我在内的两个开发，面对一堆需求，资源最紧张的时候，我们每个人，每个迭代需要开发3个需求，然而一个迭代开发加自测只有一周多的时间，实在是忙。</p>
<p>忙导致的副作用就是累，而后下班回家只想睡觉，每天学习一个小时的目标早已抛之脑外。每天被需求推着走，没有对需求后面的意义进行思考，只是简单的需求翻译器，并不会有多少成长，兼之对需求不了解，导致需求发现变更的时候手忙脚乱.</p>
<p>12月之后需求缓下来之后，就开始有时间对之前做的事做个总结，可以对之前完成需求时积下来的问题进行反刍，结合现有的模型进行理解，过程虽费时，总归有收获；现有的业务开发开始渐入佳境，然后就开始”拥抱变化”，客户的业务全部交接别的团队，客户的团队被分流到其他团队，负责别的业务。</p>
<p>以前总是听说阿里的”拥抱变化”，没想到来得如此之快，这么快就有了体感。</p>
<h2 id="生活"><span class="section-num">2</span> 生活</h2>
<p>2017.12.31-2018.12.31, 单身, 按下不表</p>
<p>2018.6, 从UC离职之后，趁着还有些许学生时光，就和两个好友去了趟顺德，品尝一下顺德的美食，所谓食在广州, 厨出凤城，广州生活了四年，是时候去尝尝凤城(顺德)的滋味。</p>
<p>4天的微游，终究是不虚此行，在蝦炳海鲜吃到了最好吃的烧鹅，每天去公寓对面的茶楼喝早茶，去了清晖园游园，也去了民信老店尝了各式甜品(感觉民信真的不咋地，贵且不说，味道还不咋地，不值特意来)</p>
<p>2018.8, 团队outing去了趟庐山(基本自费)，庐山果真是个避暑圣地，把穿着短袖短裤，并只带了短袖短裤的这个广东人冻成dog。</p>
<p>不过无论如何，庐山还是不虚此行的</p>
<p>2018.10, 害怕挂了，开始重新踢球当作运动.</p>
<p>开始只有十分钟体能，全程只能散步，真的是丢人。过了两个多月，体能提升到了三十分钟，优秀</p>
<p>2018.12, 毕业半年, 轻了十斤左右。看来工作真的是烧脑，占体重8%的器官，消费了超过20%的能量</p>
<h2 id="读书"><span class="section-num">3</span> 读书</h2>
<p>工作之后，买了两打书，分类大概是计算机相关/非计算书籍=3/1，然而过去近四个月，也只是读了不到三分之一的书，快餐文化盛行的今天，看来很难沉下心看书(不要甩锅呢)</p>
<p>计算机相关: 重温了《Effective Java》, 《java并发编程实战》, 《深入理解Java虚拟机》和《Java8 in action》《CSAPP》(没读完)，新入了《C++primer》和 《UNIX环境高级编程》(没读完)</p>
<p>非计算书籍大概读了《活着》，《追风筝的人》</p>
<p>饭仍是要继续吃，书也是要继续读的.</p>
<h2 id="美食"><span class="section-num">4</span> 美食</h2>
<p>来了杭州之后，只做过一次饭，做给舍友吃, 幸好舍友还是吃得挺开心的 :)</p>
<p>而后再也没有做过。 看了三部美食纪录片聊以自慰 《人生一串》，《人间风味》，《寻味顺德》。</p>
<p>再次感谢《人生一串》，为广东人洗白，看来广东人吃得真的很正常，一点也不重口。</p>
<p>嗯，在杭州想念广东的味道了，想念不吃辣的味道，想家了.</p>
<h2 id="展望"><span class="section-num">5</span> 展望</h2>
<ol>
<li>一年P6(感觉没戏了，那就两年P6)</li>
<li>了解分布式, 高可用的知识，争取通过实战掌握; 读完《netty in action》,
通过许家纯大大的教程，自己实现一个Rpc 框架；读Sofa-rpc 和 Netty
的源码</li>
<li>成为一个掌握金融知识的计算机从业人员</li>
<li>读完20本书</li>
<li>结束单身狗的生活(估计也没戏了)</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>为什么要写博客</title>
      <link>https://ramsayleung.github.io/zh/post/2017/blog/</link>
      <pubDate>Sun, 17 Sep 2017 10:36:00 +0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2017/blog/</guid>
      <description>1 博客迁移 我将博客从 Github Page 迁移到现在的博客上，原来基于 Gtihub Page，使用 Emacs, org-mode 和 org-page 的博客其实也相当好用，只是某一些我想要的功能却缺失，所以我就自己</description>
      <content:encoded><![CDATA[<h2 id="博客迁移"><span class="section-num">1</span> 博客迁移</h2>
<p>我将博客从 <a href="https://github.com/ramsayleung/samrayleung.github.io/">Github Page</a> 迁移到现在的<a href="https://github.com/ramsayleung/blog">博客</a>上，原来基于 Gtihub Page，使用 Emacs, org-mode 和 org-page 的博客其实也相当好用，只是某一些我想要的功能却缺失，所以我就自己花时间动手写了现在这个博客，并且将原来的博文迁移</p>
<hr>
<p><span class="timestamp-wrapper"><span class="timestamp">&lt;2022-02-25 五&gt;</span></span></p>
<p>没想到五年后，我又从自建的Blog，又迁移回Github Page。当时<a href="https://github.com/emacsorphanage/org-page">org-page</a> bug不少，支持不是很及时，虽然org-mode很好用，但最后走到自建的博客的路子上。</p>
<p>使用Rust练手写的博客很不错，但是写作workflow 还不够滑顺，使用orgmode写作，导出为markdown；对于图片，只能先上传到图床，然后再插入到文章里面。</p>
<p>所以现在切换回Github Page，使用org-mode和ox-hugo, 不需要修改就可以直接把文章发布成博客，又可以愉快地写文章了。</p>
<h2 id="为什么要写博客"><span class="section-num">2</span> 为什么要写博客</h2>
<p>虽说我写博客的时间不长，但是当9月份为止，我已写了不少博文的。那么，为什么要写博文呢？很明显，这是一个费时费精力的工作，那么为什么我还要写呢？我自己思考过这个问题，我觉得，原因有下：</p>
<h3 id="技术沉淀"><span class="section-num">2.1</span> 技术沉淀</h3>
<p>在平时的工作生活中，我免不了会碰到种种问题，了解这些问题，思考解决方案并最终付诸行动，这本身就是一个学习和进步的过程。而把其中的想法感悟写成博文会更有益于我的技术沉淀</p>
<h3 id="提高组织文字的能力"><span class="section-num">2.2</span> 提高组织文字的能力</h3>
<p>对于很多工科生来说，不擅文字，不擅言语表达估计是他们撕不掉的标签之一，但是，学会恰当地表达自己的想法是一项非常重要的技能，写博客可以提高自己的语言组织能力。此外，一位前辈曾经告诫我，如果你连文字都没办法组织好，我怎么相信你可以把你的代码组织好呢？</p>
<h3 id="便于了解自我"><span class="section-num">2.3</span> 便于了解自我</h3>
<p>当在编写博客的时候，你会有诸多的想法和思考，然后你会把你的思考一点一滴付诸于笔尖，你的博文越来越清晰了，你的自己的认识也会越来越清晰，你最终会了解到自己是一个什么样的人，喜欢做的事是什么，想要的又是什么？</p>
<h3 id="分享与交流"><span class="section-num">2.4</span> 分享与交流</h3>
<p>你有一个苹果，我有一个苹果，我们交换了苹果，我们还只是拥有一个苹果；但是，你有一种想法，我有一种想法，我们交换了想法，我们就有两个想法。写博客就是一种双向的交流方式，笔者介绍自己的观点，读者发表自己的评论，思想由此而激荡，甚至孕育出新的想法</p>
<h2 id="结语"><span class="section-num">3</span> 结语</h2>
<p>每个人总会有不同的想法，不同的际遇，如果你想和他人分享而不知从何言起，与何人言？何不付诸博客呢？</p>
]]></content:encoded>
    </item>
  </channel>
</rss>

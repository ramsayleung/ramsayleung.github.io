<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>工作流 on 菠萝油与天光墟</title>
    <link>https://ramsayleung.github.io/zh/categories/%E5%B7%A5%E4%BD%9C%E6%B5%81/</link>
    <description>Recent content in 工作流 on 菠萝油与天光墟</description>
    <image>
      <title>菠萝油与天光墟</title>
      <url>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.146.7</generator>
    <language>zh</language>
    <copyright>See this site&amp;rsquo;s source code here, licensed under GPLv3 ·</copyright>
    <lastBuildDate>Sun, 19 Jan 2025 13:38:32 -0800</lastBuildDate>
    <atom:link href="https://ramsayleung.github.io/zh/categories/%E5%B7%A5%E4%BD%9C%E6%B5%81/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>我的搜索流：高效搜索经验分享</title>
      <link>https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E6%90%9C%E7%B4%A2%E6%B5%81/</link>
      <pubDate>Sun, 25 Jun 2023 13:55:00 -0700</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E6%90%9C%E7%B4%A2%E6%B5%81/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; 前言&lt;/h2&gt;
&lt;p&gt;人并非全知全能，工作和生活难免会有各种的疑问，有问题自然可以询问有经验的同事或朋友。 &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但为了避免一有问题就去问人，给别人造成困扰，更推荐的就是: 自己先搜索，然后再去问人(Do a search before you ask a question) &lt;br/&gt;&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>人并非全知全能，工作和生活难免会有各种的疑问，有问题自然可以询问有经验的同事或朋友。 <br/></p>
<p>但为了避免一有问题就去问人，给别人造成困扰，更推荐的就是: 自己先搜索，然后再去问人(Do a search before you ask a question) <br/></p>
<p>当然，如果你不想打扰他人，直接问ChatGPT也未尝不可，只是答案的准确性不一定有保证。 <br/></p>
<p>如何高效地搜索，缩小搜索的范围，如何快速地检索到答案呢？ <br/></p>
<p>那么我来分享一下自己的个人经验： <br/></p>
<h2 id="google-search"><span class="section-num">2</span> Google Search</h2>
<p>虽然我认为「搜索并不仅限于使用搜索引擎」，但是「搜索引擎」却是搜索并不可少的一部分。 <br/></p>
<p>虽然搜索引擎有很多，但是我基本只用 Google；如果没法使用 Google, 那么推荐使用Bing, 反正百度不在我的推荐之列. <br/></p>
<p>Google 搜索的界面很简单，只有一个搜索框，用户只需要把想要搜索的内容输入进去并回车即可。 <br/></p>
<p>比如搜索：「cpp modules」，返回了 7,320,000条结果。 <br/></p>
<p>
<figure>
    
    
    <input type="checkbox" id="zoomCheck-3ed1b" hidden>
    <label for="zoomCheck-3ed1b">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/google_search_result.png"/> 
    
    
    </label>
</figure>
 <br/></p>
<p>搜索结果太多，我想对搜索内容进行筛选，google 就提供了相当多的搜索指令(search operator) <br/></p>
<h3 id="时间"><span class="section-num">2.1</span> 时间</h3>
<p>cpp modules是c++20 才新增的特性，如果我想按时间搜索下相关的内容，可以使用 <code>:before</code>, <code>:after</code> 指令，后面跟着一个日期: <br/></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cpp modules :before 2020
</span></span></code></pre></td></tr></table>
</div>
</div><p>
<figure>
    
    
    <input type="checkbox" id="zoomCheck-8b4e5" hidden>
    <label for="zoomCheck-8b4e5">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/google_search_before.png"/> 
    
    
    </label>
</figure>
 <br/></p>
<p>可以看到搜索结果变成了185,000条，并且返回的搜索结果都是在 2020 年以前的纪录，这个在查看历史新闻时特别有用，比如看历史合订本。 <br/></p>
<h3 id="站点"><span class="section-num">2.2</span> 站点</h3>
<p>如果你只想搜索某个站点，但是这个站点没有提供搜索功能（比如学校或者公司官网），或者搜索质量不够好，那么就可以加上 <code>site:</code> 的关键词, 要求 Google 只返回某个网站的检索结果: <br/></p>
<p>比如我想看下 jetbrains家的IDE 对 c++ 20 Modules的支持程度: <br/></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cpp modules site:jetbrains.com
</span></span></code></pre></td></tr></table>
</div>
</div><p>
<figure>
    
    
    <input type="checkbox" id="zoomCheck-babaf" hidden>
    <label for="zoomCheck-babaf">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/google_search_site.png"/> 
    
    
    </label>
</figure>
 <br/></p>
<p>又或者，我搜索网站的时候，想把某个网站排除掉, 比如使用中文搜索编程相关关键词的时候，经常会被CSDN 的垃圾内容污染，那么就可以使用 <code>-</code>, 来排除掉某些内容. <br/></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cpp modules -microsoft
</span></span></code></pre></td></tr></table>
</div>
</div><p>
<figure>
    
    
    <input type="checkbox" id="zoomCheck-eafe2" hidden>
    <label for="zoomCheck-eafe2">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/google_search_exclude.png"/> 
    
    
    </label>
</figure>
 <br/></p>
<p>原来排名第二的 Miscrosft 就被过滤掉了. <br/></p>
<h3 id="社交媒体"><span class="section-num">2.3</span> 社交媒体</h3>
<p>如果你想在社交媒体上搜索某个关键词，那么可以使用 <code>@</code> 后跟社交媒体的名字来进行搜索，例如 &ldquo;cpp modules @twitter&rdquo; 或者 &ldquo;cpp modules @reddit&rdquo;, 可以把 <code>@</code> 理解成是 <code>:site</code> 指令的简化版本. <br/></p>
<p>只是社交媒体(social media)的定义比较含糊, Google没有给出具体的说明，但是比较有名的社交媒体都是支持的. <br/></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cpp modules @reddit
</span></span></code></pre></td></tr></table>
</div>
</div><p>
<figure>
    
    
    <input type="checkbox" id="zoomCheck-34bc3" hidden>
    <label for="zoomCheck-34bc3">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/google_search_reddit.png"/> 
    
    
    </label>
</figure>
 <br/></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cpp modules @zhihu
</span></span></code></pre></td></tr></table>
</div>
</div><p>
<figure>
    
    
    <input type="checkbox" id="zoomCheck-c6b16" hidden>
    <label for="zoomCheck-c6b16">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/google_search_zhihu.png"/> 
    
    
    </label>
</figure>
 <br/></p>
<h3 id="文件类型"><span class="section-num">2.4</span> 文件类型</h3>
<p>可以通过 <code>filetype</code> 来指定想要搜索的文件类型，比如想搜索 pdf 相关的内容: <br/></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cpp modules filetype:pdf
</span></span></code></pre></td></tr></table>
</div>
</div><p>
<figure>
    
    
    <input type="checkbox" id="zoomCheck-03927" hidden>
    <label for="zoomCheck-03927">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/google_search_pdf.png"/> 
    
    
    </label>
</figure>
 <br/></p>
<p>这个在知道书名，想要搜索电子书的时候特别有用. <br/></p>
<h3 id="关键字匹配"><span class="section-num">2.5</span> 关键字匹配</h3>
<p>Google 支持若干个关键字匹配的指令: <br/></p>
<p>双引号: &ldquo;cpp modules&rdquo;, 精确匹配，只匹配包含&quot;cpp modules&quot;的内容 <br/></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">&#34;cpp modules&#34;
</span></span></code></pre></td></tr></table>
</div>
</div><p>
<figure>
    
    
    <input type="checkbox" id="zoomCheck-b0e1e" hidden>
    <label for="zoomCheck-b0e1e">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/google_search_precise_match.png"/> 
    
    
    </label>
</figure>
 <br/></p>
<p>搜索结果变成 3530 条纪录了. <br/></p>
<ul>
<li>星号: &ldquo;* modules&rdquo;, 通配符，所有包含 &ldquo;modules&quot;的内容都会被检索出来。个人觉得用处不大，只会让搜索结果膨胀. <br/></li>
<li>OR: &ldquo;cpp or module&rdquo;, 匹配包含 &ldquo;cpp&rdquo; 或者&quot;module&rdquo; 的内容, <code>or</code> 可以使用竖线代替 <code>|</code> 个人觉得用处不大，也只会让搜索结果膨胀 <br/></li>
<li>AND: &ldquo;cpp and module&rdquo;, 匹配包含 &ldquo;cpp&rdquo; 与&quot;module&quot; 的内容, <code>and</code> 可以使用与符号代替 <code>&amp;</code> <br/></li>
</ul>
<p>
<figure>
    
    
    <input type="checkbox" id="zoomCheck-11d41" hidden>
    <label for="zoomCheck-11d41">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/google_search_and.png"/> 
    
    
    </label>
</figure>
 <br/></p>
<h2 id="custome-search"><span class="section-num">3</span> Custome Search</h2>
<p>前面提到「搜索并不仅限于使用搜索引擎」，是因为有很多内容，搜索引擎检索不到。 <br/></p>
<p>比如在公司内网的信息，Google 再强大，也不可能会检索得到的，因为不公开。 <br/></p>
<p>这个时候就可以借助浏览器的 Custom Search能力（Chrome 叫 Site Search, Firefox叫 Keyword Search）。 <br/></p>
<p>举个例子，我的老东家用的是代码搜索工具是 <a href="https://oracle.github.io/opengrok/">OpenGrok</a>, 可以搜索整个事业群的代码，支持多种语言，可以搜索代码的定义，引用，历史记录等。 <br/></p>
<p>（下文以同样使用 OpenGrok 部署的开源项目 <code>LibreOffice</code> 的代码为例子） <br/></p>
<p>因为在日常开发的时候，遇到陌生的函数名或者枚举定义，就需要看下他们的定义与实现，看下有没有问题： <br/></p>
<p>比如想看下 <code>contains</code> 这个函数的实现： <br/></p>
<p>
<figure>
    
    
    <input type="checkbox" id="zoomCheck-89a36" hidden>
    <label for="zoomCheck-89a36">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/libre_office_definition.png"/> 
    
    
    </label>
</figure>
 <br/></p>
<p>或者想看下 <code>Intersection</code> 这个函数的引用，看下其他人是怎么用这个函数的，我也顺便抄下。 <br/></p>
<p>
<figure>
    
    
    <input type="checkbox" id="zoomCheck-b0a48" hidden>
    <label for="zoomCheck-b0a48">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/libre_office_symbol.png"/> 
    
    
    </label>
</figure>
  <br/></p>
<p>一般的步骤是: <br/></p>
<ol>
<li>打开或切换到浏览器(Chrome/Firefox) <br/></li>
<li>打开内网网站链接, 在例子中就是 <a href="https://opengrok.libreoffice.org">https://opengrok.libreoffice.org</a> <br/></li>
<li>点击 <code>Definition</code> 或者 <code>Symbol</code> <br/></li>
<li>输入或者粘贴想要查询的内容，比如 <code>contains</code> <br/></li>
</ol>
<p>一套流程下来，大概需要30-40秒，不能说很慢吧，但是起码算不上快。 <br/></p>
<p>但是如果使用 Custom Search, 大概可以缩短至 7-8秒, 并且适用于绝对大部分的网站. <br/></p>
<p>首先把查询函数引用的url 复制下来, 观察： <br/></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">https://opengrok.libreoffice.org/search?full=&amp;defs=&amp;refs=Intersection&amp;path=&amp;hist=&amp;type=cxx&amp;xrd=&amp;nn=19&amp;si=refs&amp;searchall=true&amp;si=refs
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>refs</code> 后面跟着的就是需要查询的内容, 即 <code>Intersection</code>, 将 <code>Intersection</code> 替换成 <code>%s</code> : <br/></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">https://opengrok.libreoffice.org/search?full=&amp;defs=&amp;refs=%s&amp;path=&amp;hist=&amp;type=cxx&amp;xrd=&amp;nn=19&amp;si=refs&amp;searchall=true&amp;si=refs
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="chrome-chromium-site-search"><span class="section-num">3.1</span> Chrome/Chromium Site Search</h3>
<p>打开Chrome/Chromium -&gt; 点击设置(Setting) -&gt; 点击搜索引擎（Search Engine） -&gt; Manage search engines and site search -&gt; Site search [Add] <br/></p>
<ul>
<li>Search Engine: OpenGrok Code Search Find Reference(取个有意义的名字) <br/></li>
<li>Keyword: csr <br/></li>
<li>URL: <code>https://opengrok.libreoffice.org/search?full=&amp;defs=&amp;refs=%s&amp;path=&amp;hist=&amp;type=cxx&amp;xrd=&amp;nn=19&amp;si=refs&amp;searchall=true&amp;si=refs</code> <br/></li>
</ul>
<p>
<figure>
    
    
    <input type="checkbox" id="zoomCheck-addec" hidden>
    <label for="zoomCheck-addec">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/google_site_search_ref.png"/> 
    
    
    </label>
</figure>
 <br/></p>
<p>然后，在Chrome 的浏览器地址，输入 <code>csr</code>, 空格, 再搜索 <code>Intersection</code>, 回车。就可以直接在Chrome 地址栏里面搜索指定网页的代码. <br/></p>
<p>
<figure>
    
    
    <input type="checkbox" id="zoomCheck-3c019" hidden>
    <label for="zoomCheck-3c019">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/google_site_search_csr.gif"/> 
    
    
    </label>
</figure>
 <br/></p>
<p>而搜索代码定义，URL 如下: <br/></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">https://opengrok.libreoffice.org/search?full=&amp;defs=Intersection&amp;refs=&amp;path=&amp;hist=&amp;type=cxx&amp;xrd=&amp;nn=19&amp;si=defs&amp;searchall=true&amp;si=defs
</span></span></code></pre></td></tr></table>
</div>
</div><p>只需要将 <code>defs</code> 后面的内容修改成 <code>%s</code>, 再建一个新的site search, 名为 <code>Opengrok Code Search Find Definition</code>, keyword 为 <code>csd</code>, 就可以快速搜索代码定义. <br/></p>
<p>如果想要搜索其他网站，比如公司内网: <a href="https://search.xxoa.com/query=Foobar">https://search.xxoa.com/query=Foobar</a>, <br/>
只需要把查询内容修改为 %s, 再新建个Site Search 即可。 <br/></p>
<p>在老东家，搜索错误码，或者是搜索内网上的文章，我都是这么干的；所以到新东家之后，我也是这么搞的。 <br/></p>
<h3 id="firefox"><span class="section-num">3.2</span> Firefox</h3>
<p>Firefox 也提供类似的功能，叫 Keyword Search, 添加起来甚至更方便: <br/></p>
<ol>
<li>打开想要搜索的网站 <br/></li>
<li>在搜索框点击鼠标右键，然后会看到一个「Add a Keyword for this Search&hellip;」 <br/></li>
<li>修改名字与 keyword <br/></li>
</ol>
<p>
<figure>
    
    
    <input type="checkbox" id="zoomCheck-b6f7b" hidden>
    <label for="zoomCheck-b6f7b">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/firefox_add_key_word_search.png"/> 
    
    
    </label>
</figure>
 <br/></p>
<p>
<figure>
    
    
    <input type="checkbox" id="zoomCheck-dfd54" hidden>
    <label for="zoomCheck-dfd54">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/firefox_add_key_word_search_bookmark.png"/> 
    
    
    </label>
</figure>
 <br/></p>
<p>然后，在 Firefox 的浏览器地址，输入 <code>csd</code>, 空格, 再搜索 <code>Intersection</code>, 回车。就可以直接在 Firefox 地址栏里面搜索指定网页的代码. <br/></p>
<p>
<figure>
    
    
    <input type="checkbox" id="zoomCheck-2c9b3" hidden>
    <label for="zoomCheck-2c9b3">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/firefox_keyword_search.gif"/> 
    
    
    </label>
</figure>
 <br/></p>
<p>如果没有右键时没有找到 「Add a Keyword for this Search&hellip;」的选项，也可以使用添加书签的方式，手动添加一个 keyword search: <br/></p>
<p>
<figure>
    
    
    <input type="checkbox" id="zoomCheck-c9c77" hidden>
    <label for="zoomCheck-c9c77">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/firefox_add_bookmark.png"/> 
    
    
    </label>
</figure>
 <br/></p>
<h2 id="alfred-web-search"><span class="section-num">4</span> Alfred Web Search</h2>
<p>如果使用的是 Mac OS, 那么通过Alfred 插件的 Web Search功能，甚至可以不用手动切换到浏览器，直接就可以进行搜索，可以把搜索流的耗时进一步缩短到1-3秒。 <br/></p>
<p>Alfred -&gt; Preference -&gt; Web Search -&gt; Add custome Search <br/></p>
<p>
<figure>
    
    
    <input type="checkbox" id="zoomCheck-d4600" hidden>
    <label for="zoomCheck-d4600">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/alfred_web_seasch.jpg"/> 
    
    
    </label>
</figure>
  <br/></p>
<p>除了要将 <code>%s</code> 换成 <code>{query}</code> 之外, 其他添加的步骤与 Site Search 一致： <br/></p>
<p>
<figure>
    
    
    <input type="checkbox" id="zoomCheck-78375" hidden>
    <label for="zoomCheck-78375">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/alfred_code_search.gif"/> 
    
    
    </label>
</figure>
 <br/></p>
<p>录制 Gif 只花了1.5 秒. <br/></p>
<h2 id="总结"><span class="section-num">5</span> 总结</h2>
<p>Perl语言之父Larry Wall 有句广为人知的名言：「程序员要有三大美德：急躁，懒惰，自大」。 <br/></p>
<ul>
<li>急躁意味着不愿意花时间等待缓慢的程序，会想办法优化程序； <br/></li>
<li>自大意味着不愿让人指谪，对自身要求强，要写出高质量的代码； <br/></li>
<li>懒惰意味着不想花精心做重复无用的事情，会想办法自动化，让电脑帮忙处理。 <br/></li>
</ul>
<blockquote>
<p>&ldquo;We will encourage you to develop the three great virtues of a programmer: laziness, impatience, and hubris.&rdquo; &ndash; LarryWall <br/></p></blockquote>
<p>而我对搜索流的优化，就是在培养「急躁」与「懒惰」的美德。 <br/></p>
<h2 id="延伸阅读"><span class="section-num">6</span> 延伸阅读</h2>
<p>我的各种「流」： <br/></p>
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E5%86%99%E4%BD%9C%E6%B5%81/">我的写作流：写作工具与平台分享</a> <br/></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E7%94%BB%E5%9B%BE%E6%B5%81/">我的画图流：画图工具与技巧分享</a> <br/></li>
</ul>
<h2 id="参考"><span class="section-num">7</span> 参考</h2>
<ul>
<li><a href="https://support.mozilla.org/en-US/kb/how-search-from-address-bar">Mozilla Support: How to search IMDB, Wikipedia and more from the address bar</a> <br/></li>
<li><a href="https://support.google.com/websearch/answer/2466433">Google Document: Refine web searches</a> <br/></li>
<li><a href="https://support.google.com/websearch/answer/35890">Google Document: Do an Advanced Search on Google</a> <br/></li>
</ul>
<div center class="qr-container">
<img src="/ox-hugo/qrcode_gh_e06d750e626f_1.jpg" alt="qrcode_gh_e06d750e626f_1.jpg" width="160px" height="160px" center="t" class="qr-container" />
公号同步更新，欢迎关注👻
</div>
]]></content:encoded>
    </item>
    <item>
      <title>我的画图流：画图工具与技巧分享</title>
      <link>https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E7%94%BB%E5%9B%BE%E6%B5%81/</link>
      <pubDate>Mon, 30 Jan 2023 19:22:00 -0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E7%94%BB%E5%9B%BE%E6%B5%81/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; 前言&lt;/h2&gt;
&lt;p&gt;古人云：「一图胜千言」。
一幅合适的图片可以清晰地向读者表达我们的意图，又因为我们人脑的作用机制，阅读一张图片所耗费的脑力要远少于一段文字，故而我们对图片更加深刻。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>古人云：「一图胜千言」。
一幅合适的图片可以清晰地向读者表达我们的意图，又因为我们人脑的作用机制，阅读一张图片所耗费的脑力要远少于一段文字，故而我们对图片更加深刻。</p>
<p>古人又云，「工欲善其事，必先利其器」，那么我就来分享一下我使用得顺手的画图工具与画图技巧。</p>
<h2 id="excalidraw"><span class="section-num">2</span> excalidraw</h2>
<p><a href="https://excalidraw.com/">excalidraw</a> 是我最常用的画图工具，是一款开源的手绘画风的画板工具，图形风格是简洁而精美，一经使用，便爱不释手。</p>
<p>非常适合构建原型或阐述想法</p>
<p>我见证它在Github上的star数从10k涨至现在的40k，表明众多用户对它的喜爱。</p>
<p>excalidraw提供了基本的图形，如矩形，图形，菱形，文本，箭头等，稍经组合，就可以绘制很精美，简洁的图画。</p>
<h3 id="涂鸦之作"><span class="section-num">2.1</span> 涂鸦之作</h3>
<p>Hadoop 词频计算:</p>

<figure><a href="/ox-hugo/word_freq_count.png">
    
    
    <input type="checkbox" id="zoomCheck-70568" hidden>
    <label for="zoomCheck-70568">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/word_freq_count.png"/> 
    
    
    </label></a>
</figure>

<p>数据治理:</p>

<figure><a href="/ox-hugo/%e6%95%b0%e6%8d%ae%e6%b2%bb%e7%90%86.png">
    
    
    <input type="checkbox" id="zoomCheck-1ba33" hidden>
    <label for="zoomCheck-1ba33">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/%e6%95%b0%e6%8d%ae%e6%b2%bb%e7%90%86.png"/> 
    
    
    </label></a>
</figure>

<p>数据未分层:</p>

<figure><a href="/ox-hugo/%e6%95%b0%e6%8d%ae%e6%9c%aa%e5%88%86%e5%b1%82.png">
    
    
    <input type="checkbox" id="zoomCheck-fb586" hidden>
    <label for="zoomCheck-fb586">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/%e6%95%b0%e6%8d%ae%e6%9c%aa%e5%88%86%e5%b1%82.png"/> 
    
    
    </label></a>
</figure>

<p>数据分层:</p>

<figure><a href="/ox-hugo/%e6%95%b0%e6%8d%ae%e5%88%86%e5%b1%82.png">
    
    
    <input type="checkbox" id="zoomCheck-d61f3" hidden>
    <label for="zoomCheck-d61f3">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/%e6%95%b0%e6%8d%ae%e5%88%86%e5%b1%82.png"/> 
    
    
    </label></a>
</figure>

<p>因为excalidraw 相当的灵活，甚至系统循环图我都是使用它来绘制的：</p>
<p>系统循环图:</p>

<figure><a href="/ox-hugo/%e4%ba%ba%e5%8f%a3%e4%b8%8e%e5%80%ba%e5%8a%a1%e9%a3%8e%e9%99%a93.png">
    
    
    <input type="checkbox" id="zoomCheck-1b310" hidden>
    <label for="zoomCheck-1b310">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/%e4%ba%ba%e5%8f%a3%e4%b8%8e%e5%80%ba%e5%8a%a1%e9%a3%8e%e9%99%a93.png"/> 
    
    
    </label></a>
</figure>

<h3 id="素材库"><span class="section-num">2.2</span> 素材库</h3>
<p>如果基本的图形无法满足诉求的话，excalidraw 还提供了在线<a href="https://libraries.excalidraw.com/?theme=light&amp;sort=default">library</a>，供设计师把他们的图形，图标分享给其他用户。例如系统架构图，AWS组件图，UML图，手绘人物图等等，应有尽有，不一而足。</p>
<p>素材库:</p>

<figure><a href="/ox-hugo/library.png">
    
    
    <input type="checkbox" id="zoomCheck-b14b4" hidden>
    <label for="zoomCheck-b14b4">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/library.png"/> 
    
    
    </label></a>
</figure>

<p>(商户系统的头像就是引用自 library)</p>
<h3 id="在线协作"><span class="section-num">2.3</span> 在线协作</h3>
<p>excalidraw 还支持端对端加密的在线协作，只需要将一个链接发送给协议方，就能实现画图在线协作：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">https://excalidraw.com/#room=91bd46ae3aa84dff9d20,pfLqgEoY1c2ioq8LmGwsFA
</span></span></code></pre></td></tr></table>
</div>
</div><p>在远程会议，需要多方画图协作沟通的时候非常有用。</p>
<h3 id="技巧分享"><span class="section-num">2.4</span> 技巧分享</h3>
<p>excalidraw 画曲线的技巧</p>
<ol>
<li>按住Control/Command, 然后双击线条，进入曲线编辑模式</li>
<li>然后拖动线条，使用Control/Command + D 在末尾增加一个端点，或者使用删除键删除一个端点（留意excalidraw 工具栏下方的操作提示）</li>
</ol>
<p>绘制曲线:</p>

<figure><a href="/ox-hugo/cursed_line.gif">
    
    
    <input type="checkbox" id="zoomCheck-77d58" hidden>
    <label for="zoomCheck-77d58">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/cursed_line.gif"/> 
    
    
    </label></a>
</figure>

<p>我在拙作<a href="https://mp.weixin.qq.com/s/mid3TpmXJMM7xWm5rfl7qg">《我的写作流》</a>中提到过，我倾向「本地化」+ 「文本化」 + 「版本管理」 + 「云同步」的知识管理文案，对于图片管理，我也是类似的倾向。</p>
<p>因为图片是二进制流，无法做版本管理，所以我一般会把excalidraw 文件保存到本地，保存成xxx.excalidraw 的文件，实际是Json 文本；然后再导出成png, svg 等各种形式的图片文件。</p>
<p>如果需要修改图片或者复制，剪切，只需要导入xxx.excalidraw，修改保存成新的excalidraw 文件，即可以实现「版本管理」</p>

<figure><a href="/ox-hugo/excalidraw%e7%ae%a1%e7%90%86.png">
    
    
    <input type="checkbox" id="zoomCheck-2293a" hidden>
    <label for="zoomCheck-2293a">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/excalidraw%e7%ae%a1%e7%90%86.png"/> 
    
    
    </label></a>
</figure>

<p>原来excalidraw 有个限制，就是一次只能编辑一个excalidraw 文件，经@qisdreamyan 提醒，Vscode的<a href="https://marketplace.visualstudio.com/items?itemName=pomdtr.excalidraw-editor">excalidraw 插件</a>支持直接在Vscode 里面编辑excalidraw 文件，那么就可以同时编辑多个文件啦。</p>

<figure><a href="/ox-hugo/vscode_excalidraw.gif">
    
    
    <input type="checkbox" id="zoomCheck-89bce" hidden>
    <label for="zoomCheck-89bce">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/vscode_excalidraw.gif"/> 
    
    
    </label></a>
</figure>

<p>目前excalidraw 美中不足的一点就是，不支持手绘风格的非拉丁文字体，如中文，日文字体等，很早之前就有<a href="https://github.com/excalidraw/excalidraw/pull/5604">issue</a>在谈论了，目前还没有什么进展。</p>
<h2 id="graphviz"><span class="section-num">3</span> graphviz</h2>
<p>我主要是用graphviz 来绘制复杂的关系图，timeline图。
它系出名门，出自大名鼎鼎的的AT&amp;T实验室，类似微软出的「Visio」，但两者有个本质的差别。</p>
<p>就是「Visio」是手动的，需要绘图者指定点线之间的布局，而graphviz 是自动布局的，只要将告知graphviz点与线的关系，graphviz 就能实现「自动布局」。</p>
<p>如果是绘制简单的布局的图表，「自动布局」与「手动布局」差别不大。</p>
<p>但如果是绘制复杂的图画，「手动布局」不仅繁琐，还不美观，而「自动布局」都能帮我们轻松搞定，为我们节省非常多的精力。</p>
<p>不看广告，看疗效，来看下我使用graphviz 画出的图：</p>
<p>土地财政时间线:</p>

<figure><a href="/ox-hugo/%e5%9c%9f%e5%9c%b0%e8%b4%a2%e6%94%bf%e6%97%b6%e9%97%b4%e7%ba%bf.png">
    
    
    <input type="checkbox" id="zoomCheck-aa7ff" hidden>
    <label for="zoomCheck-aa7ff">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/%e5%9c%9f%e5%9c%b0%e8%b4%a2%e6%94%bf%e6%97%b6%e9%97%b4%e7%ba%bf.png"/> 
    
    
    </label></a>
</figure>

<p>西方哲学史演进历程:</p>

<figure><a href="/ox-hugo/%e8%a5%bf%e6%96%b9%e5%93%b2%e5%ad%a6%e5%8f%b2.png">
    
    
    <input type="checkbox" id="zoomCheck-6894f" hidden>
    <label for="zoomCheck-6894f">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/%e8%a5%bf%e6%96%b9%e5%93%b2%e5%ad%a6%e5%8f%b2.png"/> 
    
    
    </label></a>
</figure>

<p>Graphviz 官方示例库：</p>
<p>Unix 家谱:</p>

<figure><a href="/ox-hugo/unix.png">
    
    
    <input type="checkbox" id="zoomCheck-02be2" hidden>
    <label for="zoomCheck-02be2">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/unix.png"/> 
    
    
    </label></a>
</figure>

<p>数据结构:</p>

<figure><a href="/ox-hugo/datastruct.png">
    
    
    <input type="checkbox" id="zoomCheck-144c0" hidden>
    <label for="zoomCheck-144c0">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/datastruct.png"/> 
    
    
    </label></a>
</figure>

<p>更多更复杂的示例，可见官方的<a href="http://www.graphviz.org/gallery/">gallery</a></p>
<h3 id="快速入门"><span class="section-num">3.1</span> 快速入门</h3>
<p>graphviz 使用所谓的「dot 语言(language)」这种标记语言来描述图形，然后再由命令行生成图片。</p>
<p>程序员们可以把这个理解成，从源码编译到可执行文件。</p>
<h4 id="有向图--digraph--与无向图--graph"><span class="section-num">3.1.1</span> 有向图 (digraph)与无向图 (graph)</h4>
<p>dot语言支持两种图形，分别是有向图 (digraph)与无向图(graph).</p>
<p>定义一个无向图</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">graph mygraph {
</span></span><span class="line"><span class="cl">1 -- 2 -- 3;
</span></span><span class="line"><span class="cl">2 -- 4;
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">// graph 标识来定义一个无向图
</span></span></code></pre></td></tr></table>
</div>
</div>
<figure>
    
    
    <input type="checkbox" id="zoomCheck-b44a5" hidden>
    <label for="zoomCheck-b44a5">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/graph.png"/> 
    
    
    </label>
</figure>

<p>定义一个有向图：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">digraph mydigraph {
</span></span><span class="line"><span class="cl">1 -&gt; 2 -&gt; 3;
</span></span><span class="line"><span class="cl">2 -&gt; 4;
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">// digraph 标识来定义一个无向图
</span></span></code></pre></td></tr></table>
</div>
</div>
<figure>
    
    
    <input type="checkbox" id="zoomCheck-2603c" hidden>
    <label for="zoomCheck-2603c">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/digraph.png"/> 
    
    
    </label>
</figure>

<p>命名规范与C家族的编程语言类似：图形关系定义在花括号={}= 中；每条语句以 <code>;</code> 结尾; <code>//</code> 表示单行注释, =/**/=表示多行注释</p>
<h4 id="节点--node"><span class="section-num">3.1.2</span> 节点(node)</h4>
<p><code>mydigraph</code> 是图形名，=1=, <code>2</code> 是节点名(node), 两个节点构成一条边(edge)。在图的定义中，相同的名称就代表同一个节点。</p>
<p>当dot 编译器遇到一个新的名称，就认为是新的节点</p>
<h4 id="属性--property"><span class="section-num">3.1.3</span> 属性(property)</h4>
<p>属性可以设置在节点和边上，通过「方括号 =[]=」来定义属性，属性之间用英文逗号分隔。</p>
<p>属性的定义采用如下的格式：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">属性名 = 属性值
</span></span></code></pre></td></tr></table>
</div>
</div><p>常见的属性有：</p>
<ul>
<li>label: 标题</li>
<li>color: 颜色</li>
<li>style: 样式</li>
<li>shape: 形状</li>
</ul>
<!--listend-->
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">strict graph {
</span></span><span class="line"><span class="cl">// 设置节点属性
</span></span><span class="line"><span class="cl">1 [shape=box];
</span></span><span class="line"><span class="cl">3 [shape=triangle];
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">// 设置边属性
</span></span><span class="line"><span class="cl">1 -- 2 [color=blue];
</span></span><span class="line"><span class="cl">1 -- 3 [style=dotted];
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div>
<figure>
    
    
    <input type="checkbox" id="zoomCheck-b6838" hidden>
    <label for="zoomCheck-b6838">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/attr.png"/> 
    
    
    </label>
</figure>

<p>属性还可以作用于图(graph)上，常用的属性包括:</p>
<ul>
<li>label:标题</li>
<li>bgcolor:颜色</li>
<li>fontname:字体名称（【不】影响节点和连线）</li>
<li>fontsize:字体大小（【不】影响节点和连线）</li>
<li>fontcolor:字体颜色（【不】影响节点和连线）</li>
<li>center:是否居中绘制</li>
</ul>
<!--listend-->
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">digraph graph_attr
</span></span><span class="line"><span class="cl">{
</span></span><span class="line"><span class="cl">graph[bgcolor=&#34;yellow&#34; label=&#34;标题&#34; fontsize=24 fontcolor=&#34;green&#34;];
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">1 -&gt; 2;
</span></span><span class="line"><span class="cl">1 -&gt; 3;
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div>
<figure>
    
    
    <input type="checkbox" id="zoomCheck-9fb24" hidden>
    <label for="zoomCheck-9fb24">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/graph_attr.png"/> 
    
    
    </label>
</figure>

<p>更多的属性可见官网：<a href="http://www.graphviz.org/doc/info/attrs.html">Attributes</a></p>
<h4 id="子图--subgraph"><span class="section-num">3.1.4</span> 子图(subgraph)</h4>
<p>subgraph 的作用主要有 3 个：</p>
<ul>
<li>表示图的结构，对节点和边进行分组</li>
<li>提供一个单独的上下文设置属性（类似操作系统里面不同的线程，有不同的线程变量）</li>
<li>针对特定引擎使用特殊的布局。比如下面的例子，如果 subgraph 的名字以 cluster 开头，所有属于这个子图的节点会用一个矩形和其他节点分开。
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">digraph graphname{
</span></span><span class="line"><span class="cl">a -&gt; {b c};
</span></span><span class="line"><span class="cl">c -&gt; e;
</span></span><span class="line"><span class="cl">b -&gt; d;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">subgraph cluster_bc {
</span></span><span class="line"><span class="cl">bgcolor=red;
</span></span><span class="line"><span class="cl">b;
</span></span><span class="line"><span class="cl">c;
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">subgraph cluster_de {
</span></span><span class="line"><span class="cl">label=&#34;Block&#34;
</span></span><span class="line"><span class="cl">d;
</span></span><span class="line"><span class="cl">e;
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div>
    <figure>
        
        
        <input type="checkbox" id="zoomCheck-28fbc" hidden>
        <label for="zoomCheck-28fbc">
        
        
        <img class="zoomCheck" loading="lazy" src="/ox-hugo/subgraph.png"/> 
        
        
        </label>
    </figure>
</li>
</ul>
<h4 id="图布局--layout"><span class="section-num">3.1.5</span> 图布局(layout)</h4>
<p>默认情况下图是从上到下布局的(rankdir <code>&quot;TB&quot;)，通过设置 rankdir</code>&ldquo;LR&rdquo; 可以让图从左到右布局。</p>
<p>默认布局(From top to bottom)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">digraph {
</span></span><span class="line"><span class="cl">rankdir=&#34;TB&#34;
</span></span><span class="line"><span class="cl">a -&gt; b -&gt; c;
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div>
<figure>
    
    
    <input type="checkbox" id="zoomCheck-362b5" hidden>
    <label for="zoomCheck-362b5">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/rankdir_tb.png"/> 
    
    
    </label>
</figure>

<p>From Left to right:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">digraph {
</span></span><span class="line"><span class="cl">rankdir=&#34;LR&#34;
</span></span><span class="line"><span class="cl">a -&gt; b -&gt; c;
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div>
<figure>
    
    
    <input type="checkbox" id="zoomCheck-fbcf0" hidden>
    <label for="zoomCheck-fbcf0">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/rankdir_lr.png"/> 
    
    
    </label>
</figure>

<p>该属性只针对图(graph)生效.</p>
<h4 id="示例"><span class="section-num">3.1.6</span> 示例</h4>
<p>再回头看下，「土地财政时间线」这图的源代码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">digraph 土地财政时间线 {
</span></span><span class="line"><span class="cl">size=&#34;7,8&#34;;
</span></span><span class="line"><span class="cl">node [fontsize=24, shape = plaintext];
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">1976 -&gt; 1985;
</span></span><span class="line"><span class="cl">1985 -&gt; 1994;
</span></span><span class="line"><span class="cl">1994 -&gt; 1998;
</span></span><span class="line"><span class="cl">1998 -&gt; 1999;
</span></span><span class="line"><span class="cl">1999 -&gt; 2000;
</span></span><span class="line"><span class="cl">2000 -&gt; 2001;
</span></span><span class="line"><span class="cl">2001 -&gt; 2002;
</span></span><span class="line"><span class="cl">2002 -&gt; 2008;
</span></span><span class="line"><span class="cl">2008 -&gt; 2009;
</span></span><span class="line"><span class="cl">2009 -&gt; 2014;
</span></span><span class="line"><span class="cl">2014 -&gt; 2015;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">node [fontsize=20, shape = box];
</span></span><span class="line"><span class="cl">{ rank=same;  1976 &#34;改革开放&#34;; }
</span></span><span class="line"><span class="cl">{ rank=same;  1985 &#34;财政包干&#34;; }
</span></span><span class="line"><span class="cl">{ rank=same;  1994 &#34;分税制改革&#34;; }
</span></span><span class="line"><span class="cl">{ rank=same;  1998 &#34;住房商品化改革&#34; &#34;《中华人民共和国土地管理法》实施&#34;; }
</span></span><span class="line"><span class="cl">{ rank=same;  1999 &#34;土地财政兴起&#34;; }
</span></span><span class="line"><span class="cl">{ rank=same;  2000 &#34;工业化&#34; &#34;城市化&#34; &#34;土地金融&#34;; }
</span></span><span class="line"><span class="cl">{ rank=same;  2001 &#34;房价&#34;; }
</span></span><span class="line"><span class="cl">{ rank=same;  2002 &#34;所得税改革&#34;; }
</span></span><span class="line"><span class="cl">{ rank=same;  2008 &#34;金融危机&#34; &#34;四万亿刺激&#34;; }
</span></span><span class="line"><span class="cl">{ rank=same;  2009 &#34;房地产与基建投资激增&#34;; }
</span></span><span class="line"><span class="cl">{ rank=same;  2014 &#34;产能积压&#34; &#34;库存过剩&#34;; }
</span></span><span class="line"><span class="cl">{ rank=same;  2015 &#34;棚改货币化&#34; &#34;涨价去库存&#34; ; }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&#34;改革开放&#34; -&gt; &#34;财政包干&#34;;
</span></span><span class="line"><span class="cl">&#34;财政包干&#34; -&gt; &#34;分税制改革&#34;[label=&#34;地方政府收入下降&#34;];
</span></span><span class="line"><span class="cl">&#34;分税制改革&#34; -&gt; &#34;所得税改革&#34;[label=&#34;地方政府占比下降&#34;];
</span></span><span class="line"><span class="cl">&#34;所得税改革&#34; -&gt; &#34;土地金融&#34;[label=&#34;促进&#34;]
</span></span><span class="line"><span class="cl">&#34;分税制改革&#34; -&gt; &#34;土地财政兴起&#34;[label=&#34;推动&#34;]
</span></span><span class="line"><span class="cl">&#34;土地财政兴起&#34; -&gt; &#34;工业化&#34;;
</span></span><span class="line"><span class="cl">&#34;土地财政兴起&#34; -&gt; &#34;城市化&#34;;
</span></span><span class="line"><span class="cl">&#34;土地金融&#34; -&gt; &#34;城市化&#34;[label=&#34;促进&#34; color =&#34;red&#34;];
</span></span><span class="line"><span class="cl">&#34;土地金融&#34; -&gt; &#34;房价&#34;[label =&#34;推高&#34;]
</span></span><span class="line"><span class="cl">&#34;城市化&#34; -&gt; &#34;房价&#34;[label =&#34;推高&#34;]
</span></span><span class="line"><span class="cl">&#34;土地财政兴起&#34; -&gt; &#34;土地金融&#34;[label=&#34;地方政府收入增加&#34;];
</span></span><span class="line"><span class="cl">&#34;土地金融&#34; -&gt; &#34;工业化&#34;[label=&#34;促进&#34; color =&#34;red&#34;];
</span></span><span class="line"><span class="cl">&#34;住房商品化改革&#34; -&gt; &#34;土地财政兴起&#34;[label=&#34;停止福利分房&#34;];
</span></span><span class="line"><span class="cl">&#34;《中华人民共和国土地管理法》实施&#34; -&gt; &#34;土地财政兴起&#34;[label=&#34;限制农业用地非农用途&#34;];
</span></span><span class="line"><span class="cl">&#34;金融危机&#34; -&gt; &#34;四万亿刺激&#34;;
</span></span><span class="line"><span class="cl">&#34;四万亿刺激&#34; -&gt; &#34;房地产与基建投资激增&#34;[label=&#34;宽松货币政策&#34;]
</span></span><span class="line"><span class="cl">&#34;房地产与基建投资激增&#34; -&gt; &#34;产能积压&#34;;
</span></span><span class="line"><span class="cl">&#34;房地产与基建投资激增&#34; -&gt; &#34;库存过剩&#34;;
</span></span><span class="line"><span class="cl">&#34;房地产与基建投资激增&#34; -&gt; &#34;土地金融&#34;[label=&#34;强化&#34;];
</span></span><span class="line"><span class="cl">&#34;产能积压&#34; -&gt; &#34;涨价去库存&#34;;
</span></span><span class="line"><span class="cl">&#34;库存过剩&#34; -&gt; &#34;涨价去库存&#34;;
</span></span><span class="line"><span class="cl">&#34;棚改货币化&#34; -&gt; &#34;房价起飞&#34;;
</span></span><span class="line"><span class="cl">&#34;涨价去库存&#34; -&gt; &#34;房价起飞&#34;;
</span></span><span class="line"><span class="cl">&#34;房价&#34; -&gt; &#34;房价起飞&#34;[label =&#34;逐年上涨&#34;];
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="编辑器支持"><span class="section-num">3.1.7</span> 编辑器支持</h4>
<p>如果是Emacs 用户，可以使用<a href="https://github.com/ppareit/graphviz-dot-mode">graphviz-dot-mode</a> 来编辑并预览生成的图片，效果如下：</p>

<figure><a href="/ox-hugo/graphviz-dot-mode.png">
    
    
    <input type="checkbox" id="zoomCheck-990bb" hidden>
    <label for="zoomCheck-990bb">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/graphviz-dot-mode.png"/> 
    
    
    </label></a>
</figure>

<p>虽然我是重度Emacs 用户，但是在Emacs上实时预览图片效果并不好。</p>
<p>Emacs对查看图片功能支持不够强大，无法通过鼠标放大缩小，并实时预览图片。</p>
<p>如果需要实时预览graphviz 生成的图片，我个人更加推荐使用Vscode + <a href="https://marketplace.visualstudio.com/items?itemName=joaompinto.vscode-graphviz">graphviz 插件</a> ：</p>

<figure><a href="/ox-hugo/graph_snippet.gif">
    
    
    <input type="checkbox" id="zoomCheck-5c51e" hidden>
    <label for="zoomCheck-5c51e">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/graph_snippet.gif"/> 
    
    
    </label></a>
</figure>

<h2 id="plantuml"><span class="section-num">4</span> plantuml</h2>
<p>身为程序员，免不了撰写各种设计方案，绘制各种序列图，类图，活动图，状态机图等等各种UML图。</p>
<p>而<a href="https://plantuml.com/">plantuml</a> 就是这样一个绘图组件，支持绘制各种程序开发需要用到的图。</p>
<p>plantuml 依赖的底层组件就有前文提到的graphviz，所以plantuml的语法也类似graphviz, 通过自定义的标记语言，来描述不同图形之间的关系，「自动布局」并绘制。</p>
<p>学过UML规范的同学应该都知道这些图应该怎么画，我就拿几个常见的图来举个例子。</p>
<h3 id="时序图"><span class="section-num">4.1</span> 时序图</h3>
<p>plantuml 提供不同的组件供时序图使用。不同的组件有不同的形状，默认情况下，组件的声明顺序就是他们的展示顺序。</p>
<p>使用 <code>-&gt;</code> 来表示在两个组件/参与者(participant) 之间传递消息， <code>&lt;--</code> 表示回包信息。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">@startuml
</span></span><span class="line"><span class="cl">participant Participant as Foo
</span></span><span class="line"><span class="cl">actor       Actor       as Foo1
</span></span><span class="line"><span class="cl">boundary    Boundary    as Foo2
</span></span><span class="line"><span class="cl">control     Control     as Foo3
</span></span><span class="line"><span class="cl">entity      Entity      as Foo4
</span></span><span class="line"><span class="cl">database    Database    as Foo5
</span></span><span class="line"><span class="cl">collections Collections as Foo6
</span></span><span class="line"><span class="cl">queue       Queue       as Foo7
</span></span><span class="line"><span class="cl">Foo -&gt; Foo1 : To actor
</span></span><span class="line"><span class="cl">Foo -&gt; Foo2 : To boundary
</span></span><span class="line"><span class="cl">Foo -&gt; Foo3 : To control
</span></span><span class="line"><span class="cl">Foo -&gt; Foo4 : To entity
</span></span><span class="line"><span class="cl">Foo -&gt; Foo5 : To database
</span></span><span class="line"><span class="cl">Foo -&gt; Foo6 : To collections
</span></span><span class="line"><span class="cl">Foo -&gt; Foo7: To queue
</span></span><span class="line"><span class="cl">Foo &lt;-- Foo7: Response from queue
</span></span><span class="line"><span class="cl">@enduml
</span></span></code></pre></td></tr></table>
</div>
</div>
<figure>
    
    
    <input type="checkbox" id="zoomCheck-749be" hidden>
    <label for="zoomCheck-749be">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/sequence.png"/> 
    
    
    </label>
</figure>

<p>时序图的更多用法可见官网文档：<a href="https://plantuml.com/sequence-diagram">Sequence-Diagram</a></p>
<h3 id="活动图"><span class="section-num">4.2</span> 活动图</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">@startuml
</span></span><span class="line"><span class="cl">start
</span></span><span class="line"><span class="cl">repeat
</span></span><span class="line"><span class="cl">        :Test something;
</span></span><span class="line"><span class="cl">        if (Something went wrong?) then (no)
</span></span><span class="line"><span class="cl">        #palegreen:OK;
</span></span><span class="line"><span class="cl">        break
</span></span><span class="line"><span class="cl">endif
</span></span><span class="line"><span class="cl">-&gt;NOK;
</span></span><span class="line"><span class="cl">:Alert &#34;Error with long text&#34;;
</span></span><span class="line"><span class="cl">repeat while (Something went wrong with long text?) is (yes) not (no)
</span></span><span class="line"><span class="cl">-&gt;//merged step//;
</span></span><span class="line"><span class="cl">:Alert &#34;Success&#34;;
</span></span><span class="line"><span class="cl">stop
</span></span><span class="line"><span class="cl">@enduml
</span></span></code></pre></td></tr></table>
</div>
</div>
<figure>
    
    
    <input type="checkbox" id="zoomCheck-22b8a" hidden>
    <label for="zoomCheck-22b8a">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/activity-digram.png"/> 
    
    
    </label>
</figure>

<h3 id="编辑器"><span class="section-num">4.3</span> 编辑器</h3>
<p>如果需要实时预览，个人推荐Vscode + <a href="https://marketplace.visualstudio.com/items?itemName=jebbs.plantuml">plantuml插件</a>来绘制plantuml 图，所见即所得，实时预览，并提供代码补全：</p>

<figure><a href="/ox-hugo/auto_update_demo.gif">
    
    
    <input type="checkbox" id="zoomCheck-dc999" hidden>
    <label for="zoomCheck-dc999">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/auto_update_demo.gif"/> 
    
    
    </label></a>
</figure>

<h2 id="matplotlib"><span class="section-num">5</span> matplotlib</h2>
<p>这就是个绘图库了，主要是用来绘制各种图表，比如折线图，饼图，直方图等，通常是配合数据分析使用，还支持xkcd 风格。</p>
<p>之前在上MIT 6.00网课的时候，John Guttag教授出了一个概率统计题，一个醉汉每次向四个方向中任意一个方向走一步，500步后，醉汉是离原点越来越近呢，还是越来越远？</p>
<p>下面是Python代码实现，模拟醉汉行为：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span><span class="lnt">91
</span><span class="lnt">92
</span><span class="lnt">93
</span><span class="lnt">94
</span><span class="lnt">95
</span><span class="lnt">96
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 运行下面代码前，确保依赖已安装</span>
</span></span><span class="line"><span class="cl"><span class="c1"># pip3 install matplotlib --user</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">math</span><span class="o">,</span> <span class="nn">random</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">xkcd</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Location</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">xc</span><span class="p">,</span> <span class="n">yc</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">Location</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">+</span> <span class="nb">float</span><span class="p">(</span><span class="n">xc</span><span class="p">),</span> <span class="bp">self</span><span class="o">.</span><span class="n">y</span> <span class="o">+</span> <span class="nb">float</span><span class="p">(</span><span class="n">yc</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">getCoords</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">y</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">getDist</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">ox</span><span class="p">,</span> <span class="n">oy</span> <span class="o">=</span> <span class="n">other</span><span class="o">.</span><span class="n">getCoords</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">xDist</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">ox</span>
</span></span><span class="line"><span class="cl">        <span class="n">yDist</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">oy</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">xDist</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">yDist</span> <span class="o">**</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">CompassPt</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">possibles</span> <span class="o">=</span> <span class="p">(</span><span class="s1">&#39;N&#39;</span><span class="p">,</span> <span class="s1">&#39;S&#39;</span><span class="p">,</span> <span class="s1">&#39;E&#39;</span><span class="p">,</span> <span class="s1">&#39;W&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">pt</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">pt</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">possibles</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">pt</span> <span class="o">=</span> <span class="n">pt</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s2">&#34;in CompassPt.__init__&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dist</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">pt</span> <span class="o">==</span> <span class="s2">&#34;N&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">dist</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">pt</span> <span class="o">==</span> <span class="s2">&#34;S&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="n">dist</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">pt</span> <span class="o">==</span>  <span class="s2">&#34;E&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="p">(</span><span class="n">dist</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">pt</span> <span class="o">==</span> <span class="s2">&#34;W&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="p">(</span><span class="o">-</span><span class="n">dist</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s2">&#34;in CompassPt.move&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Field</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">drunk</span><span class="p">,</span> <span class="n">loc</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">drunk</span> <span class="o">=</span> <span class="n">drunk</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">loc</span> <span class="o">=</span> <span class="n">loc</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cp</span><span class="p">,</span> <span class="n">dist</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">oldLoc</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">loc</span>
</span></span><span class="line"><span class="cl">        <span class="n">xc</span><span class="p">,</span> <span class="n">yc</span> <span class="o">=</span> <span class="n">cp</span><span class="o">.</span><span class="n">move</span><span class="p">(</span><span class="n">dist</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">loc</span> <span class="o">=</span> <span class="n">oldLoc</span><span class="o">.</span><span class="n">move</span><span class="p">(</span><span class="n">xc</span><span class="p">,</span><span class="n">yc</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">getLoc</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">loc</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">getDrunk</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">drunk</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Drunk</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">field</span><span class="p">,</span> <span class="n">time</span> <span class="o">=</span> <span class="mi">1</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">field</span><span class="o">.</span><span class="n">getDrunk</span><span class="p">()</span> <span class="o">!=</span> <span class="bp">self</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s2">&#34;Drunk.move called with drunk not in field&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">time</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">pt</span> <span class="o">=</span> <span class="n">CompassPt</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">CompassPt</span><span class="o">.</span><span class="n">possibles</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">            <span class="n">field</span><span class="o">.</span><span class="n">move</span><span class="p">(</span><span class="n">pt</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">performTrial</span><span class="p">(</span><span class="n">time</span><span class="p">,</span><span class="n">f</span> <span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">start</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">getLoc</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">distances</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">time</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">f</span><span class="o">.</span><span class="n">getDrunk</span><span class="p">()</span><span class="o">.</span><span class="n">move</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">newLoc</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">getLoc</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">distance</span> <span class="o">=</span> <span class="n">newLoc</span><span class="o">.</span><span class="n">getDist</span><span class="p">(</span><span class="n">start</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">distances</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">distance</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">distances</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">firstTest</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">drunk</span><span class="o">=</span> <span class="n">Drunk</span><span class="p">(</span><span class="s2">&#34;Homser Simpson&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">f</span> <span class="o">=</span> <span class="n">Field</span><span class="p">(</span><span class="n">drunk</span><span class="p">,</span> <span class="n">Location</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">distances</span> <span class="o">=</span> <span class="n">performTrial</span><span class="p">(</span><span class="mi">500</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">distances</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s2">&#34;Homer&#39;s random Walk&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s2">&#34;Time&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s2">&#34;Distance from origin&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">fname</span> <span class="o">=</span> <span class="s2">&#34;images/mit6.00/simulation_random_walk_trail1.png&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">plt</span><span class="o">.</span><span class="n">savefig</span><span class="p">(</span><span class="n">fname</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fname</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">return</span> <span class="n">firstTest</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>模拟5次，生成出来的<a href="https://xkcd.com/">xkcd</a>风格的图表：</p>

<figure><a href="/ox-hugo/simulation_random_walk_trail1.png">
    
    
    <input type="checkbox" id="zoomCheck-e90b4" hidden>
    <label for="zoomCheck-e90b4">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/simulation_random_walk_trail1.png"/> 
    
    
    </label></a>
</figure>

<h3 id="再话org-mode"><span class="section-num">5.1</span> 再话org-mode</h3>
<p>在<a href="https://mp.weixin.qq.com/s/mid3TpmXJMM7xWm5rfl7qg">《我的写作流》</a>里面，我有提到过，我使用Emacs + org-mode 来编写文章，对比markdown 或者其他的标记语言，=org-mode= 有一个巨大的优势，就是=org-mode= 借助内置的<a href="https://orgmode.org/worg/org-contrib/babel/"><code>org-babel</code></a> 组件，可以直接运行代码。</p>
<p>在markdown 里面，下面的代码块的用处仅仅是语法高亮：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl"><span class="s">```python
</span></span></span><span class="line"><span class="cl"><span class="s"></span><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;helloworld&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="s">```</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>但在 <code>org-mode</code>, 下面的代码块是可运行的，我只要在Emacs中按下=C-c C-c=，就会运行代码，并输出=helloword=。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-org" data-lang="org"><span class="line"><span class="cl"><span class="c">#+begin_src </span><span class="cs">python</span><span class="c">
</span></span></span><span class="line"><span class="cl"><span class="c"></span>  <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;helloworld&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c">#+end_src</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>看起来作用不大，但是和 <code>graphviz</code>, <code>plantuml</code>, <code>matplotlib</code> 结合，就会产生无穷的威力：**只要我把绘图源码写好，然后再按下 =C-c C-c=，就能自动生成图片，并自动插入到当前这篇文章中(当然，如果代码写错了，是编译生成不出图片的)**。</p>
<p>根本不需要手动编译，生成图片，然后再把图片以markdown格式手动插入: <code>![图片](链接)</code> 。</p>
<p>上面的概率统计模拟图也是这样生成出来的，写好Python 代码，然后按下 <code>C-c C-c</code></p>
<p>一切都浑然天成。</p>
<h2 id="那些年-我使用过的绘图工具"><span class="section-num">6</span> 那些年，我使用过的绘图工具</h2>
<p>都是曾经使用过，现在也基本弃用的工具：</p>
<ul>
<li>Word：最开始时也不知道什么画图工具，就使用Word 来画图。</li>
<li>PPT：写技术方案基本不用了，画PPT做分享和述职，就还只能继续使用。</li>
<li>drawio: 功能丰富，但图形有种说不出的丑，并且绘制起来不顺手</li>
<li>processon: 在线绘图服务，免费版本有绘画张数限制（不记得是10张还是15张）;对于Saas服务而言，数据不属于用户。公司倒闭或限制用户，就有丢失数据风险。</li>
</ul>
<p>图表与文章一样，都是资产。</p>
<p>对于这样的重要资产，我还是倾向于「本地化」+ 「文本化」+ 「版本管理」+ 「云同步」的方案，保证图表既易于修改，又无丢失风险。</p>
<h2 id="结语"><span class="section-num">7</span> 结语</h2>
<p>金庸笔下的「独孤求败」的用剑之道：「四十岁后，不滞于物，草木竹石均可为剑。自此精修，渐进于无剑胜有剑之境」</p>
<p>excalidraw, graphviz 也好， plantuml, org-mode 也罢，只是「器」，都只是用来表达想法与智慧的工具。</p>
<p>所谓「飞花摘叶皆可伤人，草木竹石均可为剑」，真正的大牛，即使不使用画图工具，寥寥数语就会把一个复杂的概念解释得清楚明了。</p>
<p>厚积而薄发，选择合适的「剑」很重要，但「内功」的修炼同样重要。</p>
<h2 id="参考"><span class="section-num">8</span> 参考</h2>
<ul>
<li><a href="https://graphviz.org/documentation/">Graphviz Documentation</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/21993254">Graphviz 入门指南</a></li>
<li><a href="https://program-think.blogspot.com/2016/02/opensource-review-graphviz.html">【自动】绘图工具 Graphviz</a></li>
</ul>
<div center class="qr-container">
<img src="/ox-hugo/qrcode_gh_e06d750e626f_1.jpg" alt="qrcode_gh_e06d750e626f_1.jpg" width="160px" height="160px" center="t" class="qr-container" />
公号同步更新，欢迎关注👻
</div>
]]></content:encoded>
    </item>
    <item>
      <title>我的写作流</title>
      <link>https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E5%86%99%E4%BD%9C%E6%B5%81/</link>
      <pubDate>Wed, 25 Jan 2023 14:25:00 -0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E5%86%99%E4%BD%9C%E6%B5%81/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; 前言&lt;/h2&gt;
&lt;p&gt;自大学起，已经写过好几年的东西，写作工具和流程也反复折腾过好多回. 目前的写作流程已经很流程顺手，所以想分享一下。&lt;/p&gt;
&lt;h2 id=&#34;写作工具&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; 写作工具&lt;/h2&gt;
&lt;p&gt;我不倾向任何专用格式的写作软件（如Word）, 或者笔记云服务（EverNote，xx笔记等）。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>自大学起，已经写过好几年的东西，写作工具和流程也反复折腾过好多回. 目前的写作流程已经很流程顺手，所以想分享一下。</p>
<h2 id="写作工具"><span class="section-num">2</span> 写作工具</h2>
<p>我不倾向任何专用格式的写作软件（如Word）, 或者笔记云服务（EverNote，xx笔记等）。</p>
<p>因为前者只能使用专门的软件打开，和该软件绑定，会导致文本内容被专用的软件绑架。
可能过个10年，可能该软件不再流行，你甚至无法打开自己的文章。</p>
<p>对于笔记服务，你的文章数据甚至不掌握在你手里，该服务停用，你的数据就会全部丢失。</p>
<p>所以我倾向于「本地化储存」+「文本格式」 + 「易于同步」的写作方案</p>
<p>最后我选择的写作工具是 <code>Emacs</code> + <code>org-mode=，不熟悉 =org-mode</code> 的读者可能不知道 <code>org-mode</code> 是什么，可能理解成类似是 <code>markdown</code> 的标记语言，但是和=Emacs= 结合后，易用性与扩展性比=markdown= 提高了一个数量级。</p>
<p>这篇文章就是使用 <code>Emacs</code> + <code>org-mode</code> 写出来的:</p>

<figure><a href="/ox-hugo/emacs_org_mode.png">
    
    
    <input type="checkbox" id="zoomCheck-2b154" hidden>
    <label for="zoomCheck-2b154">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/emacs_org_mode.png"/> 
    
    
    </label></a>
</figure>

<h3 id="图片"><span class="section-num">2.1</span> 图片</h3>
<p>在<a href="https://ramsayleung.github.io/zh/post/2017/blog/">《写博客的动机》</a>一文我提到，我之前是自建了博客，但是后来又迁移到了ox-hugo + Hugo 的GitHub Page上，其中最大的一个痛点就是插入图片.</p>
<p>插入图片流程一般是分为两步：</p>
<ol>
<li>上传图片到云端存储，一般就是各种图床，如国外的Imgur, Cloudflare, 国内的七牛，又拍云，腾讯云对象存储等等</li>
<li>将上传的图片插入文章，如果使用 Markdown, 就是 <code>![]()</code> 的格式插入</li>
</ol>
<p>最初我是手动上传到 Imgur，再把生成的链接插入到Markdown，每次图片操作下来大概耗费1-2分钟，尤其是Imgur还在国外，网络不好，经常失败。</p>
<p>后来用上了<a href="https://github.com/Molunerfinn/PicGo">PicGo</a> 这个图片上传工具，稍微好些，但是依旧不方便，因为手动拖拉图片上传，图片还不好管理。</p>
<p>后面遇到 <code>ox-hugo</code> 这个插件之后，就完全没有插入文件的困扰了。</p>
<p>得益于Emacs各种强大的文件交互功能，我只需要做：</p>
<ol>
<li>打开本地图片, <code>Ctrl-c l</code> 触发 <code>org-store-link</code> 函数, 将文件名保存起来</li>
<li><code>Ctrl-c Ctrl-l</code> 触发 <code>org-insert-link</code> 函数, 选择刚刚指定的文件, 点击回车即可.</li>
</ol>
<p>我现在管理图片的方式是将每篇文章相关的文章都放到 <code>文章名/img</code> 的目录下, 所以我只需要打开 <code>img</code>, <code>Ctrl-c l</code> 选择图片, 再回到文章 <code>Ctrl-c Ctrl-l</code> 插入即可.</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-57e55" hidden>
    <label for="zoomCheck-57e55">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/ox-hugo-link-image.gif"/> 
    
    
    </label>
</figure>

<p>又得益于Emacs org-mode 无可比拟的export 功能, 我可以通过ox-hugo 将 org-mode 文件导出成 Hugo 兼容的Markdown 文件, 然后再自动将文章中所有的图片复制到 Hugo 博客下的 <code>static/ox-hugo</code> 目录下.</p>
<p>假如我本地路径为 <code>/home/ramsay/blog/2023/我的写作流/img/emacs_org_mode.png</code> 的图片，在按下 <code>Ctrl-c Ctrl-e H h</code> 之后，导出到 Hugo Markdown 之后，图片路径就会变成:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">{{\&lt; figure src=&#34;https://ramsayleung.github.io/ox-hugo/emacs_org_mode.png&#34; link=&#34;/ox-hugo/emacs_org_mode.png&#34; &gt;}}
</span></span></code></pre></td></tr></table>
</div>
</div><p>只需要将复制到 <code>ox-hugo</code> 目录的图片和文章的Markdown 文件一起提交到Git, 并上传到GitHub 就相当于把GitHub 当作图床，但是其他操作都由ox-hugo 和 GitHub 代劳了.</p>
<h2 id="写作平台"><span class="section-num">3</span> 写作平台</h2>
<h3 id="博客"><span class="section-num">3.1</span> 博客</h3>
<p>在大学时期，我使用的是 <a href="https://github.com/emacsorphanage/org-page"><code>org-page</code></a> + <code>org-mode</code> 来自建博客在 <a href="https://pages.github.com/"><code>Github Pages</code></a>, 写了大概一年的博客文章。</p>
<p>后来因为 <code>org-page</code> 总是存在各种奇怪的小bug，博客样式也只有那么几种，不能满足折腾欲望很强烈的我
（这种行为和年少时喜欢在QQ空间换皮肤差不多）。</p>
<p>大概是2018年，我当时学习了Rust，打算找个机会来练手，然后就使用Rust搭建了个人的博客，开源在<a href="https://github.com/ramsayleung/blog">Github</a>上，还有100+的star，就这样，在自己的博客上又写了几年文章。</p>
<p>直到2022年，因为工作太忙碌，没有太多时间来维护博客的代码以及运维博客的服务。
自建博客的初衷只是为了有个地方可以承载我写的内容，只是因为年轻，有精力折腾，就自己写代码，搭建服务。</p>
<p>但总体而言，写作的流程并不顺手: 因为我一直都是使用=org-mode= 来写作，而我自己的博客只支持 <code>Markdown</code> 格式，这就意味着我必须每次写作完成后，需要将=org-mode= 转换成 <code>markdown</code> , 然后再在博客后台发布。</p>
<p>如果涉及到图片就更麻烦，需要将图片逐张上传到图床，然后再插入到 <code>org-mode=中, 而博客使用的=markdown</code> 编辑器过了5年后，开发者已经不维护了，所以免不了又会有各种小问题。</p>
<p>我又尝试了 <code>Emacs</code> + <code>org-mode</code> + <code>hugo</code> 的博客方案，发现使用起来非常舒心，发布文章几乎无成本。正好碰上博客服务器到期，就干脆切换回=Github Pages=.</p>
<p><code>hugo</code> 是使用 <code>markdown</code> 来构建网站的框架，而我使用的 <code>org-mode=，所以还需要一个工具将 =org-mode</code> 转换为 <code>Hugo markdown=，这个就是 =Emacs</code> 插件 <a href="https://ox-hugo.scripter.co/"><code>ox-hugo</code></a>。当然， <code>hugo</code> 原生也支持 <code>org-mode</code>, 只是功能支持不完整， 远不及 <code>ox-hugo</code>.</p>
<p><code>ox-hugo</code> 只需要将在 <code>org-mode</code> 内容的最开始插入标记：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-org" data-lang="org"><span class="line"><span class="cl"><span class="cs">#+HUGO_BASE_DIR</span><span class="c">: ~/code/org/ramsayleung.github.io</span>
</span></span><span class="line"><span class="cl"><span class="cs">#+HUGO_SECTION</span><span class="c">: zh/post/2023</span>
</span></span><span class="line"><span class="cl"><span class="cs">#+HUGO_CUSTOM_FRONT_MATTER</span><span class="c">: :toc true</span>
</span></span><span class="line"><span class="cl"><span class="cs">#+HUGO_AUTO_SET_LASTMOD</span><span class="c">: t</span>
</span></span><span class="line"><span class="cl"><span class="cs">#+HUGO_DRAFT</span><span class="c">: false</span>
</span></span><span class="line"><span class="cl"><span class="cs">#+DATE</span><span class="c">: [2023-01-25 Wed 14:25]</span>
</span></span><span class="line"><span class="cl"><span class="cs">#+TITLE</span><span class="c">: 我的写作流</span>
</span></span><span class="line"><span class="cl"><span class="cs">#+HUGO_TAGS</span><span class="c">: writing</span>
</span></span><span class="line"><span class="cl"><span class="cs">#+HUGO_CATEGORIES</span><span class="c">: writing</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Emacs一个快捷键 <code>C-c C-e H h</code> 就可以将 <code>org-mode</code> 转换成 <code>Hugo</code> 格式的 <code>Markdown</code>:</p>

<figure><a href="/ox-hugo/one-post-per-subtree.png">
    
    
    <input type="checkbox" id="zoomCheck-acce8" hidden>
    <label for="zoomCheck-acce8">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/one-post-per-subtree.png"/> 
    
    
    </label></a>
</figure>

<p>结合<a href="https://github.com/ramsayleung/ramsayleung.github.io/blob/master/.github/workflows/gh-pages.yml">Github Action</a>，就可以自动把导出的markdown 博文部署到Github Pages，称得上是一键部署。</p>
<h3 id="公众号"><span class="section-num">3.2</span> 公众号</h3>
<p>在过新年的时候，闲来无事，新开了一个公众号「宫孙说」，用来「一鱼多吃」，将自己文章也转到公众号。</p>
<p>因为Richard Stallman的影响，我一直是倾向于开放，自由的软件与生态，所以对于公众号这样仅限于「微信」封闭生态的平台不感冒。</p>
<p>另外，关于「公众号」的看法，我是与陈皓一致的，详见他的文章<a href="https://coolshell.cn/articles/17391.html">《为什么我不在微信公众号上写文章》</a></p>
<p>但不可否认的是，「公众号」是国内最完善的创作平台，有完整的分享，阅读生态。</p>
<p>毕竟我不只写技术文章，还会写一些历史，人文类的文章，我希望可以分享给朋友，但Github Pages会间歇性被墙，朋友们大多是在微信阅读文章，虽然博客支持移动端，但是体验终究不及「公众号」。</p>
<p>屈服于现实压力，我最终开了这个公众号。</p>
<h3 id="知乎"><span class="section-num">3.3</span> 知乎</h3>
<p>知乎也是国内创作氛围相对自由和蓬勃的平台，本着「一鱼多吃」的心态，我也会把文章转载到知乎上。</p>
<h3 id="km"><span class="section-num">3.4</span> KM</h3>
<p>这是公司内部的知识交流创作平台，算是私域流量。有点难以置信的是，在这个读者数量远不如外部的平台，我写的文章有最多的阅读与收藏.
或许是因为我写的内容贴近业务，是同事比较感兴趣的。</p>
<h3 id="格式兼容多个平台"><span class="section-num">3.5</span> 格式兼容多个平台</h3>
<p>将同一篇文章分发到多个平台，就难免会有不同平台格式不通的问题。</p>
<p>因为Markdown 是通用文档，所以我倾向于把我的文章发布在其他的平台，如上文提到的知乎，公众号。</p>
<p>但是这些平台都是使用专有的编辑器，并不支持直接解析Markdown，所以我会把文章复制到 <a href="https://markdown.com.cn/editor/">https://markdown.com.cn/editor/</a> 的在线编辑，它提供了一键复制格式到公众号，知乎, 掘金的功能.</p>
<p>新的问题又来了, 我使用 <code>ox-hugo</code> 导出的是Hugo Markdown，又不是标准的Markdown， markdown.com.cn的编辑器无法解析部分标签, 如:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">+++
</span></span><span class="line"><span class="cl">title = &#34;我的写作流&#34;
</span></span><span class="line"><span class="cl">date = 2023-01-25T14:25:00-08:00
</span></span><span class="line"><span class="cl">lastmod = 2025-01-09T17:40:36-08:00
</span></span><span class="line"><span class="cl">tags = [&#34;writing&#34;]
</span></span><span class="line"><span class="cl">categories = [&#34;工作流&#34;]
</span></span><span class="line"><span class="cl">draft = false
</span></span><span class="line"><span class="cl">toc = true
</span></span><span class="line"><span class="cl">+++
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># ## &lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; 前言 {#前言} =&gt; ## &lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; 前言
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">{{\&lt; figure src=&#34;https://ramsayleung.github.io/ox-hugo/emacs_org_mode.png&#34; link=&#34;/ox-hugo/emacs_org_mode.png&#34; &gt;}}
</span></span></code></pre></td></tr></table>
</div>
</div><p>既然编辑器不支持Hugo语法，那么把Hugo特有的语法去掉就行了嘛，所以我写了一个 shell script 用来把Hugo Markdown 转换回标准 Markdown:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">remove_heading_tag <span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ## &lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; 前言 {#前言} =&gt; ## &lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; 前言</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 删除 {#前言}</span>
</span></span><span class="line"><span class="cl">    sed <span class="s1">&#39;s/{#.*}//&#39;</span> <span class="nv">$1</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">remove_meta_info <span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 删除下列信息</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># +++</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># title = &#34;为什么梦想买不起，故乡回不去&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># date = 2023-01-14T23:21:00+08:00</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># lastmod = 2023-01-25T09:00:47+08:00</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># tags = [&#34;book&#34;, &#34;history&#34;, &#34;economy&#34;]</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># categories = [&#34;book&#34;]</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># draft = false</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># toc = true</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># +++</span>
</span></span><span class="line"><span class="cl">    sed <span class="s1">&#39;/+++/,/+++/d&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>又因为Emacs 本身就是个Lisp解析器, 我在运行时修改了一下导出成 Hugo Markdown 的函数, 在导出完之后，再调用上面的shell 脚本, 根据Hugo Markdown 再生成一份标准的Markdown.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">defun</span> <span class="nv">ramsay/org-hugo-export-to-std-md</span> <span class="p">(</span><span class="nv">orig-fun</span> <span class="kp">&amp;rest</span> <span class="nv">args</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Generate standard markdown file base on the exported hugo markdown.&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">let</span> <span class="p">((</span><span class="nv">res</span> <span class="p">(</span><span class="nf">apply</span> <span class="nv">orig-fun</span> <span class="nv">args</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="nf">message</span> <span class="s">&#34;Generate the standard markdown from %S&#34;</span> <span class="nv">res</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="nv">ramsay/hugo2md-base</span> <span class="s">&#34;~/code/shell/hugomd2md-gitea.sh&#34;</span> <span class="nv">res</span> <span class="s">&#34;gitea&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nv">res</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nv">advice-add</span> <span class="ss">&#39;org-hugo-export-to-md</span> <span class="nb">:around</span> <span class="nf">#&#39;</span><span class="nv">ramsay/org-hugo-export-to-std-md</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>回到图片的问题上, 虽然GitHub 可以作为图床，但是因为墙不间断阻断 GitHub, 导致国内访问 GitHub 并不稳定，图片可能无法下载下来.</p>
<p>既然 GitHub 无法稳定访问, 那么就挑个能在国内稳定访问的 Git 服务呗。</p>
<p>一番调研之后，最后选定了 <a href="https://about.gitea.com/">Gitea</a>。</p>
<p>需要做的事情也很简单，只需要在 Gitea 上新建一个仓库，然后再给我的博客增加一个远程仓库即可:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">&gt; git remote -v
</span></span><span class="line"><span class="cl">gitea   git@gitea.com:myusername/store.git <span class="o">(</span>fetch<span class="o">)</span>
</span></span><span class="line"><span class="cl">gitea   git@gitea.com:myusername/store.git <span class="o">(</span>push<span class="o">)</span>
</span></span><span class="line"><span class="cl">origin  git@github.com:ramsayleung/ramsayleung.github.io.git <span class="o">(</span>fetch<span class="o">)</span>
</span></span><span class="line"><span class="cl">origin  git@github.com:ramsayleung/ramsayleung.github.io.git <span class="o">(</span>push<span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>最后需要做的就是再更新一下Shell 脚本，在把Hugo Markdown转换成标准Markdown的时候，再把图片链接修改为GitTea 链接:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">replace_link <span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># hugo的图片链接，转换成markdown 标准链接</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># {{\&lt; figure src=&#34;https://ramsayleung.github.io/ox-hugo/土地金融-政府债务.png&#34; link=&#34;/ox-hugo/土地金融-政府债务.png&#34; &gt;}}</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># =&gt; ![](https://gitea.com/myusername/store/raw/branch/master/static/ox-hugo/土地金融-政府债务.png)</span>
</span></span><span class="line"><span class="cl">    sed <span class="s1">&#39;s/{{\&lt; figure src=&#34;\(.*\)&#34; link=.*&gt;}}/!\[\](https:\/\/gitea.com\/myusername\/store\/raw\/branch\/master\/static\1)/&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>最后的效果就是，在我把 Org-mode 文件导出成 Hugo Markdown 后，会自己再生成一份替换了图片链接地址的标准Markdown.</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-f6243" hidden>
    <label for="zoomCheck-f6243">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/ox-hugo-export.gif"/> 
    
    
    </label>
</figure>

<p>因为我太懒了，所以我再写了个小函数，导出完成之后，自动复制标准 Markdown 的内容到 clipboard, 这样就可以直接粘贴到 markdown.com.cn了（算下来，我每次操作都省了10来秒）</p>
<h2 id="写在最后"><span class="section-num">4</span> 写在最后</h2>
<p>完整的写作流如图:
<a href="/ox-hugo/%E5%86%99%E4%BD%9C%E6%B5%81%E7%A8%8B.png"><img loading="lazy" src="/ox-hugo/%E5%86%99%E4%BD%9C%E6%B5%81%E7%A8%8B.png"></a></p>
<p>因为使用 <code>Emacs</code> + <code>org-mode</code> 写文章非常顺手，所以我写下了很多的文稿，只是思绪杂乱，不方便都发布出来.</p>
<p>现在正逐步将存稿往公众号平台上迁移，只是公众号有诸多限制，其中一条是一天只能群发一篇文章，只能「小刀锯大树」，慢慢来了。</p>
<div center class="qr-container">
<img src="/ox-hugo/qrcode_gh_e06d750e626f_1.jpg" alt="qrcode_gh_e06d750e626f_1.jpg" width="160px" height="160px" center="t" class="qr-container" />
公号同步更新，欢迎关注👻
</div>
]]></content:encoded>
    </item>
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ReInvent: 重新造轮子系列 on 过河卒</title>
    <link>https://ramsayleung.github.io/zh/categories/reinvent-%E9%87%8D%E6%96%B0%E9%80%A0%E8%BD%AE%E5%AD%90%E7%B3%BB%E5%88%97/</link>
    <description>Recent content in ReInvent: 重新造轮子系列 on 过河卒</description>
    <image>
      <title>过河卒</title>
      <url>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.120.4</generator>
    <language>zh</language>
    <copyright>See this site&amp;rsquo;s source code here, licensed under GPLv3 ·</copyright>
    <lastBuildDate>Fri, 04 Apr 2025 00:16:01 -0700</lastBuildDate>
    <atom:link href="https://ramsayleung.github.io/zh/categories/reinvent-%E9%87%8D%E6%96%B0%E9%80%A0%E8%BD%AE%E5%AD%90%E7%B3%BB%E5%88%97/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>重新造轮子系列(四)：正则表达式引擎</title>
      <link>https://ramsayleung.github.io/zh/post/2025/reinvent_regex/</link>
      <pubDate>Sat, 15 Mar 2025 11:01:00 -0700</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2025/reinvent_regex/</guid>
      <description>项目 GitHub 地址: Regex 1 前言 所谓的正则表达式，指的是由一系列字符和特殊字符组成的模式，用于描述要匹配的文本。 最开始是一位叫 Stephen Cole Kleene 的数学家用被他称为 Regular</description>
      <content:encoded><![CDATA[<p>项目 GitHub 地址: <a href="https://github.com/ramsayleung/reinvent/tree/master/regular_expression">Regex</a></p>
<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>所谓的正则表达式，指的是由一系列字符和特殊字符组成的模式，用于描述要匹配的文本。</p>
<p>最开始是一位叫 <a href="https://en.wikipedia.org/wiki/Stephen_Cole_Kleene">Stephen Cole Kleene</a> 的数学家用被他称为 Regular Events 的数学表达式来描述这一模型，在 1968 年，由C语言之父 Ken Tompson 将这个表达式引入到行编辑器 <a href="https://en.wikipedia.org/wiki/QED_(text_editor)">QED</a>, 随后是 Unix 上的编辑器 <a href="https://en.wikipedia.org/wiki/Ed_(software)">ed</a> (vi 的前身) ，并最终引入到 <a href="https://en.wikipedia.org/wiki/Grep">grep</a>.</p>
<p>我一直很好奇正则表达式 (regular expression, 即 <code>Regex</code> ) 是怎么实现的，自正则表达式被引入编程语言之后 之后，可谓说有字符串的地方就基本有正则表达式。</p>
<p>想起个关于 <code>Regex</code> 的经典笑话:</p>
<blockquote>
<p>程序员A：我有个问题，想用正则表达式解决。</p>
<p>程序员B：现在你有两个问题了。</p>
</blockquote>
<h2 id="需求"><span class="section-num">2</span> 需求</h2>
<p>完整版本的正则表达式非常复杂，我们的实现不会覆盖所有的规则，所以先来看下我们要支持的正则表达式规则：</p>
<table>
<thead>
<tr>
<th>含义</th>
<th>字符</th>
</tr>
</thead>
<tbody>
<tr>
<td>任意的字符 <code>c</code></td>
<td><code>c</code></td>
</tr>
<tr>
<td>任意的单个字符</td>
<td><code>.</code></td>
</tr>
<tr>
<td>匹配开头的字符</td>
<td><code>^</code></td>
</tr>
<tr>
<td>匹配结尾的字符</td>
<td><code>$</code></td>
</tr>
<tr>
<td>匹配零个或多个的字符</td>
<td><code>*</code></td>
</tr>
</tbody>
</table>
<p>虽然这五条原则看起来不是很多，但是已经覆盖日常开发绝大多数的场景了。</p>
<p>比如 <code>^ab*c</code> 就意味着匹配以 <code>a</code> 开头，并且0到无数个的 <code>b</code>, 再接一个字符 <code>c</code>, 所以它能匹配:
<code>ac</code>, <code>abc</code> 以及 <code>abbbbbc</code></p>
<h2 id="初始版本"><span class="section-num">3</span> 初始版本</h2>
<p>根据上面的需求，可以使用40行不到的代码就实现一个简单的递归版本的正则表达式引擎：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">match</span> <span class="o">=</span> <span class="p">(</span><span class="nx">pattern</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">text</span><span class="o">:</span> <span class="nx">string</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// &#39;^&#39; at start of pattern matches start of next.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span><span class="nx">pattern</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;^&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">matchHere</span><span class="p">(</span><span class="nx">pattern</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">text</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Try all possible starting points for pattern.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kd">let</span> <span class="nx">iText</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">do</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">matchHere</span><span class="p">(</span><span class="nx">pattern</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">text</span><span class="p">,</span> <span class="nx">iText</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">iText</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="nx">iText</span> <span class="o">&lt;</span> <span class="nx">text</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Nothing worked.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">matchHere</span> <span class="o">=</span> <span class="p">(</span><span class="nx">pattern</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">patternIndex</span><span class="o">:</span> <span class="nx">number</span><span class="p">,</span> <span class="nx">text</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">textIndex</span><span class="o">:</span> <span class="nx">number</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// There is no more pattern to match.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span><span class="nx">patternIndex</span> <span class="o">===</span> <span class="nx">pattern</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// &#39;$&#39; at end of pattern matches end of text.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span> <span class="p">((</span><span class="nx">patternIndex</span> <span class="o">===</span> <span class="p">(</span><span class="nx">pattern</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">pattern</span><span class="p">[</span><span class="nx">patternIndex</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;$&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">textIndex</span> <span class="o">===</span> <span class="nx">text</span><span class="p">.</span><span class="nx">length</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// &#39;*&#39; following current character means zero or more.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span> <span class="p">(((</span><span class="nx">pattern</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">patternIndex</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">pattern</span><span class="p">[</span><span class="nx">patternIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;*&#39;</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Try matching zero occurences(skip the current char and the &#39;*&#39;)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="nx">matchHere</span><span class="p">(</span><span class="nx">pattern</span><span class="p">,</span> <span class="nx">patternIndex</span> <span class="o">+</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">text</span><span class="p">,</span> <span class="nx">textIndex</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Try matching one or more occurences
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="p">((</span><span class="nx">textIndex</span> <span class="o">&lt;</span> <span class="nx">text</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">pattern</span><span class="p">[</span><span class="nx">patternIndex</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;.&#39;</span> <span class="o">||</span> <span class="nx">text</span><span class="p">[</span><span class="nx">textIndex</span><span class="p">]</span> <span class="o">===</span> <span class="nx">pattern</span><span class="p">[</span><span class="nx">patternIndex</span><span class="p">]))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// Try to match the rest of pattern after consuming this
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">// character
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">if</span> <span class="p">(</span><span class="nx">matchHere</span><span class="p">(</span><span class="nx">pattern</span><span class="p">,</span> <span class="nx">patternIndex</span> <span class="o">+</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">text</span><span class="p">,</span> <span class="nx">textIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="nx">textIndex</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// if there is any match, it will return early in the while loop,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// so when reach this statement, it means nothing found.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Match a single chacater.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span><span class="nx">textIndex</span> <span class="o">&lt;</span> <span class="nx">text</span><span class="p">.</span><span class="nx">length</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">pattern</span><span class="p">[</span><span class="nx">patternIndex</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;.&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="nx">pattern</span><span class="p">[</span><span class="nx">patternIndex</span><span class="p">]</span> <span class="o">===</span> <span class="nx">text</span><span class="p">[</span><span class="nx">textIndex</span><span class="p">]))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">matchHere</span><span class="p">(</span><span class="nx">pattern</span><span class="p">,</span> <span class="nx">patternIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">text</span><span class="p">,</span> <span class="nx">textIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Nothing worked.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>实现思路如下图:</p>
<figure>
    <img loading="lazy" src="/ox-hugo/reinvent_simple_regex_design.png"/> 
</figure>

<p>好的，我们的正则表达式引擎完工了，正则表达式看起来也没有那么难嘛。</p>
<p>只是用是能用的，但是看起来不同含义的字符都耦合在 <code>matchHere</code> 函数了，想要支持新的字符匹配(例如 <code>+</code>, 或者 <code>|</code> )很难扩展。</p>
<h2 id="面向对象版本"><span class="section-num">4</span> 面向对象版本</h2>
<h3 id="接口"><span class="section-num">4.1</span> 接口</h3>
<p>再来思考一下版本1的问题:</p>
<p>我们把不同模式的符号都耦合在同一个函数中。</p>
<p>在讨论解耦方式之前，先来观察下每个模式的共同点，以便我们抽象接口。</p>
<p>以最简单的 <code>^c</code> 模式为例，我们需要将 <code>c</code> 与给定的文本 <code>abc</code> 和 <code>cde</code> 作比较，首先匹配第一个字符，如果匹配失败(如 <code>abc</code>)，则直接结束； 如果匹配第一个字符成功（=cde=）, 那么就匹配剩余的其他字符, 直到模式匹配结束.</p>
<p>那么对于精确匹配字符的模式 <code>Literal</code> 而言，入参就是字符 <code>c</code> 和文本 <code>text</code>, 返回结果就是true/false, 用来表示是否匹配成功.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">literal_match</span> <span class="o">=</span> <span class="p">(</span><span class="nx">pattern</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">text</span><span class="o">:</span> <span class="nx">string</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span> <span class="p">=&gt;</span> <span class="p">{}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果不同的模式匹配都使用这个函数签名的话，每次匹配之后，都需要把剩下需要匹配的文本给复制出来，频繁拷贝字符串可能会导致性能开销很大。</p>
<p>我们可以做个小优化, 通过下标 <code>start</code> 来指定需要匹配的文本, 就可以在不同的模式中都只使用同一份的字符串，避免了多次拷贝的开销。</p>
<p>而返回结果也不再是 boolean, 而是下一个模式需要匹配的下标。</p>
<p>比如 <code>^c</code> 来匹配 <code>cde</code> ，匹配成功之后就返回 <code>1</code>, 就意味着下个模式从 <code>1</code>, 也就是 <code>d</code> 开始匹配.</p>
<p>那匹配失败要怎么表示？这个也很简单，返回一个不合法的下标，比如 <code>-1</code> 即可，那么我们的模式的函数接口就变成:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">literal_match</span> <span class="o">=</span> <span class="p">(</span><span class="nx">pattern</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">text</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">index</span><span class="o">:</span> <span class="nx">number</span><span class="p">)</span><span class="o">:</span> <span class="nx">number</span> <span class="p">=&gt;</span> <span class="p">{}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="模板设计模式"><span class="section-num">4.2</span> 模板设计模式</h3>
<p>既然版本一提到了 <code>matchHere</code> 实现耦合在一起，那么有什么方式可以实现解耦呢？</p>
<p>其中的一个经典解决方式就是面向对象编程(Object Oriented Programming)，这也是面向对象编程的设计初衷。</p>
<p>既然前面实现的缺点是不同的模式耦合在一起，那么我们可以把每种模式实现成一个函数或者一个类，然后再通过某种模式给组合起来。</p>
<p>既然用到 OOP, 那么自然少不了设计模式了。如果使用一种模式表示成一个类，那么会是哪种设计模式呢？</p>
<p>要不就是<a href="https://refactoring.guru/design-patterns/strategy">策略模式(strategy)</a>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">ConcreteAlgorithm</span> <span class="o">:</span> <span class="n">IAlgorithm</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">DoAlgorithm</span><span class="p">(</span><span class="kt">int</span> <span class="n">datum</span><span class="p">)</span> <span class="p">{...}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Strategy</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Strategy</span><span class="p">(</span><span class="n">IAlgorithm</span> <span class="n">algo</span><span class="p">)</span> <span class="p">{...}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">run</span><span class="p">(</span><span class="kt">int</span> <span class="n">datum</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">algo</span><span class="p">.</span><span class="n">DoAlgorithm</span><span class="p">(</span><span class="n">datum</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>要么就是<a href="https://refactoring.guru/design-patterns/template-method">模板方法(template method)</a>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">ConcreteAlgorithm</span> <span class="o">:</span> <span class="n">AbstractTemplate</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">DoAlgorithm</span><span class="p">(</span><span class="kt">int</span> <span class="n">datum</span><span class="p">)</span> <span class="p">{...}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">AbstractTemplate</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">run</span><span class="p">(</span><span class="kt">int</span> <span class="n">datum</span><span class="p">)</span> <span class="p">{</span> <span class="n">DoAlgorithm</span><span class="p">(</span><span class="n">datum</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">virtual</span> <span class="kt">void</span> <span class="nf">DoAlgorithm</span><span class="p">()</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// abstract
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>看起来好像都可以，那不如就使用模板方式吧。</p>
<h3 id="单向链表"><span class="section-num">4.3</span> 单向链表</h3>
<p>那么就让我们来定义个基类 <code>RegexBase</code> :</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">INVALID_INDEX</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">abstract</span> <span class="kr">class</span> <span class="nx">RegexBase</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// index to continue matching at or -1 indicating that matching failed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kr">abstract</span> <span class="nx">_match</span><span class="p">(</span><span class="nx">text</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">start</span><span class="o">:</span> <span class="nx">number</span><span class="p">)</span><span class="o">:</span> <span class="nx">number</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kr">abstract</span> <span class="nx">rest</span><span class="o">:</span> <span class="nx">RegexBase</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">match</span><span class="p">(</span><span class="nx">text</span><span class="o">:</span> <span class="nx">string</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// check if the pattern matches at the start of the string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_match</span><span class="p">(</span><span class="nx">text</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">!==</span> <span class="nx">INVALID_INDEX</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">text</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_match</span><span class="p">(</span><span class="nx">text</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="o">!==</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>细看之下, 函数签名与我们上文讨论的有所不同，那是因为我们把模式 <code>pattern</code> 作为每个模式类的成员变量了，就不需要显式定义在 <code>_match</code> 函数中了。</p>
<p>再来看下我们精确匹配字符的 <code>Lit</code> 模式类的实现:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">RegexLit</span> <span class="kr">extends</span> <span class="nx">RegexBase</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">private</span> <span class="nx">chars</span><span class="o">:</span> <span class="nx">string</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">rest</span><span class="o">:</span> <span class="nx">RegexBase</span>
</span></span><span class="line"><span class="cl">  <span class="nx">constructor</span><span class="p">(</span><span class="nx">chars</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">rest</span><span class="o">:</span> <span class="nx">RegexBase</span> <span class="o">|</span> <span class="kc">null</span> <span class="o">=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">super</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">chars</span> <span class="o">=</span> <span class="nx">chars</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">rest</span> <span class="o">=</span> <span class="nx">rest</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">_match</span><span class="p">(</span><span class="nx">text</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">start</span><span class="o">:</span> <span class="nx">number</span><span class="p">)</span><span class="o">:</span> <span class="nx">number</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">nextIndex</span> <span class="o">=</span> <span class="nx">start</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">chars</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">nextIndex</span> <span class="o">&gt;</span> <span class="nx">text</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="nx">INVALID_INDEX</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">text</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">start</span><span class="p">,</span> <span class="nx">nextIndex</span><span class="p">)</span> <span class="o">!==</span> <span class="k">this</span><span class="p">.</span><span class="nx">chars</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="nx">INVALID_INDEX</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">rest</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="nx">nextIndex</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">rest</span><span class="p">.</span><span class="nx">_match</span><span class="p">(</span><span class="nx">text</span><span class="p">,</span> <span class="nx">nextIndex</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>实现很简单, 但 <code>rest</code> 又是什么呢?</p>
<p>还是以 <code>^c</code> 为例, 现在改复杂一点, 模式变成 <code>^cd</code> 来匹配 <code>cde</code> ，模式 <code>^c</code> 匹配完 <code>c</code> 之后, 就要使用剩下的模式(<code>rest</code>) <code>d</code> 来匹配剩下的文本 <code>de</code>, 剩下的模式可能也会再包含剩下的模式，用来匹配再被剩下的文本，依此类推.</p>
<figure>
    <img loading="lazy" src="/ox-hugo/reinvent_regex_rest_pointer.jpg"/> 
</figure>

<p>相当于 <code>rest</code> 就是指向下一个模式类的单向指针，用来表示下一个模式需要匹配剩余的文本，直到所有的模式匹配完成，即 <code>rest</code> 指针指向 <code>null</code></p>
<p>所以模式 <code>cde</code> 就可以表示成 <code>Lit('c', Lit('d', Lit('e')))</code></p>
<p>而所有的模式组合在一起，本质就是一条单向链条，而正则表达式就是判断是否存在依次匹配链表中所有模式的文本。</p>
<h3 id="any-模式"><span class="section-num">4.4</span> Any 模式</h3>
<p>Any 模式即 <code>*</code> 匹配 0到任意个前一个字符，与其类似的还有 Plus 模式，即 <code>+</code> 匹配1到任意个前一个字符字符；以及 <code>?</code> 表示匹配0到1个前一个字符，Any算是最有代表性和最难实现的模式。</p>
<p>即 <code>a*b</code> 表示可以匹配0到任意个 <code>a</code> ，再匹配一个 <code>b</code> , 所以 <code>b</code>, <code>ab</code>, <code>aaaaaab</code> 它都可以匹配上。</p>
<p>那么问题就来了，既然它可以匹配0到任意个字符，那么匹配的时候我要匹配几个字符呢？</p>
<p>理论上有 <code>N</code> 个的可能性, N = 待匹配文本 <code>text</code> 的长度。</p>
<p>既然不知道要匹配几个字符，那不如我们把所有可能性都穷举一次呗，而这种穷举算法，则被称为是<a href="https://labuladong.online/algo/essential-technique/backtrack-framework/#%E5%85%A8%E6%8E%92%E5%88%97%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90">回溯算法</a>(<a href="https://en.wikipedia.org/wiki/Backtracking">backtracking</a>)</p>
<p>我们知道穷举的上界是 N(<code>N=len(text)</code>), 下界是 0, 那么是从 0 穷举到 <code>N</code>, 还是从 <code>N</code> 穷举到 <code>0</code> 呢？</p>
<p>两种方法都可以解决问题，计算机科学家们还给这两种做法起了个洋气的名字， <code>N</code> -&gt; <code>0</code>, 因为是先开始匹配所有的字符，所以就被称为贪婪匹配 greedy(eager) matching.</p>
<p>而从 <code>0</code> -&gt; <code>N</code>, 因为是从0开始，所以又被称为是惰性匹配 lazy matching。</p>
<p>从性能的角度来说，是 <code>lazy matching</code> 更优，因为它尽可能地去掉了不必要的匹配了。</p>
<p>我们可以先来看下贪婪匹配的实现，再看下惰性匹配：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">RegexAny</span> <span class="kr">extends</span> <span class="nx">RegexBase</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">private</span> <span class="nx">child</span><span class="o">:</span> <span class="nx">RegexBase</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kr">private</span> <span class="nx">rest</span><span class="o">:</span> <span class="nx">RegexBase</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">constructor</span><span class="p">(</span><span class="nx">child</span><span class="o">:</span> <span class="nx">RegexBase</span><span class="p">,</span> <span class="nx">rest</span><span class="o">:</span> <span class="nx">RegexBase</span> <span class="o">|</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">super</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">child</span> <span class="o">=</span> <span class="nx">child</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">rest</span> <span class="o">=</span> <span class="nx">rest</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">_match</span><span class="p">(</span><span class="nx">text</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">start</span><span class="o">:</span> <span class="nx">number</span><span class="p">)</span><span class="o">:</span> <span class="nx">number</span> <span class="o">|</span> <span class="kc">null</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">maxPossible</span> <span class="o">=</span> <span class="nx">text</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">start</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">num</span> <span class="o">=</span> <span class="nx">maxPossible</span><span class="p">;</span> <span class="nx">num</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">num</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="kr">const</span> <span class="nx">afterMany</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_matchMany</span><span class="p">(</span><span class="nx">text</span><span class="p">,</span> <span class="nx">start</span><span class="p">,</span> <span class="nx">num</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="nx">afterMany</span> <span class="o">!==</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">afterMany</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">undefined</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">_matchMany</span><span class="p">(</span><span class="nx">text</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">start</span><span class="o">:</span> <span class="nx">number</span><span class="p">,</span> <span class="nx">num</span><span class="o">:</span> <span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">num</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">start</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">child</span><span class="p">.</span><span class="nx">_match</span><span class="p">(</span><span class="nx">text</span><span class="p">,</span> <span class="nx">start</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="nx">start</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">undefined</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">rest</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">rest</span><span class="p">.</span><span class="nx">_match</span><span class="p">(</span><span class="nx">text</span><span class="p">,</span> <span class="nx">start</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">start</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>a*b</code> 会被解析成, <code>Any(Lit('a'), Lit('b'))</code>, 因为 <code>*</code> 表示匹配0到任意个前一个字符，前一个字符还可能另外一种模式，所以我们可以把前一个字符也解析成模式，作为 <code>child</code> 传入到 <code>Any</code>.</p>
<p><code>_matchMany</code> 是从 <code>start</code> 匹配到 <code>start+num</code> 位置，看是否匹配，而 <code>maxPossible</code> 表示当前剩余文本中可能的最大匹配次数.</p>
<p>以 <code>text = &quot;aab&quot;</code>, <code>start = 0</code>, <code>pattern = a*b</code> 为例， <code>maxPossible = len(text) = 3</code>,</p>
<ol>
<li>
<p>第一轮尝试(<code>num=3</code>):</p>
<ul>
<li>尝试匹配 3 个 <code>a</code> -&gt; 失败(只有 2 个 <code>a</code>)</li>
</ul>
</li>
<li>
<p>第二轮尝试(<code>num=2</code>):</p>
<ul>
<li>匹配 2 个 =a=(位置 <code>0-&gt;1-&gt;2</code>)</li>
<li>然后匹配 rest(b 在位置 <code>2-&gt;3</code>): 成功！</li>
<li>返回 3</li>
</ul>
<figure>
        <img loading="lazy" src="/ox-hugo/reinvent_regex_match_aab.png"/> 
    </figure>

</li>
</ol>
<p>以及使用模式 <code>a*ab</code> 来匹配文本 <code>ab</code> 的过程:
<img loading="lazy" src="/ox-hugo/reinvent_regex_match_ab.jpg" alt=""  />
</p>
<h3 id="支持的模式"><span class="section-num">4.5</span> 支持的模式</h3>
<p>每种模式对应一个单独的类之后，再通过 <code>rest</code> 指针进行关联，现在的实现就非常易于扩展了，我们可以很容易地支持其他的模式，具体列表如下：</p>
<table>
<thead>
<tr>
<th>含义</th>
<th>字符</th>
<th>例子</th>
<th>对应实现</th>
</tr>
</thead>
<tbody>
<tr>
<td>任意的字符 <code>c</code></td>
<td><code>c</code></td>
<td><code>c</code> 匹配字符c</td>
<td><a href="https://github.com/ramsayleung/reinvent/blob/master/regular_expression/regex-lit.ts">Lit</a></td>
</tr>
<tr>
<td>任意的单个字符</td>
<td><code>.</code></td>
<td><code>.</code> 匹配任意字符</td>
<td></td>
</tr>
<tr>
<td>匹配开头的字符</td>
<td><code>^</code></td>
<td><code>^c</code> 匹配以 <code>c</code> 开头的字符串</td>
<td><a href="https://github.com/ramsayleung/reinvent/blob/master/regular_expression/regex-start.ts">Start</a></td>
</tr>
<tr>
<td>匹配结尾的字符</td>
<td><code>$</code></td>
<td><code>c$</code> 匹配以 <code>c</code> 结尾的字符串</td>
<td><a href="https://github.com/ramsayleung/reinvent/blob/master/regular_expression/regex-end.ts">End</a></td>
</tr>
<tr>
<td>匹配零个或多个的字符</td>
<td><code>*</code></td>
<td><code>a*</code> 匹配0-任意个a的字符串, 贪婪匹配</td>
<td><a href="https://github.com/ramsayleung/reinvent/blob/master/regular_expression/regex-any.ts">GreedyAny</a></td>
</tr>
<tr>
<td>匹配零个或多个的字符</td>
<td><code>*</code></td>
<td><code>a*</code> 匹配0-任意个a的字符串, 惰性匹配</td>
<td><a href="https://github.com/ramsayleung/reinvent/blob/master/regular_expression/regex-lazy-any.ts">LazyAny</a></td>
</tr>
<tr>
<td>匹配一个或多个的字符</td>
<td><code>+</code></td>
<td><code>a+</code> 匹配1-任意个a的字符串</td>
<td><a href="https://github.com/ramsayleung/reinvent/blob/master/regular_expression/regex-plus.ts">Plus</a></td>
</tr>
<tr>
<td>匹配零个或一个的字符</td>
<td><code>?</code></td>
<td><code>a?</code> 匹配0-1个a的字符串</td>
<td><a href="https://github.com/ramsayleung/reinvent/blob/master/regular_expression/regex-opt.ts">Opt</a></td>
</tr>
<tr>
<td>多选一匹配</td>
<td><code>❘</code></td>
<td><code>a❘b</code> 匹配a或b的字符串</td>
<td><a href="https://github.com/ramsayleung/reinvent/blob/master/regular_expression/regex-alt.ts">Alt</a></td>
</tr>
<tr>
<td>序列匹配</td>
<td><code>()</code></td>
<td><code>(ab)</code> 匹配 ab 的字符串</td>
<td><a href="https://github.com/ramsayleung/reinvent/blob/master/regular_expression/regex-group.ts">Group</a></td>
</tr>
<tr>
<td>匹配方括号内的任意单个字符</td>
<td><code>[]</code></td>
<td><code>[abcd]</code> 匹配a或b或c或d的字符串</td>
<td><a href="https://github.com/ramsayleung/reinvent/blob/master/regular_expression/regex-charclass.ts">CharClass</a></td>
</tr>
</tbody>
</table>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;Regex testsuite&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">it</span><span class="p">.</span><span class="nx">each</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;ab&#39;</span><span class="p">,</span> <span class="s1">&#39;ba&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;ab&#39;</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;^a&#39;</span><span class="p">,</span> <span class="s1">&#39;ab&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Start</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">))],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;^b&#39;</span><span class="p">,</span> <span class="s1">&#39;ab&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">Start</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">))],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;a$&#39;</span><span class="p">,</span> <span class="s1">&#39;ab&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">End</span><span class="p">())],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;a$&#39;</span><span class="p">,</span> <span class="s1">&#39;ba&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">End</span><span class="p">())],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;a*&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Any</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">))],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;a*&#39;</span><span class="p">,</span> <span class="s1">&#39;baac&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Any</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">))],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;ab*c&#39;</span><span class="p">,</span> <span class="s1">&#39;ac&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">Any</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)))],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;ab*c&#39;</span><span class="p">,</span> <span class="s1">&#39;acc&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">Any</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)))],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;ab*c&#39;</span><span class="p">,</span> <span class="s1">&#39;abc&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">Any</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)))],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;ab*c&#39;</span><span class="p">,</span> <span class="s1">&#39;abbbc&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">Any</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)))],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;ab*c&#39;</span><span class="p">,</span> <span class="s1">&#39;abxc&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">Any</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)))],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;ab*c&#39;</span><span class="p">,</span> <span class="s1">&#39;ac&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">LazyAny</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)))],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;ab*c&#39;</span><span class="p">,</span> <span class="s1">&#39;acc&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">LazyAny</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)))],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;ab*&#39;</span><span class="p">,</span> <span class="s1">&#39;ab&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">LazyAny</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">)))],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;ab+c&#39;</span><span class="p">,</span> <span class="s1">&#39;ac&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">Plus</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)))],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;ab+c&#39;</span><span class="p">,</span> <span class="s1">&#39;abc&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">Plus</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)))],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;a(b|c)d&#39;</span><span class="p">,</span> <span class="s1">&#39;xabdy&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">Alt</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;d&#39;</span><span class="p">)))],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;a(b|c)d&#39;</span><span class="p">,</span> <span class="s1">&#39;xabady&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">Alt</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;d&#39;</span><span class="p">)))],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;ab?c&#39;</span><span class="p">,</span> <span class="s1">&#39;abc&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">Opt</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)))],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;ab?c&#39;</span><span class="p">,</span> <span class="s1">&#39;acc&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">Opt</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)))],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;ab?c&#39;</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">Opt</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)))],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s2">&#34;[abcd]&#34;</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">CharClass</span><span class="p">([</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;d&#39;</span><span class="p">)])],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s2">&#34;[abcd]&#34;</span><span class="p">,</span> <span class="s1">&#39;ab&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">CharClass</span><span class="p">([</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;d&#39;</span><span class="p">)])],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s2">&#34;[abcd]&#34;</span><span class="p">,</span> <span class="s1">&#39;xhy&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">CharClass</span><span class="p">([</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;d&#39;</span><span class="p">)])],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s2">&#34;c[abcd]&#34;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="nx">CharClass</span><span class="p">([</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;d&#39;</span><span class="p">)]))],</span>
</span></span><span class="line"><span class="cl">    <span class="p">])(</span><span class="s1">&#39;Regex base test (&#34;%s&#34; &#34;%s&#34; &#34;%p&#34;)&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">_pattern</span><span class="p">,</span> <span class="nx">text</span><span class="p">,</span> <span class="nx">expected</span><span class="p">,</span> <span class="nx">matcher</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kr">const</span> <span class="nx">actual</span> <span class="o">=</span> <span class="nx">matcher</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nx">expect</span><span class="p">(</span><span class="nx">actual</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="nx">expected</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>顺便一提的是，这种相同的验证逻辑, 但是输入多个不同的参数以验证不同case的做法，叫做 <code>Parameterized Test</code></p>
<p>我在《<a href="https://ramsayleung.github.io/zh/categories/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6/">测试技能进阶系列</a>》的第二篇也曾经介绍过： <a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%BA%8C_parameterized_tests/">Parameterized Tests</a></p>
<p>这样我们就完成了一个功能较完整的正则表达式引擎了。</p>
<h2 id="表达式解析"><span class="section-num">5</span> 表达式解析</h2>
<p>虽然我们已经完成了一个正则表达式引擎，只不过我们平时用表达式是 <code>a*bc</code> ，现在要写成 <code>Any(Lit('a'), Lib('b', Lib('c')))</code> 多个类的实例也太烦琐了。</p>
<p>让我们再来分析下正则表达式，以 <code>^(a|b|$)*z$</code> 为例，以任意数量的 <code>a</code>, <code>b</code>, 或 <code>$</code> 开头, 再紧接一个 <code>z</code>, 然后结束。</p>
<p>我们可以创建一个树来表达这个表达式:</p>
<figure>
    <img loading="lazy" src="/ox-hugo/reinvent_regex_express_as_tree.jpg"/> 
</figure>

<p>在考虑如何把表达式变成上面那棵树之前，我们可以先从最简单的步骤开始：分割字符串</p>
<p>正如物理学家给不可再分的元素称之为「原子」(atom), 计算机科学家也给不可再分割的文本起了一个名字，称之为 <strong>token</strong>, 类似 <code>a</code>, <code>b</code>, <code>$</code>, <code>*</code> 这些都是 token，而把文本切分成 token 的过程，即为 <em>tokenize</em> 。</p>
<p>不同的token可能代表不同的含义，像 <code>a</code>, <code>b</code>, <code>c</code> 这类，所以它们的值不同，但是它们都可以被称为字面量(Literal), 而像 <code>*</code>, <code>+</code>, <code>|</code>, <code>(</code>, <code>)</code> 这样的字符又各种其代表的含义, 如:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">SYMBOL_TOKEN_TYPE_MAP</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;*&#39;</span><span class="o">:</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">Any</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;|&#39;</span><span class="o">:</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">Alt</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;(&#39;</span><span class="o">:</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">GroupStart</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;)&#39;</span><span class="o">:</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">GroupEnd</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>定义好 token 类型之后， <code>tokenize</code> 跃然纸上了：</p>
<p>直接按照字符作匹配，如果能匹配上的就是特殊类型的 <code>Token</code> ，不然就是字面量:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">interface</span> <span class="nx">Token</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">kind</span><span class="o">:</span> <span class="nx">TokenKind</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">location</span><span class="o">:</span> <span class="nx">number</span>
</span></span><span class="line"><span class="cl">  <span class="nx">value</span><span class="o">?:</span> <span class="nx">string</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">tokenize</span> <span class="o">=</span> <span class="p">(</span><span class="nx">text</span><span class="o">:</span> <span class="nx">string</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">result</span><span class="o">:</span> <span class="nx">Token</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">text</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">text</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">c</span> <span class="k">in</span> <span class="nx">SIMPLE</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span> <span class="nx">kind</span><span class="o">:</span> <span class="nx">SIMPLE</span><span class="p">[</span><span class="nx">c</span><span class="p">],</span> <span class="nx">location</span><span class="o">:</span> <span class="nx">i</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">((</span><span class="nx">c</span> <span class="o">===</span> <span class="s1">&#39;^&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">i</span> <span class="o">===</span> <span class="mi">0</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span> <span class="nx">kind</span><span class="o">:</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">Start</span><span class="p">,</span> <span class="nx">location</span><span class="o">:</span> <span class="nx">i</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">((</span><span class="nx">c</span> <span class="o">===</span> <span class="s1">&#39;$&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">i</span> <span class="o">===</span> <span class="p">(</span><span class="nx">text</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span> <span class="nx">kind</span><span class="o">:</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">End</span><span class="p">,</span> <span class="nx">location</span><span class="o">:</span> <span class="nx">i</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span> <span class="nx">kind</span><span class="o">:</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">Lit</span><span class="p">,</span> <span class="nx">location</span><span class="o">:</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="nx">c</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>^(a|b|$)*z$</code> 就会被解析成如下的结果:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;kind&#34;</span><span class="o">:</span> <span class="s2">&#34;Start&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;location&#34;</span><span class="o">:</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;kind&#34;</span><span class="o">:</span> <span class="s2">&#34;GroupStart&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;location&#34;</span><span class="o">:</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;kind&#34;</span><span class="o">:</span> <span class="s2">&#34;Lit&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;location&#34;</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;value&#34;</span><span class="o">:</span> <span class="s2">&#34;a&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;kind&#34;</span><span class="o">:</span> <span class="s2">&#34;Alt&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;location&#34;</span><span class="o">:</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;kind&#34;</span><span class="o">:</span> <span class="s2">&#34;Lit&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;location&#34;</span><span class="o">:</span> <span class="mi">4</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;value&#34;</span><span class="o">:</span> <span class="s2">&#34;b&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;kind&#34;</span><span class="o">:</span> <span class="s2">&#34;Alt&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;location&#34;</span><span class="o">:</span> <span class="mi">5</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;kind&#34;</span><span class="o">:</span> <span class="s2">&#34;Lit&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;location&#34;</span><span class="o">:</span> <span class="mi">6</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;value&#34;</span><span class="o">:</span> <span class="s2">&#34;$&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;kind&#34;</span><span class="o">:</span> <span class="s2">&#34;GroupEnd&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;location&#34;</span><span class="o">:</span> <span class="mi">7</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;kind&#34;</span><span class="o">:</span> <span class="s2">&#34;Any&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;location&#34;</span><span class="o">:</span> <span class="mi">8</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;kind&#34;</span><span class="o">:</span> <span class="s2">&#34;Lit&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;location&#34;</span><span class="o">:</span> <span class="mi">9</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;value&#34;</span><span class="o">:</span> <span class="s2">&#34;z&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;kind&#34;</span><span class="o">:</span> <span class="s2">&#34;End&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;location&#34;</span><span class="o">:</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="组装抽象语法树"><span class="section-num">6</span> 组装抽象语法树</h2>
<p><code>tokenize</code> 的结果是一个包含 Token 的列表，我们要如何组装成树状数据结构呢？</p>
<p>顺带一提，这树状数据结构全称是抽象语法树(Abstract syntax tree, AST), 是一种用来表示程序结构的数据结构，如:</p>
<figure>
    <img loading="lazy" src="/ox-hugo/Abstract_syntax_tree_for_Euclidean_algorithm.svg.png"/> 
</figure>

<p>我们可以分情况来讨论，因为不同的模式有不同的组装方式，组装完之后的 AST 的输出是一个 <code>output</code>, 包含组装后的 <code>token</code> 列表:</p>
<p>对于表达式 <code>a</code>, 我们可以创建一个 <code>Lit</code> 类型的 <code>token</code> (为了便于理解，「创建」指创建一个 <code>token</code>, 然后插入到 <code>output</code>.)</p>
<p>对于表达式 <code>a*</code> 呢？我们可以先创建一个 <code>Lit('a')</code> 的 <code>token</code>, 当遇到 <code>*</code> 时，因为 <code>*</code> 表示匹配0至任意的前一个字符, 所以我们可以创建一个 <code>Any</code> 类型的 token, 然后把 <code>output</code> 最后一个元素 <code>pop</code> 出来，作为 <code>Any</code> 的 <code>child</code> 元素.</p>
<figure>
    <img loading="lazy" src="/ox-hugo/reinvent_regex_construct_ast_any.jpg"/> 
</figure>

<p>对于表达式 <code>(ab)</code>, 情况就变得复杂一些:
当遇到 <code>(</code> 括号的时候，我们可以创建一个 <code>Group</code> ，但是问题在于，我们不知道这个 <code>Group</code> 什么时候结束，即不知道什么时候才会遇上 <code>)</code>.</p>
<p>所以我们需要换种解决思路：当遇到 <code>(</code>, 创建一个 <code>GroupStart</code> 类型的 <code>token</code>, 然后再继续处理 <code>a</code>, <code>b</code>, 当遇到 <code>)</code> 时，创建一个 <code>Group</code> 类型的 <code>token</code>, 然后一直调用 <code>pop</code> 函数直到把 <code>GroupStart</code> 也 <code>pop</code> 出来, 然后把过程中 <code>pop</code> 出来的 <code>token</code> 都当作是 <code>Group</code> 的 <code>children</code> 列表，而 <code>GroupStart</code> 相当于起到一个标记符的作用。</p>
<p>这种思路就自动处理了 <code>(a*)</code> 和 <code>(a(b*)c)</code> 的差异:</p>
<figure>
    <img loading="lazy" src="/ox-hugo/reinvent_regex_ast_group.jpg"/> 
</figure>

<p>对于表达式 <code>a|b</code>, 我们是否可以参考 <code>Any</code> 的做法呢?</p>
<p>遇到 <code>a</code> 的时候先创建一个 <code>Lit('a')</code>, 遇到 <code>|</code> 时再创建一个 <code>Alt</code>, 然后把 <code>Lit('a')</code> 从 <code>output</code> pop 出来作为 <code>left</code> 节点， 再遇到下一个字符 <code>b</code> 的时候，再把 <code>Alt</code> 从 output pop 出来，把 <code>b</code> 作为 <code>right</code> 节点。</p>
<p>听起来没问题，但是上面的算法无法正确解析 <code>a|b*</code>, 它表示匹配一个 <code>a</code> 或者是任意数量的 <code>b</code>, 但是我们的做法会把它解析成 <code>(a|b)*</code>, 即任意数量的 <code>a</code> 或 <code>b</code>.</p>
<p>更合理的做法是先部分组装 Alt 的 <code>left</code> 节点，等解析完所有字符之后，再重新解析一次，把 <code>right</code> 节点给组装上。</p>
<p>以 <code>a|b*</code> 为例子:</p>
<ol>
<li>创建一个 <code>Lit('a')</code> token</li>
<li>当遇到 <code>|</code> 的时候，创建一个 <code>Alt</code>, 并将 <code>Lit('a')</code> pop 出来作为 <code>left</code> 节点</li>
<li>创建一个 <code>Lit('b')</code> token</li>
<li>创建一个 <code>Any</code> token, 并将 <code>Lit('b')</code> pop 出来作为 <code>child</code> 节点.</li>
<li>当解析完所有字符后, 再遍历一次 <code>output</code>, 如果遇到 <code>Alt</code> token, 那么就把它的下一个 <code>token</code> (即 <code>Any</code>) 作为它的 <code>right</code> 节点.</li>
</ol>
<figure>
    <img loading="lazy" src="/ox-hugo/reinvent_regex_ast_alt.jpg"/> 
</figure>

<p>实现代码如下:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">parse</span> <span class="o">=</span> <span class="p">(</span><span class="nx">text</span><span class="o">:</span> <span class="nx">string</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">result</span><span class="o">:</span> <span class="nx">Token</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">allTokens</span> <span class="o">=</span> <span class="nx">tokenize</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">allTokens</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">token</span> <span class="o">=</span> <span class="nx">allTokens</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">isLast</span> <span class="o">=</span> <span class="nx">i</span> <span class="o">===</span> <span class="nx">allTokens</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">handle</span><span class="p">(</span><span class="nx">result</span><span class="p">,</span> <span class="nx">token</span><span class="p">,</span> <span class="nx">isLast</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">compress</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">handle</span> <span class="o">=</span> <span class="p">(</span><span class="nx">result</span><span class="o">:</span> <span class="nx">Token</span><span class="p">[],</span> <span class="nx">token</span><span class="o">:</span> <span class="nx">Token</span><span class="p">,</span> <span class="nx">isLast</span><span class="o">:</span> <span class="kr">boolean</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">token</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">Lit</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">token</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">token</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">Start</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">assert</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;Should not have start token after other tokens&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">token</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">token</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">End</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">assert</span><span class="p">(</span><span class="nx">isLast</span><span class="p">,</span> <span class="sb">`Should not have end token before other tokens`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">token</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">token</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">GroupStart</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">token</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">token</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">GroupEnd</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">groupEnd</span><span class="p">(</span><span class="nx">result</span><span class="p">,</span> <span class="nx">token</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">token</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">Any</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">assert</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="sb">`No Operand for &#39;*&#39; (location </span><span class="si">${</span><span class="nx">token</span><span class="p">.</span><span class="nx">location</span><span class="si">}</span><span class="sb">)`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">token</span><span class="p">.</span><span class="nx">child</span> <span class="o">=</span> <span class="nx">result</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">token</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">token</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">Alt</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">assert</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="sb">`No Operand for &#39;|&#39; (location </span><span class="si">${</span><span class="nx">token</span><span class="p">.</span><span class="nx">location</span><span class="si">}</span><span class="sb">)`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">token</span><span class="p">.</span><span class="nx">left</span> <span class="o">=</span> <span class="nx">result</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="nx">token</span><span class="p">.</span><span class="nx">right</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">token</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">assert</span><span class="p">(</span><span class="kc">false</span><span class="p">,</span> <span class="sb">`UNIMPLEMENTED`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">groupEnd</span> <span class="o">=</span> <span class="p">(</span><span class="nx">result</span><span class="o">:</span> <span class="nx">Token</span><span class="p">[],</span> <span class="nx">token</span><span class="o">:</span> <span class="nx">Token</span><span class="p">)</span><span class="o">:</span> <span class="nx">Token</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">group</span><span class="o">:</span> <span class="nx">Token</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">kind</span><span class="o">:</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">Group</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">location</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">end</span><span class="o">:</span> <span class="nx">token</span><span class="p">.</span><span class="nx">location</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">children</span><span class="o">:</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">assert</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="sb">`Unmatched end parenthesis (location </span><span class="si">${</span><span class="nx">token</span><span class="p">.</span><span class="nx">location</span><span class="si">}</span><span class="sb">)`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">child</span> <span class="o">=</span> <span class="nx">result</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">child</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">GroupStart</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">group</span><span class="p">.</span><span class="nx">location</span> <span class="o">=</span> <span class="nx">child</span><span class="p">.</span><span class="nx">location</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">group</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nx">child</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">group</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// go through the output list to fill in the right side of Alts:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">compress</span> <span class="o">=</span> <span class="p">(</span><span class="nx">raw</span><span class="o">:</span> <span class="nx">Token</span><span class="p">[])</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">cooked</span><span class="o">:</span> <span class="nx">Token</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="nx">raw</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">token</span> <span class="o">=</span> <span class="nx">raw</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">token</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">Alt</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">assert</span><span class="p">(</span><span class="nx">cooked</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="sb">`No right operand for alt (location </span><span class="si">${</span><span class="nx">token</span><span class="p">.</span><span class="nx">location</span><span class="si">}</span><span class="sb">)`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="nx">token</span><span class="p">.</span><span class="nx">right</span> <span class="o">=</span> <span class="nx">cooked</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">cooked</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nx">token</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">cooked</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>对于表达式 <code>a|(bc)</code>, 输出的 AST 如下:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">kind</span><span class="o">:</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">Alt</span><span class="p">,</span> <span class="nx">location</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">left</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">kind</span><span class="o">:</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">Lit</span><span class="p">,</span> <span class="nx">location</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;a&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="nx">right</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">kind</span><span class="o">:</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">Group</span><span class="p">,</span> <span class="nx">location</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">end</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nx">children</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                <span class="p">{</span> <span class="nx">kind</span><span class="o">:</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">Lit</span><span class="p">,</span> <span class="nx">location</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;b&#39;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">                <span class="p">{</span> <span class="nx">kind</span><span class="o">:</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">Lit</span><span class="p">,</span> <span class="nx">location</span><span class="o">:</span> <span class="mi">4</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;c&#39;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="实例化"><span class="section-num">7</span> 实例化</h2>
<p>既然抽象语法树 AST 已经就绪了，我们就差最后一步了，把 AST 转变为我们的类实例.</p>
<p>还记得上文提到过, 不同的模式对应不同的类，然后通过 <code>rest</code> 指针指向下一个模式类，以此串成一个链表。</p>
<p>那么我们对于 <code>output</code> 这个包含多个 token 的列表，我们可以抽象成两个 token, 当前 token 和下一个 token:</p>
<p>假如我们有函数 <code>f</code> 可以把当前 <code>token</code> 初始化对应的模式类，我们只需要再把剩下的 token 列表初始化成 <code>rest</code>, 那么 <code>rest</code> 要怎么初始化呢？</p>
<p>只需要再调用 <code>f</code> 即可.</p>
<p>这不就是递归嘛! 是的，通过递归就很简单地把实例化也实现出来了:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">compile</span> <span class="o">=</span> <span class="p">(</span><span class="nx">text</span><span class="o">:</span> <span class="nx">string</span><span class="p">)</span><span class="o">:</span> <span class="nx">RegexBase</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">tokens</span><span class="o">:</span> <span class="nx">Token</span><span class="p">[]</span> <span class="o">=</span> <span class="nx">parse</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">createObjectByAST</span><span class="p">(</span><span class="nx">tokens</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// return instances of classes derived from RegexBase by abstract syntax tree
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">createObjectByAST</span> <span class="o">=</span> <span class="p">(</span><span class="nx">tokens</span><span class="o">:</span> <span class="nx">Token</span><span class="p">[])</span><span class="o">:</span> <span class="nx">RegexBase</span> <span class="o">|</span> <span class="kc">null</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">tokens</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">token</span> <span class="o">=</span> <span class="nx">tokens</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">token</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">Lit</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">Lit</span><span class="p">(</span><span class="nx">token</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span> <span class="nx">createObjectByAST</span><span class="p">(</span><span class="nx">tokens</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">token</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">Start</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">Start</span><span class="p">(</span><span class="nx">createObjectByAST</span><span class="p">(</span><span class="nx">tokens</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">token</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">End</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">assert</span><span class="p">(</span><span class="nx">tokens</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">,</span> <span class="sb">`Should not have end token before other tokens`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">End</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">token</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">Alt</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">Alt</span><span class="p">(</span><span class="nx">createObjectByAST</span><span class="p">([</span><span class="nx">token</span><span class="p">.</span><span class="nx">left</span><span class="p">]),</span> <span class="nx">createObjectByAST</span><span class="p">([</span><span class="nx">token</span><span class="p">.</span><span class="nx">right</span><span class="p">]),</span> <span class="nx">createObjectByAST</span><span class="p">(</span><span class="nx">tokens</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">token</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">Group</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">Group</span><span class="p">(</span><span class="nx">token</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">childToken</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">createObjectByAST</span><span class="p">([</span><span class="nx">childToken</span><span class="p">])),</span> <span class="nx">createObjectByAST</span><span class="p">(</span><span class="nx">tokens</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">token</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="nx">TokenKind</span><span class="p">.</span><span class="nx">Any</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">Any</span><span class="p">(</span><span class="nx">createObjectByAST</span><span class="p">([</span><span class="nx">token</span><span class="p">.</span><span class="nx">child</span><span class="p">]),</span> <span class="nx">createObjectByAST</span><span class="p">(</span><span class="nx">tokens</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">assert</span><span class="p">(</span><span class="kc">false</span><span class="p">,</span> <span class="sb">`UNKNOWN token type </span><span class="si">${</span><span class="nx">token</span><span class="p">.</span><span class="nx">kind</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="总结"><span class="section-num">8</span> 总结</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">it</span><span class="p">.</span><span class="nx">each</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="s1">&#39;^a&#39;</span><span class="p">,</span> <span class="s1">&#39;ab&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Start</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">))],</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="s1">&#39;a$&#39;</span><span class="p">,</span> <span class="s1">&#39;ab&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">End</span><span class="p">())],</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="s1">&#39;a*&#39;</span><span class="p">,</span> <span class="s1">&#39;baac&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Any</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">))],</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="s1">&#39;ab+c&#39;</span><span class="p">,</span> <span class="s1">&#39;abc&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">Plus</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)))],</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="s1">&#39;ab+c&#39;</span><span class="p">,</span> <span class="s1">&#39;abxc&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">Plus</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)))],</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="s1">&#39;(ab)|(cd)&#39;</span><span class="p">,</span> <span class="s1">&#39;xaby&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Alt</span><span class="p">(</span><span class="nx">Group</span><span class="p">([</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">)]),</span> <span class="nx">Group</span><span class="p">([</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;d&#39;</span><span class="p">)]))],</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="s1">&#39;a(b|c)d&#39;</span><span class="p">,</span> <span class="s1">&#39;xabdy&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">Group</span><span class="p">([</span><span class="nx">Alt</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">))],</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;d&#39;</span><span class="p">)))],</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="s1">&#39;ab?c&#39;</span><span class="p">,</span> <span class="s1">&#39;ac&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">Opt</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)))],</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="s1">&#39;ab?c&#39;</span><span class="p">,</span> <span class="s1">&#39;acc&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">Opt</span><span class="p">(</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)))],</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="s2">&#34;[abcd]c&#34;</span><span class="p">,</span> <span class="s1">&#39;ac&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">CharClass</span><span class="p">([</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;d&#39;</span><span class="p">)],</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">))],</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="s2">&#34;c[abcd]&#34;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="nx">CharClass</span><span class="p">([</span><span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">),</span> <span class="nx">Lit</span><span class="p">(</span><span class="s1">&#39;d&#39;</span><span class="p">)]))],</span>
</span></span><span class="line"><span class="cl"><span class="p">])(</span><span class="s1">&#39;parse, compile and matcher test (&#34;%s&#34; &#34;%s&#34; &#34;%p&#34;)&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">pattern</span><span class="p">,</span> <span class="nx">text</span><span class="p">,</span> <span class="nx">expected</span><span class="p">,</span> <span class="nx">expectedMatcher</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">actualMatcher</span> <span class="o">=</span> <span class="nx">compile</span><span class="p">(</span><span class="nx">pattern</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">expect</span><span class="p">(</span><span class="nx">actualMatcher</span><span class="p">).</span><span class="nx">toStrictEqual</span><span class="p">(</span><span class="nx">expectedMatcher</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">actual</span> <span class="o">=</span> <span class="nx">actualMatcher</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">expect</span><span class="p">(</span><span class="nx">actual</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="nx">expected</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>大功告成，终于将所有的功能都组装起来实现这个正则表达式引擎了, 除去前文提到的功能之外，还实现了 <code>\*</code> 转义特殊字符， <code>[xya]</code> 匹配 <code>x</code>, <code>y</code>, <code>z</code> 其中任意字符，以及 <code>*?</code> 实现惰性匹配的功能。</p>
<p>完整功能集的测试 case 可见 <a href="https://github.com/ramsayleung/reinvent/blob/master/__tests__/regular_expression/parser-test.ts">parser_test.ts</a></p>
<p>日常使用正则表达式的场景非常多，因为其强大的功能和表达能力，总会下意识觉得很难实现（当然，高性能的完整版本的确是非常有挑战性的）。</p>
<p>但是当自己把正则表达式引擎这个轮子拆开，再重新造一个出来之后，才感悟到：</p>
<p>「没有启程的路才会遥不可及」，很多时候，困难只是我们给自己设下的心理障碍。</p>
<p><a href="/zh/post/2025/reinvent_project/">回到本系列的目录</a></p>
<h2 id="参考"><span class="section-num">9</span> 参考</h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Stephen_Cole_Kleene">https://en.wikipedia.org/wiki/Stephen_Cole_Kleene</a></li>
<li><a href="https://en.wikipedia.org/wiki/Ed_(software)">https://en.wikipedia.org/wiki/Ed_(software)</a></li>
<li><a href="https://en.wikipedia.org/wiki/Grep">https://en.wikipedia.org/wiki/Grep</a></li>
<li><a href="https://third-bit.com/sdxjs/regex-parser/">https://third-bit.com/sdxjs/regex-parser/</a></li>
<li><a href="https://third-bit.com/sdxjs/pattern-matching/">https://third-bit.com/sdxjs/pattern-matching/</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>重新造轮子系列(三): HTML Selector</title>
      <link>https://ramsayleung.github.io/zh/post/2025/reinvent_selector/</link>
      <pubDate>Sat, 15 Mar 2025 10:53:00 -0700</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2025/reinvent_selector/</guid>
      <description>项目 GitHub 地址: Selector 1 1 前言 以前写爬虫的时候，必不可少的一个工具就是 HTML selector, 就是用于匹配指定的 HTML 标签。 毕竟爬虫的本质就是找出需要的标签里面的内容，然后</description>
      <content:encoded><![CDATA[<p>项目 GitHub 地址: <a href="https://github.com/ramsayleung/reinvent/tree/master/html_selector">Selector</a> <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>以前写爬虫的时候，必不可少的一个工具就是 HTML selector, 就是用于匹配指定的 HTML 标签。</p>
<p>毕竟爬虫的本质就是找出需要的标签里面的内容，然后解析出来。</p>
<p>而 selector 主要有两个流派，一个是 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_selectors">CSS selector</a> <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, 另外一个是 <a href="https://developer.mozilla.org/en-US/docs/Web/XML/XPath/Guides">XPath selector</a> <sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> ,本质都是通过某种语法来匹配指定的标签，区别只是一个用的是 CSS 的语法，另外一个是 XML 语法.</p>
<p>这次我们就来写个基于 CSS 语法的 Selector, 来深入理解下 HTML 的 DOM 模型</p>
<h2 id="dom"><span class="section-num">2</span> DOM</h2>
<p>写过前端的朋友应该都知道，前端代码主要是由所谓的三剑客组成的：HTML + CSS + JavaScript, 其中的三剑客各司其职，相互配合。</p>
<p>HTML 负责内容展示, CSS 负责布局和样式，而 JavaScript 是负责用户与页面之间的动态交互。</p>
<p>而对于如下的 HTML 代码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Example<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Title<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">blockquote</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;important&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Opening<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Explanation<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">p</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;highlight&#34;</span><span class="p">&gt;</span>Warning<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">blockquote</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Closing<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>浏览器会将其进行解析，并生成名为 <a href="//developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model">Document Object Model</a>(DOM) 的数据结构，听着好像很玄乎，但本质就是一棵多叉树 (Multiway Tree):</p>
<figure>
    <img loading="lazy" src="/ox-hugo/reinvent_dom_tree.jpg"/> 
</figure>

<p>知道 <code>DOM</code> 是多叉树, 我们就可以写出简化版本 <code>DOM</code> 的数据结构了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">interface</span> <span class="nx">DomNode</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">type</span><span class="o">:</span> <span class="nx">string</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">name</span><span class="o">?:</span> <span class="nx">string</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">attribs</span><span class="o">?:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">id</span><span class="o">?:</span> <span class="nx">string</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kr">class</span><span class="o">?:</span> <span class="nx">string</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="nx">key</span><span class="o">:</span> <span class="nx">string</span><span class="p">]</span><span class="o">:</span> <span class="nx">string</span> <span class="o">|</span> <span class="kc">undefined</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="nx">children</span><span class="o">?:</span> <span class="nx">DomNode</span><span class="p">[];</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">?:</span> <span class="nx">string</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">parent</span><span class="o">?:</span> <span class="nx">DomNode</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>一个节点可能有多个子节点 <code>(children?)</code> 或者一个父节点 <code>(parent?)</code>, 也可能都没有，所以标记成 <code>?(optional)</code>;</p>
<p>一个节点可能有多个属性 <code>attribs</code>.</p>
<p>而节点的=type= 可能是 <code>tag</code>, <code>text</code>, <code>comment</code>, <code>script</code>, <code>style</code>, 而对于 <code>text</code> 和 <code>comment</code> 类型的节点， <code>name</code> 也是为空的.</p>
<p>这个 <code>DOM</code> 结构只是我们的简化版本，完整的 DOM 还有很多的属性和回调函数，详情可以查看文档： <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model">Document Object Model (DOM)</a></p>
<h2 id="bfs-vs-dfs"><span class="section-num">3</span> BFS vs DFS</h2>
<p>理解到 <code>DOM</code> 的本质是个多叉树之后，我们很快就能意识到， <code>selector</code> 本质也就是遍历多叉树，找到符合要求的所有节点, 比如按 <code>tag</code> 名来匹配，按 <code>id</code> 来匹配，按 <code>class</code> 来匹配等等。</p>
<p>而用于遍历多叉树的常用算法就是广度优先搜索(Breadth First Search, BFS)和深度优先搜索(Depth First Search, DFS)</p>
<figure>
    <img loading="lazy" src="/ox-hugo/reinvent_dfs_vs_bfs.jpg"/> 
</figure>

<p>通常来说，BFS 和 DFS 都能完成多叉树遍历，时间复杂度也是相同的，BFS通常使用一个 <code>queue</code> 来记录遍历待节点，所以会使用更多的内存，但是能找到最短路径；而 DFS 通常使用递归，如果遇到个循环图，就会 StackOverflow，无法找到结果。</p>
<p>因为我们明确知道 DOM 是个多叉树（有向无环图），所以我们就使用 DFS 来遍历查找。</p>
<h2 id="strategy-设计模式"><span class="section-num">4</span> Strategy 设计模式</h2>
<p>分析好问题之后，我们的实现也差不多能出来了, 按 tag 名来匹配，无非是 <code>domNode.name === tagName</code>; 按 <code>class</code> 来匹配, 即 <code>domNode.attribs.class=== class</code>.</p>
<p>为了解耦和易于扩展，我们可以使用个策略设计模式(<a href="https://refactoring.guru/design-patterns/strategy">Strategy Design Pattern</a> <sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>).</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">interface</span> <span class="nx">Selector</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">match</span><span class="p">(</span><span class="nx">node</span><span class="o">:</span> <span class="nx">DomNode</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">findByTagName</span> <span class="o">=</span> <span class="p">(</span><span class="nx">tag</span><span class="o">:</span> <span class="nx">string</span><span class="p">)</span><span class="o">:</span> <span class="nx">Selector</span> <span class="p">=&gt;</span> <span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">match</span><span class="o">:</span> <span class="p">(</span><span class="nx">node</span><span class="o">:</span> <span class="nx">DomNode</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">node</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()</span> <span class="o">===</span> <span class="nx">tag</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">findById</span> <span class="o">=</span> <span class="p">(</span><span class="nx">id</span><span class="o">:</span> <span class="nx">string</span><span class="p">)</span><span class="o">:</span> <span class="nx">Selector</span> <span class="p">=&gt;</span> <span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">match</span><span class="o">:</span> <span class="p">(</span><span class="nx">node</span><span class="o">:</span> <span class="nx">DomNode</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">node</span><span class="p">.</span><span class="nx">attribs</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="nx">id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">findByClass</span> <span class="o">=</span> <span class="p">(</span><span class="nx">clazz</span><span class="o">:</span> <span class="nx">string</span><span class="p">)</span><span class="o">:</span> <span class="nx">Selector</span> <span class="p">=&gt;</span> <span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">match</span><span class="o">:</span> <span class="p">(</span><span class="nx">node</span><span class="o">:</span> <span class="nx">DomNode</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">node</span><span class="p">.</span><span class="nx">attribs</span><span class="p">.</span><span class="kr">class</span> <span class="o">===</span> <span class="nx">clazz</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后遍历节点的时候，只需要判断 <code>Selector</code> 是否符合要求，而具体的匹配条件则由 <code>selector</code> 决定:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">isMatch</span> <span class="o">=</span> <span class="p">(</span><span class="nx">node</span><span class="o">:</span> <span class="nx">DomNode</span><span class="p">,</span> <span class="nx">selectors</span><span class="o">:</span> <span class="nx">Selector</span><span class="p">[])</span><span class="o">:</span> <span class="kr">boolean</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">selectors</span><span class="p">.</span><span class="nx">every</span><span class="p">(</span><span class="nx">selector</span> <span class="p">=&gt;</span> <span class="nx">selector</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">node</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这样的话，要增加一个根据属性keyValue值的匹配条件也是非常容易的, 如 <code>div[align=center]</code>, 即匹配属性 <code>align</code> 和value 为 <code>center</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">findByAttributes</span> <span class="o">=</span> <span class="p">(</span><span class="nx">key</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="nx">string</span><span class="p">)</span><span class="o">:</span> <span class="nx">Selector</span> <span class="p">=&gt;</span> <span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">match</span><span class="o">:</span> <span class="p">(</span><span class="nx">node</span><span class="o">:</span> <span class="nx">DomNode</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">node</span><span class="p">.</span><span class="nx">attribs</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">===</span> <span class="nx">value</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="测试验证"><span class="section-num">5</span> 测试验证</h2>
<p>DFS + Strategy design pattern 就实现了一个基础的 CSS Selector, 我们自然需要测试验证下是否正确:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;HTML selector testsuite&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">HTML</span> <span class="o">=</span> <span class="sb">`&lt;main&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">  &lt;p&gt;text of first p&lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">  &lt;p id=&#34;id-01&#34;&gt;text of p#id-01&lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">  &lt;p id=&#34;id-02&#34;&gt;text of p#id-02&lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">  &lt;p class=&#34;class-03&#34;&gt;text of p.class-03&lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">  &lt;div&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">    &lt;p&gt;text of div / p&lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">    &lt;p id=&#34;id-04&#34;&gt;text of div / p#id-04&lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">    &lt;p class=&#34;class-05&#34;&gt;text of div / p.class-05&lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">    &lt;p class=&#34;class-06&#34;&gt;should not be found&lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">  &lt;/div&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">  &lt;div id=&#34;id-07&#34;&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">    &lt;p&gt;text of div#id-07 / p&lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">    &lt;p class=&#34;class-06&#34;&gt;text of div#id-07 / p.class-06&lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">  &lt;/div&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">&lt;/main&gt;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">it</span><span class="p">.</span><span class="nx">each</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;p&#39;</span><span class="p">,</span> <span class="s1">&#39;text of first p&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;p#id-01&#39;</span><span class="p">,</span> <span class="s1">&#39;text of p#id-01&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;p#id-02&#39;</span><span class="p">,</span> <span class="s1">&#39;text of p#id-02&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;p.class-03&#39;</span><span class="p">,</span> <span class="s1">&#39;text of p.class-03&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;div p&#39;</span><span class="p">,</span> <span class="s1">&#39;text of div / p&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;div p#id-04&#39;</span><span class="p">,</span> <span class="s1">&#39;text of div / p#id-04&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;div p.class-05&#39;</span><span class="p">,</span> <span class="s1">&#39;text of div / p.class-05&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;div#id-07 p&#39;</span><span class="p">,</span> <span class="s1">&#39;text of div#id-07 / p&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;div#id-07 p.class-06&#39;</span><span class="p">,</span> <span class="s1">&#39;text of div#id-07 / p.class-06&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">])(</span><span class="s1">&#39;test select %s %s&#39;</span><span class="p">,</span> <span class="kr">async</span> <span class="p">(</span><span class="nx">selector</span><span class="p">,</span> <span class="nx">expected</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kr">const</span> <span class="nx">doc</span> <span class="o">=</span> <span class="nx">htmlparser2</span><span class="p">.</span><span class="nx">parseDOM</span><span class="p">(</span><span class="nx">HTML</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="kr">const</span> <span class="nx">node</span> <span class="o">=</span> <span class="nx">select</span><span class="p">(</span><span class="nx">doc</span><span class="p">,</span> <span class="nx">selector</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="kr">const</span> <span class="nx">actual</span> <span class="o">=</span> <span class="nx">getText</span><span class="p">(</span><span class="nx">node</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nx">expect</span><span class="p">(</span><span class="nx">actual</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="nx">expected</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>使用 Jest 框架编写了如上的单元测试用例， unit test 都通过了，完工.</p>
<p>顺便一提的是，这种相同的验证逻辑, 但是输入多个不同的参数以验证不同case的做法，叫做 <code>Parameterized Test</code></p>
<p>我在《<a href="https://ramsayleung.github.io/zh/categories/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6/">测试技能进阶系列</a>》的第二篇也曾经介绍过： <a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%BA%8C_parameterized_tests/">Parameterized Tests</a></p>
<h2 id="总结"><span class="section-num">6</span> 总结</h2>
<p>这个简单的 CSS Selector 全部代码仅有 <strong>103</strong> 行, 但麻雀虽小，五脏俱全，功能还是齐备的:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">&gt; tokei simple-selectors.ts
</span></span><span class="line"><span class="cl"><span class="o">===============================================================================</span>
</span></span><span class="line"><span class="cl">Language            Files        Lines         Code     Comments       <span class="nv">Blanks</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================================</span>
</span></span><span class="line"><span class="cl">TypeScript              <span class="m">1</span>          <span class="m">131</span>          <span class="m">103</span>            <span class="m">9</span>           <span class="nv">19</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================================</span>
</span></span><span class="line"><span class="cl">Total                   <span class="m">1</span>          <span class="m">131</span>          <span class="m">103</span>            <span class="m">9</span>           <span class="nv">19</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================================</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>所以标题也可以修改成 100 行代码实现一个简单的 CSS Selector :)</p>
<p>如果细看实现，还是有不少的优化之处的，比如 <code>parseSelector</code> 函数可以实现得更优雅些，以便进一步扩展支持其他的语法。</p>
<p>另外就是目前支持的都是所有 selector 完全匹配的情况，即 <code>and</code>, 但是目前不支持 <code>or</code> 的功能，即类如: <code>h1,h2,h3</code>, 可以匹配 <code>h1</code>, <code>h2</code>, 或者 <code>h3</code>.</p>
<hr>
<p>如果想要看下较完整版本的 CSS Selector, 可以看下我六年多前我用 C++ 实现的<a href="https://github.com/ramsayleung/crawler">版本</a>, 实现从字符串解析并生成 <code>DOM</code>, 再实现 CSS 解析器，纯正的 OOP 风味。</p>
<p>当时初学 C++, 这个算是我早期写得比较大的 C++17 项目，核心代码大概1000行，还有几百行的单元测试。</p>
<p>现在再翻看自己的代码，会惊讶于当时自己代码写的工整，可谓是有板有眼，像极了书法初学者写的楷书。</p>
<blockquote>
<p><span class="org-target" id="org-target--Unix----"></span>这本砖头书读过, 其他的C++书籍, 如<span class="org-target" id="org-target--C---Primer"></span>, <span class="org-target" id="org-target--Effective-C--"></span>, <span class="org-target" id="org-target--Modern-C--"></span>也读过, 感觉不把书中的内容实践下, 很容易遗忘。</p>
<p>但是日常的工作内容并不会涉及底层网络服务, 一切底层细节内容都被框架给包掉了, 开发的主力语言是Java, 也不会使用到C++.</p>
<p>因此决定创造个机会实践下这些知识，最终决定只用C/C++内置函数库实现。</p>
</blockquote>
<p>的确所有工具都是用C/C++内置函数库实现的，甚至测试框架还是自己用宏实现的.</p>
<p>只是我未曾想到的是，写了这段话后不足一年，C++就成为了我下一家公司干活的主力语言; 而现在，我又在重新写 Java, 着实是「白衣苍狗」。</p>
<p><a href="/zh/post/2025/reinvent_project/">回到本系列的目录</a></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://github.com/ramsayleung/reinvent/tree/master/html_selector">https://github.com/ramsayleung/reinvent/tree/master/html_selector</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_selectors">https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_selectors</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="https://developer.mozilla.org/en-US/docs/Web/XML/XPath/Guides">https://developer.mozilla.org/en-US/docs/Web/XML/XPath/Guides</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p><a href="https://refactoring.guru/design-patterns/strategy">https://refactoring.guru/design-patterns/strategy</a>&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>重新造轮子系列(二)：文件备份</title>
      <link>https://ramsayleung.github.io/zh/post/2025/reinvent_file_backup/</link>
      <pubDate>Sun, 02 Mar 2025 11:57:00 -0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2025/reinvent_file_backup/</guid>
      <description>项目 GitHub 地址: File Backup 1 前言 既然我们已经有单元测试框架来测试软件了，我们肯定不想已经写好的代码丢失掉。 对于重要的文件，一个必不可少的功能肯定是备份</description>
      <content:encoded><![CDATA[<p>项目 GitHub 地址: <a href="https://github.com/ramsayleung/reinvent/tree/master/file_backup">File Backup</a></p>
<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>既然我们已经有<a href="/zh/post/2025/reinvent_unit_test/">单元测试</a>框架来测试软件了，我们肯定不想已经写好的代码丢失掉。</p>
<p>对于重要的文件，一个必不可少的功能肯定是备份, 这样在丢失文件之后可以重新恢复。</p>
<p>今天我们就来写个简单的文件备份软件，类似 Git 这样的版本系统可以当作是高级版本的文件系统，因为它还支持切换到不同版本，对比版本间的差异等等功能，而我们不打算实现一个版本管理系统，只实现基础的文件备份功能。</p>
<h2 id="实现思路"><span class="section-num">2</span> 实现思路</h2>
<figure>
    <img loading="lazy" src="/ox-hugo/reinvent_file_backup_design.png"/> 
</figure>

<h3 id="校验文件是否变更"><span class="section-num">2.1</span> 校验文件是否变更</h3>
<p>我们不可能备份都将所有的文件备份一次，这样做效率太低了，我们应该只备份发生变更的文件，那么如何高效地判断文件是否发生变更呢？</p>
<p>最简单粗暴的方式是把文件读取出来，然后与以备份的文件作对比，但是这样的效率太低，并且算法复杂度是: O(N), 即运行时间是随着文件内容增长而增长的，文件越长，对比越慢。</p>
<p>最优算法的复杂度是 <code>O(1)</code>, 我们希望可以通过常数时间内比较完文件内容。</p>
<p>我们可以使用 <a href="https://en.wikipedia.org/wiki/Cryptographic_hash_function">密码哈希算法(Cryptographic hash algorithms)</a>, 来实现判断文件是否发生变更，它有两个显著的特征:</p>
<ol>
<li>hash 函数的结果是定长，不会因输入变化而增加或减少</li>
<li>只要输入的任意bit生成变更， hash 函数生成的结果都会不一样</li>
</ol>
<p>因此我们可以将文件的内容使用密码哈希函数如 <code>sha1</code> 来hash, 通过比较两次的哈希结果是否一致来判断文件是否发生变更。</p>
<h3 id="判断文件是否被备份"><span class="section-num">2.2</span> 判断文件是否被备份</h3>
<p>判断文件是否被备份就很直接了，只需要看下当前文件是否在目标路径存在。</p>
<p>再结合上文提到的，只备份内容发生变更的文件，那么我们可以使用哈希函数的结果作为目标路径的备份文件名。</p>
<p>假设有文件 <code>src/a.txt</code>, 它的文件内容的哈希结果是 <code>86f7e437faa5a7fce15d1ddcb9eaeaea377667b8</code>, 那么我们使用哈希值作为文件名备份到 <code>dst</code>, 即 <code>dst/86f7e437faa5a7fce15d1ddcb9eaeaea377667b8</code>.</p>
<p>对于文件 <code>a.txt</code>, 只需要判断 <code>dst</code> 是否存在 <code>86f7e437faa5a7fce15d1ddcb9eaeaea377667b8</code>, 就知道 <code>a.txt</code> 是否被备份;</p>
<p>更巧妙的是，如果的 <code>a.txt</code> 文件内容发生变化，那么它的哈希值就一定不再会是 <code>86f7e437faa5a7fce15d1ddcb9eaeaea377667b8</code> 那么查找文件不存在，也可以当作是未备份，直接重新备份。</p>
<p>下面的序列图就是low level design:</p>
<figure>
    <img loading="lazy" src="/ox-hugo/reinvent_file_backup_lowlevel_design.png"/> 
</figure>

<h3 id="性能优化"><span class="section-num">2.3</span> 性能优化</h3>
<p>备份涉及到非常多的文件IO操作，而IO恰恰就是 Nodejs 最擅长的领域, 毕竟曾经的 NodeJS 还有个项目叫做 <code>io.js</code>.</p>
<p>NodeJS 的异步IO是基于 <a href="https://github.com/libuv/libuv">libuv</a>, 但是我们不需要支持使用 <code>libuv</code> 的API, 只需要把文件相关的操作封装在 <code>Promise</code> 里面，NodeJS就会帮我们在处理底层的 IO 调度, 尽可能地并发处理IO, 避免阻塞.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">hashExisting</span> <span class="o">=</span> <span class="p">(</span><span class="nx">rootDir</span><span class="o">:</span> <span class="nx">string</span><span class="p">)</span><span class="o">:</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">PathHashPair</span><span class="p">[]</span><span class="o">&gt;</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">pattern</span> <span class="o">=</span> <span class="sb">`</span><span class="si">${</span><span class="nx">rootDir</span><span class="si">}</span><span class="sb">/**/*`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">glob</span><span class="p">(</span><span class="nx">pattern</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">matches</span> <span class="p">=&gt;</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="nx">matches</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">path</span> <span class="p">=&gt;</span> <span class="nx">statPath</span><span class="p">(</span><span class="nx">path</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">            <span class="p">))</span>
</span></span><span class="line"><span class="cl">            <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">pairs</span><span class="o">:</span> <span class="nx">PathStatPair</span><span class="p">[])</span> <span class="p">=&gt;</span> <span class="nx">pairs</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="p">([</span><span class="nx">path</span><span class="p">,</span> <span class="nx">stat</span><span class="p">])</span> <span class="p">=&gt;</span> <span class="nx">stat</span><span class="p">.</span><span class="nx">isFile</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">            <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">pairs</span><span class="o">:</span> <span class="nx">PathStatPair</span><span class="p">[])</span> <span class="p">=&gt;</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="nx">pairs</span><span class="p">.</span><span class="nx">map</span><span class="p">(([</span><span class="nx">path</span><span class="p">,</span> <span class="nx">stat</span><span class="p">])</span> <span class="p">=&gt;</span> <span class="nx">readPath</span><span class="p">(</span><span class="nx">path</span><span class="p">))))</span>
</span></span><span class="line"><span class="cl">            <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">pairs</span><span class="o">:</span> <span class="nx">PathContentPair</span><span class="p">[])</span> <span class="p">=&gt;</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="nx">pairs</span><span class="p">.</span><span class="nx">map</span><span class="p">(([</span><span class="nx">path</span><span class="p">,</span> <span class="nx">content</span><span class="p">])</span> <span class="p">=&gt;</span> <span class="nx">hashPath</span><span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="nx">content</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">            <span class="p">))</span>
</span></span><span class="line"><span class="cl">            <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">pairs</span><span class="o">:</span> <span class="nx">PathHashPair</span><span class="p">[])</span> <span class="p">=&gt;</span> <span class="nx">resolve</span><span class="p">(</span><span class="nx">pairs</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">            <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span> <span class="p">=&gt;</span> <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>更多关于 <code>Promise</code> 的内容，可以查看<a href="https://javascript.info/async">这本书</a>，它的解释非常到位.</p>
<h3 id="测试文件系统"><span class="section-num">2.4</span> 测试文件系统</h3>
<p>备份文件的设计我们已经分析和实现完了，接下来肯定是需要编写单元测试来测试我们的函数的，我们的文件备份涉及到非常多的文件操作，免不了要和文件系统打交道，包括创建文件，查找文件等等。</p>
<p>单元测试的其中一个原则就是要尽量屏蔽掉外部系统的依赖，以保证我们只聚焦在测试功能本身，文件系统的读写更像是集成测试需要做的事情, 各种操作也很容易把文件目录结构给搞乱，导致单元测试失败。</p>
<p>所以我们希望可以使用一个 mock object 来把文件系统 mock 掉，<a href="https://github.com/tschaub/mock-fs"><code>mock-fs</code></a> 这个库做的就是这样的事情, 它可以把程序中的文件操作都 mock 掉，实际操作的是内存对象而非文件系统.</p>
<figure>
    <img loading="lazy" src="/ox-hugo/reivent_file_backup_mock_fs.jpg"/> 
</figure>

<p>我们就可以在每个单元测试运行时，任意构造任何想要的文件目录，并且保证文件操作都是在操纵内存对象，
而不会直接作用到文件系统，保证单元测试的相互隔离。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">mock</span> <span class="nx">from</span> <span class="s1">&#39;mock-fs&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;checks for pre-existing hashes using mock filesystem&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">beforeEach</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">mock</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;bck-0-csv-0&#39;</span><span class="o">:</span> <span class="p">{},</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;bck-1-csv-1&#39;</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="s1">&#39;0001.csv&#39;</span><span class="o">:</span> <span class="s1">&#39;alpha.js,abcd1234&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s1">&#39;abcd1234.bck&#39;</span><span class="o">:</span> <span class="s1">&#39;alpha.js content&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;bck-4-csv-2&#39;</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="s1">&#39;0001.csv&#39;</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;alpha.js,abcd1234&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                             <span class="s1">&#39;beta.txt,bcde2345&#39;</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;\n&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                <span class="s1">&#39;3024.csv&#39;</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;alpha.js,abcd1234&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                             <span class="s1">&#39;gamma.png,3456cdef&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                             <span class="s1">&#39;subdir/renamed.txt,bcde2345&#39;</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;\n&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                <span class="s1">&#39;3456cdef.bck&#39;</span><span class="o">:</span> <span class="s1">&#39;gamma.png content&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s1">&#39;abcd1234.bck&#39;</span><span class="o">:</span> <span class="s1">&#39;alpha content&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s1">&#39;bcde2345.bck&#39;</span><span class="o">:</span> <span class="s1">&#39;beta.txt became subdir/renamed.txt&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">afterEach</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">mock</span><span class="p">.</span><span class="nx">restore</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>上面的代码就构造出下如下的文件目录：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">├── bck-0-csv-0
</span></span><span class="line"><span class="cl">├── bck-1-csv-1
</span></span><span class="line"><span class="cl">│   ├── 0001.csv
</span></span><span class="line"><span class="cl">│   └── abcd1234.bck
</span></span><span class="line"><span class="cl">└── bck-4-csv-2
</span></span><span class="line"><span class="cl">├── 0001.csv
</span></span><span class="line"><span class="cl">├── 3028.csv
</span></span><span class="line"><span class="cl">├── 3456cdef.bck
</span></span><span class="line"><span class="cl">├── abcd1234.bck
</span></span><span class="line"><span class="cl">└── bcde2345.bck
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="使用示例"><span class="section-num">3</span> 使用示例</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">&gt; tree .
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── backup.ts
</span></span><span class="line"><span class="cl">├── check-existing-files.ts
</span></span><span class="line"><span class="cl">├── hash-existing-promise.ts
</span></span><span class="line"><span class="cl">├── main.ts
</span></span><span class="line"><span class="cl">├── manifest.ts
</span></span><span class="line"><span class="cl">├── reinvent_file_backup.org
</span></span><span class="line"><span class="cl">├── run-hash-existing-promise.ts
</span></span><span class="line"><span class="cl">├── stream-copy.ts
</span></span><span class="line"><span class="cl">└── <span class="nb">test</span>
</span></span><span class="line"><span class="cl">    ├── bck-0-csv-0
</span></span><span class="line"><span class="cl">    ├── bck-1-csv-1
</span></span><span class="line"><span class="cl">    │   ├── 0001.csv
</span></span><span class="line"><span class="cl">    │   └── abcd1234.bck
</span></span><span class="line"><span class="cl">    ├── bck-4-csv-2
</span></span><span class="line"><span class="cl">    │   ├── 0001.csv
</span></span><span class="line"><span class="cl">    │   ├── 3028.csv
</span></span><span class="line"><span class="cl">    │   ├── 3456cdef.bck
</span></span><span class="line"><span class="cl">    │   ├── abcd1234.bck
</span></span><span class="line"><span class="cl">    │   └── bcde2345.bck
</span></span><span class="line"><span class="cl">    ├── test-backup.js
</span></span><span class="line"><span class="cl">    ├── test-find-mock.js
</span></span><span class="line"><span class="cl">    └── test-find.js
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">5</span> directories, <span class="m">18</span> files
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt; npx tsx main.ts -s . -d /tmp/backup -f json -v
</span></span><span class="line"><span class="cl"><span class="o">[</span>INFO<span class="o">]</span> Destination directory ensured: /tmp/backup
</span></span><span class="line"><span class="cl"><span class="o">[</span>INFO<span class="o">]</span> Starting backup from <span class="s1">&#39;.&#39;</span> to <span class="s1">&#39;/tmp/backup&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>INFO<span class="o">]</span> Copied <span class="m">8</span> files from /Users/ramsayleung/code/javascript/reinvent/file_backup to /tmp/backup
</span></span><span class="line"><span class="cl">Backup completed in: 15.96ms
</span></span><span class="line"><span class="cl">Backup completed successfully!
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt; ls -alrt /tmp/backup
</span></span><span class="line"><span class="cl">total <span class="m">88</span>
</span></span><span class="line"><span class="cl">drwxrwxrwt  <span class="m">23</span> root         wheel   <span class="m">736</span>  <span class="m">2</span> Mar 17:06 ..
</span></span><span class="line"><span class="cl">-rw-r--r--@  <span class="m">1</span> ramsayleung  wheel  <span class="m">1056</span>  <span class="m">2</span> Mar 21:02 6bd385393bd0e4a4f9a3b68eea500b88165033b1.bck
</span></span><span class="line"><span class="cl">-rw-r--r--@  <span class="m">1</span> ramsayleung  wheel  <span class="m">1649</span>  <span class="m">2</span> Mar 21:02 8b0bc65c42ca2ae9095bb1c340844080f2f054da.bck
</span></span><span class="line"><span class="cl">-rw-r--r--@  <span class="m">1</span> ramsayleung  wheel  <span class="m">9795</span>  <span class="m">2</span> Mar 21:02 464240b6ef1f03652fefc56152039c0f8d105cfe.bck
</span></span><span class="line"><span class="cl">-rw-r--r--@  <span class="m">1</span> ramsayleung  wheel   <span class="m">636</span>  <span class="m">2</span> Mar 21:02 d0f548d134e99f1fcc2d1c81e1371f48d9f3ca0c.bck
</span></span><span class="line"><span class="cl">-rw-r--r--@  <span class="m">1</span> ramsayleung  wheel   <span class="m">182</span>  <span class="m">2</span> Mar 21:02 7fa1b33f68d734b406ddb58e3f85f199851393db.bck
</span></span><span class="line"><span class="cl">-rw-r--r--@  <span class="m">1</span> ramsayleung  wheel   <span class="m">666</span>  <span class="m">2</span> Mar 21:02 369034de6e5b7ee0e867c6cfca66eab59f834447.bck
</span></span><span class="line"><span class="cl">-rw-r--r--@  <span class="m">1</span> ramsayleung  wheel  <span class="m">2533</span>  <span class="m">2</span> Mar 21:02 02d5c238d29f9e49d2a1f525e7db5f420a654a3f.bck
</span></span><span class="line"><span class="cl">-rw-r--r--@  <span class="m">1</span> ramsayleung  wheel  <span class="m">3512</span>  <span class="m">2</span> Mar 21:02 964c0245a5d8cb217d64d794952c80ddf2aecca8.bck
</span></span><span class="line"><span class="cl">drwxr-xr-x@ <span class="m">11</span> ramsayleung  wheel   <span class="m">352</span>  <span class="m">2</span> Mar 21:02 .
</span></span><span class="line"><span class="cl">-rw-r--r--@  <span class="m">1</span> ramsayleung  wheel  <span class="m">1030</span>  <span class="m">2</span> Mar 21:02 0000000000.json
</span></span></code></pre></td></tr></table>
</div>
</div><p>为什么 <code>file_backup</code> 目录里面有 18 个文件，只备份了8个文件呢？因为 <code>test</code> 目录里面所有的文件都是空的，所以备份时就跳过了。</p>
<h2 id="总结"><span class="section-num">4</span> 总结</h2>
<p>我们就完成了一个文件备份软件的开发，功能当然还非常简单，还有非常多优化的空间，比如现在 <code>src</code> 目录的所有文件都会被平铺到 <code>dst</code> 目录，如果我们可以保存目录结构，那么就更好用了。</p>
<p>另外，使用哈希函数值作为文件名的确很巧妙，但是对于用户而已，如果不逐个打开文件，根本不知道哪个文件是对应哪个源文件等等。</p>
<p>如果想要实现一个更健壮易用的备份文件，可以参考下关于这 <a href="https://michael.stapelberg.ch/posts/2022-06-18-rsync-overview/">rsync 系列的文章</a> , <code>rsync</code> 是Linux 上非常流行的增量备份的文件，不仅可以备份本地文件，更可以把文件备份把远程服务器，非常强大。</p>
<p><a href="/zh/post/2025/reinvent_project/">回到本系列的目录</a></p>
<h2 id="参考"><span class="section-num">5</span> 参考</h2>
<ul>
<li><a href="https://third-bit.com/sdxjs/file-backup/">https://third-bit.com/sdxjs/file-backup/</a></li>
<li><a href="https://en.wikipedia.org/wiki/Cryptographic_hash_function">https://en.wikipedia.org/wiki/Cryptographic_hash_function</a></li>
<li><a href="https://michael.stapelberg.ch/posts/2022-06-18-rsync-overview/">https://michael.stapelberg.ch/posts/2022-06-18-rsync-overview/</a></li>
<li><a href="https://javascript.info/async">https://javascript.info/async</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>重新造轮子系列(一)：单元测试框架</title>
      <link>https://ramsayleung.github.io/zh/post/2025/reinvent_unit_test/</link>
      <pubDate>Sun, 16 Feb 2025 22:27:00 -0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2025/reinvent_unit_test/</guid>
      <description>项目 GitHub 地址: Unit Test 1 前言 单元测试的重要性无须多言，它是保证项目质量的基石. 如果没有单元测试，根本没有信心说自己开发的功能是符合要求的，更没法在</description>
      <content:encoded><![CDATA[<p>项目 GitHub 地址: <a href="https://github.com/ramsayleung/reinvent/tree/master/unit_test">Unit Test</a></p>
<h2 id="前言"><span class="section-num">1</span> 前言</h2>
<p>单元测试的重要性无须多言，它是保证项目质量的基石.</p>
<p>如果没有单元测试，根本没有信心说自己开发的功能是符合要求的，更没法在没有测试的保证进行项目的重构。</p>
<p>既然单元测试如此重要，今天就用Typescript来写一个简单但五脏俱全的单元测试框架。</p>
<h2 id="历史"><span class="section-num">2</span> 历史</h2>
<p>Javascript 比较流行的测试框架是 <a href="https://mochajs.org/">Mocha</a> 和 <a href="https://jestjs.io/">Jest</a> , Java 具有统治地位的单元测试框架就是 <a href="https://junit.org/junit5/">JUnit</a>, 现在做单元测试的框架, 一般称为 xUnit 家族, 而 xUnit 家族最早的成员, 不是 JUnit, 而是 SUnit(Smalltalk Unit), SUnit 的历史比 Junit 悠久得多, 大约在1994年的时候, <a href="https://en.wikipedia.org/wiki/Kent_Beck">Kent Beck</a>, 也就是 Junit 的作者之一, 写了 <a href="https://sunit.sourceforge.net/">SUnit</a>, 而后才有了 JUnit (1998).</p>
<p>所以, 在 <a href="https://sunit.sourceforge.net/">SUnit</a> 的网站上, 极其显摆的写着”一切单元测试框架之母” (The mother of all unit testing frameworks).</p>
<p>事实上这是大实话 — 所有单元测试框架里面的名词术语, 都从 Sunit 来的, 如 TestCase, Fixture 等等.</p>
<h2 id="实现"><span class="section-num">3</span> 实现</h2>
<h3 id="需求"><span class="section-num">3.1</span> 需求</h3>
<p>先定义需求, 一个单元测试框架应该可以做到下面的事:</p>
<ol>
<li>找到包含测试的文件</li>
<li>找到上述文件的测试 case</li>
<li>运行测试case</li>
<li>捕获测试运行结果，并输出所有的测试的运行总结</li>
</ol>
<h3 id="原型"><span class="section-num">3.2</span> 原型</h3>
<p>一条 <code>assert</code> 语句就可以看作是最简单的测试 case, 对于测试case, 我们会有以下三种结果：</p>
<ul>
<li>Pass: 运行成功, 测试结果与预期一致</li>
<li>Fail: 运行失败, 测试结果与预期不一致</li>
<li>Error: 运行测试过程中出现错误，我们不确定测试结果是否与预期一致</li>
</ul>
<p>我们用以下的状态机来判断测试的结果:</p>
<figure>
    <img loading="lazy" src="/ox-hugo/unit_test_result_state.png"/> 
</figure>

<p>我们把要实现的单元测试框架命名为 <code>Hope</code>, 根据上面的状态机，我们很快就可以写出一个原型：</p>
<p>单元测试用例接收一个函数作为参数，然后又集中运行所有的测试用例，并根据是否抛出异常以及异常的类型来判断结果:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">assert</span> <span class="nx">from</span> <span class="s1">&#39;assert&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">HopeTests</span><span class="o">:</span> <span class="p">[</span><span class="nx">string</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="k">void</span><span class="p">][]</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">HopePass</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">HopeFail</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">HopeError</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Record a single test for running later.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">hopeThat</span> <span class="o">=</span> <span class="p">(</span><span class="nx">message</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">callback</span><span class="o">:</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="k">void</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">HopeTests</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="nx">message</span><span class="p">,</span> <span class="nx">callback</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">HopeTests</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(([</span><span class="nx">message</span><span class="p">,</span> <span class="nx">test</span><span class="p">])</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">test</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="nx">HopePass</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">assert</span><span class="p">.</span><span class="nx">AssertionError</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">HopeFail</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">HopeError</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`pass </span><span class="si">${</span><span class="nx">HopePass</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`fail </span><span class="si">${</span><span class="nx">HopeFail</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`error </span><span class="si">${</span><span class="nx">HopeError</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>让我们编写点代码来测试下我们的「单元测试框架」:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">// Something to test(doesn&#39;t handle zero properly)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">sign</span> <span class="o">=</span> <span class="p">(</span><span class="nx">value</span><span class="o">:</span> <span class="nx">number</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">value</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// These two should pass
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">hopeThat</span><span class="p">(</span><span class="s1">&#39;Sign of negative is -1&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">assert</span><span class="p">(</span><span class="nx">sign</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">)</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="nx">hopeThat</span><span class="p">(</span><span class="s1">&#39;Sign of positive is 1&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">assert</span><span class="p">(</span><span class="nx">sign</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="o">===</span> <span class="mi">1</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// This one should fail.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">hopeThat</span><span class="p">(</span><span class="s1">&#39;Sign of zero is 0&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">assert</span><span class="p">(</span><span class="nx">sign</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">===</span> <span class="mi">0</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// This one is an error.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">hopeThat</span><span class="p">(</span><span class="s1">&#39;Sign mispelled is erorr&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">assert</span><span class="p">(</span><span class="nx">sign</span><span class="p">(</span><span class="nx">sgn</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Call the main driver
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">main</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>输出的结果是:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">-&gt; npx tsx dry_run.ts
</span></span><span class="line"><span class="cl">pass <span class="m">2</span>
</span></span><span class="line"><span class="cl">fail <span class="m">1</span>
</span></span><span class="line"><span class="cl">error <span class="m">1</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们的第一版单元测试框架 <code>Hope</code> 能正常运行了，不过它有几个问题：</p>
<ol>
<li>它只是输出结果，但没有告诉我们是哪个单元测试成功了，哪个失败了，哪个报错，没法 debug</li>
<li>可变全局变量通常是有很大副作用的，我们应该把它封装起来</li>
<li>如果我们要测的函数里面，预期是要抛出 <code>assert.AssertionError</code>, 那么这个函数对应的测试用例就会被识别成失败的测试用例，也就是意味着我们不应该依赖 <code>assert.AssertError</code> 来作运行结果判断。</li>
</ol>
<h3 id="单例版本"><span class="section-num">3.3</span> 单例版本</h3>
<p>我们可以将上面的测试代码地址封装在一个类里，然后通过单例设计模式(<a href="https://refactoring.guru/design-patterns/singleton">Singleton pattern</a>)来确保只初始化出一个实例，这样就可以模拟出全局变量的效果，以此来解决前面的两个问题。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">assert</span> <span class="nx">from</span> <span class="s2">&#34;assert&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">caller</span> <span class="nx">from</span> <span class="s1">&#39;caller&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">Hope</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">private</span> <span class="nx">todo</span><span class="o">:</span> <span class="p">[</span><span class="nx">string</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="k">void</span><span class="p">][]</span> <span class="o">=</span> <span class="p">[];</span> <span class="c1">// 记录所有需要运行的测试case.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kr">private</span> <span class="nx">passes</span><span class="o">:</span> <span class="nx">string</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">  <span class="kr">private</span> <span class="nx">fails</span><span class="o">:</span> <span class="nx">string</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">  <span class="kr">private</span> <span class="nx">errors</span><span class="o">:</span> <span class="nx">string</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">  <span class="nx">constructor</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">todo</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">passes</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">fails</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">errors</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">test</span><span class="p">(</span><span class="nx">comment</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">callback</span><span class="o">:</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="k">void</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 通过caller 获取单元测试用例对应的文件名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="nx">todo</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="sb">`</span><span class="si">${</span><span class="nx">caller</span><span class="p">()</span><span class="si">}</span><span class="sb">::</span><span class="si">${</span><span class="nx">comment</span><span class="si">}</span><span class="sb">`</span><span class="p">,</span> <span class="nx">callback</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">run</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">todo</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(([</span><span class="nx">comment</span><span class="p">,</span> <span class="nx">test</span><span class="p">])</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">test</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">passes</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">comment</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">assert</span><span class="p">.</span><span class="nx">AssertionError</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="k">this</span><span class="p">.</span><span class="nx">fails</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">comment</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="k">this</span><span class="p">.</span><span class="nx">errors</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">comment</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="k">new</span> <span class="nx">Hope</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>上面的代码又是如何实现单例模式的呢？依靠的是 Node 的两个运行机制:</p>
<ol>
<li>在加载一个 <code>module</code> 的时候, 它就会解释并执行 <code>module</code> 的代码，这意味着它会运行 <code>new Hope()</code> 并且导出新创建的实例</li>
<li>那么是否意味着，每个 <code>import</code> 语句都会运行一下 <code>new Hope()</code> 呢? 并不是，Node会缓存导入的 <code>module</code> ，也就是说无论一个 <code>module</code> 被导入多少次, 它也只会执行一次代码。</li>
</ol>
<p>只要导入 <code>hope.ts</code> 之后, 就可以使用 <code>hope.test()</code> 会注册单元测试用例，以便后续执行:</p>
<figure>
    <img loading="lazy" src="/ox-hugo/unit_test_hope_structure.svg"/> 
</figure>

<p>最后， 我们只需要再实现下输出测试结果的功能，既支持输出一行的简短结果，又可以支持详尽的输出. 如果需要的话，后续还可以支持输出JSON, CSV, 或者HTML 格式的结果:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">terse</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">cases</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="nx">map</span><span class="p">(([</span><span class="nx">title</span><span class="p">,</span> <span class="nx">results</span><span class="p">])</span> <span class="p">=&gt;</span> <span class="sb">`</span><span class="si">${</span><span class="nx">title</span><span class="si">}</span><span class="sb">: </span><span class="si">${</span><span class="nx">results</span><span class="p">.</span><span class="nx">length</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">verbose</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">report</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">prefix</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="p">[</span><span class="nx">title</span><span class="p">,</span> <span class="nx">results</span><span class="p">]</span> <span class="k">of</span> <span class="k">this</span><span class="p">.</span><span class="nx">cases</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">report</span> <span class="o">+=</span> <span class="sb">`</span><span class="si">${</span><span class="nx">prefix</span><span class="si">}${</span><span class="nx">title</span><span class="si">}</span><span class="sb">:`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">prefix</span> <span class="o">=</span> <span class="s1">&#39;\n&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="nx">r</span> <span class="k">of</span> <span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">report</span> <span class="o">+=</span> <span class="sb">`</span><span class="si">${</span><span class="nx">prefix</span><span class="si">}</span><span class="sb"> </span><span class="si">${</span><span class="nx">r</span><span class="si">}</span><span class="sb">`</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">report</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">cases</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="s1">&#39;passes&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">passes</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="s1">&#39;fails&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">fails</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="s1">&#39;errors&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">errors</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>万事具备，接下来就让我们写个函数验证下 <code>Hope</code> 框架:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">assert</span> <span class="nx">from</span> <span class="s2">&#34;assert&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">hope</span> <span class="nx">from</span> <span class="s2">&#34;./hope&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">hope</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;Sum of 1 and 2&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">assert</span><span class="p">((</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="o">===</span> <span class="mi">3</span><span class="p">));</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>看起来挺不错，但是要怎么运行这个测试case 呢? 总不能每个测试文件都调用下 <code>hope.run()</code> 嘛? 人家 <code>Jest</code> 都可以自动扫描并运行测试用例。</p>
<p>让我们参考 Jest, 实现一个 <code>Runner</code>, 也实现动态加载测试文件.</p>
<p><code>import</code> 不仅可以用来导入其他的模块，它可以当作是一个 async 函数，加载指定路径的文件, 如:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">await</span> <span class="kr">import</span><span class="p">(</span><span class="nx">module_path</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>为了更好地控制我们的单元测试, 我们可以给 <code>Hope</code> 框架增加上一些命令行参数以控制其行为, CLI + Runner 的实现如下:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">minimist</span> <span class="nx">from</span> <span class="s1">&#39;minimist&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">glob</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;glob&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">hope</span> <span class="nx">from</span> <span class="s1">&#39;./hope&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">fileURLToPath</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;url&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">parse</span> <span class="o">=</span> <span class="p">(</span><span class="nx">args</span><span class="o">:</span> <span class="nx">string</span><span class="p">[])</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">parsed</span> <span class="o">=</span> <span class="nx">minimist</span><span class="p">(</span><span class="nx">args</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Default root directory is current directory if not specified
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">root</span><span class="o">:</span> <span class="nx">parsed</span><span class="p">.</span><span class="nx">root</span> <span class="o">||</span> <span class="s1">&#39;.&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Output format can be &#39;terse&#39; or &#39;verbose&#39; (default)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">output</span><span class="o">:</span> <span class="nx">parsed</span><span class="p">.</span><span class="nx">output</span> <span class="o">||</span> <span class="s1">&#39;verbose&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Array of test filenames if explicitly provided
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">filenames</span><span class="o">:</span> <span class="nx">parsed</span><span class="p">.</span><span class="nx">_</span> <span class="o">||</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="kr">async</span> <span class="p">(</span><span class="nx">args</span><span class="o">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">options</span> <span class="o">=</span> <span class="nx">parse</span><span class="p">(</span><span class="nx">args</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">filenames</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">options</span><span class="p">.</span><span class="nx">filenames</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">glob</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">options</span><span class="p">.</span><span class="nx">root</span><span class="si">}</span><span class="sb">/**/test*.{ts,js}`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="nx">f</span> <span class="k">of</span> <span class="nx">options</span><span class="p">.</span><span class="nx">filenames</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">absolutePath</span> <span class="o">=</span> <span class="nx">fileURLToPath</span><span class="p">(</span><span class="k">new</span> <span class="nx">URL</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span> <span class="kr">import</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">url</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="kr">await</span> <span class="kr">import</span><span class="p">(</span><span class="nx">absolutePath</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">hope</span><span class="p">.</span><span class="nx">run</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">output</span> <span class="o">===</span> <span class="s1">&#39;terse&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="nx">hope</span><span class="p">.</span><span class="nx">terse</span><span class="p">()</span> <span class="o">:</span> <span class="nx">hope</span><span class="p">.</span><span class="nx">verbose</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">main</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们默认会匹配所有以 <code>test</code> 为前缀的 ts 和 js 文件, 然后通过 <code>import</code> 导入, 因为 <code>hope</code> 是单例模式，所以所有的测试文件用的都是同一个实例, <code>hope.run</code> 就将注册的所有单元测试运行.</p>
<p>整个框架的工作流程如下:</p>
<figure>
    <img loading="lazy" src="/ox-hugo/unit_test_workflow.png"/> 
</figure>

<p>大功告成，现在就来运行下我们的单元测试:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">&gt; npx tsx pray.ts
</span></span><span class="line"><span class="cl">passes:
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_add.ts::Sum of <span class="m">1</span> and <span class="m">2</span>
</span></span><span class="line"><span class="cl">fails:
</span></span><span class="line"><span class="cl">errors:
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="优化"><span class="section-num">3.4</span> 优化</h3>
<h4 id="增加运行时间"><span class="section-num">3.4.1</span> 增加运行时间</h4>
<p>我们还可以记录每个测试用例的运行时间, 纳秒有点太小了，就精确到微秒即可:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">run</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">this</span><span class="p">.</span><span class="nx">todo</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(([</span><span class="nx">comment</span><span class="p">,</span> <span class="nx">test</span><span class="p">])</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="kr">const</span> <span class="nx">now</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">hrtime</span><span class="p">.</span><span class="nx">bigint</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">      <span class="nx">test</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">      <span class="kr">const</span> <span class="nx">elapsedInMicro</span> <span class="o">=</span> <span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">hrtime</span><span class="p">.</span><span class="nx">bigint</span><span class="p">()</span> <span class="o">-</span> <span class="nx">now</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="nx">BigInt</span><span class="p">(</span><span class="mi">1000</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">passes</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">comment</span> <span class="o">+</span> <span class="sb">`, execution time: </span><span class="si">${</span><span class="nx">elapsedInMicro</span><span class="si">}</span><span class="sb">us`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">assert</span><span class="p">.</span><span class="nx">AssertionError</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">fails</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">comment</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">errors</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">comment</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">&gt; npx tsx pray.ts
</span></span><span class="line"><span class="cl">passes:
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_add.ts::Sum of <span class="m">1</span> and 2, execution time: 5us
</span></span><span class="line"><span class="cl">fails:
</span></span><span class="line"><span class="cl">errors:
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="增加-assert-函数"><span class="section-num">3.4.2</span> 增加 assert 函数</h4>
<p>内置的 <code>assert</code> 函数只支持比较输入值是否为 True, 现代的测试框架都有很多的 <code>helper</code> 函数来简化 <code>assert</code> 语句，就让我们来实现下 <code>assertEqual</code>, <code>assertThrows</code>, <code>assertMapEqual</code>, <code>assertSetEqual</code>, <code>assertArraySame</code> 这几个函数:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * assert 抛出指定的异常
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kd">function</span> <span class="nx">assertThrows</span><span class="o">&lt;</span><span class="nx">T</span> <span class="kr">extends</span> <span class="nb">Error</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">expectedType</span><span class="o">:</span> <span class="k">new</span> <span class="p">(...</span><span class="nx">args</span><span class="o">:</span> <span class="nx">any</span><span class="p">[])</span> <span class="p">=&gt;</span> <span class="nx">T</span><span class="p">,</span> <span class="nx">func</span><span class="o">:</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="k">void</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// expected to throw exception
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">func</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// unreachable
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">assert</span><span class="p">(</span><span class="kc">false</span><span class="p">,</span> <span class="sb">`Expected function to throw </span><span class="si">${</span><span class="nx">expectedType</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span><span class="sb"> but it did not throw`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">assert</span><span class="p">(</span><span class="nx">error</span> <span class="k">instanceof</span> <span class="nx">expectedType</span><span class="p">,</span> <span class="sb">`Expected function to throw </span><span class="si">${</span><span class="nx">expectedType</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span><span class="sb"> but it threw </span><span class="si">${</span><span class="nx">error</span> <span class="k">instanceof</span> <span class="nb">Error</span> <span class="o">?</span> <span class="nx">error</span><span class="p">.</span><span class="nx">constructor</span><span class="p">.</span><span class="nx">name</span> <span class="o">:</span> <span class="k">typeof</span> <span class="nx">error</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * assert 两个元素相等
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kd">function</span> <span class="nx">assertEqual</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">actual</span><span class="o">:</span> <span class="nx">T</span><span class="p">,</span> <span class="nx">expected</span><span class="o">:</span> <span class="nx">T</span><span class="p">,</span> <span class="nx">message</span><span class="o">:</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">assert</span><span class="p">(</span><span class="nx">actual</span> <span class="o">===</span> <span class="nx">expected</span><span class="p">,</span> <span class="nx">message</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * assert 两个 Set 相同
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kd">function</span> <span class="nx">assertSetEqual</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">actual</span><span class="o">:</span> <span class="nx">Set</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">,</span> <span class="nx">expected</span><span class="o">:</span> <span class="nx">Set</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">,</span> <span class="nx">message</span><span class="o">:</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">assert</span><span class="p">(</span><span class="nx">actual</span><span class="p">.</span><span class="nx">size</span> <span class="o">==</span> <span class="nx">expected</span><span class="p">.</span><span class="nx">size</span><span class="p">,</span> <span class="nx">message</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="nx">element</span> <span class="k">of</span> <span class="nx">actual</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">assert</span><span class="p">(</span><span class="nx">expected</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">element</span><span class="p">),</span> <span class="nx">message</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * assert 两个 Map 相同
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kd">function</span> <span class="nx">assertMapEqual</span><span class="o">&lt;</span><span class="nx">K</span> <span class="kr">extends</span> <span class="nx">string</span> <span class="o">|</span> <span class="nx">number</span> <span class="o">|</span> <span class="nx">symbol</span><span class="p">,</span> <span class="nx">V</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">actual</span><span class="o">:</span> <span class="nx">Record</span><span class="o">&lt;</span><span class="nx">K</span><span class="p">,</span> <span class="nx">V</span><span class="o">&gt;</span><span class="p">,</span> <span class="nx">expected</span><span class="o">:</span> <span class="nx">Record</span><span class="o">&lt;</span><span class="nx">K</span><span class="p">,</span> <span class="nx">V</span><span class="o">&gt;</span><span class="p">,</span> <span class="nx">message</span><span class="o">:</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">actualKeys</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">actual</span><span class="p">)</span> <span class="nx">as</span> <span class="nx">K</span><span class="p">[];</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">expectedKeys</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">expected</span><span class="p">)</span> <span class="nx">as</span> <span class="nx">K</span><span class="p">[];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">assert</span><span class="p">(</span><span class="nx">actualKeys</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="nx">expectedKeys</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="nx">message</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="nx">actualKey</span> <span class="k">of</span> <span class="nx">actualKeys</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">assert</span><span class="p">(</span><span class="nx">expected</span><span class="p">[</span><span class="nx">actualKey</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="nx">actual</span><span class="p">[</span><span class="nx">actualKey</span><span class="p">]</span> <span class="o">==</span> <span class="nx">expected</span><span class="p">[</span><span class="nx">actualKey</span><span class="p">],</span> <span class="nx">message</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * assert两个列举的值相等，如元素相等，但是顺序不同也被视为相同
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kd">function</span> <span class="nx">assertArraySame</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">actual</span><span class="o">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">,</span> <span class="nx">expected</span><span class="o">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">,</span> <span class="nx">message</span><span class="o">:</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">assert</span><span class="p">(</span><span class="nx">actual</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="nx">expected</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="nx">message</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">assertSetEqual</span><span class="p">(</span><span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="nx">actual</span><span class="p">),</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="nx">expected</span><span class="p">),</span> <span class="nx">message</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>针对上述函数的测试:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">assert</span> <span class="nx">from</span> <span class="s2">&#34;assert&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">hope</span><span class="p">,</span> <span class="p">{</span> <span class="nx">assertArraySame</span><span class="p">,</span> <span class="nx">assertMapEqual</span><span class="p">,</span> <span class="nx">assertSetEqual</span><span class="p">,</span> <span class="nx">assertThrows</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&#34;./hope&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">hope</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;test assertSetEqual happy path&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">setA</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">setB</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">([</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assertSetEqual</span><span class="p">(</span><span class="nx">setA</span><span class="p">,</span> <span class="nx">setB</span><span class="p">,</span> <span class="s1">&#39;Set supposed to be equal&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">assertSetEqual</span><span class="p">(</span><span class="k">new</span> <span class="nx">Set</span><span class="p">([]),</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">([]),</span> <span class="s1">&#39;Empty Set&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">hope</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;test assertMapEqual unhappy path&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assertThrows</span><span class="p">(</span><span class="nx">assert</span><span class="p">.</span><span class="nx">AssertionError</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">setA</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">setB</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">assertSetEqual</span><span class="p">(</span><span class="nx">setA</span><span class="p">,</span> <span class="nx">setB</span><span class="p">,</span> <span class="s1">&#39;Set supposed to be equal&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">hope</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;test assertMapEqual happy path&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">mapA</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;a&#39;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;b&#39;</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">mapB</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;b&#39;</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;a&#39;</span><span class="o">:</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assertMapEqual</span><span class="p">(</span><span class="nx">mapA</span><span class="p">,</span> <span class="nx">mapB</span><span class="p">,</span> <span class="s1">&#39;Map supposed to be map&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">hope</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;test assertMapEqual unhappy path&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">mapA</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;a&#39;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;b&#39;</span><span class="o">:</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">mapB</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;b&#39;</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;a&#39;</span><span class="o">:</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assertThrows</span><span class="p">(</span><span class="nx">assert</span><span class="p">.</span><span class="nx">AssertionError</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">assertMapEqual</span><span class="p">(</span><span class="nx">mapA</span><span class="p">,</span> <span class="nx">mapB</span><span class="p">,</span> <span class="s1">&#39;Map supposed to be map&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">hope</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;test assertArraySame happy path&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assertArraySame</span><span class="p">(</span><span class="nx">arr1</span><span class="p">,</span> <span class="nx">arr2</span><span class="p">,</span> <span class="s2">&#34;Arrays should have same elements&#34;</span><span class="p">);</span> <span class="c1">// Passe
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">hope</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;test assertArraySame unhappy path&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">assertThrows</span><span class="p">(</span><span class="nx">assert</span><span class="p">.</span><span class="nx">AssertionError</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">assertArraySame</span><span class="p">(</span><span class="nx">arr1</span><span class="p">,</span> <span class="nx">arr2</span><span class="p">,</span> <span class="s2">&#34;Arrays should have same elements&#34;</span><span class="p">);</span> <span class="c1">// Passe
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="增加-s-select-参数指定测试文件"><span class="section-num">3.4.3</span> 增加 -s/&ndash;select 参数指定测试文件</h4>
<p>我们的 <code>Runner</code> 默认匹配的是以 <code>test</code> 为前缀的测试文件, 我们可以增加一个 <code>-s/--select</code> 参数，用来指定需要匹配的测试文件名：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">parse</span> <span class="o">=</span> <span class="p">(</span><span class="nx">args</span><span class="o">:</span> <span class="nx">string</span><span class="p">[])</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">parsed</span> <span class="o">=</span> <span class="nx">minimist</span><span class="p">(</span><span class="nx">args</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">...</span>
</span></span><span class="line"><span class="cl">    <span class="nx">select</span><span class="o">:</span> <span class="nx">parsed</span><span class="p">.</span><span class="nx">select</span> <span class="o">||</span> <span class="nx">parsed</span><span class="p">.</span><span class="nx">s</span> <span class="c1">// 增加select 参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="kr">async</span> <span class="p">(</span><span class="nx">args</span><span class="o">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">options</span> <span class="o">=</span> <span class="nx">parse</span><span class="p">(</span><span class="nx">args</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">filenames</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">namePattern</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">select</span> <span class="o">??</span> <span class="s1">&#39;test*&#39;</span><span class="p">;</span> <span class="c1">// 使用传入的模式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">options</span><span class="p">.</span><span class="nx">filenames</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">glob</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">options</span><span class="p">.</span><span class="nx">root</span><span class="si">}</span><span class="sb">/**/</span><span class="si">${</span><span class="nx">namePattern</span><span class="si">}</span><span class="sb">.{ts,js}`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>运行结果:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">&gt; ls -al test*
</span></span><span class="line"><span class="cl">-rw-r--r--@ <span class="m">1</span> ramsayleung  wheel   <span class="m">115</span> <span class="m">17</span> Feb 10:01 test_add.ts
</span></span><span class="line"><span class="cl">-rw-r--r--@ <span class="m">1</span> ramsayleung  wheel   <span class="m">762</span> <span class="m">17</span> Feb 10:01 test_approx_equal.ts
</span></span><span class="line"><span class="cl">-rw-r--r--@ <span class="m">1</span> ramsayleung  wheel  <span class="m">1536</span> <span class="m">17</span> Feb 10:38 test_assert.ts
</span></span><span class="line"><span class="cl">-rw-r--r--@ <span class="m">1</span> ramsayleung  wheel   <span class="m">187</span> <span class="m">17</span> Feb 10:38 test_async.ts
</span></span><span class="line"><span class="cl">-rw-r--r--@ <span class="m">1</span> ramsayleung  wheel   <span class="m">275</span> <span class="m">17</span> Feb 10:38 test_setup_teardown.ts
</span></span><span class="line"><span class="cl">-rw-r--r--@ <span class="m">1</span> ramsayleung  wheel   <span class="m">140</span> <span class="m">17</span> Feb 10:38 test_tag.ts
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt; npx tsx pray.ts -s <span class="s2">&#34;test_a*&#34;</span>
</span></span><span class="line"><span class="cl">passes:
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_async.ts::delayed test, execution time: 412us
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_assert.ts::test assertSetEqual happy path, execution time: 31us
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_assert.ts::test assertMapEqual unhappy path, execution time: 1175us
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_assert.ts::test assertMapEqual happy path, execution time: 32us
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_assert.ts::test assertMapEqual unhappy path, execution time: 85us
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_assert.ts::test assertArraySame happy path, execution time: 17us
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_assert.ts::test assertArraySame unhappy path, execution time: 54us
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_approx_equal.ts::Default margin throws exception, execution time: 111us
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_approx_equal.ts::Large margin not throws exception, execution time: 6us
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_approx_equal.ts::Relative error throw exception, execution time: 51us
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_approx_equal.ts::Default Relative error not throw exception: , execution time: 5us
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_add.ts::Sum of <span class="m">1</span> and 2, execution time: 4us
</span></span><span class="line"><span class="cl">fails:
</span></span><span class="line"><span class="cl">errors:
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="增加-t-tag-参数按标签运行测试case"><span class="section-num">3.4.4</span> 增加 -t/&ndash;tag 参数按标签运行测试case</h4>
<p>对于 <code>hope.test</code> 函数，我们还可以提供一个额外的参数，用于给这个test case 打标签:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">hope</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;Difference of 1 and 2&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">assert</span><span class="p">((</span><span class="mi">1</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">          <span class="p">[</span><span class="s1">&#39;math&#39;</span><span class="p">,</span> <span class="s1">&#39;fast&#39;</span><span class="p">])</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后通过 <code>-t/--tag</code> 按指定的tag来运行测试用例, 实现起来很容易:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">test</span><span class="p">(</span><span class="nx">comment</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">callback</span><span class="o">:</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="k">void</span><span class="p">,</span> <span class="nx">tags</span><span class="o">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">[])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">todo</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="sb">`</span><span class="si">${</span><span class="nx">caller</span><span class="p">()</span><span class="si">}</span><span class="sb">::</span><span class="si">${</span><span class="nx">comment</span><span class="si">}</span><span class="sb">`</span><span class="p">,</span> <span class="nx">callback</span><span class="p">,</span> <span class="nx">tags</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">run</span><span class="p">(</span><span class="nx">tag</span><span class="o">:</span> <span class="nx">string</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">todo</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="nx">filter</span><span class="p">(([</span><span class="nx">comment</span><span class="p">,</span> <span class="nx">test</span><span class="p">,</span> <span class="nx">tags</span><span class="p">])</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="nx">tag</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">true</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="nx">tags</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">tag</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">})</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="nx">forEach</span><span class="p">(([</span><span class="nx">comment</span><span class="p">,</span> <span class="nx">test</span><span class="p">,</span> <span class="nx">tags</span><span class="p">])</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// run the test, nothing change
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">parse</span> <span class="o">=</span> <span class="p">(</span><span class="nx">args</span><span class="o">:</span> <span class="nx">string</span><span class="p">[])</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">parsed</span> <span class="o">=</span> <span class="nx">minimist</span><span class="p">(</span><span class="nx">args</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="p">...</span>
</span></span><span class="line"><span class="cl">            <span class="nx">tag</span><span class="o">:</span> <span class="nx">parsed</span><span class="p">.</span><span class="nx">tag</span> <span class="o">||</span> <span class="nx">parsed</span><span class="p">.</span><span class="nx">t</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="kr">async</span> <span class="p">(</span><span class="nx">args</span><span class="o">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="p">...</span>
</span></span><span class="line"><span class="cl">            <span class="nx">hope</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">tag</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">...</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>test_tag.ts</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">assert</span> <span class="nx">from</span> <span class="s2">&#34;assert&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">hope</span> <span class="nx">from</span> <span class="s2">&#34;./hope&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">hope</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;Differene of 1 and 2&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">assert</span><span class="p">((</span><span class="mi">1</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="p">[</span><span class="s1">&#39;math&#39;</span><span class="p">,</span> <span class="s1">&#39;fast&#39;</span><span class="p">]);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">&gt; npx tsx pray.ts -t <span class="s2">&#34;math&#34;</span>
</span></span><span class="line"><span class="cl">passes:
</span></span><span class="line"><span class="cl"> file:///private/tmp/reinvent/unit_test/test_tag.ts::Differene of <span class="m">1</span> and 2, execution time: 5us
</span></span><span class="line"><span class="cl">fails:
</span></span><span class="line"><span class="cl">errors:
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="setup与teardown"><span class="section-num">3.4.5</span> setup与teardown</h4>
<p>正常的测试框架都是有 <code>setup</code> 与 <code>teardown</code> 函数的，可以指定在每个测试case 运行之前或之后的函数，比如运行测试case 前的数据准备，以为运行结束时的数据清理，我们的测试框架也可以支持这个功能：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">type</span> <span class="nx">CallbackType</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="k">void</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">Hope</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">...</span>
</span></span><span class="line"><span class="cl">  <span class="kr">private</span> <span class="nx">setupFn</span><span class="o">:</span> <span class="nx">CallbackType</span> <span class="o">|</span> <span class="kc">null</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kr">private</span> <span class="nx">teardownFn</span><span class="o">:</span> <span class="nx">CallbackType</span> <span class="o">|</span> <span class="kc">null</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">setup</span><span class="p">(</span><span class="nx">setupFn</span><span class="o">:</span> <span class="nx">CallbackType</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">setupFn</span> <span class="o">=</span> <span class="nx">setupFn</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">teardown</span><span class="p">(</span><span class="nx">teardownFn</span><span class="o">:</span> <span class="nx">CallbackType</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">teardownFn</span> <span class="o">=</span> <span class="nx">teardownFn</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">run</span><span class="p">(</span><span class="nx">tag</span><span class="o">:</span> <span class="nx">string</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">todo</span>
</span></span><span class="line"><span class="cl">      <span class="p">.</span><span class="nx">filter</span><span class="p">(([</span><span class="nx">comment</span><span class="p">,</span> <span class="nx">test</span><span class="p">,</span> <span class="nx">tags</span><span class="p">])</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nx">tag</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">true</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">tags</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">tag</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">})</span>
</span></span><span class="line"><span class="cl">      <span class="p">.</span><span class="nx">forEach</span><span class="p">(([</span><span class="nx">comment</span><span class="p">,</span> <span class="nx">test</span><span class="p">,</span> <span class="nx">tags</span><span class="p">])</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">setupFn</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="p">.</span><span class="nx">setupFn</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">          <span class="kr">const</span> <span class="nx">now</span> <span class="o">=</span> <span class="nx">microtime</span><span class="p">.</span><span class="nx">now</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">          <span class="nx">test</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">          <span class="kr">const</span> <span class="nx">elapsedInMicro</span> <span class="o">=</span> <span class="nx">microtime</span><span class="p">.</span><span class="nx">now</span><span class="p">()</span> <span class="o">-</span> <span class="nx">now</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="k">this</span><span class="p">.</span><span class="nx">passes</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">comment</span> <span class="o">+</span> <span class="sb">`, execution time: </span><span class="si">${</span><span class="nx">elapsedInMicro</span><span class="si">}</span><span class="sb">us`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">          <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">teardownFn</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="p">.</span><span class="nx">teardownFn</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="k">if</span> <span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">assert</span><span class="p">.</span><span class="nx">AssertionError</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="p">.</span><span class="nx">fails</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">comment</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="p">.</span><span class="nx">errors</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">comment</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>针对上述函数的测试:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">hope</span><span class="p">,</span> <span class="p">{</span> <span class="nx">assertEqual</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&#34;./hope&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">createFixtures</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">hope</span><span class="p">.</span><span class="nx">setup</span><span class="p">(</span><span class="nx">createFixtures</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">hope</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;Validate x should be 1&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assertEqual</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;X should be 1&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">cleanUp</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">hope</span><span class="p">.</span><span class="nx">teardown</span><span class="p">(</span><span class="nx">cleanUp</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="增加对-async-测试case-的支持"><span class="section-num">3.4.6</span> 增加对 async 测试case 的支持</h4>
<p>目前我们的test case 都只支持同步的函数, 我们可以增加上对 <code>Promise</code> 的支持, 这样我们可以使用以下的语法:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">hope</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;delayed test&#39;</span><span class="p">,</span> <span class="kr">async</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{...})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>实现方式也很直接: 一种就是判断传入函数的类型, 如果是同步函数则直接调用，如果是 async 函数, 那么就加上 <code>await</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">type</span> <span class="nx">SyncCallbackType</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="k">void</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">type</span> <span class="nx">AsyncCallbackType</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="k">void</span><span class="o">&gt;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">type</span> <span class="nx">CallbackType</span> <span class="o">=</span> <span class="nx">SyncCallbackType</span> <span class="o">|</span> <span class="nx">AsyncCallbackType</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">Hope</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">private</span> <span class="nx">todo</span><span class="o">:</span> <span class="p">[</span><span class="nx">string</span><span class="p">,</span> <span class="nx">CallbackType</span><span class="p">,</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span><span class="p">][]</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">    <span class="kr">private</span> <span class="nx">setupFn</span><span class="o">:</span> <span class="nx">CallbackType</span> <span class="o">|</span> <span class="kc">null</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kr">private</span> <span class="nx">teardownFn</span><span class="o">:</span> <span class="nx">CallbackType</span> <span class="o">|</span> <span class="kc">null</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">setup</span><span class="p">(</span><span class="nx">setupFn</span><span class="o">:</span> <span class="nx">CallbackType</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">setupFn</span> <span class="o">=</span> <span class="nx">setupFn</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">teardown</span><span class="p">(</span><span class="nx">teardownFn</span><span class="o">:</span> <span class="nx">CallbackType</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">teardownFn</span> <span class="o">=</span> <span class="nx">teardownFn</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">test</span><span class="p">(</span><span class="nx">comment</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">callback</span><span class="o">:</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="k">void</span><span class="p">,</span> <span class="nx">tags</span><span class="o">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">[])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">todo</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="sb">`</span><span class="si">${</span><span class="nx">caller</span><span class="p">()</span><span class="si">}</span><span class="sb">::</span><span class="si">${</span><span class="nx">comment</span><span class="si">}</span><span class="sb">`</span><span class="p">,</span> <span class="nx">callback</span><span class="p">,</span> <span class="nx">tags</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kr">private</span> <span class="kr">async</span> <span class="nx">runTest</span><span class="p">(</span><span class="nx">comment</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">test</span><span class="o">:</span> <span class="nx">CallbackType</span><span class="p">,</span> <span class="nx">tags</span><span class="o">:</span> <span class="nx">string</span><span class="p">[])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">setupFn</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">isAsync</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">setupFn</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="kr">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">setupFn</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="k">this</span><span class="p">.</span><span class="nx">setupFn</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="kr">const</span> <span class="nx">now</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">hrtime</span><span class="p">.</span><span class="nx">bigint</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">isAsync</span><span class="p">(</span><span class="nx">test</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="kr">await</span> <span class="nx">test</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">test</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="kr">const</span> <span class="nx">elapsedInMicro</span> <span class="o">=</span> <span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">hrtime</span><span class="p">.</span><span class="nx">bigint</span><span class="p">()</span> <span class="o">-</span> <span class="nx">now</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="nx">BigInt</span><span class="p">(</span><span class="mi">1000</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="p">.</span><span class="nx">passes</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">comment</span> <span class="o">+</span> <span class="sb">`, execution time: </span><span class="si">${</span><span class="nx">elapsedInMicro</span><span class="si">}</span><span class="sb">us`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">teardownFn</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">isAsync</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">teardownFn</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="kr">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">teardownFn</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="k">this</span><span class="p">.</span><span class="nx">teardownFn</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">assert</span><span class="p">.</span><span class="nx">AssertionError</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">this</span><span class="p">.</span><span class="nx">fails</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">comment</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">this</span><span class="p">.</span><span class="nx">errors</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">comment</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kr">async</span> <span class="nx">run</span><span class="p">(</span><span class="nx">tag</span><span class="o">:</span> <span class="nx">string</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kr">const</span> <span class="nx">tests</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">todo</span>
</span></span><span class="line"><span class="cl">              <span class="p">.</span><span class="nx">filter</span><span class="p">(([</span><span class="nx">comment</span><span class="p">,</span> <span class="nx">test</span><span class="p">,</span> <span class="nx">tags</span><span class="p">])</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="k">if</span> <span class="p">(</span><span class="nx">tag</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">true</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">                  <span class="k">return</span> <span class="nx">tags</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">tag</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">              <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="p">[</span><span class="nx">comment</span><span class="p">,</span> <span class="nx">test</span><span class="p">,</span> <span class="nx">tags</span><span class="p">]</span> <span class="k">of</span> <span class="nx">tests</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="kr">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">runTest</span><span class="p">(</span><span class="nx">comment</span><span class="p">,</span> <span class="nx">test</span><span class="p">,</span> <span class="nx">tags</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kr">private</span> <span class="nx">isAsync</span><span class="p">(</span><span class="nx">fn</span><span class="o">:</span> <span class="nx">CallbackType</span><span class="p">)</span><span class="o">:</span> <span class="nx">fn</span> <span class="nx">is</span> <span class="nx">AsyncCallbackType</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">constructor</span><span class="p">.</span><span class="nx">name</span> <span class="o">===</span> <span class="s1">&#39;AsyncFunction&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>pray.ts</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="kr">async</span> <span class="p">(</span><span class="nx">args</span><span class="o">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">options</span> <span class="o">=</span> <span class="nx">parse</span><span class="p">(</span><span class="nx">args</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">filenames</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">namePattern</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">select</span> <span class="o">??</span> <span class="s1">&#39;test*&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">options</span><span class="p">.</span><span class="nx">filenames</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">glob</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">options</span><span class="p">.</span><span class="nx">root</span><span class="si">}</span><span class="sb">/**/</span><span class="si">${</span><span class="nx">namePattern</span><span class="si">}</span><span class="sb">.{ts,js}`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="nx">f</span> <span class="k">of</span> <span class="nx">options</span><span class="p">.</span><span class="nx">filenames</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">absolutePath</span> <span class="o">=</span> <span class="nx">fileURLToPath</span><span class="p">(</span><span class="k">new</span> <span class="nx">URL</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span> <span class="kr">import</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">url</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="kr">await</span> <span class="kr">import</span><span class="p">(</span><span class="nx">absolutePath</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">await</span> <span class="nx">hope</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">tag</span><span class="p">);</span> <span class="c1">// 增加上await
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">output</span> <span class="o">===</span> <span class="s1">&#39;terse&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="nx">hope</span><span class="p">.</span><span class="nx">terse</span><span class="p">()</span> <span class="o">:</span> <span class="nx">hope</span><span class="p">.</span><span class="nx">verbose</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span><span class="kr">await</span> <span class="nx">hope</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">tag</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="参考"><span class="section-num">4</span> 参考</h2>
<p><a href="/zh/post/2025/reinvent_project/">回到本系列的目录</a></p>
<ul>
<li><a href="https://third-bit.com/sdxjs/unit-test/">https://third-bit.com/sdxjs/unit-test/</a></li>
<li><a href="https://blog.youxu.info/2008/11/30/pearl-in-smalltal/">https://blog.youxu.info/2008/11/30/pearl-in-smalltal/</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>ReInvent: 重新造轮子系列(序言)</title>
      <link>https://ramsayleung.github.io/zh/post/2025/reinvent_project/</link>
      <pubDate>Sun, 16 Feb 2025 22:10:00 -0800</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2025/reinvent_project/</guid>
      <description>1 起因与动机 最近在看 System Design By Example 这本书，主旨是通过设计和实现各种日常开发中常见的软件，以理解和提高系统设计(System Design)的能力。 每</description>
      <content:encoded><![CDATA[<h2 id="起因与动机"><span class="section-num">1</span> 起因与动机</h2>
<p>最近在看 <a href="https://third-bit.com/sdxjs/unit-test/">System Design By Example</a> 这本书，主旨是通过设计和实现各种日常开发中常见的软件，以理解和提高系统设计(System Design)的能力。</p>
<p>每个章节都会实现一个软件，然后还会有大量的习题来完善这个软件，以练带学。</p>
<p>而我最推崇，并且认为最好的学习方法就是：<a href="https://ramsayleung.github.io/zh/post/2022/feynman_technique/">费曼学习法(Feynman Technique)</a>, 其核心理念就是:</p>
<p><strong>学习一种新事物最好的方法是，用你的话讲给别人听。</strong></p>
<p><strong>通过向别人清楚的解说某一事物，来确认自己是否真的弄懂了这件事。</strong></p>
<p>所以说，学习最好的方式，是把你学到的东西教给别人。</p>
<p>因此，这个项目就是我在学习和理解 System Design By Example 这本书后，结合参考的论文和个人经验内化出来的学习成果。</p>
<p>也希望其他人也可以从中受益。</p>
<h2 id="项目"><span class="section-num">2</span> 项目</h2>
<p>GitHub: <a href="https://github.com/ramsayleung/reinvent">https://github.com/ramsayleung/reinvent</a></p>
<p>原书是用 node + Javascript 编写的，部分代码因API变更而变得不可用，因此本项目也做了对应修改，并将 Javascript 替换成 Typescript, 通过类型系统来降低维护成本。</p>
<ol>
<li><a href="/zh/post/2025/reinvent_unit_test/">单元测试框架</a></li>
<li><a href="/zh/post/2025/reinvent_file_backup/">文件备份</a></li>
<li><a href="/zh/post/2025/reinvent_selector/">HTML Selector</a></li>
</ol>
]]></content:encoded>
    </item>
  </channel>
</rss>

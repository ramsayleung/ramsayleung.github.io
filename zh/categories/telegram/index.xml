<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Telegram on 菠萝油与天光墟</title>
    <link>https://ramsayleung.github.io/zh/categories/telegram/</link>
    <description>Recent content in Telegram on 菠萝油与天光墟</description>
    <image>
      <title>菠萝油与天光墟</title>
      <url>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://ramsayleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.146.7</generator>
    <language>zh</language>
    <copyright>See this site&amp;rsquo;s source code here, licensed under GPLv3 ·</copyright>
    <lastBuildDate>Sun, 14 Sep 2025 10:39:32 -0700</lastBuildDate>
    <atom:link href="https://ramsayleung.github.io/zh/categories/telegram/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>基于贝叶斯算法的Telegram广告拦截机器人（二）：上线半月的故障、挑战与优化之路</title>
      <link>https://ramsayleung.github.io/zh/post/2025/%E5%9F%BA%E4%BA%8E%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%AE%97%E6%B3%95%E7%9A%84telegram%E5%B9%BF%E5%91%8A%E6%8B%A6%E6%88%AA%E6%9C%BA%E5%99%A8%E4%BA%BA%E4%BA%8C/</link>
      <pubDate>Sat, 13 Sep 2025 14:28:00 -0700</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2025/%E5%9F%BA%E4%BA%8E%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%AE%97%E6%B3%95%E7%9A%84telegram%E5%B9%BF%E5%91%8A%E6%8B%A6%E6%88%AA%E6%9C%BA%E5%99%A8%E4%BA%BA%E4%BA%8C/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; 引言&lt;/h2&gt;
&lt;p&gt;半个月前，我发布了一个基于贝叶斯算法的Telegram广告拦截机器人 &lt;code&gt;@BayesSpamSniperBot&lt;/code&gt; (&lt;a href=&#34;https://t.me/BayesSpamSniperBot&#34;&gt;https://t.me/BayesSpamSniperBot&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;项目地址：&lt;a href=&#34;https://github.com/ramsayleung/bayes_spam_sniper&#34;&gt;https://github.com/ramsayleung/bayes_spam_sniper&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;系列文章:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ramsayleung.github.io/zh/post/2025/%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AD%A6%E4%B9%A0%E7%9A%84telegram%E5%B9%BF%E5%91%8A%E6%8B%A6%E6%88%AA%E6%9C%BA%E5%99%A8%E4%BA%BA/&#34;&gt;基于贝叶斯算法的Telegram广告拦截机器人（一）：从问题到产品&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;尽管项目代码开源，但我始终以产品思维运营它。上线半个月以来，经历了故障、用户反馈与持续优化，现将这段经历分享出来。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="引言"><span class="section-num">1</span> 引言</h2>
<p>半个月前，我发布了一个基于贝叶斯算法的Telegram广告拦截机器人 <code>@BayesSpamSniperBot</code> (<a href="https://t.me/BayesSpamSniperBot">https://t.me/BayesSpamSniperBot</a>)</p>
<p>项目地址：<a href="https://github.com/ramsayleung/bayes_spam_sniper">https://github.com/ramsayleung/bayes_spam_sniper</a></p>
<p>系列文章:</p>
<ul>
<li><a href="/zh/post/2025/%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AD%A6%E4%B9%A0%E7%9A%84telegram%E5%B9%BF%E5%91%8A%E6%8B%A6%E6%88%AA%E6%9C%BA%E5%99%A8%E4%BA%BA/">基于贝叶斯算法的Telegram广告拦截机器人（一）：从问题到产品</a></li>
</ul>
<p>尽管项目代码开源，但我始终以产品思维运营它。上线半个月以来，经历了故障、用户反馈与持续优化，现将这段经历分享出来。</p>
<h2 id="上线即故障"><span class="section-num">2</span> 上线即故障</h2>
<p>没想到我的产品的第一个线上故障来得这么快，发布的时候直接不可用，把正常消息都给删了，用户在各种途径都向我反馈：</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-c7b58" hidden>
    <label for="zoomCheck-c7b58">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/delete_all_message_1.jpg"/> 
    
    
    </label>
</figure>


<figure>
    
    
    <input type="checkbox" id="zoomCheck-80e7c" hidden>
    <label for="zoomCheck-80e7c">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/delete_all_message_2.jpg"/> 
    
    
    </label>
</figure>

<p>故障的原因是因为我当时一直在收集垃圾广告的数据，太专注于垃圾广告数据，而忽略了收集的正常数据，
导致垃圾广告数据过多，消息都被认为是垃圾广告，被误删了。</p>
<p>通过补充大量正常消息数据，重新平衡训练集，模型逐渐恢复正常识别能力。</p>
<h2 id="挑战"><span class="section-num">3</span> 挑战</h2>
<h3 id="邮件与即时消息的差异"><span class="section-num">3.1</span> 邮件与即时消息的差异</h3>
<p>我在<a href="/zh/post/2025/%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AD%A6%E4%B9%A0%E7%9A%84telegram%E5%B9%BF%E5%91%8A%E6%8B%A6%E6%88%AA%E6%9C%BA%E5%99%A8%E4%BA%BA/">《基于贝叶斯算法的Telegram广告拦截机器人（一）：从问题到产品》</a>里面提到过：</p>
<blockquote>
<p>常见的 Telegram 广告机器人是大多是基于关键字的，通过匹配关键字进行文本拦截，非常容易被发垃圾广告的人绕过。</p>
<p>这不禁让我想起了保罗.格雷厄姆在《黑客与画家》一书在2002年介绍的情况：</p>
<p>当时电子邮件兴起，也有非常多的垃圾邮件，常见的垃圾广告拦截方式是关键字匹配+邮件地址黑名单，但是既低效也容易被绕过。</p>
<p>保罗.格雷厄姆就创造性地使用贝叶斯算法(Bayes Theorem)实现了一个广告拦截器, 效果竟然出奇地好。</p></blockquote>
<p>但产品上线之后，我发现聊天软件消息和Email虽然都是文字，还是有很大差别的:</p>
<p>Email 大多时候都是长文的，内容较长，并且大多情况，一封邮件上下文本身也是完整，就有较多的内容，较高的准确度来判断是否是广告。</p>
<p>而 Telegram, 微信这类的即时聊天软件，聊天消息大多都不长，可能把内容分成多条消息来发，就没有完整的上下文，比如:</p>
<blockquote>
<p>换U</p></blockquote>
<!--quoteend-->
<blockquote>
<p>找我</p></blockquote>
<p>单条消息很较难准确判断是否是广告，所以对即时消息做广告拦截本身就更难, 「短文本+无上下文」是NLP中的经典难题，也是本项目最大的技术挑战。</p>
<h3 id="漏删与误删"><span class="section-num">3.2</span> 漏删与误删</h3>
<p>漏删广告与误删消息是相互矛盾的结果</p>
<p>因为如果想要提高拦截度，自然就需要把置信度降低，把疑似是广告的消息都拦截掉，但是因为拦截强度的上升，又会把正常消息误删。</p>
<p>如果想要不误删消息，那么难免需要增加拦截的阈值，只有超过一定的置信阈值才拦截，这样准确度增加了，难免就会存在漏删广告的可能性。</p>
<p>那么是否可以既准确拦截广告，又避免误删正常消息呢？</p>
<p>在即时消息上下文不齐整，消息短而密集的特性下，可以基本是不可能的。</p>
<p>而用户对消息被误删，以及垃圾广告被漏删的容忍度也是不同的，漏删广告，群成员可以举报或管理员删，但是误删就没法恢复.</p>
<p>所以我只能是提高置信度，把阈值设置成95%, 也就是说只有模型认为超过95%的概率这个是广告，才能把这条消息删掉，虽然会增加漏删广告的概率，但是起码能保证不误删正常消息。</p>
<h2 id="优化之路"><span class="section-num">4</span> 优化之路</h2>
<h3 id="自动删除消息"><span class="section-num">4.1</span> 自动删除消息</h3>
<p>产品上线之后，很快就有用户来试用了，然后有用户就提了一个非常好的优化建议。</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-28a2c" hidden>
    <label for="zoomCheck-28a2c">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/detect_spam_and_ban_user.jpg"/> 
    
    
    </label>
</figure>

<p>这个警告的消息不会自动删除，如果有很多人在群里发广告，那么群里就会有一堆这样的消息，也算是对群消息的污染。</p>
<p>所以用户建议:</p>
<blockquote>
<p>可以发这个提醒，但在几分钟后也把这个提醒消息删除掉</p></blockquote>
<p>我觉得这是个非常好的优化体验，因为就把这个功能给加上了，提醒消息本身会在5分钟后自动删除。</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-3c682" hidden>
    <label for="zoomCheck-3c682">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/auto_delete_warning_message.jpg"/> 
    
    
    </label>
</figure>

<p>倾听用户的声音是非常重要的，他们可能就会从他们的角度提出非常好的建议。</p>
<p>但是不要盲目听从用户的建议，比如也有用户建议：</p>
<blockquote>
<p>我觉得还应该有以下功能.</p>
<ol>
<li>恢复消息, 恢复用户. (让管理员恢复误删的消息和用户)</li>
<li>主动投喂正常消息. (让管理员主动投喂一些消息. 比如, 群里面昨天 的消息, 随便选一些正常的, 投喂给机器人)</li>
</ol></blockquote>
<p>恢复消息这个功能没有太大必要，并且也不实用，因为恢复消息这个功能本身就很微妙，是直接恢复被删除的消息呢，还是重新发一条新消息？</p>
<p>如：</p>
<blockquote>
<ul>
<li>2025-09-09 10:01:00 张三: 我今天吃了鸡翅</li>
<li>2025-09-09 10:02:00 李四：鸡翅有啥好的（被误删消息）</li>
<li>2025-09-09 10:03:00 王五：人家就喜欢吃，你管得着嘛</li>
</ul></blockquote>
<p>如果是直接恢复被删除的消息，当前时间是 <code>2025-09-09 11:00:00</code> ，把消息恢复之后，还有人会手动刷历史消息，查找旧消息么？</p>
<p>Telegram客户端不一定支持会跳转被恢复的旧消息，这意味着，你恢复误删的消息，也没人看得到。</p>
<p>假如是重新发一条新消息 <code>鸡翅有啥好的</code>, 因为缺失了上下文，群里的人反而会疑惑，你在说什么。</p>
<p>解决误删问题本质是提高拦截的准确率，而非考虑如何恢复被误删消息，准确率提高了，误删就会减少，
自然就不需要考虑如何恢复消息，用户体验还会更好.</p>
<p>而主动投喂消息这个想法有点理所当然了。</p>
<p>没有任何群管理员有意愿帮忙训练这个机器人，对用户而言，他们只想要一个好用的广告拦截机器人，至于怎么开发，训练出来的，用户并不在乎。</p>
<p>所以用户不会有意愿和动力来优化这个机器人，不好用就再换一个好了，更何况，逐条消息收集的效率实在太慢太慢了，
所以我后面想出了一个比手工收集数据提效至少100倍的主意。</p>
<h3 id="过滤重复消息"><span class="section-num">4.2</span> 过滤重复消息</h3>
<p>发现人难免会有误区，总会以为别人会和自己一样，之前看到发垃圾广告的人的时候，总会觉得他们是正常的用户手工发。</p>
<p>但是最近几天发现了一些规律，有用户把同一条消息反复发，不同的群还是发同样的内容
即使是复制粘贴也难免会多个或者少个空格，然后消息被删了还一直发同样的内容。</p>
<p>此外，还有一些群，内容的聊天内容都是广告，我还很奇怪，大家都在发广告，正常用户不都跑了嘛?</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-fc97b" hidden>
    <label for="zoomCheck-fc97b">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/spam_group.jpg"/> 
    
    
    </label>
</figure>

<p>此时，我才意识到，发消息的都是机器人。</p>
<p>所以我加了个优化，计算消息内容的 hash 值，保存到数据库，并为这个字段建立索引。</p>
<p>后面检测消息的时候，先根据 hash 值查询，检查是否存在已有的消息，如果消息已经存在且已经被标记成广告或者正常消息，那么就无需再使用模型检测，可以直接返回之前的检测结果。</p>
<p>这样既提高了准确度，也优化了性能，也减少了人工干预的成本。</p>
<p>同一个用户如果在同一个群发了三条广告，那么就会自动被封禁掉，也就是相同的广告只要发三条，就会马上被自动封禁掉。</p>
<h3 id="自动收集数据"><span class="section-num">4.3</span> 自动收集数据</h3>
<p>使用机器学习算法来实现一个类似的垃圾广告过滤器并不难，困难的持续收集高质量的训练数据，训练数据是非常宝贵的，毕竟数据才是核心资产。</p>
<p>而对于我这个产品来说，最难的是冷启动时的训练数据问题：</p>
<p>因为没有训练数据，模型就不准确，模型不好用就不会有人使用，自然也无法通过用户来收集垃圾广告数据，就无法良性循环，
存在一个鸡生蛋，还是蛋生鸡的问题。</p>
<p>所以冷启动时，我是手动加了非常多的 Telegram大群，然后人工在里面收集垃圾广告.</p>
<p>但是这个效率实在是太低了，我收集了快一周才只有几百条数据，
一个是我无法一直盯着各个群，另外是这种20w的大群，一般都会有几个管理员，会手工删除广告，一会没有看垃圾广告数据就会被删掉了。</p>
<p>这样手工收集数据实在在太痛苦了，我就在想有没有什么办法自动收集数据呢？</p>
<p>我本来想的是直接把我的机器人拉到这些大群里面，即使没有管理员权限无法删除消息，也可以收集数据嘛，后面才意识到 Telegram 有个规定，只有群管理员才有权限加机器人，因为我不是管理员，所以自动没有权限添加机器人。</p>
<p>但是 telegram 的客户端是开源的，他们提供了 <a href="https://github.com/tdlib/td">tdlib</a> <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>这个跨平台的 C++ 库便于社区构建第三方的 Telegram 客户端，那么我自然可以使用这个库来登录我自己的账号，然后使用我的模型来过滤消息，然后把疑似广告的数据都收集起来，我再人工确认下。</p>
<p>（顺便说一下，tdlib 和 <a href="https://github.com/tdlib/telegram-bot-api">telegram-bot-api</a> <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>这两个库竟然都是同一个<a href="https://github.com/levlam">作者 Aliaksei Levin</a> <sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>在维护，实在是太强了。）</p>
<p>我现在需要做的就是添加各种大群，然后程序就会自动监听并收集数据，我再人工批量确认下。</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-b4635" hidden>
    <label for="zoomCheck-b4635">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/spam_group_list.jpg"/> 
    
    
    </label>
</figure>


<figure>
    
    
    <input type="checkbox" id="zoomCheck-153f7" hidden>
    <label for="zoomCheck-153f7">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/telegram_data_collector.jpg"/> 
    
    
    </label>
</figure>


<figure>
    
    
    <input type="checkbox" id="zoomCheck-cbf5b" hidden>
    <label for="zoomCheck-cbf5b">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/maybe_spam_list.jpg"/> 
    
    
    </label>
</figure>

<p>实现起来也不复杂， 200行代码就实现了这个监听消息，分析，并且收集的功能。</p>
<p>得益于这个自动化的数据收集程序，我1周不到就收集了近上万条的高质量训练数据了，效率实在高太多太多了。</p>
<p>懒惰真的是程序员的美德, 这个经历再次证明：自动化工具往往能成倍提升效率，这正是工程师价值的体现.</p>
<h2 id="推广"><span class="section-num">5</span> 推广</h2>
<p>所谓酒香也怕巷子深，没有用户使用，代码写得再好也没有意义。从产品角度，运营推广至关重要。</p>
<p>作为个人开发者，我没有大量粉丝关注，也没有营销预算，因此采用了传统的推广方式：撰写博客并在相关社区分享。</p>
<p>我撰写了两篇双语博客文章，中文版本分享至：</p>
<ul>
<li>V2EX: <a href="https://www.v2ex.com/t/1156542">我写一个基于贝叶斯算法的 Telegram 广告拦截机器人</a></li>
<li>Emacs China: <a href="https://emacs-china.org/t/emacs-telegram/30043">分享一下我用Emacs写的Telegram广告拦截机器人</a></li>
<li>微信公众号「宫孙说」：<a href="https://mp.weixin.qq.com/s/Sgq9vDqpHykwge11bwZJrw">https://mp.weixin.qq.com/s/Sgq9vDqpHykwge11bwZJrw</a></li>
<li>项目被收录到<a href="https://www.ruanyifeng.com/blog/2025/09/weekly-issue-364.html">阮一峰的科技爱好者周刊（第 364 期）</a></li>
</ul>
<p>英文版本发布至：</p>
<ul>
<li>Reddit: <a href="https://old.reddit.com/r/rails/comments/1n6p791/built_my_first_rails_project_a_telegram_spam/">Built my first Rails project: A Telegram spam blocker bot</a> - 获得一些讨论</li>
<li>HackerNews：<a href="https://news.ycombinator.com/item?id=45105908">https://news.ycombinator.com/item?id=45105908</a></li>
<li>Twitter: <a href="https://x.com/foobar_ramsay/status/1967277792267247916">https://x.com/foobar_ramsay/status/1967277792267247916</a></li>
</ul>
<p>虽然推广效果有限，但这些努力为项目带来了最初的用户关注。</p>
<h2 id="成果与数据"><span class="section-num">6</span> 成果与数据</h2>
<p>上线半个月，截止到目前为止, 已经有超过80个群使用过这个机器人，用户数已经比我预期要多了:</p>
<table>
  <thead>
      <tr>
          <th>指标</th>
          <th>数值</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>GitHub Stars</td>
          <td>106</td>
      </tr>
      <tr>
          <td>使用群组数</td>
          <td>83</td>
      </tr>
      <tr>
          <td>训练数据量</td>
          <td>10543</td>
      </tr>
  </tbody>
</table>
<p>最开心的是看到我自己的程序在这些群成功拦截垃圾广告，就很有成就感，证明我做的东西真的能用户解决问题。
<img loading="lazy" src="/ox-hugo/detect_spam_success.jpg"></p>
<h2 id="结语"><span class="section-num">7</span> 结语</h2>
<p>这半个月的运营让我深刻体会到：产品不是代码写完就结束，而是从用户反馈中不断迭代的开始。</p>
<p>产品是需要持续运营的，而写代码只是产品生命周期的其中一个环节，甚至不是最耗费时间的环节。</p>
<p>下一步，我计划进一步优化模型准确率，并探索多语言支持，也欢迎关注我的频道或提交Issue一起讨论。</p>
<ul>
<li>开源地址：<a href="https://github.com/ramsayleung/bayes_spam_sniper">https://github.com/ramsayleung/bayes_spam_sniper</a></li>
<li>立即体验：<a href="https://t.me/BayesSpamSniperBot">https://t.me/BayesSpamSniperBot</a></li>
<li>我的频道（菠萝油与天光墟）: <a href="https://t.me/pipeapplebun">https://t.me/pipeapplebun</a></li>
</ul>
<div class="qr-container" center>
<img src="/ox-hugo/qrcode_gh_e06d750e626f_1.jpg" alt="qrcode_gh_e06d750e626f_1.jpg" class="qr-container" width="160px" height="160px" center="t" />
公号同步更新，欢迎关注👻
</div>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://github.com/tdlib/td">https://github.com/tdlib/td</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://github.com/tdlib/telegram-bot-api">https://github.com/tdlib/telegram-bot-api</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="https://github.com/levlam">https://github.com/levlam</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>基于贝叶斯算法的Telegram广告拦截机器人（一）：从问题到产品</title>
      <link>https://ramsayleung.github.io/zh/post/2025/%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AD%A6%E4%B9%A0%E7%9A%84telegram%E5%B9%BF%E5%91%8A%E6%8B%A6%E6%88%AA%E6%9C%BA%E5%99%A8%E4%BA%BA/</link>
      <pubDate>Thu, 28 Aug 2025 23:45:00 -0700</pubDate>
      <guid>https://ramsayleung.github.io/zh/post/2025/%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AD%A6%E4%B9%A0%E7%9A%84telegram%E5%B9%BF%E5%91%8A%E6%8B%A6%E6%88%AA%E6%9C%BA%E5%99%A8%E4%BA%BA/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://ramsayleung.github.io/en/post/2025/a_telegram_spam_blocker_bot_based_on_bayesian/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;系列文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ramsayleung.github.io/zh/post/2025/%E5%9F%BA%E4%BA%8E%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%AE%97%E6%B3%95%E7%9A%84telegram%E5%B9%BF%E5%91%8A%E6%8B%A6%E6%88%AA%E6%9C%BA%E5%99%A8%E4%BA%BA%E4%BA%8C/&#34;&gt;基于贝叶斯算法的Telegram广告拦截机器人（二）：上线半月的故障、挑战与优化之路&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;序言&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; 序言&lt;/h2&gt;
&lt;p&gt;我花了一周末时间，写了一个自学习的 Telegram 广告拦截机器人 &lt;code&gt;@BayesSpamSniperBot&lt;/code&gt; (&lt;a href=&#34;https://t.me/BayesSpamSniperBot&#34;&gt;https://t.me/BayesSpamSniperBot&lt;/a&gt;)，项目开源在：&lt;a href=&#34;https://github.com/ramsayleung/bayes_spam_sniper&#34;&gt;https://github.com/ramsayleung/bayes_spam_sniper&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;telegram&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1.1&lt;/span&gt; Telegram&lt;/h3&gt;
&lt;p&gt;Telegram 是一个流行的即时通讯软件，类似微信，Whatsapp，已有超过10亿用户，支持许多强大的功能，如聊天记录云存储，支持Linux, Mac, Windows, Android, IOS, Web 多个平台，客户端都是开源，类似微信公众号的频道功能(Channel)，还有我见过的最强大的机器人系统。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><a href="https://ramsayleung.github.io/en/post/2025/a_telegram_spam_blocker_bot_based_on_bayesian/">English Version</a></p>
<p>系列文章：</p>
<ul>
<li><a href="/zh/post/2025/%E5%9F%BA%E4%BA%8E%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%AE%97%E6%B3%95%E7%9A%84telegram%E5%B9%BF%E5%91%8A%E6%8B%A6%E6%88%AA%E6%9C%BA%E5%99%A8%E4%BA%BA%E4%BA%8C/">基于贝叶斯算法的Telegram广告拦截机器人（二）：上线半月的故障、挑战与优化之路</a></li>
</ul>
<h2 id="序言"><span class="section-num">1</span> 序言</h2>
<p>我花了一周末时间，写了一个自学习的 Telegram 广告拦截机器人 <code>@BayesSpamSniperBot</code> (<a href="https://t.me/BayesSpamSniperBot">https://t.me/BayesSpamSniperBot</a>)，项目开源在：<a href="https://github.com/ramsayleung/bayes_spam_sniper">https://github.com/ramsayleung/bayes_spam_sniper</a></p>
<h3 id="telegram"><span class="section-num">1.1</span> Telegram</h3>
<p>Telegram 是一个流行的即时通讯软件，类似微信，Whatsapp，已有超过10亿用户，支持许多强大的功能，如聊天记录云存储，支持Linux, Mac, Windows, Android, IOS, Web 多个平台，客户端都是开源，类似微信公众号的频道功能(Channel)，还有我见过的最强大的机器人系统。</p>
<h2 id="缘起"><span class="section-num">2</span> 缘起</h2>
<p>平时我跑步和做饭都习惯会听播客，而《<a href="https://podcasts.apple.com/us/podcast/%E8%BD%AF%E4%BB%B6%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/id1147186605">软件那些事儿</a>》<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>是我最喜欢的播客之一，主持人是<a href="https://liuyandong.com/sample-page">栋哥</a> <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, 我也因为喜欢栋哥的节目，趁机加了栋哥的电报频道。</p>
<p>栋哥的电报频道<a href="https://t.me/huruanhuying">汗牛充栋</a> <sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>主要是用来发布播客信息，
之前打开过一段时间的留言功能，没有想到引来了一堆的币圈的用户来发广告，因此将评论功能就关了：</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-be4f5" hidden>
    <label for="zoomCheck-be4f5">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/spam_concert.jpg"/> 
    
    
    </label>
</figure>

<p>另外一个我关注的频道 <a href="https://t.me/kaedeharakazuha17">Ray Tracing</a> <sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>也在吐槽币圈的广告，不堪其忧:</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-d541b" hidden>
    <label for="zoomCheck-d541b">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/ray_tracing_spam.jpg"/> 
    
    
    </label>
</figure>

<h2 id="黑客与画家"><span class="section-num">3</span> 黑客与画家</h2>
<p>常见的 Telegram 广告机器人是大多是基于关键字的，通过匹配关键字进行文本拦截，非常容易被发垃圾广告的人绕过。</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-1401f" hidden>
    <label for="zoomCheck-1401f">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/keyword_based_blocker.jpg"/> 
    
    
    </label>
</figure>

<p>被绕过的话主要是靠管理员人工删除。</p>
<p>这不禁让我想起了保罗.格雷厄姆在《黑客与画家》一书在2002年介绍的情况：</p>
<p>当时电子邮件兴起，也有非常多的垃圾邮件，常见的垃圾广告拦截方式是关键字匹配+邮件地址黑名单，但是既低效也容易被绕过。</p>
<p>保罗.格雷厄姆就创造性地使用贝叶斯算法(Bayesian Theorem)实现了一个<a href="https://paulgraham.com/spam.html">广告拦截器</a> <sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>, 效果竟然出奇地好。</p>
<p>对于 Telegram 的垃圾广告而言，这不是类似的问题嘛？</p>
<p>那我岂不是可以用类似的解决方案来解决 Telegram 广告的问题嘛</p>
<h3 id="贝叶斯定理"><span class="section-num">3.1</span> 贝叶斯定理</h3>
<p>提起概率算法，最经典的例子莫过于「抛硬币」这一古典概率——每次抛掷都是独立事件，前一次的结果不会影响下一次的概率。</p>
<p>然而，现实中的很多场景并不能像抛硬币那样无限重复，事件之间也往往并非相互独立。</p>
<p>这时候，贝叶斯定理就显示出其独特的价值。</p>
<p>它是一种「由果溯因」的概率方法，用于在已知某些证据的条件下，更新我们对某一假设的置信程度。</p>
<p>换句话说，贝叶斯算法能够根据不断出现的新证据，动态调整对某个事件发生概率的估计。</p>
<p>简单来说，就像人脑的学习过程：我们原本有一个初步认知，在获得新信息之后，会据此修正原有的看法，进而调整下一步的行动。</p>
<p>保罗·格雷厄姆就是通过贝叶斯定理，不断地根据已被标记为垃圾广告或者非垃圾广告的邮件，对新出现的邮件进行分类，判断其是否为垃圾广告。</p>
<p>如果想更直观地理解贝叶斯定理，推荐两个讲解清晰、生动易懂的视频：</p>
<ul>
<li>《<a href="https://www.youtube.com/watch?v=Pu675cHJ7bg">Bayes&rsquo; Theorem 贝叶斯定理</a>》<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup>(中文)</li>
<li>《<a href="https://www.youtube.com/watch?v=HZGCoVF3YvM">Bayes theorem, the geometry of changing beliefs</a>》<sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup>(英文)</li>
</ul>
<h2 id="架构设计"><span class="section-num">4</span> 架构设计</h2>
<p>Telegram Bot 支持两种与 Telegram 服务器交互的模式，分别是：</p>
<ol>
<li>
<p>Webhook: Telegram 服务器会在 Bot 收到新消息时主动回调此前 Bot 注册的地址，Bot Server 只需要处理回调的消息</p>
</li>
<li>
<p>Long Polling: Bot Server 一直轮询 Telegram 服务器，看是否有新消息，有就处理，本机器人使用的是此模式</p>

    <figure>
        
        
        <input type="checkbox" id="zoomCheck-ca97a" hidden>
        <label for="zoomCheck-ca97a">
        
        
        <img class="zoomCheck" loading="lazy" src="/ox-hugo/webhook_vs_long_polling.jpg"/> 
        
        
        </label>
    </figure>

</li>
</ol>
<h4 id="消息分析"><span class="section-num">4.0.1</span> 消息分析</h4>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-e2518" hidden>
    <label for="zoomCheck-e2518">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/spam_analyze.jpg"/> 
    
    
    </label>
</figure>

<p>Bot Server 收到消息之后，会派发到单独的 <code>telegram_bot_worker</code> 处理，然后根据预训练的模型判断是否是垃圾广告，如果是，调用 Bot API 删除消息。</p>
<h4 id="封禁并训练"><span class="section-num">4.0.2</span> 封禁并训练</h4>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-04d7c" hidden>
    <label for="zoomCheck-04d7c">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/mark_spam_and_ban_user.jpg"/> 
    
    
    </label>
</figure>

<p>Bot Server 收到消息之后，会派发到单独的 <code>telegram_bot_worker</code> 处理， <code>telegram_bot_worker</code> 会调用 bot API 删除消息并封禁用户，并插入一条训练数据，标记为垃圾广告(spam)</p>
<p>保存训练数据会触发 hook, 创建一个训练消息，投递到消息队列 <code>training</code>, 会有另外的 worker <code>classifier_trainer</code> 订阅 <code>training</code> 消息，并使用新消息重新训练和更新模型</p>
<p>使用队列和后台进程 <code>classifier_trainer</code> 来训练任务而非直接使用 <code>telegram_bot_worker</code> 主要是为了返回 Bot请求与训练模型解耦，否则随着模型规模的增大，训练时间会越来越长，响应时间会越来越长。</p>
<p>解耦后就易于水平扩展了，在设计上为后续性能优化和扩展预留空间。</p>
<h2 id="why-rails"><span class="section-num">5</span> Why Rails</h2>
<p>看了我项目源代码的朋友，难免会浮起疑问，为什么使用 Ruby on Rails 实现的?</p>
<p>因为我工作中会有用到JVM系的编程语言(Java/Kotlin/Scala)和 Rust, 所以我对 Java/Rust 相当熟悉，又觉得模型训练可能对性能要求很高，所以最开始的<a href="https://gist.github.com/ramsayleung/5848af0177a70a01d41f624e361b1b5d">原型</a> <sup id="fnref:8"><a href="#fn:8" class="footnote-ref" role="doc-noteref">8</a></sup>我是用 Rust 实现的，大概就花了半个多小时。</p>
<p>但是当我想把原型扩展成 Telegram 机器人时，就发现需要处理相当多与机器人交互的逻辑，主要涉及到 API 与数据库操作，其中大部分都是和模型无关的，因此我又想到了 Ruby on Rails。</p>
<p>论单个工程师做产品原型，就我个人而言，实在是没有比 <code>Ruby on Rails</code> 更高效的框架了，因此我就切换到 Ruby on Rails 去。</p>
<p>Rails 8 的新特性，把 Rails 向所谓的「一人全栈框架」又推进了不少，通过关系型数据库内置对消息队列 <code>Solid Queue</code> 的支持，甚至不再需要类似 Redis 这样的存储来支持队列实现。</p>
<p>架构设计中的队列和后台进程，只需要几行代码就实现了，甚至不需要额外的配置，如果队列不存在，框架会自动创建：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">ClassifierTrainerJob</span> <span class="o">&lt;</span> <span class="no">ApplicationJob</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># Job to train classifier asynchronously</span>
</span></span><span class="line"><span class="cl">  <span class="n">queue_as</span> <span class="ss">:training</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">def</span> <span class="nf">perform</span><span class="p">(</span><span class="n">group_id</span><span class="p">,</span> <span class="n">group_name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="no">SpamClassifierService</span><span class="o">.</span><span class="n">rebuild_for_group</span><span class="p">(</span><span class="n">group_id</span><span class="p">,</span> <span class="n">group_name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>得益于 Rails 强大的 ORM 框架，内置各种生命周期的 hook, 对新插入训练数据后触发后台进程重新训练模型的代码也只有寥寥几行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">TrainedMessage</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># Automatically train classifier after creating/updating a message</span>
</span></span><span class="line"><span class="cl">  <span class="n">after_create</span> <span class="ss">:retrain_classifier</span>
</span></span><span class="line"><span class="cl">  <span class="n">after_destroy</span> <span class="ss">:retrain_classifier</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">def</span> <span class="nf">retrain_classifier</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># For efficiency, we could queue this as a background job</span>
</span></span><span class="line"><span class="cl">    <span class="no">ClassifierTrainerJob</span><span class="o">.</span><span class="n">perform_later</span><span class="p">(</span><span class="n">group_id</span><span class="p">,</span> <span class="n">group_name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在 Rails 各种内置强大工具的加持下，我只用了一天时间就把整个机器人的功能给实现出来了。</p>
<p>看到这里，有朋友可能会担心性能，觉得 Ruby 性能不行，并且还是动态语言，不好维护。</p>
<p>我持有的观点还是和之前的博文《<a href="https://ramsayleung.github.io/zh/post/2024/%E7%BC%96%E7%A8%8B%E5%8D%81%E5%B9%B4%E7%9A%84%E6%84%9F%E6%82%9F/">编程十年的感悟</a>》<sup id="fnref:9"><a href="#fn:9" class="footnote-ref" role="doc-noteref">9</a></sup>一样：</p>
<p>先跑起来再说，先做个原型跑起来，有用户愿意用你的产品再说，
当运行速度成为瓶颈时，你的业务肯定非常大了，肯定有足够的资源招一打程序员把项目优化成 Rust/C++, 甚至是汇编。</p>
<p>没有用户，谈性能只是个伪命题。</p>
<p>至于动态语言一时爽，代码维护火葬场，我也是相当认同的。</p>
<p>因此我在为团队选型时我绝对不会考虑动态语言，只会上编译型的语言，
甚至是Rust这种强类型，但是现在只有我一个人来做原型，我自己是什么顺手就用什么的。</p>
<h3 id="vibe-coding"><span class="section-num">5.1</span> Vibe Coding?</h3>
<p>Vibe Coding等AI编程概念可谓是铺天盖地，甚嚣尘上，难免会有朋友好奇我这个项目是否 Vibe Coding生成的。</p>
<p>答案是，我尝试了几个小时之后，直接放弃了， Claude 4 和 Gemini 2.5 Pro 都试过了。</p>
<p>开始是使用 Rust + Cloudflare Worker 的技术栈，Rust + Cloudflare Worker 是个相当小众的领域，训练语料少，Vibe Coding 出来的代码编译无法通过</p>
<p>后面换成 Ruby on Rails, 问题还更严重了，Ruby 是弱类型的动态语言，语法写起来和英语一样，Rails 又还有很多黑魔法，所以到运行时才报错，代码生成省下来的开发时间，debug过程全补回来了。</p>
<p>另外一个是 Vibe Coding 生成的代码很多都是没有设计的，比如把 <code>Classifier</code> 和 <code>TrainedMessage</code> 的类耦合在一起，在 <code>Classifier</code> 里面持久化 <code>TrainedMessage</code></p>
<p>又直接在 <code>telegram_bot_worker</code> 进程里面，接收到训练信息马上同步训练新模型，训练完再返回调用命令的结果，完全没考虑解耦接收训练语料和模型训练。</p>
<p>只能说 Vibe Coding 非常适合 Rust 这样的强类型编译型语言，生成的出来的代码起码要编译通过，保证质量的下限。</p>
<p>而对于那些说「一行代码都不用写/改，就能做出一个APP」的言论，此时我脑海不禁升起疑问？</p>
<p>究竟是代码好到一行都不用改？还是开发者看不出症结所在，所以一行都不改？</p>
<h2 id="设计理念"><span class="section-num">6</span> 设计理念</h2>
<p>开发完原型，在机器人整体功能可用之后，脑中又有不少的想法冒出来，当时就马不停蹄地给机器人加上，
因此机器人就支持快十个命令，还支持私聊和群聊的不同模式。</p>
<p>加着加着，连我自己都疑惑起来：这么多的功能，有点像国内的各种大而全的App了，我不禁对此产生疑问：</p>
<p>真的会有用户用这么多功能么？真的有用户会用这些功能嘛？太多功能不是也会有额外的心智负担嘛?</p>
<p>我最喜欢的广告拦截器 <a href="https://ublockorigin.com/">Ublock Origin</a> <sup id="fnref:10"><a href="#fn:10" class="footnote-ref" role="doc-noteref">10</a></sup>拦截效果非常好，但是使用起来却非常简单，易上手。</p>
<p>想起《<a href="https://ramsayleung.github.io/zh/post/2025/a_philosophy_of_software_design/">软件设计的哲学</a>》<sup id="fnref:11"><a href="#fn:11" class="footnote-ref" role="doc-noteref">11</a></sup>里面提到的设计理念，接口应该是简单易用的，但是功能可以是复杂丰富的。</p>
<p>因此我只能忍痛把此前新增的，但与核心功能无关的命令都删掉；</p>
<p>此外考虑到可能绝大多数的用户都没有技术背景，也可能不知道命令怎么用，因此将命令尽可能地优化成按钮，用户可以直接点击，改善易用性:</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-e207f" hidden>
    <label for="zoomCheck-e207f">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/start_zh.jpg"/> 
    
    
    </label>
</figure>


<figure>
    
    
    <input type="checkbox" id="zoomCheck-ca4b6" hidden>
    <label for="zoomCheck-ca4b6">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/help_page_zh.jpg"/> 
    
    
    </label>
</figure>

<p>我还希望可以支持多语言，比如根据用户的系统语言，自动切换到中文或者英文，这个就需要不同语言的文案。</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-5f8d5" hidden>
    <label for="zoomCheck-5f8d5">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/start_en.jpg"/> 
    
    
    </label>
</figure>


<figure>
    
    
    <input type="checkbox" id="zoomCheck-bc48d" hidden>
    <label for="zoomCheck-bc48d">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/help_en.jpg"/> 
    
    
    </label>
</figure>

<p><a href="https://github.com/ramsayleung/bayes_spam_sniper/blob/master/app/services/telegram_botter.rb">telegram_botter.rb</a> 这个核心服务类里面有超过60%的代码都是为了此类易用性改进而引入的。</p>
<p>简单留给用户，复杂留给开发</p>
<h3 id="如何使用"><span class="section-num">6.1</span> 如何使用</h3>
<p>只需两步，机器人就可以自动工作。</p>
<ul>
<li>将机器人（@BayesSpamSniperBot）<a href="https://t.me/BayesSpamSniperBot?startgroup=true">添加到您的群组</a></li>
<li>给予机器人管理员权限（删除消息(delete message )，封禁用户权限(ban user )）</li>
</ul>
<p>完成这两步后，机器人不仅会自动开始工作，自动识别群内广告，然后删除文本消息，如果发送垃圾广告超过3次，将会被封禁；</p>
<p>还会随着社区的使用（通过 <code>/markspam</code> 和 <code>/feedspam</code> ），变得越来越智能</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-28a2c" hidden>
    <label for="zoomCheck-28a2c">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/detect_spam_and_ban_user.jpg"/> 
    
    
    </label>
</figure>

<p>此机器人的设计理念就是最小化打扰管理员与用户，提供简单的操作命令，并最大可能地自动化，
所以本机器人只提供以下三个命令（支持&quot;/&ldquo;开头自动补全）:</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-ecf1f" hidden>
    <label for="zoomCheck-ecf1f">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/command_auto_completion.jpg"/> 
    
    
    </label>
</figure>

<h4 id="markspam"><span class="section-num">6.1.1</span> <code>/markspam</code></h4>
<p>删除垃圾消息并封禁用户, 需要管理员权限。</p>
<p>在某条你想封禁的信息下回复 <code>/markspam</code>, 机器人就会自动把该条消息删除被封禁用户.</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-14d59" hidden>
    <label for="zoomCheck-14d59">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/markspam_2.jpg"/> 
    
    
    </label>
</figure>

<p>(消息也被删除)
<img loading="lazy" src="/ox-hugo/markspam.jpg"></p>
<p>与常见的群管理机器人不同，这条命令不仅会删除垃圾消息并封禁用户, 因为这条消息还被管理员标记成垃圾广告，有非常高的置信度，所以系统就会以这条垃圾广告为训练数据，对模型进行实时更新。</p>
<p>下次类似的发言不仅会被识别，所有使用本机器人的群组都会受益，也会把类似的文本标记成垃圾广告</p>
<h4 id="listspam"><span class="section-num">6.1.2</span> <code>/listspam</code></h4>
<p>查看封禁账户列表, 需要管理员权限。</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-d0038" hidden>
    <label for="zoomCheck-d0038">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/listspam.jpg"/> 
    
    
    </label>
</figure>

<p>查看已封禁的用户列表，并主动解封。</p>
<h4 id="feedspam"><span class="section-num">6.1.3</span> <code>/feedspam</code></h4>
<p>投喂垃圾信息来训练，无任何权限要求，可私聊投喂或在群组内投喂.</p>
<p>私聊投喂:</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-2a139" hidden>
    <label for="zoomCheck-2a139">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/feedspam.jpg"/> 
    
    
    </label>
</figure>

<p>群组内投喂:</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-1fc12" hidden>
    <label for="zoomCheck-1fc12">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/feedspam2.jpg"/> 
    
    
    </label>
</figure>

<h2 id="eating-your-own-dog-food"><span class="section-num">7</span> Eating your own dog food</h2>
<p>在软件开发领域，有这么一句俗话，Eating your own dog food(吃你自己的狗粮)，大意是你自己的开发的东西，要自己先用起来。</p>
<p>因此我建了一个自己的频道：<a href="https://t.me/pipeapplebun">菠萝油与天光墟</a> <sup id="fnref:12"><a href="#fn:12" class="footnote-ref" role="doc-noteref">12</a></sup>用于测试，可惜订阅者寥寥，
就吸引不来太多的发垃圾广告的用户，所以欢迎大家订阅或者进来发广告，以吸引更多的发垃圾广告的用户。</p>
<p>在我这个频道，每个人都有自由发言的权利(美中不足只是次数受限)</p>
<p>既然没有人来我的频道发广告，苦于没有训练数据，我只能主动出击，赤膊上阵，割肉喂鹰去加了各种币圈群，黄色群，主动去看各种广告了：</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-3779e" hidden>
    <label for="zoomCheck-3779e">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/telegram_group1.jpg"/> 
    
    
    </label>
</figure>


<figure>
    
    
    <input type="checkbox" id="zoomCheck-35262" hidden>
    <label for="zoomCheck-35262">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/telegram_group2.jpg"/> 
    
    
    </label>
</figure>


<figure>
    
    
    <input type="checkbox" id="zoomCheck-b0b9b" hidden>
    <label for="zoomCheck-b0b9b">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/spam_sample.jpg"/> 
    
    
    </label>
</figure>

<p>自从开发了这个机器人之后，我对广告的看法就变了，以前在别的群看到广告就烦，现在在别的群看到广告就很开心，
这都是宝贵的训练数据，要趁着还没被删，赶紧记录下来。</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-511dc" hidden>
    <label for="zoomCheck-511dc">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/feedspam3.jpg"/> 
    
    
    </label>
</figure>

<h3 id="八仙过海的垃圾广告"><span class="section-num">7.1</span> 八仙过海的垃圾广告</h3>
<p>别人故事里的算法效果总是出奇的好，到自己实际运行的时候，总是发现会有这样那样的 case 没有覆盖，总有各种意外惊喜</p>
<p>许多在 Telegram 发广告的用户都是久经考验的反拦截器斗士了。</p>
<p>虽然关键词封禁效率不高，但是那些能让我们见到的广告说明已经是绕过关键词拦截的。</p>
<p>比如:</p>
<blockquote>
<p>在 币圈 想 赚 钱，那 你 不关 注 这 个 王 牌 社 区，真的太可惜了，真 心 推 荐，每 天 都 有 免 费 策 略</p></blockquote>
<p>又或者</p>
<blockquote>
<p>这人简-介挂的 合-约-报单群组挺牛的ETH500点，大饼5200点！ + @BTCETHl6666</p></blockquote>
<p>前者通过空格分隔来绕过关键词，后者通过添加标点符号来绕过关键词。</p>
<p>与英文等基于拉丁字母的语言天然通过空格分词不同，中文使用贝叶斯算法进行统计时，需要先进行分词</p>
<blockquote>
<p>the fox jumped over the lazy dog</p>
<p>我们的中文就不一样了</p></blockquote>
<p>「我们的中文就不一样了」就会被分词成「我们 | 的 | 中文 | 就 | 不 | 一样 | 了」, 然后才能对词频进行统计。</p>
<p>但是像广告 <code>在 币圈 想 赚 钱，那 你 不关 注 这 个 王 牌 社 区，真的太可惜了，真 心 推 荐，每 天 都 有 免 费 策 略</code> , 空格除了会影响关键字匹配，也会影响分词，这句话的分词结果就会变成:</p>
<p><code>在 | | 币圈 | | 想 | | 赚 | | 钱 | ， | 那 | | 你 | | 不 | 关 | | 注 | | 这 | | 个 | | 王 | | 牌 | | 社 | | 区 | ， | 真的 | 太 | 可惜 | 了 | ， | 真 | | 心 | | 推 | | 荐 | ， | 每 | | 天 | | 都 | | 有 | | 免 | | 费 | | 策 | | 略</code></p>
<p><code>这人简-介挂的 合-约-报单群组挺牛的ETH500点，大饼5200点！ + @BTCETHl6666</code> 也会被分词成：</p>
<p><code>这人简 | - | 介挂 | 的 | | 合 | - | 约 | - | 报单 | 群组 | 挺 | 牛 | 的 | ETH500 | 点 | ， | 大饼 | 5200 | 点 | ！ | | + | | @ | BTCETHl6666</code></p>
<p>未经处理的训练数据就会影响模型的结果，可见训练数据的质量也非常重要，因此我就对训练语料做了相应的预处理：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="c1"># Step 1: 处理 anti-spam 分隔符</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 把中英文之间的非中英文及数字去掉，即 &#34;合-约&#34; -&gt; &#34;合约&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">previous</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="n">previous</span> <span class="o">!=</span> <span class="n">cleaned</span>
</span></span><span class="line"><span class="cl">  <span class="n">previous</span> <span class="o">=</span> <span class="n">cleaned</span><span class="o">.</span><span class="n">dup</span>
</span></span><span class="line"><span class="cl">  <span class="n">cleaned</span> <span class="o">=</span> <span class="n">cleaned</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/([一-龯A-Za-z0-9])[^一-龯A-Za-z0-9\s]+([一-龯A-Za-z0-9])/</span><span class="p">,</span> <span class="s1">&#39;\1\2&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Step 2: 处理中文字符 anti-spam 空格</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 处理 &#34;想 赚 钱&#34; -&gt; &#34;想赚钱&#34; case</span>
</span></span><span class="line"><span class="cl"><span class="n">previous</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="n">previous</span> <span class="o">!=</span> <span class="n">cleaned</span>
</span></span><span class="line"><span class="cl">  <span class="n">previous</span> <span class="o">=</span> <span class="n">cleaned</span><span class="o">.</span><span class="n">dup</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># 匹配中文汉字之间的一个或多个空格，然后删除掉</span>
</span></span><span class="line"><span class="cl">  <span class="n">cleaned</span> <span class="o">=</span> <span class="n">cleaned</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/([一-龯])(\s+)([一-龯])/</span><span class="p">,</span> <span class="s1">&#39;\1\3&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Step 3: 增加汉字与英文之间的空格</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 以及帮助分词算法如(jieba)更好地分词, e.g., &#34;社区ETH&#34; -&gt; &#34;社区 ETH&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">cleaned</span> <span class="o">=</span> <span class="n">cleaned</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/([一-龯])([A-Za-z0-9])/</span><span class="p">,</span> <span class="s1">&#39;\1 \2&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">cleaned</span> <span class="o">=</span> <span class="n">cleaned</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/([A-Za-z0-9])([一-龯])/</span><span class="p">,</span> <span class="s1">&#39;\1 \2&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Step 4: 删除多余的空格(多个空格缩减个一个)</span>
</span></span><span class="line"><span class="cl"><span class="n">cleaned</span> <span class="o">=</span> <span class="n">cleaned</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/\s+/</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">)</span><span class="o">.</span><span class="n">strip</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>预处理之后， <code>在 币圈 想 赚 钱，那 你 不关 注 这 个 王 牌 社 区，真的太可惜了，真 心 推 荐，每 天 都 有 免 费 策 略</code> 就会变成 <code>在币圈想赚钱那你不关注这个王牌社区真的太可惜了真心推荐每天都有免费策略</code> (这里把合法的逗号也去掉了，我觉得相较过多标点符号对分词的影响，把标点去掉分词结果反而是能接受的), 分词结果是:</p>
<p><code>在 | 币圈 | 想 | 赚钱 | 那 | 你 | 不 | 关注 | 这个 | 王牌 | 社区 | 真的 | 太 | 可惜 | 了 | 真心 | 推荐 | 每天 | 都 | 有 | 免费 | 策略</code></p>
<p><code>这人简-介挂的 合-约-报单群组挺牛的ETH500点，大饼5200点！ + @BTCETHl6666</code> 就会变成 <code>这人简介挂的合约报单群组挺牛的 ETH500 点大饼 5200 点！ + @BTCETHl6666</code> ,分词结果是：</p>
<p><code>这 | 人 | 简介 | 挂 | 的 | 合约 | 报单 | 群组 | 挺 | 牛 | 的 | | ETH500 | | 点 | 大饼 | | 5200 | | 点 | ！ | | + | | @ | BTCETHl6666</code></p>
<h4 id="广告新花样"><span class="section-num">7.1.1</span> 广告新花样</h4>
<p>广告看多了，不得不感慨发广告的人的创造力。</p>
<p>因为在消息发垃圾广告会被广告拦截器拦截，他们创新性地玩出了新花样：</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-fe0e1" hidden>
    <label for="zoomCheck-fe0e1">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/spam_by_username.jpg"/> 
    
    
    </label>
</figure>

<p>消息发的都是正常的文本，但是头像和用户名都是广告，这样广告拦截器就无法工作了，真的是太有创意了。</p>
<p>对手这么有创意，我也因地制宜地建立对用户名的训练模型，检测的时候消息文本的模型和用户名的模型都过一次，
只要有任何一个认为是垃圾广告，那就禁掉。</p>
<p>更进一步的可以对头像做OCR提取文本，再增加一个对头像的训练模型，不过OCR成本挺高的，就先不搞了。</p>
<h3 id="优化"><span class="section-num">7.2</span> 优化</h3>
<p>没有用户的话，做啥优化也没有必要，毕竟过早的优化是万恶之源，
因此我就把想法先做成原型，搞出来再说，但这不意味着这个原型没有优化的空间。</p>
<p>脑海中还是有不少优化的点的：</p>
<ol>
<li>jieba 分词的效果可能不是最好的，后续可以使用效果更好的分词器进行优化；或者是添加自己的词库。</li>
<li>每次有训练消息都进行重新训练，效率稍低，可以增加 batching 机制：有新消息时，等待5分钟或者等到100条消息再处理</li>
<li>现在整个模型都是在内存中计算，计算完就持久化成 DB, 可以在内存和数据库之间增加一层缓存来优化性能</li>
<li>贝叶斯算法可能效果不够好，换个复杂的机器学习模型</li>
</ol>
<p>但是这些优化点都算是 Good to have, 不是 Must have, 后面遇到实际问题再进行优化好了。</p>
<h2 id="实战效果"><span class="section-num">8</span> 实战效果</h2>
<p>使用变换之后的垃圾广告词进行发送:</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-cdd9f" hidden>
    <label for="zoomCheck-cdd9f">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/spam_messge_2.jpg"/> 
    
    
    </label>
</figure>

<p>成功被检测出来，自动删除了:</p>

<figure>
    
    
    <input type="checkbox" id="zoomCheck-78c5f" hidden>
    <label for="zoomCheck-78c5f">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/deleted_spam.jpg"/> 
    
    
    </label>
</figure>

<p>有朋友可能会说，这只是卖家秀，为什么别人在我群里发的广告还是没有被识别？</p>
<p>因为贝叶斯算法本质是个概率算法，如果它没有见过类似的广告，那么它就没法判断是否垃圾广告 :(</p>
<p>稍安勿躁，你需要做只是使用 <code>/markspam</code> 删除消息并封禁用户，就可以帮助训练这个bot, 所有使用这个 bot 的用户都会因此受益</p>
<h2 id="结语"><span class="section-num">9</span> 结语</h2>
<p>我相当享受这种从发现问题、灵光一现，到构建原型，再到最终打磨出一个完整项目的创造过程。</p>
<p>虽然这完全是「用爱发电」——代码开源，还得自掏腰包租服务器，物质上毫无回报。</p>
<p>但每当看到机器人成功拦截广告的那一刻，那种创造的喜悦，就足以令我回味无穷。</p>
<ul>
<li>开源地址：<a href="https://github.com/ramsayleung/bayes_spam_sniper">https://github.com/ramsayleung/bayes_spam_sniper</a></li>
<li>立即体验：<a href="https://t.me/BayesSpamSniperBot">https://t.me/BayesSpamSniperBot</a></li>
<li>我的频道（菠萝油与天光墟）: <a href="https://t.me/pipeapplebun">https://t.me/pipeapplebun</a></li>
</ul>
<h3 id="推荐阅读">推荐阅读</h3>
<ul>
<li>旅加经历
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E8%BF%99%E4%BA%9B%E5%B9%B4%E8%B5%B0%E8%BF%87%E7%9A%84%E8%B7%AF_%E4%BB%8E%E5%B9%BF%E5%B7%9E%E5%88%B0%E6%B8%A9%E5%93%A5%E5%8D%8E/">这些年走过的路：从广州到温哥华</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E5%8A%A0%E6%8B%BF%E5%A4%A7%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C/">加拿大之初体验</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E7%99%BB%E9%99%86%E5%8A%A0%E6%8B%BF%E5%A4%A7%E4%B8%80%E5%B9%B4%E7%9A%84%E4%BD%93%E4%BC%9A/">登陆加拿大一年后的体会</a></li>
</ul>
</li>
<li>工具流分享
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E7%AE%80%E6%98%8E%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/">简明写作指南</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E5%86%99%E4%BD%9C%E6%B5%81/">我的写作流</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E7%94%BB%E5%9B%BE%E6%B5%81/">我的画图流：画图工具与技巧分享</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E6%88%91%E7%9A%84%E6%90%9C%E7%B4%A2%E6%B5%81/">我的搜索流：高效搜索经验分享</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2022/feynman_technique/">最好的学习方式：费曼学习法(Feynman Technique)</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2021/%E7%B3%BB%E7%BB%9F%E6%80%9D%E8%80%83/">系统思考：既见树木，又见森林</a></li>
</ul>
</li>
<li>思考感悟
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E7%BC%96%E7%A8%8B%E5%8D%81%E5%B9%B4%E7%9A%84%E6%84%9F%E6%82%9F/">编程十年的感悟</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E4%BB%8E%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E7%A6%BB%E7%BA%BF_%E6%88%91%E5%B8%A6%E8%B5%B0%E4%BA%86%E4%BB%80%E4%B9%88/">那些年，我从微信支付学到的东西</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2025/%E6%9D%82%E8%B0%88ai%E5%8F%96%E4%BB%A3%E7%A8%8B%E5%BA%8F%E5%91%98/">杂谈ai取代程序员</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2023/%E7%BD%AE%E8%BA%AB%E4%BA%8B%E5%86%85/">为什么梦想买不起，故乡回不去</a></li>
</ul>
</li>
<li>软件工程
<ul>
<li><a href="https://ramsayleung.github.io/zh/post/2025/a_philosophy_of_software_design/">软件设计的哲学</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2025/structure_and_interpretation_of_computer_programs/">一本读了八年还没读完的书</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%B8%80_%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E8%AE%A4%E7%9F%A5/">测试技能进阶(一): 软件质量认知</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%BA%8C_parameterized_tests/">测试技能进阶(二): Parameterized Tests</a></li>
<li><a href="https://ramsayleung.github.io/zh/post/2024/%E6%B5%8B%E8%AF%95%E6%8A%80%E8%83%BD%E8%BF%9B%E9%98%B6%E4%B8%89_property_based_testing/">测试技能进阶(三): Property Based Testing</a></li>
</ul>
</li>
</ul>
<div class="qr-container" center>
<img src="/ox-hugo/qrcode_gh_e06d750e626f_1.jpg" alt="qrcode_gh_e06d750e626f_1.jpg" class="qr-container" width="160px" height="160px" center="t" />
公号同步更新，欢迎关注👻
</div>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://podcasts.apple.com/us/podcast/%E8%BD%AF%E4%BB%B6%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/id1147186605">https://podcasts.apple.com/us/podcast/%E8%BD%AF%E4%BB%B6%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/id1147186605</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://liuyandong.com/sample-page">https://liuyandong.com/sample-page</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="https://t.me/huruanhuying">https://t.me/huruanhuying</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p><a href="https://t.me/kaedeharakazuha17">https://t.me/kaedeharakazuha17</a>&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p><a href="https://paulgraham.com/spam.html">https://paulgraham.com/spam.html</a>&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p><a href="https://www.youtube.com/watch?v=Pu675cHJ7bg">https://www.youtube.com/watch?v=Pu675cHJ7bg</a>&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7">
<p><a href="https://www.youtube.com/watch?v=HZGCoVF3YvM">https://www.youtube.com/watch?v=HZGCoVF3YvM</a>&#160;<a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:8">
<p><a href="https://gist.github.com/ramsayleung/5848af0177a70a01d41f624e361b1b5d">https://gist.github.com/ramsayleung/5848af0177a70a01d41f624e361b1b5d</a>&#160;<a href="#fnref:8" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:9">
<p><a href="https://ramsayleung.github.io/zh/post/2024/%E7%BC%96%E7%A8%8B%E5%8D%81%E5%B9%B4%E7%9A%84%E6%84%9F%E6%82%9F/">https://ramsayleung.github.io/zh/post/2024/%E7%BC%96%E7%A8%8B%E5%8D%81%E5%B9%B4%E7%9A%84%E6%84%9F%E6%82%9F/</a>&#160;<a href="#fnref:9" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:10">
<p><a href="https://ublockorigin.com/">https://ublockorigin.com/</a>&#160;<a href="#fnref:10" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:11">
<p><a href="https://ramsayleung.github.io/zh/post/2025/a_philosophy_of_software_design/">https://ramsayleung.github.io/zh/post/2025/a_philosophy_of_software_design/</a>&#160;<a href="#fnref:11" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:12">
<p><a href="https://t.me/pipeapplebun">https://t.me/pipeapplebun</a>&#160;<a href="#fnref:12" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
  </channel>
</rss>

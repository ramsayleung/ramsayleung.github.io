<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>In Pursuit of Hubris</title><link>https://ramsayleung.github.io/</link><description>Recent content on In Pursuit of Hubris</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 16 Feb 2022 14:04:09 +0000</lastBuildDate><atom:link href="https://ramsayleung.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>About Me</title><link>https://ramsayleung.github.io/about_me/</link><pubDate>Mon, 21 Feb 2022 00:00:00 +0000</pubDate><guid>https://ramsayleung.github.io/about_me/</guid><description>About me I&amp;rsquo;m Ramsay, I chase a lot of different things. The slogan of this site is In pursuit of Hubris, since:
There are three great virtues of a programmer; Laziness, Impatience and Hubris &amp;ndash; Larry Wall
The first programming language I learned is `Pascal` in a computer-hobbyist group when I was a middle school student. Back to time before, the only thing I could do with `Pascal` was trying to find the maximum or minimum number among the number array, or just calculate the sum of them, which is of less fun.</description></item><item><title>天朝的崩溃</title><link>https://ramsayleung.github.io/post/2022/%E5%A4%A9%E6%9C%9D%E7%9A%84%E5%B4%A9%E6%BA%83/</link><pubDate>Wed, 16 Feb 2022 14:04:09 +0000</pubDate><guid>https://ramsayleung.github.io/post/2022/%E5%A4%A9%E6%9C%9D%E7%9A%84%E5%B4%A9%E6%BA%83/</guid><description>1 天朝的崩溃 1.1 前言 历史教科书说，与英国的第一次鸦片战争，敲开了清朝的大门，清朝也因此和外国签定了一系列不平等条约；而因为清朝的落伍，导致清朝</description></item><item><title>关于分布式系统唯一ID的探究</title><link>https://ramsayleung.github.io/post/2017/distributed_system_unique_id/</link><pubDate>Tue, 23 May 2017 00:00:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/distributed_system_unique_id/</guid><description>最近我需要为运行的分布式系统某部分模块构造系统唯一的ID, 而 ID 需要是数字的形式，并应该尽量的短。不得不说，这是一个有趣的问题 1 若干实现策略 查</description></item><item><title>Spock 一个优雅的Groovy/Java测试框架</title><link>https://ramsayleung.github.io/post/2017/spock/</link><pubDate>Tue, 11 Apr 2017 00:00:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/spock/</guid><description>因为需要编写 RESTful api 测试的缘故，重拾了 Spock 这个适用于 Groovy/Java 的测试 框架，顺便把以前写的一篇旧文整理了一下，权当重温。 1 关于 Spock Spock 是一个适用于 Java(Groovy) 的一个优雅并</description></item><item><title>爬虫高效去重之布隆过滤器</title><link>https://ramsayleung.github.io/post/2017/bloom_filter/</link><pubDate>Sun, 09 Apr 2017 00:00:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/bloom_filter/</guid><description>笔者最近思考如何编写高效的爬虫; 而在编写高效爬虫的时候，有一个必需解决的问题就是： url 的去重，即如何判别 url 是否已经被爬取，如果被爬取，那就不要</description></item><item><title>关于工具,关于折腾</title><link>https://ramsayleung.github.io/post/2017/about_tool_about_tweak/</link><pubDate>Fri, 24 Mar 2017 00:00:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/about_tool_about_tweak/</guid><description>笔者最近一直在思考，关于工具，关于折腾，关于其中的付出与收获 1 乐趣 1.1 Linux 回顾笔者大学，从大一开始就是一个不停折腾的过程，在其他的同学还在用Wi</description></item><item><title>Linux/Unix Shell 二三事之过滤器grep</title><link>https://ramsayleung.github.io/post/2017/grep/</link><pubDate>Mon, 13 Mar 2017 00:00:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/grep/</guid><description>文本三剑客之 Grep grep - print lines matching a pattern 今天我想聊聊 grep 这个命令；据说，有Unix/Linux 的地方就会有 grep, 这个可能是安装得最广泛的命令之一；那么 grep 是用来</description></item><item><title>(翻译)从Helm到Ivy</title><link>https://ramsayleung.github.io/post/2017/from-helm-to-ivy/</link><pubDate>Sun, 05 Mar 2017 00:00:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/from-helm-to-ivy/</guid><description>最近，我发现很多Emacs 用户对Ivy 很感兴趣；而且大部份用户都是已经了解过Helm 或者Ido的 当有人在Reddit 上面问 选择Helm 还是I</description></item><item><title>Shell神器fasd与Eshell的不期而遇</title><link>https://ramsayleung.github.io/post/2017/fasd-meet-eshell/</link><pubDate>Thu, 02 Mar 2017 00:00:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/fasd-meet-eshell/</guid><description>fasd - quick access to files and directory 之前一位 Windows 用户看到我在 Shell 下面的操作，他很奇怪，觉得明明已经有图形化界面，为什么还要用这种命令行呢，直接用鼠标点击不就很好了么</description></item><item><title>Linux/Unix Shell 二三事之过滤器diff</title><link>https://ramsayleung.github.io/post/2017/diff/</link><pubDate>Tue, 28 Feb 2017 00:00:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/diff/</guid><description>diff - compare files line by line 如果你有使用过git,那么你一定不会对diff 陌生，因为对你源文件和修改后的文件进行比较的就是 diff 这个大名鼎鼎的家伙了。 多年以来</description></item><item><title>Linux/Unix Shell 二三事之过滤器cat</title><link>https://ramsayleung.github.io/post/2017/cat/</link><pubDate>Wed, 22 Feb 2017 00:00:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/cat/</guid><description>cat - concatenate files and print on the standard output 1 过滤器 何谓过滤器呢，例如cat,grep,wl 之类的命令就是过滤器了。这样的命令 读取数据，对数据执行一些操作，然后写入</description></item><item><title>Linux/Unix Shell 二三事之过滤器head+tail</title><link>https://ramsayleung.github.io/post/2017/head_tail/</link><pubDate>Wed, 22 Feb 2017 00:00:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/head_tail/</guid><description>head - output the first part of files tail - output the last part of files 当拥有的数据太多的时候，使用cat 来展示数据的话，数据量过大，屏幕就只能显示最后一部分的数据了。 所以如果你想</description></item><item><title>在Emacs中使用Ipython</title><link>https://ramsayleung.github.io/post/2017/emacs_ipython/</link><pubDate>Wed, 22 Feb 2017 00:00:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/emacs_ipython/</guid><description>1 Emacs Ipython 输出错误 在Emacs 运行 run-python 的时候，报错了，如下 1 2 [?12l[?25h2+2 [J[?7h[?12l[?25h[?2004l[?7hOut[1]: 4 因为我的版本时Ipython5,查阅文档http://ipython.read</description></item><item><title>提高Emacs启动速度</title><link>https://ramsayleung.github.io/post/2017/emacs_startup/</link><pubDate>Wed, 22 Feb 2017 00:00:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/emacs_startup/</guid><description>之前看到个笑话： A: 在等待emacs 加载的时间里，你会干什么？ B: 打开Vim,修改代码，保存，退出 有时候，经常看到社区里面有人吐嘈Emacs 什么</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>In Pursuit of Hubris</title><link>https://ramsayleung.github.io/</link><description>Recent content on In Pursuit of Hubris</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 16 Feb 2022 14:04:09 +0000</lastBuildDate><atom:link href="https://ramsayleung.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>About Me</title><link>https://ramsayleung.github.io/about_me/</link><pubDate>Mon, 21 Feb 2022 00:00:00 +0000</pubDate><guid>https://ramsayleung.github.io/about_me/</guid><description>About me I&amp;rsquo;m Ramsay, I chase a lot of different things. The slogan of this site is In pursuit of Hubris, since:
There are three great virtues of a programmer; Laziness, Impatience and Hubris &amp;ndash; Larry Wall
The first programming language I learned is `Pascal` in a computer-hobbyist group when I was a middle school student. Back to time before, the only thing I could do with `Pascal` was trying to find the maximum or minimum number among the number array, or just calculate the sum of them, which is of less fun.</description></item><item><title>天朝的崩溃</title><link>https://ramsayleung.github.io/post/2022/%E5%A4%A9%E6%9C%9D%E7%9A%84%E5%B4%A9%E6%BA%83/</link><pubDate>Wed, 16 Feb 2022 14:04:09 +0000</pubDate><guid>https://ramsayleung.github.io/post/2022/%E5%A4%A9%E6%9C%9D%E7%9A%84%E5%B4%A9%E6%BA%83/</guid><description>1 天朝的崩溃 1.1 前言 历史教科书说，与英国的第一次鸦片战争，敲开了清朝的大门，清朝也因此和外国签定了一系列不平等条约；而因为清朝的落伍，导致清朝</description></item><item><title>How To Design A Reliable Distributed Timer</title><link>https://ramsayleung.github.io/post/2021/how_to_design_a_reliable_distributed_timer/</link><pubDate>Thu, 05 Aug 2021 09:19:36 +0000</pubDate><guid>https://ramsayleung.github.io/post/2021/how_to_design_a_reliable_distributed_timer/</guid><description>1 Preface I have been maintained a legacy distributed timer for months for my employer, then some important pay business are leveraging on it, with 1 billion tasks handled every day and 20k tasks added per second at most.
Even though it&amp;rsquo;s old and full of black magic code, but it also also have insighted and well-designed code. Based on this old, running timer, I summarize and extract as this article, and it wont include any running code(perhaps pseudocode, and a lot of figures, as an adage says: A picture is worth a thousand words).</description></item><item><title>(笔记)Distributed Systems for fun and profit</title><link>https://ramsayleung.github.io/post/2021/distributed_system_for_fun_and_profit/</link><pubDate>Sat, 12 Jun 2021 13:08:54 +0000</pubDate><guid>https://ramsayleung.github.io/post/2021/distributed_system_for_fun_and_profit/</guid><description>1 Distributed Systems for fun and profit source: http://book.mixu.net/distsys/ 2 1. Basic 2.1 Basic concept 本章介绍了分布式系统的基本概念, 例如 scalablity, perfomance, latency, availability 关于 latent, 这里给出了一个很cool的描述: For example, imagine that you are infected with an airbone virus that turns people</description></item><item><title>Let's make everything iterable</title><link>https://ramsayleung.github.io/post/2021/iterate_through_pagination_api/</link><pubDate>Thu, 29 Apr 2021 11:48:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2021/iterate_through_pagination_api/</guid><description>Iterate through pagination in the Rest API
1 Preface About 4 months ago, icewind1991 created an exciting PR that adding Stream/Iterator based versions of methods with paginated results, which makes enpoints in Rspotify more much ergonomic to use, and Mario completed this PR.
In order to know what this PR brought to us, we have to go back to the orignal story, the paginated results in Spotify&amp;rsquo;s Rest API.
2 Orignal Story Taking the artist_albums as example, it gets Spotify catalog information about an artist&amp;rsquo;s albums.</description></item><item><title>Serde Tricks</title><link>https://ramsayleung.github.io/post/2020/serde_lesson/</link><pubDate>Sun, 13 Dec 2020 22:29:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2020/serde_lesson/</guid><description>The lesson learned from refactoring rspotify
1 Preface Recently, I and Mario are working on refactoring rspotify, trying to improve performance, documentation, error-handling, data model and reduce compile time, to make it easier to use. (For those who has never heard about rspotify, it is a Spotify HTTP SDK implemented in Rust).
I am partly focusing on polishing the data model, based on the issue created by Koxiaet.
Since rspotify is API client for Spotify, it has to handle the request and response from Spotify HTTP API.</description></item><item><title>为什么我们要996</title><link>https://ramsayleung.github.io/post/2020/996%E6%88%90%E5%9B%A0/</link><pubDate>Wed, 14 Oct 2020 23:52:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2020/996%E6%88%90%E5%9B%A0/</guid><description>局中人的思考 1 前言 最近深圳的特殊工时制度搞得甚嚣尘上, 兼之有位与互联网行业完全无交集的朋友咨询我, 为什么你们程序员要996呢? 有感于此, 写下</description></item><item><title>用python 来操控 sqlite3</title><link>https://ramsayleung.github.io/post/2017/python_with_sqlite3/</link><pubDate>Sun, 12 Nov 2017 07:05:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/python_with_sqlite3/</guid><description>python 与嵌入式关系数据库 sqlite3的邂逅 SQLite 是一个非常优秀的嵌入式数据库，非常轻量，可以与 Mysql, PostgreSQL 这样的 大型数据库互补使用. 而 Python 标准库中的 sqlite3 模块实</description></item><item><title>从京东"窃取"150+万条数据</title><link>https://ramsayleung.github.io/post/2017/jd_spider/</link><pubDate>Wed, 21 Jun 2017 00:00:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/jd_spider/</guid><description>我最近编写了两只京东商品和评论的分布式爬虫来进行数据分析，现在就来分享一下。 1 爬取策略 众所周知，爬虫比较难爬取的就是动态生成的网页，因为需要</description></item><item><title>Eshell提示符优化</title><link>https://ramsayleung.github.io/post/2017/tweak_eshell_prompt/</link><pubDate>Wed, 07 Jun 2017 00:00:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/tweak_eshell_prompt/</guid><description>1 发现帅气的提示符 近日，笔者在浏览 Reddit 的时候，发现了一位 Emacs 用户把他的 Eshell 提示符修改得很帅，如图： 本着拿来主义的想法，我就直接把这位小哥的代码添加</description></item><item><title>为Java瘦身 – Lombok</title><link>https://ramsayleung.github.io/post/2017/lombok/</link><pubDate>Wed, 24 May 2017 00:00:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/lombok/</guid><description>1 前言 几天前 Goolge 在 I/O 大会上宣布了 Android 将官方支持 Kotlin, 这意味着 Android开发者可以更好地使用 Kotlin 开发 Android. 我虽不是 Android 开发者，但是也为 Android 开发者多了一个选择</description></item><item><title>关于分布式系统唯一ID的探究</title><link>https://ramsayleung.github.io/post/2017/distributed_system_unique_id/</link><pubDate>Tue, 23 May 2017 00:00:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/distributed_system_unique_id/</guid><description>最近我需要为运行的分布式系统某部分模块构造系统唯一的ID, 而 ID 需要是数字的形式，并应该尽量的短。不得不说，这是一个有趣的问题 1 若干实现策略 查</description></item><item><title>Java UUID 源码剖析</title><link>https://ramsayleung.github.io/post/2017/uuid/</link><pubDate>Thu, 18 May 2017 00:00:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/uuid/</guid><description>笔者近来闲来无事，又因为有需要构造全局唯一 ID 的需求，所以就去看了 UUID 这个提供稳定的系统唯一标识符的类的源码 1 UUID variant 事实上是存在很多中 UID 的不同实现</description></item><item><title>脚本分享</title><link>https://ramsayleung.github.io/post/2017/share_shell_script/</link><pubDate>Sat, 22 Apr 2017 00:00:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/share_shell_script/</guid><description>分享一下平时工作生活中编写的一些脚本片段(一直更新). 适用于 OS X 和 Linux 1 准备工作 因为我比较多的脚本都是基于 percol 这个神器，所以需要先安装 percol, 如果 不了</description></item><item><title>Spock 一个优雅的Groovy/Java测试框架</title><link>https://ramsayleung.github.io/post/2017/spock/</link><pubDate>Tue, 11 Apr 2017 00:00:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/spock/</guid><description>因为需要编写 RESTful api 测试的缘故，重拾了 Spock 这个适用于 Groovy/Java 的测试 框架，顺便把以前写的一篇旧文整理了一下，权当重温。 1 关于 Spock Spock 是一个适用于 Java(Groovy) 的一个优雅并</description></item><item><title>你所不可或缺的 – logging</title><link>https://ramsayleung.github.io/post/2017/logging/</link><pubDate>Sun, 09 Apr 2017 00:00:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/logging/</guid><description>1 重要性 笔者最近都在负责项目中关于日志的部分，因为跟日志打交道比较多，所以有一些关于日 志感受和技巧想要分享一下。 笔者认为对于各种程序和应用，</description></item><item><title>爬虫高效去重之布隆过滤器</title><link>https://ramsayleung.github.io/post/2017/bloom_filter/</link><pubDate>Sun, 09 Apr 2017 00:00:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/bloom_filter/</guid><description>笔者最近思考如何编写高效的爬虫; 而在编写高效爬虫的时候，有一个必需解决的问题就是： url 的去重，即如何判别 url 是否已经被爬取，如果被爬取，那就不要</description></item><item><title>大话Linux文件系统</title><link>https://ramsayleung.github.io/post/2017/linux_file_system/</link><pubDate>Thu, 30 Mar 2017 00:00:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/linux_file_system/</guid><description>不久前，Apple 的文件系统 (Apple File System) 新推出，然后各方便一起挤身向前对APFS &amp;ldquo;评头品足&amp;rdquo;,我是不了解 APFS ,所以也没有什么</description></item><item><title>关于工具,关于折腾</title><link>https://ramsayleung.github.io/post/2017/about_tool_about_tweak/</link><pubDate>Fri, 24 Mar 2017 00:00:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/about_tool_about_tweak/</guid><description>笔者最近一直在思考，关于工具，关于折腾，关于其中的付出与收获 1 乐趣 1.1 Linux 回顾笔者大学，从大一开始就是一个不停折腾的过程，在其他的同学还在用Wi</description></item><item><title>Python多线程端口扫描器</title><link>https://ramsayleung.github.io/post/2017/port_scanner/</link><pubDate>Sun, 19 Mar 2017 00:00:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/port_scanner/</guid><description>近两日，闲来无事，就写了些端口扫描器，重温TCP/IP协议栈的部分原理。 1 端口扫描器 所谓的端口扫描器，其实是用来检测目标服务器有哪些端口开放</description></item><item><title>Linux/Unix Shell 二三事之过滤器grep</title><link>https://ramsayleung.github.io/post/2017/grep/</link><pubDate>Mon, 13 Mar 2017 00:00:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/grep/</guid><description>文本三剑客之 Grep grep - print lines matching a pattern 今天我想聊聊 grep 这个命令；据说，有Unix/Linux 的地方就会有 grep, 这个可能是安装得最广泛的命令之一；那么 grep 是用来</description></item><item><title>Java读写文件小结</title><link>https://ramsayleung.github.io/post/2017/java8_file_io/</link><pubDate>Mon, 06 Mar 2017 00:00:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/java8_file_io/</guid><description>今天在完成《算法》上的练习的时候，要对文件进行读写，而书上的例子是直接通过 Linux/Unix的重定向来实现的，我要把它修改成直接读取文件。</description></item><item><title>(翻译)从Helm到Ivy</title><link>https://ramsayleung.github.io/post/2017/from-helm-to-ivy/</link><pubDate>Sun, 05 Mar 2017 00:00:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/from-helm-to-ivy/</guid><description>最近，我发现很多Emacs 用户对Ivy 很感兴趣；而且大部份用户都是已经了解过Helm 或者Ido的 当有人在Reddit 上面问 选择Helm 还是I</description></item><item><title>Lambda与Java Collection有感</title><link>https://ramsayleung.github.io/post/2017/java_collection_lambda/</link><pubDate>Sat, 04 Mar 2017 00:00:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/java_collection_lambda/</guid><description>我平时也有浏览各类博客的习惯，毕竟三人行则必有我师嘛。今天在浏览关于Java的一个博客的时候，对博主的观点有一些不同的开发，但是困于没法在博</description></item><item><title>(翻译)An Introduction to Magit</title><link>https://ramsayleung.github.io/post/2017/magit/</link><pubDate>Fri, 03 Mar 2017 00:00:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/magit/</guid><description>如果你足够幸运(或者不幸运，取决于你怎么看待了)可以使用 git 作为你工作流的一部分。 你可能已经 邂逅 过 magit 这个Emacs 的git接口了。 magit 是Emac</description></item><item><title>Shell神器fasd与Eshell的不期而遇</title><link>https://ramsayleung.github.io/post/2017/fasd-meet-eshell/</link><pubDate>Thu, 02 Mar 2017 00:00:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/fasd-meet-eshell/</guid><description>fasd - quick access to files and directory 之前一位 Windows 用户看到我在 Shell 下面的操作，他很奇怪，觉得明明已经有图形化界面，为什么还要用这种命令行呢，直接用鼠标点击不就很好了么</description></item><item><title>归并排序算法改进</title><link>https://ramsayleung.github.io/post/2017/merge-sort-improvment/</link><pubDate>Wed, 01 Mar 2017 00:00:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/merge-sort-improvment/</guid><description>最近笔者在阅读《算法》,重温经典数据结构和算法，毕竟一直以来的说法是程序就是数据结构＋算法归并算法所需的时间和N*logN成正比，所以可以用</description></item><item><title>Linux/Unix Shell 二三事之过滤器diff</title><link>https://ramsayleung.github.io/post/2017/diff/</link><pubDate>Tue, 28 Feb 2017 00:00:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/diff/</guid><description>diff - compare files line by line 如果你有使用过git,那么你一定不会对diff 陌生，因为对你源文件和修改后的文件进行比较的就是 diff 这个大名鼎鼎的家伙了。 多年以来</description></item><item><title>枯树逢春之ArchLinux领风骚</title><link>https://ramsayleung.github.io/post/2017/install_archlinux/</link><pubDate>Mon, 27 Feb 2017 00:00:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/install_archlinux/</guid><description>1 枯树 周末回了一趟家，没带自己的笔记本，在家闲来无事，无意中看到墙角的电脑，已经尘封已久反正无事，何不玩玩这台老古董呢？于是把电脑拿去修理店</description></item><item><title>flask牛刀小试之微信公众号开发</title><link>https://ramsayleung.github.io/post/2017/weixin_flask/</link><pubDate>Thu, 23 Feb 2017 00:00:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/weixin_flask/</guid><description>flask 是一个轻量级的python 框架(官网称为微型框架),很容易上手，之前因为笔者跟朋友开发小程序的时候使用过 flask,过后就遗忘了。 为了重拾</description></item><item><title>Linux/Unix Shell 二三事之神器percol</title><link>https://ramsayleung.github.io/post/2017/percol/</link><pubDate>Wed, 22 Feb 2017 00:00:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/percol/</guid><description>Percol 是Emacs 的一个非常优秀package:js2-mode作者mooz 的又一力作得益于Unix Shell的管道和重定向设计理念，perco</description></item><item><title>Linux/Unix Shell 二三事之过滤器cat</title><link>https://ramsayleung.github.io/post/2017/cat/</link><pubDate>Wed, 22 Feb 2017 00:00:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/cat/</guid><description>cat - concatenate files and print on the standard output 1 过滤器 何谓过滤器呢，例如cat,grep,wl 之类的命令就是过滤器了。这样的命令 读取数据，对数据执行一些操作，然后写入</description></item><item><title>Linux/Unix Shell 二三事之过滤器head+tail</title><link>https://ramsayleung.github.io/post/2017/head_tail/</link><pubDate>Wed, 22 Feb 2017 00:00:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/head_tail/</guid><description>head - output the first part of files tail - output the last part of files 当拥有的数据太多的时候，使用cat 来展示数据的话，数据量过大，屏幕就只能显示最后一部分的数据了。 所以如果你想</description></item><item><title>在Emacs中使用Ipython</title><link>https://ramsayleung.github.io/post/2017/emacs_ipython/</link><pubDate>Wed, 22 Feb 2017 00:00:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/emacs_ipython/</guid><description>1 Emacs Ipython 输出错误 在Emacs 运行 run-python 的时候，报错了，如下 1 2 [?12l[?25h2+2 [J[?7h[?12l[?25h[?2004l[?7hOut[1]: 4 因为我的版本时Ipython5,查阅文档http://ipython.read</description></item><item><title>提高Emacs启动速度</title><link>https://ramsayleung.github.io/post/2017/emacs_startup/</link><pubDate>Wed, 22 Feb 2017 00:00:00 +0800</pubDate><guid>https://ramsayleung.github.io/post/2017/emacs_startup/</guid><description>之前看到个笑话： A: 在等待emacs 加载的时间里，你会干什么？ B: 打开Vim,修改代码，保存，退出 有时候，经常看到社区里面有人吐嘈Emacs 什么</description></item></channel></rss>